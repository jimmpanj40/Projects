
F746disco-audio-processing-RTOS-TP-SIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019e10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015d10  08019fe0  08019fe0  00029fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802fcf0  0802fcf0  000400b8  2**0
                  CONTENTS
  4 .ARM          00000008  0802fcf0  0802fcf0  0003fcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802fcf8  0802fcf8  000400b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802fcf8  0802fcf8  0003fcf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802fcfc  0802fcfc  0003fcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0802fd00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004bf0c  200000b8  0802fdb8  000400b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2004bfc4  0802fdb8  0004bfc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e18e  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a18d  00000000  00000000  0008e276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003630  00000000  00000000  00098408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003230  00000000  00000000  0009ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039a76  00000000  00000000  0009ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00049ae9  00000000  00000000  000d86de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129443  00000000  00000000  001221c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  0024b60a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ead8  00000000  00000000  0024b6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003a35  00000000  00000000  0025a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019fc8 	.word	0x08019fc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	08019fc8 	.word	0x08019fc8

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000384:	f000 b96e 	b.w	8000664 <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	4604      	mov	r4, r0
 80003a8:	468c      	mov	ip, r1
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8083 	bne.w	80004b6 <__udivmoddi4+0x116>
 80003b0:	428a      	cmp	r2, r1
 80003b2:	4617      	mov	r7, r2
 80003b4:	d947      	bls.n	8000446 <__udivmoddi4+0xa6>
 80003b6:	fab2 f282 	clz	r2, r2
 80003ba:	b142      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003bc:	f1c2 0020 	rsb	r0, r2, #32
 80003c0:	fa24 f000 	lsr.w	r0, r4, r0
 80003c4:	4091      	lsls	r1, r2
 80003c6:	4097      	lsls	r7, r2
 80003c8:	ea40 0c01 	orr.w	ip, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fbbc f6f8 	udiv	r6, ip, r8
 80003d8:	fa1f fe87 	uxth.w	lr, r7
 80003dc:	fb08 c116 	mls	r1, r8, r6, ip
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f10e 	mul.w	r1, r6, lr
 80003e8:	4299      	cmp	r1, r3
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x60>
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003f2:	f080 8119 	bcs.w	8000628 <__udivmoddi4+0x288>
 80003f6:	4299      	cmp	r1, r3
 80003f8:	f240 8116 	bls.w	8000628 <__udivmoddi4+0x288>
 80003fc:	3e02      	subs	r6, #2
 80003fe:	443b      	add	r3, r7
 8000400:	1a5b      	subs	r3, r3, r1
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x8c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800041e:	f080 8105 	bcs.w	800062c <__udivmoddi4+0x28c>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f240 8102 	bls.w	800062c <__udivmoddi4+0x28c>
 8000428:	3802      	subs	r0, #2
 800042a:	443c      	add	r4, r7
 800042c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000430:	eba4 040e 	sub.w	r4, r4, lr
 8000434:	2600      	movs	r6, #0
 8000436:	b11d      	cbz	r5, 8000440 <__udivmoddi4+0xa0>
 8000438:	40d4      	lsrs	r4, r2
 800043a:	2300      	movs	r3, #0
 800043c:	e9c5 4300 	strd	r4, r3, [r5]
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	b902      	cbnz	r2, 800044a <__udivmoddi4+0xaa>
 8000448:	deff      	udf	#255	; 0xff
 800044a:	fab2 f282 	clz	r2, r2
 800044e:	2a00      	cmp	r2, #0
 8000450:	d150      	bne.n	80004f4 <__udivmoddi4+0x154>
 8000452:	1bcb      	subs	r3, r1, r7
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	fa1f f887 	uxth.w	r8, r7
 800045c:	2601      	movs	r6, #1
 800045e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000462:	0c21      	lsrs	r1, r4, #16
 8000464:	fb0e 331c 	mls	r3, lr, ip, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb08 f30c 	mul.w	r3, r8, ip
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0xe4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0xe2>
 800047c:	428b      	cmp	r3, r1
 800047e:	f200 80e9 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 8000482:	4684      	mov	ip, r0
 8000484:	1ac9      	subs	r1, r1, r3
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000490:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x10c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x10a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80d9 	bhi.w	800065c <__udivmoddi4+0x2bc>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e7bf      	b.n	8000436 <__udivmoddi4+0x96>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d909      	bls.n	80004ce <__udivmoddi4+0x12e>
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	f000 80b1 	beq.w	8000622 <__udivmoddi4+0x282>
 80004c0:	2600      	movs	r6, #0
 80004c2:	e9c5 0100 	strd	r0, r1, [r5]
 80004c6:	4630      	mov	r0, r6
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	fab3 f683 	clz	r6, r3
 80004d2:	2e00      	cmp	r6, #0
 80004d4:	d14a      	bne.n	800056c <__udivmoddi4+0x1cc>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d302      	bcc.n	80004e0 <__udivmoddi4+0x140>
 80004da:	4282      	cmp	r2, r0
 80004dc:	f200 80b8 	bhi.w	8000650 <__udivmoddi4+0x2b0>
 80004e0:	1a84      	subs	r4, r0, r2
 80004e2:	eb61 0103 	sbc.w	r1, r1, r3
 80004e6:	2001      	movs	r0, #1
 80004e8:	468c      	mov	ip, r1
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d0a8      	beq.n	8000440 <__udivmoddi4+0xa0>
 80004ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80004f2:	e7a5      	b.n	8000440 <__udivmoddi4+0xa0>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f603 	lsr.w	r6, r0, r3
 80004fc:	4097      	lsls	r7, r2
 80004fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000502:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000506:	40d9      	lsrs	r1, r3
 8000508:	4330      	orrs	r0, r6
 800050a:	0c03      	lsrs	r3, r0, #16
 800050c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000510:	fa1f f887 	uxth.w	r8, r7
 8000514:	fb0e 1116 	mls	r1, lr, r6, r1
 8000518:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051c:	fb06 f108 	mul.w	r1, r6, r8
 8000520:	4299      	cmp	r1, r3
 8000522:	fa04 f402 	lsl.w	r4, r4, r2
 8000526:	d909      	bls.n	800053c <__udivmoddi4+0x19c>
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800052e:	f080 808d 	bcs.w	800064c <__udivmoddi4+0x2ac>
 8000532:	4299      	cmp	r1, r3
 8000534:	f240 808a 	bls.w	800064c <__udivmoddi4+0x2ac>
 8000538:	3e02      	subs	r6, #2
 800053a:	443b      	add	r3, r7
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b281      	uxth	r1, r0
 8000540:	fbb3 f0fe 	udiv	r0, r3, lr
 8000544:	fb0e 3310 	mls	r3, lr, r0, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb00 f308 	mul.w	r3, r0, r8
 8000550:	428b      	cmp	r3, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x1c4>
 8000554:	1879      	adds	r1, r7, r1
 8000556:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800055a:	d273      	bcs.n	8000644 <__udivmoddi4+0x2a4>
 800055c:	428b      	cmp	r3, r1
 800055e:	d971      	bls.n	8000644 <__udivmoddi4+0x2a4>
 8000560:	3802      	subs	r0, #2
 8000562:	4439      	add	r1, r7
 8000564:	1acb      	subs	r3, r1, r3
 8000566:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800056a:	e778      	b.n	800045e <__udivmoddi4+0xbe>
 800056c:	f1c6 0c20 	rsb	ip, r6, #32
 8000570:	fa03 f406 	lsl.w	r4, r3, r6
 8000574:	fa22 f30c 	lsr.w	r3, r2, ip
 8000578:	431c      	orrs	r4, r3
 800057a:	fa20 f70c 	lsr.w	r7, r0, ip
 800057e:	fa01 f306 	lsl.w	r3, r1, r6
 8000582:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000586:	fa21 f10c 	lsr.w	r1, r1, ip
 800058a:	431f      	orrs	r7, r3
 800058c:	0c3b      	lsrs	r3, r7, #16
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fa1f f884 	uxth.w	r8, r4
 8000596:	fb0e 1119 	mls	r1, lr, r9, r1
 800059a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800059e:	fb09 fa08 	mul.w	sl, r9, r8
 80005a2:	458a      	cmp	sl, r1
 80005a4:	fa02 f206 	lsl.w	r2, r2, r6
 80005a8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x220>
 80005ae:	1861      	adds	r1, r4, r1
 80005b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005b4:	d248      	bcs.n	8000648 <__udivmoddi4+0x2a8>
 80005b6:	458a      	cmp	sl, r1
 80005b8:	d946      	bls.n	8000648 <__udivmoddi4+0x2a8>
 80005ba:	f1a9 0902 	sub.w	r9, r9, #2
 80005be:	4421      	add	r1, r4
 80005c0:	eba1 010a 	sub.w	r1, r1, sl
 80005c4:	b2bf      	uxth	r7, r7
 80005c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005d2:	fb00 f808 	mul.w	r8, r0, r8
 80005d6:	45b8      	cmp	r8, r7
 80005d8:	d907      	bls.n	80005ea <__udivmoddi4+0x24a>
 80005da:	19e7      	adds	r7, r4, r7
 80005dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005e0:	d22e      	bcs.n	8000640 <__udivmoddi4+0x2a0>
 80005e2:	45b8      	cmp	r8, r7
 80005e4:	d92c      	bls.n	8000640 <__udivmoddi4+0x2a0>
 80005e6:	3802      	subs	r0, #2
 80005e8:	4427      	add	r7, r4
 80005ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ee:	eba7 0708 	sub.w	r7, r7, r8
 80005f2:	fba0 8902 	umull	r8, r9, r0, r2
 80005f6:	454f      	cmp	r7, r9
 80005f8:	46c6      	mov	lr, r8
 80005fa:	4649      	mov	r1, r9
 80005fc:	d31a      	bcc.n	8000634 <__udivmoddi4+0x294>
 80005fe:	d017      	beq.n	8000630 <__udivmoddi4+0x290>
 8000600:	b15d      	cbz	r5, 800061a <__udivmoddi4+0x27a>
 8000602:	ebb3 020e 	subs.w	r2, r3, lr
 8000606:	eb67 0701 	sbc.w	r7, r7, r1
 800060a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800060e:	40f2      	lsrs	r2, r6
 8000610:	ea4c 0202 	orr.w	r2, ip, r2
 8000614:	40f7      	lsrs	r7, r6
 8000616:	e9c5 2700 	strd	r2, r7, [r5]
 800061a:	2600      	movs	r6, #0
 800061c:	4631      	mov	r1, r6
 800061e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000622:	462e      	mov	r6, r5
 8000624:	4628      	mov	r0, r5
 8000626:	e70b      	b.n	8000440 <__udivmoddi4+0xa0>
 8000628:	4606      	mov	r6, r0
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0x60>
 800062c:	4618      	mov	r0, r3
 800062e:	e6fd      	b.n	800042c <__udivmoddi4+0x8c>
 8000630:	4543      	cmp	r3, r8
 8000632:	d2e5      	bcs.n	8000600 <__udivmoddi4+0x260>
 8000634:	ebb8 0e02 	subs.w	lr, r8, r2
 8000638:	eb69 0104 	sbc.w	r1, r9, r4
 800063c:	3801      	subs	r0, #1
 800063e:	e7df      	b.n	8000600 <__udivmoddi4+0x260>
 8000640:	4608      	mov	r0, r1
 8000642:	e7d2      	b.n	80005ea <__udivmoddi4+0x24a>
 8000644:	4660      	mov	r0, ip
 8000646:	e78d      	b.n	8000564 <__udivmoddi4+0x1c4>
 8000648:	4681      	mov	r9, r0
 800064a:	e7b9      	b.n	80005c0 <__udivmoddi4+0x220>
 800064c:	4666      	mov	r6, ip
 800064e:	e775      	b.n	800053c <__udivmoddi4+0x19c>
 8000650:	4630      	mov	r0, r6
 8000652:	e74a      	b.n	80004ea <__udivmoddi4+0x14a>
 8000654:	f1ac 0c02 	sub.w	ip, ip, #2
 8000658:	4439      	add	r1, r7
 800065a:	e713      	b.n	8000484 <__udivmoddi4+0xe4>
 800065c:	3802      	subs	r0, #2
 800065e:	443c      	add	r4, r7
 8000660:	e724      	b.n	80004ac <__udivmoddi4+0x10c>
 8000662:	bf00      	nop

08000664 <__aeabi_idiv0>:
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af02      	add	r7, sp, #8

	//uiDisplayBasic();

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 800066e:	4a19      	ldr	r2, [pc, #100]	; (80006d4 <audioLoop+0x6c>)
 8000670:	2100      	movs	r1, #0
 8000672:	4819      	ldr	r0, [pc, #100]	; (80006d8 <audioLoop+0x70>)
 8000674:	f018 fa88 	bl	8018b88 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <audioLoop+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]

	arm_rfft_fast_init_f32(&FFTStruct, FFTLength);
 800067e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000682:	4817      	ldr	r0, [pc, #92]	; (80006e0 <audioLoop+0x78>)
 8000684:	f017 f946 	bl	8017914 <arm_rfft_fast_init_f32>

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <audioLoop+0x7c>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000696:	4914      	ldr	r1, [pc, #80]	; (80006e8 <audioLoop+0x80>)
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <audioLoop+0x84>)
 800069a:	f003 fbdb 	bl	8003e54 <start_Audio_Processing>

	/* main audio loop */
	while (1) {


		osSignalWait (0x0002, osWaitForever);
 800069e:	463b      	mov	r3, r7
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f014 f900 	bl	80148ac <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 80006ac:	490e      	ldr	r1, [pc, #56]	; (80006e8 <audioLoop+0x80>)
 80006ae:	480f      	ldr	r0, [pc, #60]	; (80006ec <audioLoop+0x84>)
 80006b0:	f000 f860 	bl	8000774 <processAudio>

		osSignalWait (0x0001, osWaitForever);
 80006b4:	463b      	mov	r3, r7
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006ba:	2101      	movs	r1, #1
 80006bc:	4618      	mov	r0, r3
 80006be:	f014 f8f5 	bl	80148ac <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <audioLoop+0x88>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <audioLoop+0x8c>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f851 	bl	8000774 <processAudio>
		osSignalWait (0x0002, osWaitForever);
 80006d2:	e7e4      	b.n	800069e <audioLoop+0x36>
 80006d4:	0004e200 	.word	0x0004e200
 80006d8:	c0096000 	.word	0xc0096000
 80006dc:	2000af00 	.word	0x2000af00
 80006e0:	200094d8 	.word	0x200094d8
 80006e4:	2000b130 	.word	0x2000b130
 80006e8:	200084d8 	.word	0x200084d8
 80006ec:	200098f0 	.word	0x200098f0
 80006f0:	20000004 	.word	0x20000004
 80006f4:	20000000 	.word	0x20000000

080006f8 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_FULL;
	osSignalSet(defaultTaskHandle, 0x0001);
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <HAL_SAI_RxCpltCallback+0x1c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f014 f890 	bl	801482c <osSignalSet>
	return;
 800070c:	bf00      	nop
}
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000af88 	.word	0x2000af88

08000718 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_HALF;
	osSignalSet(defaultTaskHandle, 0x0002);
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f014 f880 	bl	801482c <osSignalSet>
	return;
 800072c:	bf00      	nop
}
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000af88 	.word	0x2000af88

08000738 <printIndex>:
 * has been filled by the DMA, that is,  AUDIO_BUF_SIZE samples
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */
static void printIndex(uint32_t x){
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af02      	add	r7, sp, #8
 800073e:	6078      	str	r0, [r7, #4]
	char index_char[10];
	sprintf(index_char, "%lu %% ",x);
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	490a      	ldr	r1, [pc, #40]	; (8000770 <printIndex+0x38>)
 8000748:	4618      	mov	r0, r3
 800074a:	f018 fb83 	bl	8018e54 <siprintf>
	uint16_t X = LCD_SCREEN_WIDTH/2;
 800074e:	23f0      	movs	r3, #240	; 0xf0
 8000750:	82fb      	strh	r3, [r7, #22]
	uint16_t Y = 120;
 8000752:	2378      	movs	r3, #120	; 0x78
 8000754:	82bb      	strh	r3, [r7, #20]
	LCD_DrawString(X,Y,(uint8_t *)index_char, LEFT_MODE, true);
 8000756:	f107 0208 	add.w	r2, r7, #8
 800075a:	8ab9      	ldrh	r1, [r7, #20]
 800075c:	8af8      	ldrh	r0, [r7, #22]
 800075e:	2301      	movs	r3, #1
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2303      	movs	r3, #3
 8000764:	f003 f868 	bl	8003838 <LCD_DrawString>
}
 8000768:	bf00      	nop
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08019fe0 	.word	0x08019fe0

08000774 <processAudio>:




static void processAudio(int16_t *out, int16_t *in) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 800077e:	f002 fe41 	bl	8003404 <LED_On>


	/* array copy */
	for(int i=0;i<FFTLength;i++){
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e016      	b.n	80007b6 <processAudio+0x42>
		FFTInput[i]=(float32_t) out[i*2]/32738;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800079c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80007fc <processAudio+0x88>
 80007a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <processAudio+0x8c>)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<FFTLength;i++){
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2bff      	cmp	r3, #255	; 0xff
 80007ba:	dde5      	ble.n	8000788 <processAudio+0x14>
	}
		/* fft -> dB fft */
	arm_rfft_fast_f32(&FFTStruct,FFTInput,FFTOutput,0);
 80007bc:	2300      	movs	r3, #0
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <processAudio+0x90>)
 80007c0:	490f      	ldr	r1, [pc, #60]	; (8000800 <processAudio+0x8c>)
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <processAudio+0x94>)
 80007c4:	f017 f95a 	bl	8017a7c <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(FFTOutput,FFTOutputMag,FFTLength/2);
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	4910      	ldr	r1, [pc, #64]	; (800080c <processAudio+0x98>)
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <processAudio+0x90>)
 80007ce:	f017 fdb9 	bl	8018344 <arm_cmplx_mag_f32>

	osSignalSet(uiTaskHandle, 0x0001);
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <processAudio+0x9c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2101      	movs	r1, #1
 80007d8:	4618      	mov	r0, r3
 80007da:	f014 f827 	bl	801482c <osSignalSet>
	printIndex(FFTOutputMag[0]);
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <processAudio+0x98>)
 80007e0:	edd3 7a00 	vldr	s15, [r3]
 80007e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007e8:	ee17 0a90 	vmov	r0, s15
 80007ec:	f7ff ffa4 	bl	8000738 <printIndex>
	LED_Off();
 80007f0:	f002 fe14 	bl	800341c <LED_Off>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	46ffc400 	.word	0x46ffc400
 8000800:	200094f0 	.word	0x200094f0
 8000804:	2000aaf0 	.word	0x2000aaf0
 8000808:	200094d8 	.word	0x200094d8
 800080c:	2000a8f0 	.word	0x2000a8f0
 8000810:	2000b354 	.word	0x2000b354

08000814 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <vApplicationGetIdleTaskMemory+0x2c>)
 8000858:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <vApplicationGetIdleTaskMemory+0x30>)
 800085e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	200000d4 	.word	0x200000d4
 8000878:	2000012c 	.word	0x2000012c

0800087c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
}
 8000884:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000886:	f3bf 8f6f 	isb	sy
}
 800088a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <SCB_EnableICache+0x48>)
 800088e:	2200      	movs	r2, #0
 8000890:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000894:	f3bf 8f4f 	dsb	sy
}
 8000898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800089a:	f3bf 8f6f 	isb	sy
}
 800089e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <SCB_EnableICache+0x48>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <SCB_EnableICache+0x48>)
 80008a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ac:	f3bf 8f4f 	dsb	sy
}
 80008b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008b2:	f3bf 8f6f 	isb	sy
}
 80008b6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80008cc:	f3bf 8f4f 	dsb	sy
}
 80008d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d2:	f3bf 8f6f 	isb	sy
}
 80008d6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <SCB_InvalidateICache+0x30>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008e0:	f3bf 8f4f 	dsb	sy
}
 80008e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e6:	f3bf 8f6f 	isb	sy
}
 80008ea:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <SCB_EnableDCache+0x84>)
 8000904:	2200      	movs	r2, #0
 8000906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800090a:	f3bf 8f4f 	dsb	sy
}
 800090e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <SCB_EnableDCache+0x84>)
 8000912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000916:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	0b5b      	lsrs	r3, r3, #13
 800091c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000920:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800092a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	015a      	lsls	r2, r3, #5
 8000930:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000934:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800093a:	4911      	ldr	r1, [pc, #68]	; (8000980 <SCB_EnableDCache+0x84>)
 800093c:	4313      	orrs	r3, r2
 800093e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	60ba      	str	r2, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1ef      	bne.n	800092c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	60fa      	str	r2, [r7, #12]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1e5      	bne.n	8000922 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000956:	f3bf 8f4f 	dsb	sy
}
 800095a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <SCB_EnableDCache+0x84>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <SCB_EnableDCache+0x84>)
 8000962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000966:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000968:	f3bf 8f4f 	dsb	sy
}
 800096c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800096e:	f3bf 8f6f 	isb	sy
}
 8000972:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <SCB_InvalidateDCache+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
}
 8000996:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <SCB_InvalidateDCache+0x74>)
 800099a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800099e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	0b5b      	lsrs	r3, r3, #13
 80009a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009a8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009b2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	015a      	lsls	r2, r3, #5
 80009b8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009bc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <SCB_InvalidateDCache+0x74>)
 80009c4:	4313      	orrs	r3, r2
 80009c6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	60ba      	str	r2, [r7, #8]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1ef      	bne.n	80009b4 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	1e5a      	subs	r2, r3, #1
 80009d8:	60fa      	str	r2, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1e5      	bne.n	80009aa <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e4:	f3bf 8f6f 	isb	sy
}
 80009e8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009fc:	b5b0      	push	{r4, r5, r7, lr}
 80009fe:	b08e      	sub	sp, #56	; 0x38
 8000a00:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8000a02:	f7ff ffbf 	bl	8000984 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8000a06:	f7ff ff5f 	bl	80008c8 <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a0a:	f004 fc46 	bl	800529a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a0e:	f000 f873 	bl	8000af8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a12:	f001 f8d1 	bl	8001bb8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000a16:	f001 f80d 	bl	8001a34 <MX_DMA_Init>
	MX_ADC3_Init();
 8000a1a:	f000 f92d 	bl	8000c78 <MX_ADC3_Init>
	MX_CRC_Init();
 8000a1e:	f000 f97d 	bl	8000d1c <MX_CRC_Init>
	MX_DCMI_Init();
 8000a22:	f000 f99d 	bl	8000d60 <MX_DCMI_Init>
	MX_DMA2D_Init();
 8000a26:	f000 f9cf 	bl	8000dc8 <MX_DMA2D_Init>
	MX_FMC_Init();
 8000a2a:	f001 f871 	bl	8001b10 <MX_FMC_Init>
	MX_I2C1_Init();
 8000a2e:	f000 f9fd 	bl	8000e2c <MX_I2C1_Init>
	MX_I2C3_Init();
 8000a32:	f000 fa3b 	bl	8000eac <MX_I2C3_Init>
	MX_LTDC_Init();
 8000a36:	f000 fa79 	bl	8000f2c <MX_LTDC_Init>
	MX_QUADSPI_Init();
 8000a3a:	f000 fafb 	bl	8001034 <MX_QUADSPI_Init>
	MX_RTC_Init();
 8000a3e:	f000 fb3b 	bl	80010b8 <MX_RTC_Init>
	MX_SAI2_Init();
 8000a42:	f000 fbdf 	bl	8001204 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 8000a46:	f000 fc99 	bl	800137c <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 8000a4a:	f000 fcb7 	bl	80013bc <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 8000a4e:	f000 fce5 	bl	800141c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000a52:	f000 fd8f 	bl	8001574 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000a56:	f000 fe03 	bl	8001660 <MX_TIM3_Init>
	MX_TIM5_Init();
 8000a5a:	f000 fe79 	bl	8001750 <MX_TIM5_Init>
	MX_TIM8_Init();
 8000a5e:	f000 feef 	bl	8001840 <MX_TIM8_Init>
	MX_TIM12_Init();
 8000a62:	f000 ff41 	bl	80018e8 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8000a66:	f000 ff85 	bl	8001974 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8000a6a:	f000 ffb3 	bl	80019d4 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 8000a6e:	f011 fa1f 	bl	8011eb0 <MX_FATFS_Init>
	MX_LIBJPEG_Init();
 8000a72:	f011 fc6d 	bl	8012350 <MX_LIBJPEG_Init>
	/* USER CODE BEGIN 2 */

	MPU_Init();
 8000a76:	f003 fafa 	bl	800406e <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8000a7a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000a7e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a82:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8000a84:	f003 fada 	bl	800403c <TS_Init>
	printf("Touchscreen Init: OK\n");
 8000a88:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <main+0xe8>)
 8000a8a:	f018 f9cb 	bl	8018e24 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8000a8e:	f7ff fef5 	bl	800087c <SCB_EnableICache>
	SCB_EnableDCache();
 8000a92:	f7ff ff33 	bl	80008fc <SCB_EnableDCache>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <main+0xec>)
 8000a98:	f107 041c 	add.w	r4, r7, #28
 8000a9c:	461d      	mov	r5, r3
 8000a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f013 fe4f 	bl	8014754 <osThreadCreate>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <main+0xf0>)
 8000aba:	6013      	str	r3, [r2, #0]

	/* definition and creation of uiTask */
	osThreadDef(uiTask, startUITask, osPriorityLow, 0, 2048); // 128 = stack size too small -> 1024 !
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <main+0xf4>)
 8000abe:	463c      	mov	r4, r7
 8000ac0:	461d      	mov	r5, r3
 8000ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f013 fe3e 	bl	8014754 <osThreadCreate>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <main+0xf8>)
 8000adc:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000ade:	f013 fe16 	bl	801470e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <main+0xe6>
 8000ae4:	08019ffc 	.word	0x08019ffc
 8000ae8:	0801a014 	.word	0x0801a014
 8000aec:	2000af88 	.word	0x2000af88
 8000af0:	0801a030 	.word	0x0801a030
 8000af4:	2000b354 	.word	0x2000b354

08000af8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0b4      	sub	sp, #208	; 0xd0
 8000afc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f018 f83e 	bl	8018b88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2284      	movs	r2, #132	; 0x84
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f018 f82f 	bl	8018b88 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000b2a:	f009 fb11 	bl	800a150 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <SystemClock_Config+0x174>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a4e      	ldr	r2, [pc, #312]	; (8000c6c <SystemClock_Config+0x174>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <SystemClock_Config+0x174>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b46:	4b4a      	ldr	r3, [pc, #296]	; (8000c70 <SystemClock_Config+0x178>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a49      	ldr	r2, [pc, #292]	; (8000c70 <SystemClock_Config+0x178>)
 8000b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <SystemClock_Config+0x178>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000b80:	2319      	movs	r3, #25
 8000b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8000b86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b94:	2309      	movs	r3, #9
 8000b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00a fafa 	bl	800b198 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8000baa:	f001 fa83 	bl	80020b4 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bae:	f009 fadf 	bl	800a170 <HAL_PWREx_EnableOverDrive>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000bb8:	f001 fa7c 	bl	80020b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000be2:	2106      	movs	r1, #6
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00a fd7b 	bl	800b6e0 <HAL_RCC_ClockConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8000bf0:	f001 fa60 	bl	80020b4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <SystemClock_Config+0x17c>)
 8000bf6:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c0c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 8000c12:	2308      	movs	r3, #8
 8000c14:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c16:	2303      	movs	r3, #3
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c32:	2300      	movs	r3, #0
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c36:	2300      	movs	r3, #0
 8000c38:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000c42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4618      	mov	r0, r3
 8000c56:	f00a ff4b 	bl	800baf0 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 8000c60:	f001 fa28 	bl	80020b4 <Error_Handler>
	}
}
 8000c64:	bf00      	nop
 8000c66:	37d0      	adds	r7, #208	; 0xd0
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000
 8000c74:	01b14868 	.word	0x01b14868

08000c78 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000c8c:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <MX_ADC3_Init+0x9c>)
 8000c8e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000c92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c96:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <MX_ADC3_Init+0xa0>)
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000cda:	f004 fb2f 	bl	800533c <HAL_ADC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8000ce4:	f001 f9e6 	bl	80020b4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_ADC3_Init+0x98>)
 8000cfa:	f004 fb63 	bl	80053c4 <HAL_ADC_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8000d04:	f001 f9d6 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000b44c 	.word	0x2000b44c
 8000d14:	40012200 	.word	0x40012200
 8000d18:	0f000001 	.word	0x0f000001

08000d1c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <MX_CRC_Init+0x40>)
 8000d24:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d46:	f004 ff11 	bl	8005b6c <HAL_CRC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8000d50:	f001 f9b0 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000b200 	.word	0x2000b200
 8000d5c:	40023000 	.word	0x40023000

08000d60 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <MX_DCMI_Init+0x64>)
 8000d68:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_DCMI_Init+0x60>)
 8000dae:	f004 ffc7 	bl	8005d40 <HAL_DCMI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 8000db8:	f001 f97c 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000b494 	.word	0x2000b494
 8000dc4:	50050000 	.word	0x50050000

08000dc8 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000dce:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <MX_DMA2D_Init+0x60>)
 8000dd0:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000dfe:	f005 fcff 	bl	8006800 <HAL_DMA2D_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8000e08:	f001 f954 	bl	80020b4 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_DMA2D_Init+0x5c>)
 8000e10:	f005 ff64 	bl	8006cdc <HAL_DMA2D_ConfigLayer>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8000e1a:	f001 f94b 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000b6b8 	.word	0x2000b6b8
 8000e28:	4002b000 	.word	0x4002b000

08000e2c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <MX_I2C1_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <MX_I2C1_Init+0x7c>)
 8000e3a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e68:	f008 f8f2 	bl	8009050 <HAL_I2C_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000e72:	f001 f91f 	bl	80020b4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e7a:	f008 fdf3 	bl	8009a64 <HAL_I2CEx_ConfigAnalogFilter>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000e84:	f001 f916 	bl	80020b4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_I2C1_Init+0x74>)
 8000e8c:	f008 fe35 	bl	8009afa <HAL_I2CEx_ConfigDigitalFilter>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000e96:	f001 f90d 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000b1b4 	.word	0x2000b1b4
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	00c0eaff 	.word	0x00c0eaff

08000eac <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <MX_I2C3_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <MX_I2C3_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000ee8:	f008 f8b2 	bl	8009050 <HAL_I2C_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8000ef2:	f001 f8df 	bl	80020b4 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000efa:	f008 fdb3 	bl	8009a64 <HAL_I2CEx_ConfigAnalogFilter>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8000f04:	f001 f8d6 	bl	80020b4 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_I2C3_Init+0x74>)
 8000f0c:	f008 fdf5 	bl	8009afa <HAL_I2CEx_ConfigDigitalFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8000f16:	f001 f8cd 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000af8c 	.word	0x2000af8c
 8000f24:	40005c00 	.word	0x40005c00
 8000f28:	00c0eaff 	.word	0x00c0eaff

08000f2c <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	; 0x38
 8000f30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2234      	movs	r2, #52	; 0x34
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f017 fe25 	bl	8018b88 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	; (800102c <MX_LTDC_Init+0x100>)
 8000f40:	4a3b      	ldr	r2, [pc, #236]	; (8001030 <MX_LTDC_Init+0x104>)
 8000f42:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <MX_LTDC_Init+0x100>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <MX_LTDC_Init+0x100>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <MX_LTDC_Init+0x100>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f56:	4b35      	ldr	r3, [pc, #212]	; (800102c <MX_LTDC_Init+0x100>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8000f5c:	4b33      	ldr	r3, [pc, #204]	; (800102c <MX_LTDC_Init+0x100>)
 8000f5e:	2228      	movs	r2, #40	; 0x28
 8000f60:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <MX_LTDC_Init+0x100>)
 8000f64:	2209      	movs	r2, #9
 8000f66:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8000f68:	4b30      	ldr	r3, [pc, #192]	; (800102c <MX_LTDC_Init+0x100>)
 8000f6a:	2235      	movs	r2, #53	; 0x35
 8000f6c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <MX_LTDC_Init+0x100>)
 8000f70:	220b      	movs	r2, #11
 8000f72:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <MX_LTDC_Init+0x100>)
 8000f76:	f240 2215 	movw	r2, #533	; 0x215
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_LTDC_Init+0x100>)
 8000f7e:	f240 121b 	movw	r2, #283	; 0x11b
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <MX_LTDC_Init+0x100>)
 8000f86:	f240 2235 	movw	r2, #565	; 0x235
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_LTDC_Init+0x100>)
 8000f8e:	f240 121d 	movw	r2, #285	; 0x11d
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <MX_LTDC_Init+0x100>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <MX_LTDC_Init+0x100>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_LTDC_Init+0x100>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fac:	481f      	ldr	r0, [pc, #124]	; (800102c <MX_LTDC_Init+0x100>)
 8000fae:	f008 fdf1 	bl	8009b94 <HAL_LTDC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8000fb8:	f001 f87c 	bl	80020b4 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8000fc0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fc4:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8000fca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000fce:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8000fd4:	23ff      	movs	r3, #255	; 0xff
 8000fd6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fdc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fe0:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8000fe6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8000fec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8000ff2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4806      	ldr	r0, [pc, #24]	; (800102c <MX_LTDC_Init+0x100>)
 8001012:	f008 fe8f 	bl	8009d34 <HAL_LTDC_ConfigLayer>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 800101c:	f001 f84a 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001020:	f002 fafe 	bl	8003620 <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3738      	adds	r7, #56	; 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000b3a4 	.word	0x2000b3a4
 8001030:	40016800 	.word	0x40016800

08001034 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 800103a:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <MX_QUADSPI_Init+0x80>)
 800103c:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001040:	2201      	movs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001046:	2204      	movs	r2, #4
 8001048:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 800104c:	2210      	movs	r2, #16
 800104e:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001052:	2218      	movs	r2, #24
 8001054:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001058:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800105c:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001072:	f009 f8cd 	bl	800a210 <HAL_QSPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 800107c:	f001 f81a 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001082:	f002 fdaf 	bl	8003be4 <DISCO_QSPI_ResetMemory>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_QUADSPI_Init+0x5c>
 800108c:	f001 f812 	bl	80020b4 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_QUADSPI_Init+0x7c>)
 8001092:	f002 fde9 	bl	8003c68 <DISCO_QSPI_DummyCyclesCfg>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_QUADSPI_Init+0x6c>
 800109c:	f001 f80a 	bl	80020b4 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 80010a0:	f002 fd6e 	bl	8003b80 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80010a4:	205c      	movs	r0, #92	; 0x5c
 80010a6:	f004 fcd7 	bl	8005a58 <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000b7c4 	.word	0x2000b7c4
 80010b4:	a0001000 	.word	0xa0001000

080010b8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b092      	sub	sp, #72	; 0x48
 80010bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 80010be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	222c      	movs	r2, #44	; 0x2c
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f017 fd54 	bl	8018b88 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80010e0:	4b46      	ldr	r3, [pc, #280]	; (80011fc <MX_RTC_Init+0x144>)
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <MX_RTC_Init+0x148>)
 80010e4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <MX_RTC_Init+0x144>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80010ec:	4b43      	ldr	r3, [pc, #268]	; (80011fc <MX_RTC_Init+0x144>)
 80010ee:	227f      	movs	r2, #127	; 0x7f
 80010f0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <MX_RTC_Init+0x144>)
 80010f4:	22ff      	movs	r2, #255	; 0xff
 80010f6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <MX_RTC_Init+0x144>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <MX_RTC_Init+0x144>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001104:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <MX_RTC_Init+0x144>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800110a:	483c      	ldr	r0, [pc, #240]	; (80011fc <MX_RTC_Init+0x144>)
 800110c:	f00b fa24 	bl	800c558 <HAL_RTC_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001116:	f000 ffcd 	bl	80020b4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001120:	2300      	movs	r3, #0
 8001122:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800112c:	2300      	movs	r3, #0
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	482f      	ldr	r0, [pc, #188]	; (80011fc <MX_RTC_Init+0x144>)
 800113e:	f00b fa9d 	bl	800c67c <HAL_RTC_SetTime>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001148:	f000 ffb4 	bl	80020b4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800114c:	2301      	movs	r3, #1
 800114e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001152:	2301      	movs	r3, #1
 8001154:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001158:	2301      	movs	r3, #1
 800115a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001168:	2201      	movs	r2, #1
 800116a:	4619      	mov	r1, r3
 800116c:	4823      	ldr	r0, [pc, #140]	; (80011fc <MX_RTC_Init+0x144>)
 800116e:	f00b fb43 	bl	800c7f8 <HAL_RTC_SetDate>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001178:	f000 ff9c 	bl	80020b4 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 800117c:	2300      	movs	r3, #0
 800117e:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001180:	2300      	movs	r3, #0
 8001182:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001184:	2300      	movs	r3, #0
 8001186:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 80011a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <MX_RTC_Init+0x144>)
 80011b4:	f00b fbc8 	bl	800c948 <HAL_RTC_SetAlarm>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 80011be:	f000 ff79 	bl	80020b4 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 80011c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	2201      	movs	r2, #1
 80011cc:	4619      	mov	r1, r3
 80011ce:	480b      	ldr	r0, [pc, #44]	; (80011fc <MX_RTC_Init+0x144>)
 80011d0:	f00b fbba 	bl	800c948 <HAL_RTC_SetAlarm>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_RTC_Init+0x126>
	{
		Error_Handler();
 80011da:	f000 ff6b 	bl	80020b4 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80011de:	2202      	movs	r2, #2
 80011e0:	2100      	movs	r1, #0
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_RTC_Init+0x144>)
 80011e4:	f00b fd3a 	bl	800cc5c <HAL_RTCEx_SetTimeStamp>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 80011ee:	f000 ff61 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3748      	adds	r7, #72	; 0x48
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000b568 	.word	0x2000b568
 8001200:	40002800 	.word	0x40002800

08001204 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <MX_SAI2_Init+0x168>)
 800120a:	4a59      	ldr	r2, [pc, #356]	; (8001370 <MX_SAI2_Init+0x16c>)
 800120c:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800120e:	4b57      	ldr	r3, [pc, #348]	; (800136c <MX_SAI2_Init+0x168>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001214:	4b55      	ldr	r3, [pc, #340]	; (800136c <MX_SAI2_Init+0x168>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 800121a:	4b54      	ldr	r3, [pc, #336]	; (800136c <MX_SAI2_Init+0x168>)
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001220:	4b52      	ldr	r3, [pc, #328]	; (800136c <MX_SAI2_Init+0x168>)
 8001222:	2200      	movs	r2, #0
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001226:	4b51      	ldr	r3, [pc, #324]	; (800136c <MX_SAI2_Init+0x168>)
 8001228:	2201      	movs	r2, #1
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <MX_SAI2_Init+0x168>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001232:	4b4e      	ldr	r3, [pc, #312]	; (800136c <MX_SAI2_Init+0x168>)
 8001234:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001238:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800123a:	4b4c      	ldr	r3, [pc, #304]	; (800136c <MX_SAI2_Init+0x168>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001240:	4b4a      	ldr	r3, [pc, #296]	; (800136c <MX_SAI2_Init+0x168>)
 8001242:	2201      	movs	r2, #1
 8001244:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_8K; // SAI_AUDIO_FREQUENCY_48K;
 8001246:	4b49      	ldr	r3, [pc, #292]	; (800136c <MX_SAI2_Init+0x168>)
 8001248:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800124c:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <MX_SAI2_Init+0x168>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001254:	4b45      	ldr	r3, [pc, #276]	; (800136c <MX_SAI2_Init+0x168>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <MX_SAI2_Init+0x168>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <MX_SAI2_Init+0x168>)
 8001262:	2200      	movs	r2, #0
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <MX_SAI2_Init+0x168>)
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <MX_SAI2_Init+0x168>)
 800126e:	2220      	movs	r2, #32
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001272:	4b3e      	ldr	r3, [pc, #248]	; (800136c <MX_SAI2_Init+0x168>)
 8001274:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001278:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <MX_SAI2_Init+0x168>)
 800127c:	2200      	movs	r2, #0
 800127e:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <MX_SAI2_Init+0x168>)
 8001282:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001286:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <MX_SAI2_Init+0x168>)
 800128a:	2200      	movs	r2, #0
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <MX_SAI2_Init+0x168>)
 8001290:	2200      	movs	r2, #0
 8001292:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <MX_SAI2_Init+0x168>)
 8001296:	2204      	movs	r2, #4
 8001298:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <MX_SAI2_Init+0x168>)
 800129c:	2205      	movs	r2, #5
 800129e:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80012a0:	4832      	ldr	r0, [pc, #200]	; (800136c <MX_SAI2_Init+0x168>)
 80012a2:	f00b fd31 	bl	800cd08 <HAL_SAI_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 80012ac:	f000 ff02 	bl	80020b4 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_SAI2_Init+0x170>)
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <MX_SAI2_Init+0x174>)
 80012b4:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <MX_SAI2_Init+0x170>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_SAI2_Init+0x170>)
 80012be:	2203      	movs	r2, #3
 80012c0:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <MX_SAI2_Init+0x170>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_SAI2_Init+0x170>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <MX_SAI2_Init+0x170>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_SAI2_Init+0x170>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_SAI2_Init+0x170>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_SAI2_Init+0x170>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_SAI2_Init+0x170>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_SAI2_Init+0x170>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_SAI2_Init+0x170>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_SAI2_Init+0x170>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_SAI2_Init+0x170>)
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_SAI2_Init+0x170>)
 8001306:	2220      	movs	r2, #32
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_SAI2_Init+0x170>)
 800130c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001310:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_SAI2_Init+0x170>)
 8001314:	2200      	movs	r2, #0
 8001316:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_SAI2_Init+0x170>)
 800131a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800131e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SAI2_Init+0x170>)
 8001322:	2200      	movs	r2, #0
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_SAI2_Init+0x170>)
 8001328:	2200      	movs	r2, #0
 800132a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_SAI2_Init+0x170>)
 800132e:	2204      	movs	r2, #4
 8001330:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A; //A for MIC/ 5 for LINE
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_SAI2_Init+0x170>)
 8001334:	220a      	movs	r2, #10
 8001336:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001338:	480e      	ldr	r0, [pc, #56]	; (8001374 <MX_SAI2_Init+0x170>)
 800133a:	f00b fce5 	bl	800cd08 <HAL_SAI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001344:	f000 feb6 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_SAI2_Init+0x168>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_SAI2_Init+0x168>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001356:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SAI2_Init+0x170>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <MX_SAI2_Init+0x170>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001366:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000b130 	.word	0x2000b130
 8001370:	40015c04 	.word	0x40015c04
 8001374:	2000af04 	.word	0x2000af04
 8001378:	40015c24 	.word	0x40015c24

0800137c <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_SDMMC1_SD_Init+0x38>)
 8001382:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <MX_SDMMC1_SD_Init+0x3c>)
 8001384:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_SDMMC1_SD_Init+0x38>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_SDMMC1_SD_Init+0x38>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_SDMMC1_SD_Init+0x38>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_SDMMC1_SD_Init+0x38>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <MX_SDMMC1_SD_Init+0x38>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <MX_SDMMC1_SD_Init+0x38>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	2000b284 	.word	0x2000b284
 80013b8:	40012c00 	.word	0x40012c00

080013bc <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013c2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80013c6:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_SPDIFRX_Init+0x5c>)
 8001406:	f00d f975 	bl	800e6f4 <HAL_SPDIFRX_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001410:	f000 fe50 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000b0e4 	.word	0x2000b0e4

0800141c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b09a      	sub	sp, #104	; 0x68
 8001420:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800143c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	222c      	movs	r2, #44	; 0x2c
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f017 fb96 	bl	8018b88 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <MX_TIM1_Init+0x150>)
 800145e:	4a44      	ldr	r2, [pc, #272]	; (8001570 <MX_TIM1_Init+0x154>)
 8001460:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <MX_TIM1_Init+0x150>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b40      	ldr	r3, [pc, #256]	; (800156c <MX_TIM1_Init+0x150>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <MX_TIM1_Init+0x150>)
 8001470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001474:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b3d      	ldr	r3, [pc, #244]	; (800156c <MX_TIM1_Init+0x150>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800147c:	4b3b      	ldr	r3, [pc, #236]	; (800156c <MX_TIM1_Init+0x150>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b3a      	ldr	r3, [pc, #232]	; (800156c <MX_TIM1_Init+0x150>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001488:	4838      	ldr	r0, [pc, #224]	; (800156c <MX_TIM1_Init+0x150>)
 800148a:	f00d f98f 	bl	800e7ac <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001494:	f000 fe0e 	bl	80020b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014a2:	4619      	mov	r1, r3
 80014a4:	4831      	ldr	r0, [pc, #196]	; (800156c <MX_TIM1_Init+0x150>)
 80014a6:	f00d fcd7 	bl	800ee58 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80014b0:	f000 fe00 	bl	80020b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014b4:	482d      	ldr	r0, [pc, #180]	; (800156c <MX_TIM1_Init+0x150>)
 80014b6:	f00d fa49 	bl	800e94c <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80014c0:	f000 fdf8 	bl	80020b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d4:	4619      	mov	r1, r3
 80014d6:	4825      	ldr	r0, [pc, #148]	; (800156c <MX_TIM1_Init+0x150>)
 80014d8:	f00e f944 	bl	800f764 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80014e2:	f000 fde7 	bl	80020b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e6:	2360      	movs	r3, #96	; 0x60
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001502:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_TIM1_Init+0x150>)
 800150c:	f00d fb94 	bl	800ec38 <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8001516:	f000 fdcd 	bl	80020b4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001532:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800153c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM1_Init+0x150>)
 8001550:	f00e f996 	bl	800f880 <HAL_TIMEx_ConfigBreakDeadTime>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 800155a:	f000 fdab 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM1_Init+0x150>)
 8001560:	f001 faca 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 8001564:	bf00      	nop
 8001566:	3768      	adds	r7, #104	; 0x68
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000b588 	.word	0x2000b588
 8001570:	40010000 	.word	0x40010000

08001574 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_TIM2_Init+0xe8>)
 80015a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ac:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_TIM2_Init+0xe8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <MX_TIM2_Init+0xe8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <MX_TIM2_Init+0xe8>)
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_TIM2_Init+0xe8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <MX_TIM2_Init+0xe8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ce:	4823      	ldr	r0, [pc, #140]	; (800165c <MX_TIM2_Init+0xe8>)
 80015d0:	f00d f8ec 	bl	800e7ac <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 80015da:	f000 fd6b 	bl	80020b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e8:	4619      	mov	r1, r3
 80015ea:	481c      	ldr	r0, [pc, #112]	; (800165c <MX_TIM2_Init+0xe8>)
 80015ec:	f00d fc34 	bl	800ee58 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 80015f6:	f000 fd5d 	bl	80020b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015fa:	4818      	ldr	r0, [pc, #96]	; (800165c <MX_TIM2_Init+0xe8>)
 80015fc:	f00d f9a6 	bl	800e94c <HAL_TIM_PWM_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8001606:	f000 fd55 	bl	80020b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <MX_TIM2_Init+0xe8>)
 800161a:	f00e f8a3 	bl	800f764 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001624:	f000 fd46 	bl	80020b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001628:	2360      	movs	r3, #96	; 0x60
 800162a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_TIM2_Init+0xe8>)
 8001640:	f00d fafa 	bl	800ec38 <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 800164a:	f000 fd33 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800164e:	4803      	ldr	r0, [pc, #12]	; (800165c <MX_TIM2_Init+0xe8>)
 8001650:	f001 fa52 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 8001654:	bf00      	nop
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000b6f8 	.word	0x2000b6f8

08001660 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08e      	sub	sp, #56	; 0x38
 8001664:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <MX_TIM3_Init+0xe8>)
 8001694:	4a2d      	ldr	r2, [pc, #180]	; (800174c <MX_TIM3_Init+0xec>)
 8001696:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <MX_TIM3_Init+0xe8>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <MX_TIM3_Init+0xe8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <MX_TIM3_Init+0xe8>)
 80016a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016aa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <MX_TIM3_Init+0xe8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <MX_TIM3_Init+0xe8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016b8:	4823      	ldr	r0, [pc, #140]	; (8001748 <MX_TIM3_Init+0xe8>)
 80016ba:	f00d f877 	bl	800e7ac <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 80016c4:	f000 fcf6 	bl	80020b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d2:	4619      	mov	r1, r3
 80016d4:	481c      	ldr	r0, [pc, #112]	; (8001748 <MX_TIM3_Init+0xe8>)
 80016d6:	f00d fbbf 	bl	800ee58 <HAL_TIM_ConfigClockSource>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80016e0:	f000 fce8 	bl	80020b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016e4:	4818      	ldr	r0, [pc, #96]	; (8001748 <MX_TIM3_Init+0xe8>)
 80016e6:	f00d f931 	bl	800e94c <HAL_TIM_PWM_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 80016f0:	f000 fce0 	bl	80020b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	4811      	ldr	r0, [pc, #68]	; (8001748 <MX_TIM3_Init+0xe8>)
 8001704:	f00e f82e 	bl	800f764 <HAL_TIMEx_MasterConfigSynchronization>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 800170e:	f000 fcd1 	bl	80020b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001712:	2360      	movs	r3, #96	; 0x60
 8001714:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	4619      	mov	r1, r3
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <MX_TIM3_Init+0xe8>)
 800172a:	f00d fa85 	bl	800ec38 <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8001734:	f000 fcbe 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <MX_TIM3_Init+0xe8>)
 800173a:	f001 f9dd 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 800173e:	bf00      	nop
 8001740:	3738      	adds	r7, #56	; 0x38
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000b358 	.word	0x2000b358
 800174c:	40000400 	.word	0x40000400

08001750 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08e      	sub	sp, #56	; 0x38
 8001754:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <MX_TIM5_Init+0xe8>)
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <MX_TIM5_Init+0xec>)
 8001786:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <MX_TIM5_Init+0xe8>)
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_TIM5_Init+0xe8>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_TIM5_Init+0xe8>)
 8001796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800179a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <MX_TIM5_Init+0xe8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <MX_TIM5_Init+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <MX_TIM5_Init+0xe8>)
 80017aa:	f00c ffff 	bl	800e7ac <HAL_TIM_Base_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 80017b4:	f000 fc7e 	bl	80020b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c2:	4619      	mov	r1, r3
 80017c4:	481c      	ldr	r0, [pc, #112]	; (8001838 <MX_TIM5_Init+0xe8>)
 80017c6:	f00d fb47 	bl	800ee58 <HAL_TIM_ConfigClockSource>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 80017d0:	f000 fc70 	bl	80020b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017d4:	4818      	ldr	r0, [pc, #96]	; (8001838 <MX_TIM5_Init+0xe8>)
 80017d6:	f00d f8b9 	bl	800e94c <HAL_TIM_PWM_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 80017e0:	f000 fc68 	bl	80020b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4811      	ldr	r0, [pc, #68]	; (8001838 <MX_TIM5_Init+0xe8>)
 80017f4:	f00d ffb6 	bl	800f764 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 80017fe:	f000 fc59 	bl	80020b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001802:	2360      	movs	r3, #96	; 0x60
 8001804:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	220c      	movs	r2, #12
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM5_Init+0xe8>)
 800181a:	f00d fa0d 	bl	800ec38 <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8001824:	f000 fc46 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM5_Init+0xe8>)
 800182a:	f001 f965 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3738      	adds	r7, #56	; 0x38
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000b308 	.word	0x2000b308
 800183c:	40000c00 	.word	0x40000c00

08001840 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_TIM8_Init+0xa0>)
 8001860:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <MX_TIM8_Init+0xa4>)
 8001862:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_TIM8_Init+0xa0>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_TIM8_Init+0xa0>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_TIM8_Init+0xa0>)
 8001872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001876:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_TIM8_Init+0xa0>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_TIM8_Init+0xa0>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_TIM8_Init+0xa0>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800188a:	4815      	ldr	r0, [pc, #84]	; (80018e0 <MX_TIM8_Init+0xa0>)
 800188c:	f00c ff8e 	bl	800e7ac <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 8001896:	f000 fc0d 	bl	80020b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <MX_TIM8_Init+0xa0>)
 80018a8:	f00d fad6 	bl	800ee58 <HAL_TIM_ConfigClockSource>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 80018b2:	f000 fbff 	bl	80020b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <MX_TIM8_Init+0xa0>)
 80018c8:	f00d ff4c 	bl	800f764 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 80018d2:	f000 fbef 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000b038 	.word	0x2000b038
 80018e4:	40010400 	.word	0x40010400

080018e8 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_TIM12_Init+0x84>)
 8001902:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <MX_TIM12_Init+0x88>)
 8001904:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_TIM12_Init+0x84>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_TIM12_Init+0x84>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_TIM12_Init+0x84>)
 8001914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001918:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_TIM12_Init+0x84>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_TIM12_Init+0x84>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001926:	4811      	ldr	r0, [pc, #68]	; (800196c <MX_TIM12_Init+0x84>)
 8001928:	f00d f810 	bl	800e94c <HAL_TIM_PWM_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 8001932:	f000 fbbf 	bl	80020b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001936:	2360      	movs	r3, #96	; 0x60
 8001938:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	4619      	mov	r1, r3
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <MX_TIM12_Init+0x84>)
 800194e:	f00d f973 	bl	800ec38 <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8001958:	f000 fbac 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <MX_TIM12_Init+0x84>)
 800195e:	f001 f8cb 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 8001962:	bf00      	nop
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000b744 	.word	0x2000b744
 8001970:	40001800 	.word	0x40001800

08001974 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_USART1_UART_Init+0x58>)
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <MX_USART1_UART_Init+0x5c>)
 800197c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_USART1_UART_Init+0x58>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART1_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_USART1_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART1_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART1_UART_Init+0x58>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART1_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART1_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART1_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART1_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USART1_UART_Init+0x58>)
 80019b8:	f00d fffe 	bl	800f9b8 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80019c2:	f000 fb77 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000b4e4 	.word	0x2000b4e4
 80019d0:	40011000 	.word	0x40011000

080019d4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <MX_USART6_UART_Init+0x5c>)
 80019dc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_USART6_UART_Init+0x58>)
 8001a18:	f00d ffce 	bl	800f9b8 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8001a22:	f000 fb47 	bl	80020b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000b634 	.word	0x2000b634
 8001a30:	40011400 	.word	0x40011400

08001a34 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <MX_DMA_Init+0xd0>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a31      	ldr	r2, [pc, #196]	; (8001b04 <MX_DMA_Init+0xd0>)
 8001a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <MX_DMA_Init+0xd0>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a54:	4a2d      	ldr	r2, [pc, #180]	; (8001b0c <MX_DMA_Init+0xd8>)
 8001a56:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001a64:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6a:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a72:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a7a:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a82:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a90:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a94:	2204      	movs	r2, #4
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001aaa:	4817      	ldr	r0, [pc, #92]	; (8001b08 <MX_DMA_Init+0xd4>)
 8001aac:	f004 fa92 	bl	8005fd4 <HAL_DMA_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 8001ab6:	f000 fafd 	bl	80020b4 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2105      	movs	r1, #5
 8001abe:	2038      	movs	r0, #56	; 0x38
 8001ac0:	f003 ffa0 	bl	8005a04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ac4:	2038      	movs	r0, #56	; 0x38
 8001ac6:	f003 ffb9 	bl	8005a3c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	2039      	movs	r0, #57	; 0x39
 8001ad0:	f003 ff98 	bl	8005a04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ad4:	2039      	movs	r0, #57	; 0x39
 8001ad6:	f003 ffb1 	bl	8005a3c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	203c      	movs	r0, #60	; 0x3c
 8001ae0:	f003 ff90 	bl	8005a04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001ae4:	203c      	movs	r0, #60	; 0x3c
 8001ae6:	f003 ffa9 	bl	8005a3c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	2046      	movs	r0, #70	; 0x46
 8001af0:	f003 ff88 	bl	8005a04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001af4:	2046      	movs	r0, #70	; 0x46
 8001af6:	f003 ffa1 	bl	8005a3c <HAL_NVIC_EnableIRQ>

}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	2000afd8 	.word	0x2000afd8
 8001b0c:	40026410 	.word	0x40026410

08001b10 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	615a      	str	r2, [r3, #20]
 8001b26:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b2a:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <MX_FMC_Init+0xa4>)
 8001b2c:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b42:	2210      	movs	r2, #16
 8001b44:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b52:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b60:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8001b74:	2307      	movs	r3, #7
 8001b76:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8001b80:	2303      	movs	r3, #3
 8001b82:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <MX_FMC_Init+0xa0>)
 8001b92:	f00c fd30 	bl	800e5f6 <HAL_SDRAM_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 8001b9c:	f000 fa8a 	bl	80020b4 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001ba0:	f240 6003 	movw	r0, #1539	; 0x603
 8001ba4:	f002 f9ea 	bl	8003f7c <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2000b790 	.word	0x2000b790
 8001bb4:	a0000140 	.word	0xa0000140

08001bb8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b090      	sub	sp, #64	; 0x40
 8001bbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001bce:	4baf      	ldr	r3, [pc, #700]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4aae      	ldr	r2, [pc, #696]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001bd4:	f043 0310 	orr.w	r3, r3, #16
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4bac      	ldr	r3, [pc, #688]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001be6:	4ba9      	ldr	r3, [pc, #676]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4aa8      	ldr	r2, [pc, #672]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4ba6      	ldr	r3, [pc, #664]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4ba3      	ldr	r3, [pc, #652]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4aa2      	ldr	r2, [pc, #648]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4ba0      	ldr	r3, [pc, #640]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c16:	4b9d      	ldr	r3, [pc, #628]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a9c      	ldr	r2, [pc, #624]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b9a      	ldr	r3, [pc, #616]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a96      	ldr	r2, [pc, #600]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b94      	ldr	r3, [pc, #592]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	4b91      	ldr	r3, [pc, #580]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a90      	ldr	r2, [pc, #576]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a8a      	ldr	r2, [pc, #552]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001c76:	4b85      	ldr	r3, [pc, #532]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a84      	ldr	r2, [pc, #528]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a7e      	ldr	r2, [pc, #504]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b7c      	ldr	r3, [pc, #496]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca6:	4b79      	ldr	r3, [pc, #484]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a78      	ldr	r2, [pc, #480]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b76      	ldr	r3, [pc, #472]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a72      	ldr	r2, [pc, #456]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <MX_GPIO_Init+0x2d4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2120      	movs	r1, #32
 8001cda:	486d      	ldr	r0, [pc, #436]	; (8001e90 <MX_GPIO_Init+0x2d8>)
 8001cdc:	f005 fbfc 	bl	80074d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	210e      	movs	r1, #14
 8001ce4:	486b      	ldr	r0, [pc, #428]	; (8001e94 <MX_GPIO_Init+0x2dc>)
 8001ce6:	f005 fbf7 	bl	80074d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2108      	movs	r1, #8
 8001cee:	486a      	ldr	r0, [pc, #424]	; (8001e98 <MX_GPIO_Init+0x2e0>)
 8001cf0:	f005 fbf2 	bl	80074d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4866      	ldr	r0, [pc, #408]	; (8001e94 <MX_GPIO_Init+0x2dc>)
 8001cfc:	f005 fbec 	bl	80074d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d06:	4865      	ldr	r0, [pc, #404]	; (8001e9c <MX_GPIO_Init+0x2e4>)
 8001d08:	f005 fbe6 	bl	80074d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	21c8      	movs	r1, #200	; 0xc8
 8001d10:	4863      	ldr	r0, [pc, #396]	; (8001ea0 <MX_GPIO_Init+0x2e8>)
 8001d12:	f005 fbe1 	bl	80074d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001d16:	2308      	movs	r3, #8
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	485e      	ldr	r0, [pc, #376]	; (8001ea4 <MX_GPIO_Init+0x2ec>)
 8001d2a:	f005 f905 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001d2e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d40:	230b      	movs	r3, #11
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4855      	ldr	r0, [pc, #340]	; (8001ea0 <MX_GPIO_Init+0x2e8>)
 8001d4c:	f005 f8f4 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001d50:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d62:	230a      	movs	r3, #10
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	484e      	ldr	r0, [pc, #312]	; (8001ea8 <MX_GPIO_Init+0x2f0>)
 8001d6e:	f005 f8e3 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	4619      	mov	r1, r3
 8001d86:	4849      	ldr	r0, [pc, #292]	; (8001eac <MX_GPIO_Init+0x2f4>)
 8001d88:	f005 f8d6 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001d8c:	2340      	movs	r3, #64	; 0x40
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d90:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <MX_GPIO_Init+0x2f8>)
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	483c      	ldr	r0, [pc, #240]	; (8001e90 <MX_GPIO_Init+0x2d8>)
 8001da0:	f005 f8ca 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001da4:	2320      	movs	r3, #32
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	4619      	mov	r1, r3
 8001dba:	4835      	ldr	r0, [pc, #212]	; (8001e90 <MX_GPIO_Init+0x2d8>)
 8001dbc:	f005 f8bc 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8001dc0:	f241 030e 	movw	r3, #4110	; 0x100e
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	482e      	ldr	r0, [pc, #184]	; (8001e94 <MX_GPIO_Init+0x2dc>)
 8001dda:	f005 f8ad 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4830      	ldr	r0, [pc, #192]	; (8001eb4 <MX_GPIO_Init+0x2fc>)
 8001df4:	f005 f8a0 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4822      	ldr	r0, [pc, #136]	; (8001e98 <MX_GPIO_Init+0x2e0>)
 8001e10:	f005 f892 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e14:	2310      	movs	r3, #16
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	481a      	ldr	r0, [pc, #104]	; (8001e90 <MX_GPIO_Init+0x2d8>)
 8001e28:	f005 f886 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e2c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <MX_GPIO_Init+0x2e4>)
 8001e42:	f005 f879 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <MX_GPIO_Init+0x2e4>)
 8001e60:	f005 f86a 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8001e64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e76:	4619      	mov	r1, r3
 8001e78:	4806      	ldr	r0, [pc, #24]	; (8001e94 <MX_GPIO_Init+0x2dc>)
 8001e7a:	f005 f85d 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_GPIO_Init+0x300>)
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e017      	b.n	8001ebc <MX_GPIO_Init+0x304>
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40022800 	.word	0x40022800
 8001e9c:	40021c00 	.word	0x40021c00
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40022400 	.word	0x40022400
 8001eb0:	10120000 	.word	0x10120000
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	10110000 	.word	0x10110000
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4844      	ldr	r0, [pc, #272]	; (8001fd8 <MX_GPIO_Init+0x420>)
 8001ec6:	f005 f837 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001eca:	2310      	movs	r3, #16
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001eda:	230a      	movs	r3, #10
 8001edc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	483d      	ldr	r0, [pc, #244]	; (8001fdc <MX_GPIO_Init+0x424>)
 8001ee6:	f005 f827 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001eea:	23c8      	movs	r3, #200	; 0xc8
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efe:	4619      	mov	r1, r3
 8001f00:	4837      	ldr	r0, [pc, #220]	; (8001fe0 <MX_GPIO_Init+0x428>)
 8001f02:	f005 f819 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f06:	2305      	movs	r3, #5
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f16:	230a      	movs	r3, #10
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4830      	ldr	r0, [pc, #192]	; (8001fe4 <MX_GPIO_Init+0x42c>)
 8001f22:	f005 f809 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f26:	2332      	movs	r3, #50	; 0x32
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f36:	230b      	movs	r3, #11
 8001f38:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4828      	ldr	r0, [pc, #160]	; (8001fe4 <MX_GPIO_Init+0x42c>)
 8001f42:	f004 fff9 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001f46:	2304      	movs	r3, #4
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f56:	4619      	mov	r1, r3
 8001f58:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <MX_GPIO_Init+0x428>)
 8001f5a:	f004 ffed 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f5e:	2386      	movs	r3, #134	; 0x86
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f6e:	230b      	movs	r3, #11
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f76:	4619      	mov	r1, r3
 8001f78:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <MX_GPIO_Init+0x430>)
 8001f7a:	f004 ffdd 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f7e:	2328      	movs	r3, #40	; 0x28
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f8e:	230a      	movs	r3, #10
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f96:	4619      	mov	r1, r3
 8001f98:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <MX_GPIO_Init+0x430>)
 8001f9a:	f004 ffcd 	bl	8006f38 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001f9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480c      	ldr	r0, [pc, #48]	; (8001fec <MX_GPIO_Init+0x434>)
 8001fbc:	f004 ffbc 	bl	8006f38 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2105      	movs	r1, #5
 8001fc4:	2028      	movs	r0, #40	; 0x28
 8001fc6:	f003 fd1d 	bl	8005a04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fca:	2028      	movs	r0, #40	; 0x28
 8001fcc:	f003 fd36 	bl	8005a3c <HAL_NVIC_EnableIRQ>

}
 8001fd0:	bf00      	nop
 8001fd2:	3740      	adds	r7, #64	; 0x40
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021c00 	.word	0x40021c00
 8001fe0:	40021800 	.word	0x40021800
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40020400 	.word	0x40020400

08001ff0 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f016 fe77 	bl	8018cec <iprintf>
	printf("\n");
 8001ffe:	200a      	movs	r0, #10
 8002000:	f016 fe8c 	bl	8018d1c <putchar>
	Error_Handler();
 8002004:	f000 f856 	bl	80020b4 <Error_Handler>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8002018:	f015 f986 	bl	8017328 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <StartDefaultTask+0x24>)
 800201e:	f016 ff01 	bl	8018e24 <puts>
	audioLoop();
 8002022:	f7fe fb21 	bl	8000668 <audioLoop>
	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */

	// In case we accidentally exit from task loop
	osThreadTerminate(NULL);
 8002026:	2000      	movs	r0, #0
 8002028:	f012 fbe0 	bl	80147ec <osThreadTerminate>

	/* USER CODE END 5 */
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	0801a04c 	.word	0x0801a04c

08002038 <uiDisplayBasic>:
 * @brief Function implementing the uiTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void uiDisplayBasic(void) {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0

	LCD_Clear(LCD_COLOR_WHITE);
 800203c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002040:	f001 fbb2 	bl	80037a8 <LCD_Clear>

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8002044:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002048:	f001 fb34 	bl	80036b4 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 800204c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002050:	f001 fb60 	bl	8003714 <LCD_SetBackColor>
	LCD_SetFont(&Font16);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <uiDisplayBasic+0x28>)
 8002056:	f001 fb75 	bl	8003744 <LCD_SetFont>

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000014 	.word	0x20000014

08002064 <startUITask>:



void startUITask(void const * argument)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6178      	str	r0, [r7, #20]
	/* USER CODE BEGIN startUITask */

	osDelay(200);
 800206c:	20c8      	movs	r0, #200	; 0xc8
 800206e:	f012 fbc9 	bl	8014804 <osDelay>
	printf("StartLedTask\n");
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <startUITask+0x28>)
 8002074:	f016 fed6 	bl	8018e24 <puts>
	uiDisplayBasic();
 8002078:	f7ff ffde 	bl	8002038 <uiDisplayBasic>
	/* Infinite loop */
	for(;;)
	{
		osSignalWait (0x0001, osWaitForever);
 800207c:	463b      	mov	r3, r7
 800207e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002082:	2101      	movs	r1, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f012 fc11 	bl	80148ac <osSignalWait>
 800208a:	e7f7      	b.n	800207c <startUITask+0x18>
 800208c:	0801a060 	.word	0x0801a060

08002090 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80020a2:	f003 f907 	bl	80052b4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40001000 	.word	0x40001000

080020b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 80020b8:	f001 f9bc 	bl	8003434 <LED_Toggle>
		HAL_Delay(100);
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	f003 f919 	bl	80052f4 <HAL_Delay>
		LED_Toggle();
 80020c2:	e7f9      	b.n	80020b8 <Error_Handler+0x4>

080020c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_MspInit+0x4c>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_MspInit+0x4c>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_MspInit+0x4c>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_MspInit+0x4c>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	210f      	movs	r1, #15
 80020fe:	f06f 0001 	mvn.w	r0, #1
 8002102:	f003 fc7f 	bl	8005a04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <HAL_ADC_MspInit+0xa4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d13c      	bne.n	80021b0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a20      	ldr	r2, [pc, #128]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 800213c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 8002154:	f043 0320 	orr.w	r3, r3, #32
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_ADC_MspInit+0xa8>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800217e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002182:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002184:	2303      	movs	r3, #3
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <HAL_ADC_MspInit+0xac>)
 8002194:	f004 fed0 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002198:	2301      	movs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219c:	2303      	movs	r3, #3
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <HAL_ADC_MspInit+0xb0>)
 80021ac:	f004 fec4 	bl	8006f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80021b0:	bf00      	nop
 80021b2:	3728      	adds	r7, #40	; 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40012200 	.word	0x40012200
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021400 	.word	0x40021400
 80021c4:	40020000 	.word	0x40020000

080021c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <HAL_CRC_MspInit+0x38>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10b      	bne.n	80021f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_CRC_MspInit+0x3c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_CRC_MspInit+0x3c>)
 80021e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_CRC_MspInit+0x3c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023000 	.word	0x40023000
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6c      	ldr	r2, [pc, #432]	; (80023d8 <HAL_DCMI_MspInit+0x1d0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 80d2 	bne.w	80023d0 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800222c:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	4a6a      	ldr	r2, [pc, #424]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6353      	str	r3, [r2, #52]	; 0x34
 8002238:	4b68      	ldr	r3, [pc, #416]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002244:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a64      	ldr	r2, [pc, #400]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 800224a:	f043 0310 	orr.w	r3, r3, #16
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b62      	ldr	r3, [pc, #392]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800225c:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4a5e      	ldr	r2, [pc, #376]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	6313      	str	r3, [r2, #48]	; 0x30
 8002268:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002274:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 800227a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b56      	ldr	r3, [pc, #344]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4a52      	ldr	r2, [pc, #328]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 8002292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002296:	6313      	str	r3, [r2, #48]	; 0x30
 8002298:	4b50      	ldr	r3, [pc, #320]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	4b4d      	ldr	r3, [pc, #308]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a4c      	ldr	r2, [pc, #304]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6313      	str	r3, [r2, #48]	; 0x30
 80022b0:	4b4a      	ldr	r3, [pc, #296]	; (80023dc <HAL_DCMI_MspInit+0x1d4>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022cc:	230d      	movs	r3, #13
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d4:	4619      	mov	r1, r3
 80022d6:	4842      	ldr	r0, [pc, #264]	; (80023e0 <HAL_DCMI_MspInit+0x1d8>)
 80022d8:	f004 fe2e 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80022dc:	2308      	movs	r3, #8
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022ec:	230d      	movs	r3, #13
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	483b      	ldr	r0, [pc, #236]	; (80023e4 <HAL_DCMI_MspInit+0x1dc>)
 80022f8:	f004 fe1e 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80022fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800230e:	230d      	movs	r3, #13
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4833      	ldr	r0, [pc, #204]	; (80023e8 <HAL_DCMI_MspInit+0x1e0>)
 800231a:	f004 fe0d 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800231e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002330:	230d      	movs	r3, #13
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	482c      	ldr	r0, [pc, #176]	; (80023ec <HAL_DCMI_MspInit+0x1e4>)
 800233c:	f004 fdfc 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002340:	2350      	movs	r3, #80	; 0x50
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002350:	230d      	movs	r3, #13
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002358:	4619      	mov	r1, r3
 800235a:	4825      	ldr	r0, [pc, #148]	; (80023f0 <HAL_DCMI_MspInit+0x1e8>)
 800235c:	f004 fdec 	bl	8006f38 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 8002362:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <HAL_DCMI_MspInit+0x1f0>)
 8002364:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002366:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 8002368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800236c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 800237c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002380:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 8002384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002388:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 800238c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002390:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80023a4:	4813      	ldr	r0, [pc, #76]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 80023a6:	f003 fe15 	bl	8005fd4 <HAL_DMA_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 80023b0:	f7ff fe80 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 80023b8:	649a      	str	r2, [r3, #72]	; 0x48
 80023ba:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <HAL_DCMI_MspInit+0x1ec>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2105      	movs	r1, #5
 80023c4:	204e      	movs	r0, #78	; 0x4e
 80023c6:	f003 fb1d 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80023ca:	204e      	movs	r0, #78	; 0x4e
 80023cc:	f003 fb36 	bl	8005a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80023d0:	bf00      	nop
 80023d2:	3738      	adds	r7, #56	; 0x38
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	50050000 	.word	0x50050000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021800 	.word	0x40021800
 80023ec:	40021c00 	.word	0x40021c00
 80023f0:	40020000 	.word	0x40020000
 80023f4:	2000b224 	.word	0x2000b224
 80023f8:	40026428 	.word	0x40026428

080023fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <HAL_DMA2D_MspInit+0x44>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d113      	bne.n	8002436 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_DMA2D_MspInit+0x48>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_DMA2D_MspInit+0x48>)
 8002414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_DMA2D_MspInit+0x48>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2105      	movs	r1, #5
 800242a:	205a      	movs	r0, #90	; 0x5a
 800242c:	f003 faea 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002430:	205a      	movs	r0, #90	; 0x5a
 8002432:	f003 fb03 	bl	8005a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	4002b000 	.word	0x4002b000
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 031c 	add.w	r3, r7, #28
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2f      	ldr	r2, [pc, #188]	; (8002524 <HAL_I2C_MspInit+0xdc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d129      	bne.n	80024be <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a2e      	ldr	r2, [pc, #184]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002488:	2312      	movs	r3, #18
 800248a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248c:	2301      	movs	r3, #1
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002494:	2304      	movs	r3, #4
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	4823      	ldr	r0, [pc, #140]	; (800252c <HAL_I2C_MspInit+0xe4>)
 80024a0:	f004 fd4a 	bl	8006f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 80024aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024ae:	6413      	str	r3, [r2, #64]	; 0x40
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80024bc:	e02d      	b.n	800251a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_I2C_MspInit+0xe8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d128      	bne.n	800251a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 80024ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d2:	6313      	str	r3, [r2, #48]	; 0x30
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80024e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e6:	2312      	movs	r3, #18
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024f2:	2304      	movs	r3, #4
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	4619      	mov	r1, r3
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <HAL_I2C_MspInit+0xec>)
 80024fe:	f004 fd1b 	bl	8006f38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 8002508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_I2C_MspInit+0xe0>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	bf00      	nop
 800251c:	3730      	adds	r7, #48	; 0x30
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40005400 	.word	0x40005400
 8002528:	40023800 	.word	0x40023800
 800252c:	40020400 	.word	0x40020400
 8002530:	40005c00 	.word	0x40005c00
 8002534:	40021c00 	.word	0x40021c00

08002538 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a15      	ldr	r2, [pc, #84]	; (800259c <HAL_I2C_MspDeInit+0x64>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d110      	bne.n	800256c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_I2C_MspDeInit+0x68>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <HAL_I2C_MspDeInit+0x68>)
 8002550:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255a:	4812      	ldr	r0, [pc, #72]	; (80025a4 <HAL_I2C_MspDeInit+0x6c>)
 800255c:	f004 fe98 	bl	8007290 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002564:	480f      	ldr	r0, [pc, #60]	; (80025a4 <HAL_I2C_MspDeInit+0x6c>)
 8002566:	f004 fe93 	bl	8007290 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800256a:	e013      	b.n	8002594 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <HAL_I2C_MspDeInit+0x70>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10e      	bne.n	8002594 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_I2C_MspDeInit+0x68>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_I2C_MspDeInit+0x68>)
 800257c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	4809      	ldr	r0, [pc, #36]	; (80025ac <HAL_I2C_MspDeInit+0x74>)
 8002586:	f004 fe83 	bl	8007290 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800258a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <HAL_I2C_MspDeInit+0x74>)
 8002590:	f004 fe7e 	bl	8007290 <HAL_GPIO_DeInit>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40005400 	.word	0x40005400
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40005c00 	.word	0x40005c00
 80025ac:	40021c00 	.word	0x40021c00

080025b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a51      	ldr	r2, [pc, #324]	; (8002714 <HAL_LTDC_MspInit+0x164>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	f040 809b 	bne.w	800270a <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	4a4f      	ldr	r2, [pc, #316]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 80025da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025de:	6453      	str	r3, [r2, #68]	; 0x44
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ec:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a49      	ldr	r2, [pc, #292]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	4a43      	ldr	r2, [pc, #268]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6313      	str	r3, [r2, #48]	; 0x30
 8002610:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800261c:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a3d      	ldr	r2, [pc, #244]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 8002622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002626:	6313      	str	r3, [r2, #48]	; 0x30
 8002628:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002634:	4b38      	ldr	r3, [pc, #224]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4a37      	ldr	r2, [pc, #220]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 800263a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800263e:	6313      	str	r3, [r2, #48]	; 0x30
 8002640:	4b35      	ldr	r3, [pc, #212]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a31      	ldr	r2, [pc, #196]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_LTDC_MspInit+0x168>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002664:	2310      	movs	r3, #16
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002674:	230e      	movs	r3, #14
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267c:	4619      	mov	r1, r3
 800267e:	4827      	ldr	r0, [pc, #156]	; (800271c <HAL_LTDC_MspInit+0x16c>)
 8002680:	f004 fc5a 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002684:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002696:	230e      	movs	r3, #14
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800269a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269e:	4619      	mov	r1, r3
 80026a0:	481f      	ldr	r0, [pc, #124]	; (8002720 <HAL_LTDC_MspInit+0x170>)
 80026a2:	f004 fc49 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80026a6:	23f7      	movs	r3, #247	; 0xf7
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026b6:	230e      	movs	r3, #14
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80026ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026be:	4619      	mov	r1, r3
 80026c0:	4818      	ldr	r0, [pc, #96]	; (8002724 <HAL_LTDC_MspInit+0x174>)
 80026c2:	f004 fc39 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80026c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026d8:	2309      	movs	r3, #9
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e0:	4619      	mov	r1, r3
 80026e2:	4811      	ldr	r0, [pc, #68]	; (8002728 <HAL_LTDC_MspInit+0x178>)
 80026e4:	f004 fc28 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80026e8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026fa:	230e      	movs	r3, #14
 80026fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002702:	4619      	mov	r1, r3
 8002704:	4809      	ldr	r0, [pc, #36]	; (800272c <HAL_LTDC_MspInit+0x17c>)
 8002706:	f004 fc17 	bl	8006f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800270a:	bf00      	nop
 800270c:	3738      	adds	r7, #56	; 0x38
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40016800 	.word	0x40016800
 8002718:	40023800 	.word	0x40023800
 800271c:	40021000 	.word	0x40021000
 8002720:	40022400 	.word	0x40022400
 8002724:	40022800 	.word	0x40022800
 8002728:	40021800 	.word	0x40021800
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3f      	ldr	r2, [pc, #252]	; (800284c <HAL_QSPI_MspInit+0x11c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d178      	bne.n	8002844 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002752:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	4a3e      	ldr	r2, [pc, #248]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	6393      	str	r3, [r2, #56]	; 0x38
 800275e:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800276a:	4b39      	ldr	r3, [pc, #228]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a38      	ldr	r2, [pc, #224]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 8002770:	f043 0310 	orr.w	r3, r3, #16
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a32      	ldr	r2, [pc, #200]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_QSPI_MspInit+0x120>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80027b2:	2304      	movs	r3, #4
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80027c2:	2309      	movs	r3, #9
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	4619      	mov	r1, r3
 80027cc:	4821      	ldr	r0, [pc, #132]	; (8002854 <HAL_QSPI_MspInit+0x124>)
 80027ce:	f004 fbb3 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80027d2:	2340      	movs	r3, #64	; 0x40
 80027d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80027e2:	230a      	movs	r3, #10
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4619      	mov	r1, r3
 80027ec:	481a      	ldr	r0, [pc, #104]	; (8002858 <HAL_QSPI_MspInit+0x128>)
 80027ee:	f004 fba3 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027f2:	2304      	movs	r3, #4
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002802:	2309      	movs	r3, #9
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4812      	ldr	r0, [pc, #72]	; (8002858 <HAL_QSPI_MspInit+0x128>)
 800280e:	f004 fb93 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002812:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002824:	2309      	movs	r3, #9
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	480b      	ldr	r0, [pc, #44]	; (800285c <HAL_QSPI_MspInit+0x12c>)
 8002830:	f004 fb82 	bl	8006f38 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2105      	movs	r1, #5
 8002838:	205c      	movs	r0, #92	; 0x5c
 800283a:	f003 f8e3 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800283e:	205c      	movs	r0, #92	; 0x5c
 8002840:	f003 f8fc 	bl	8005a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	3730      	adds	r7, #48	; 0x30
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	a0001000 	.word	0xa0001000
 8002850:	40023800 	.word	0x40023800
 8002854:	40021000 	.word	0x40021000
 8002858:	40020400 	.word	0x40020400
 800285c:	40020c00 	.word	0x40020c00

08002860 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_RTC_MspInit+0x2c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d105      	bne.n	800287e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_RTC_MspInit+0x30>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_RTC_MspInit+0x30>)
 8002878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40002800 	.word	0x40002800
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <HAL_SD_MspInit+0xb4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d144      	bne.n	8002940 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a24      	ldr	r2, [pc, #144]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a1e      	ldr	r2, [pc, #120]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028ec:	f043 0308 	orr.w	r3, r3, #8
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_SD_MspInit+0xb8>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80028fe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002902:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002910:	230c      	movs	r3, #12
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4619      	mov	r1, r3
 800291a:	480d      	ldr	r0, [pc, #52]	; (8002950 <HAL_SD_MspInit+0xbc>)
 800291c:	f004 fb0c 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002920:	2304      	movs	r3, #4
 8002922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002930:	230c      	movs	r3, #12
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4806      	ldr	r0, [pc, #24]	; (8002954 <HAL_SD_MspInit+0xc0>)
 800293c:	f004 fafc 	bl	8006f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40023800 	.word	0x40023800
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00

08002958 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002978:	d127      	bne.n	80029ca <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_SPDIFRX_MspInit+0x7c>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_SPDIFRX_MspInit+0x7c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80029ba:	2308      	movs	r3, #8
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	4804      	ldr	r0, [pc, #16]	; (80029d8 <HAL_SPDIFRX_MspInit+0x80>)
 80029c6:	f004 fab7 	bl	8006f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80029ca:	bf00      	nop
 80029cc:	3728      	adds	r7, #40	; 0x28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020c00 	.word	0x40020c00

080029dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2e      	ldr	r2, [pc, #184]	; (8002aa4 <HAL_TIM_Base_MspInit+0xc8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10c      	bne.n	8002a08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a06:	e046      	b.n	8002a96 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d10c      	bne.n	8002a2c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]
}
 8002a2a:	e034      	b.n	8002a96 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <HAL_TIM_Base_MspInit+0xd0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10c      	bne.n	8002a50 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
}
 8002a4e:	e022      	b.n	8002a96 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_TIM_Base_MspInit+0xd4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a60:	f043 0308 	orr.w	r3, r3, #8
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
}
 8002a72:	e010      	b.n	8002a96 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <HAL_TIM_Base_MspInit+0xd8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <HAL_TIM_Base_MspInit+0xcc>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000c00 	.word	0x40000c00
 8002ab4:	40010400 	.word	0x40010400

08002ab8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_TIM_PWM_MspInit+0x38>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40001800 	.word	0x40001800
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a56      	ldr	r2, [pc, #344]	; (8002c70 <HAL_TIM_MspPostInit+0x178>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d11d      	bne.n	8002b56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a55      	ldr	r2, [pc, #340]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b44:	2301      	movs	r3, #1
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	484a      	ldr	r0, [pc, #296]	; (8002c78 <HAL_TIM_MspPostInit+0x180>)
 8002b50:	f004 f9f2 	bl	8006f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002b54:	e087      	b.n	8002c66 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5e:	d11d      	bne.n	8002b9c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4a43      	ldr	r2, [pc, #268]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6c:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	4619      	mov	r1, r3
 8002b94:	4838      	ldr	r0, [pc, #224]	; (8002c78 <HAL_TIM_MspPostInit+0x180>)
 8002b96:	f004 f9cf 	bl	8006f38 <HAL_GPIO_Init>
}
 8002b9a:	e064      	b.n	8002c66 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a36      	ldr	r2, [pc, #216]	; (8002c7c <HAL_TIM_MspPostInit+0x184>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d11c      	bne.n	8002be0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b33      	ldr	r3, [pc, #204]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a32      	ldr	r2, [pc, #200]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4829      	ldr	r0, [pc, #164]	; (8002c80 <HAL_TIM_MspPostInit+0x188>)
 8002bda:	f004 f9ad 	bl	8006f38 <HAL_GPIO_Init>
}
 8002bde:	e042      	b.n	8002c66 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <HAL_TIM_MspPostInit+0x18c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d11c      	bne.n	8002c24 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c12:	2302      	movs	r3, #2
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	481a      	ldr	r0, [pc, #104]	; (8002c88 <HAL_TIM_MspPostInit+0x190>)
 8002c1e:	f004 f98b 	bl	8006f38 <HAL_GPIO_Init>
}
 8002c22:	e020      	b.n	8002c66 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_TIM_MspPostInit+0x194>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d11b      	bne.n	8002c66 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_TIM_MspPostInit+0x17c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002c46:	2340      	movs	r3, #64	; 0x40
 8002c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002c56:	2309      	movs	r3, #9
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <HAL_TIM_MspPostInit+0x198>)
 8002c62:	f004 f969 	bl	8006f38 <HAL_GPIO_Init>
}
 8002c66:	bf00      	nop
 8002c68:	3730      	adds	r7, #48	; 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020000 	.word	0x40020000
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40000c00 	.word	0x40000c00
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40001800 	.word	0x40001800
 8002c90:	40021c00 	.word	0x40021c00

08002c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	; 0x30
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <HAL_UART_MspInit+0x110>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d145      	bne.n	8002d42 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb6:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a3b      	ldr	r2, [pc, #236]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002cbc:	f043 0310 	orr.w	r3, r3, #16
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a35      	ldr	r2, [pc, #212]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d0e:	2307      	movs	r3, #7
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002d12:	f107 031c 	add.w	r3, r7, #28
 8002d16:	4619      	mov	r1, r3
 8002d18:	4824      	ldr	r0, [pc, #144]	; (8002dac <HAL_UART_MspInit+0x118>)
 8002d1a:	f004 f90d 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d30:	2307      	movs	r3, #7
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	4619      	mov	r1, r3
 8002d3a:	481d      	ldr	r0, [pc, #116]	; (8002db0 <HAL_UART_MspInit+0x11c>)
 8002d3c:	f004 f8fc 	bl	8006f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d40:	e02c      	b.n	8002d9c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_UART_MspInit+0x120>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d127      	bne.n	8002d9c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002d52:	f043 0320 	orr.w	r3, r3, #32
 8002d56:	6453      	str	r3, [r2, #68]	; 0x44
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d70:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_UART_MspInit+0x114>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d7c:	23c0      	movs	r3, #192	; 0xc0
 8002d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	4619      	mov	r1, r3
 8002d96:	4808      	ldr	r0, [pc, #32]	; (8002db8 <HAL_UART_MspInit+0x124>)
 8002d98:	f004 f8ce 	bl	8006f38 <HAL_GPIO_Init>
}
 8002d9c:	bf00      	nop
 8002d9e:	3730      	adds	r7, #48	; 0x30
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40011000 	.word	0x40011000
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40011400 	.word	0x40011400
 8002db8:	40020800 	.word	0x40020800

08002dbc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_FMC_MspInit+0x10c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d173      	bne.n	8002ec0 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_FMC_MspInit+0x10c>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002dde:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_FMC_MspInit+0x110>)
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4a3a      	ldr	r2, [pc, #232]	; (8002ecc <HAL_FMC_MspInit+0x110>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6393      	str	r3, [r2, #56]	; 0x38
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_FMC_MspInit+0x110>)
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002df6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002dfa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e08:	230c      	movs	r3, #12
 8002e0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	482f      	ldr	r0, [pc, #188]	; (8002ed0 <HAL_FMC_MspInit+0x114>)
 8002e12:	f004 f891 	bl	8006f38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002e16:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e1a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e28:	230c      	movs	r3, #12
 8002e2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4828      	ldr	r0, [pc, #160]	; (8002ed4 <HAL_FMC_MspInit+0x118>)
 8002e32:	f004 f881 	bl	8006f38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002e36:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e3a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e48:	230c      	movs	r3, #12
 8002e4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4821      	ldr	r0, [pc, #132]	; (8002ed8 <HAL_FMC_MspInit+0x11c>)
 8002e52:	f004 f871 	bl	8006f38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002e56:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e5a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e68:	230c      	movs	r3, #12
 8002e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	481a      	ldr	r0, [pc, #104]	; (8002edc <HAL_FMC_MspInit+0x120>)
 8002e72:	f004 f861 	bl	8006f38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002e76:	2328      	movs	r3, #40	; 0x28
 8002e78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e82:	2303      	movs	r3, #3
 8002e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e86:	230c      	movs	r3, #12
 8002e88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4814      	ldr	r0, [pc, #80]	; (8002ee0 <HAL_FMC_MspInit+0x124>)
 8002e90:	f004 f852 	bl	8006f38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002e94:	2308      	movs	r3, #8
 8002e96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ea4:	230c      	movs	r3, #12
 8002ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <HAL_FMC_MspInit+0x128>)
 8002eae:	f004 f843 	bl	8006f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_FMC_MspInit+0x12c>)
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <HAL_FMC_MspInit+0x130>)
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_FMC_MspInit+0x130>)
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <HAL_FMC_MspInit+0x12c>)
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ebe:	e000      	b.n	8002ec2 <HAL_FMC_MspInit+0x106>
    return;
 8002ec0:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000032c 	.word	0x2000032c
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021400 	.word	0x40021400
 8002ee0:	40021c00 	.word	0x40021c00
 8002ee4:	40020800 	.word	0x40020800
 8002ee8:	2000b790 	.word	0x2000b790
 8002eec:	2000afd8 	.word	0x2000afd8

08002ef0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ef8:	f7ff ff60 	bl	8002dbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6f      	ldr	r2, [pc, #444]	; (80030d0 <HAL_SAI_MspInit+0x1cc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d175      	bne.n	8003002 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002f16:	4b6f      	ldr	r3, [pc, #444]	; (80030d4 <HAL_SAI_MspInit+0x1d0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002f1e:	4b6e      	ldr	r3, [pc, #440]	; (80030d8 <HAL_SAI_MspInit+0x1d4>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a6d      	ldr	r2, [pc, #436]	; (80030d8 <HAL_SAI_MspInit+0x1d4>)
 8002f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <HAL_SAI_MspInit+0x1d4>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_SAI_MspInit+0x1d0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_SAI_MspInit+0x1d0>)
 8002f3e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8002f40:	2310      	movs	r3, #16
 8002f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002f50:	230a      	movs	r3, #10
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4860      	ldr	r0, [pc, #384]	; (80030dc <HAL_SAI_MspInit+0x1d8>)
 8002f5c:	f003 ffec 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002f60:	23e0      	movs	r3, #224	; 0xe0
 8002f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002f70:	230a      	movs	r3, #10
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4858      	ldr	r0, [pc, #352]	; (80030dc <HAL_SAI_MspInit+0x1d8>)
 8002f7c:	f003 ffdc 	bl	8006f38 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8002f80:	4b57      	ldr	r3, [pc, #348]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002f82:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_SAI_MspInit+0x1e0>)
 8002f84:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8002f86:	4b56      	ldr	r3, [pc, #344]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002f88:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002f8c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f8e:	4b54      	ldr	r3, [pc, #336]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002f90:	2240      	movs	r2, #64	; 0x40
 8002f92:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f94:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fa2:	4b4f      	ldr	r3, [pc, #316]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002faa:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fb0:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8002fb2:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002fba:	4b49      	ldr	r3, [pc, #292]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fc0:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002fc8:	4b45      	ldr	r3, [pc, #276]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fca:	2203      	movs	r2, #3
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002fce:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8002fda:	4841      	ldr	r0, [pc, #260]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fdc:	f002 fffa 	bl	8005fd4 <HAL_DMA_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8002fe6:	f7ff f865 	bl	80020b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002fee:	671a      	str	r2, [r3, #112]	; 0x70
 8002ff0:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a39      	ldr	r2, [pc, #228]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002ffa:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ffc:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_SAI_MspInit+0x1dc>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a38      	ldr	r2, [pc, #224]	; (80030e8 <HAL_SAI_MspInit+0x1e4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d15c      	bne.n	80030c6 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800300c:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_SAI_MspInit+0x1d0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_SAI_MspInit+0x1d4>)
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <HAL_SAI_MspInit+0x1d4>)
 800301a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800301e:	6453      	str	r3, [r2, #68]	; 0x44
 8003020:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_SAI_MspInit+0x1d4>)
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800302c:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_SAI_MspInit+0x1d0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	4a28      	ldr	r2, [pc, #160]	; (80030d4 <HAL_SAI_MspInit+0x1d0>)
 8003034:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003044:	2302      	movs	r3, #2
 8003046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003048:	230a      	movs	r3, #10
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4619      	mov	r1, r3
 8003052:	4826      	ldr	r0, [pc, #152]	; (80030ec <HAL_SAI_MspInit+0x1e8>)
 8003054:	f003 ff70 	bl	8006f38 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 800305a:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <HAL_SAI_MspInit+0x1f0>)
 800305c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 8003072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003076:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 800307a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800307e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 8003082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003086:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 800308a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308e:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 8003092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003096:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 800309a:	2200      	movs	r2, #0
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800309e:	4814      	ldr	r0, [pc, #80]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 80030a0:	f002 ff98 	bl	8005fd4 <HAL_DMA_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 80030aa:	f7ff f803 	bl	80020b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 80030b2:	671a      	str	r2, [r3, #112]	; 0x70
 80030b4:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 80030be:	66da      	str	r2, [r3, #108]	; 0x6c
 80030c0:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_SAI_MspInit+0x1ec>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80030c6:	bf00      	nop
 80030c8:	3728      	adds	r7, #40	; 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40015c04 	.word	0x40015c04
 80030d4:	20000330 	.word	0x20000330
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40022000 	.word	0x40022000
 80030e0:	2000b5d4 	.word	0x2000b5d4
 80030e4:	40026470 	.word	0x40026470
 80030e8:	40015c24 	.word	0x40015c24
 80030ec:	40021800 	.word	0x40021800
 80030f0:	2000b084 	.word	0x2000b084
 80030f4:	400264b8 	.word	0x400264b8

080030f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003108:	2200      	movs	r2, #0
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	2036      	movs	r0, #54	; 0x36
 800310e:	f002 fc79 	bl	8005a04 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003112:	2036      	movs	r0, #54	; 0x36
 8003114:	f002 fc92 	bl	8005a3c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_InitTick+0xa0>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_InitTick+0xa0>)
 800311e:	f043 0310 	orr.w	r3, r3, #16
 8003122:	6413      	str	r3, [r2, #64]	; 0x40
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_InitTick+0xa0>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003130:	f107 0210 	add.w	r2, r7, #16
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f008 fca6 	bl	800ba8c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003140:	f008 fc7c 	bl	800ba3c <HAL_RCC_GetPCLK1Freq>
 8003144:	4603      	mov	r3, r0
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <HAL_InitTick+0xa4>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	3b01      	subs	r3, #1
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_InitTick+0xa8>)
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <HAL_InitTick+0xac>)
 800315c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_InitTick+0xa8>)
 8003160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003164:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003166:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <HAL_InitTick+0xa8>)
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_InitTick+0xa8>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_InitTick+0xa8>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003178:	4809      	ldr	r0, [pc, #36]	; (80031a0 <HAL_InitTick+0xa8>)
 800317a:	f00b fb17 	bl	800e7ac <HAL_TIM_Base_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003184:	4806      	ldr	r0, [pc, #24]	; (80031a0 <HAL_InitTick+0xa8>)
 8003186:	f00b fb69 	bl	800e85c <HAL_TIM_Base_Start_IT>
 800318a:	4603      	mov	r3, r0
 800318c:	e000      	b.n	8003190 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	3730      	adds	r7, #48	; 0x30
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	431bde83 	.word	0x431bde83
 80031a0:	2000b810 	.word	0x2000b810
 80031a4:	40001000 	.word	0x40001000

080031a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <NMI_Handler+0x4>

080031ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b2:	e7fe      	b.n	80031b2 <HardFault_Handler+0x4>

080031b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <MemManage_Handler+0x4>

080031ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <BusFault_Handler+0x4>

080031c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <UsageFault_Handler+0x4>

080031c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80031d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031dc:	f004 f9b0 	bl	8007540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <TIM6_DAC_IRQHandler+0x10>)
 80031ea:	f00b fc06 	bl	800e9fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	2000b810 	.word	0x2000b810

080031f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <DMA2_Stream0_IRQHandler+0x10>)
 80031fe:	f003 f889 	bl	8006314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	2000afd8 	.word	0x2000afd8

0800320c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <DMA2_Stream1_IRQHandler+0x10>)
 8003212:	f003 f87f 	bl	8006314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2000b224 	.word	0x2000b224

08003220 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <DMA2_Stream4_IRQHandler+0x10>)
 8003226:	f003 f875 	bl	8006314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	2000b5d4 	.word	0x2000b5d4

08003234 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <OTG_FS_IRQHandler+0x10>)
 800323a:	f004 fc0f 	bl	8007a5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	2004bcb0 	.word	0x2004bcb0

08003248 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <DMA2_Stream7_IRQHandler+0x10>)
 800324e:	f003 f861 	bl	8006314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	2000b084 	.word	0x2000b084

0800325c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003260:	4802      	ldr	r0, [pc, #8]	; (800326c <DCMI_IRQHandler+0x10>)
 8003262:	f002 fde7 	bl	8005e34 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000b494 	.word	0x2000b494

08003270 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003274:	4802      	ldr	r0, [pc, #8]	; (8003280 <DMA2D_IRQHandler+0x10>)
 8003276:	f003 fc21 	bl	8006abc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000b6b8 	.word	0x2000b6b8

08003284 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003288:	4802      	ldr	r0, [pc, #8]	; (8003294 <QUADSPI_IRQHandler+0x10>)
 800328a:	f007 f83d 	bl	800a308 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	2000b7c4 	.word	0x2000b7c4

08003298 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e00a      	b.n	80032c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032aa:	f3af 8000 	nop.w
 80032ae:	4601      	mov	r1, r0
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	60ba      	str	r2, [r7, #8]
 80032b6:	b2ca      	uxtb	r2, r1
 80032b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	3301      	adds	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	dbf0      	blt.n	80032aa <_read+0x12>
	}

return len;
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e009      	b.n	80032f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	60ba      	str	r2, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f8ab 	bl	8003448 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dbf1      	blt.n	80032e4 <_write+0x12>
	}
	return len;
 8003300:	687b      	ldr	r3, [r7, #4]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_close>:

int _close(int file)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
	return -1;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003332:	605a      	str	r2, [r3, #4]
	return 0;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_isatty>:

int _isatty(int file)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
	return 1;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
	return 0;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <_sbrk+0x5c>)
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <_sbrk+0x60>)
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <_sbrk+0x64>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <_sbrk+0x64>)
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <_sbrk+0x68>)
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <_sbrk+0x64>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d207      	bcs.n	80033b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033a4:	f015 fba8 	bl	8018af8 <__errno>
 80033a8:	4603      	mov	r3, r0
 80033aa:	220c      	movs	r2, #12
 80033ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033b2:	e009      	b.n	80033c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <_sbrk+0x64>)
 80033c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20050000 	.word	0x20050000
 80033d4:	00000400 	.word	0x00000400
 80033d8:	20000334 	.word	0x20000334
 80033dc:	2004bfc8 	.word	0x2004bfc8

080033e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <SystemInit+0x20>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	4a05      	ldr	r2, [pc, #20]	; (8003400 <SystemInit+0x20>)
 80033ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8003408:	2201      	movs	r2, #1
 800340a:	2102      	movs	r1, #2
 800340c:	4802      	ldr	r0, [pc, #8]	; (8003418 <LED_On+0x14>)
 800340e:	f004 f863 	bl	80074d8 <HAL_GPIO_WritePin>
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40022000 	.word	0x40022000

0800341c <LED_Off>:

void LED_Off(){
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8003420:	2200      	movs	r2, #0
 8003422:	2102      	movs	r1, #2
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <LED_Off+0x14>)
 8003426:	f004 f857 	bl	80074d8 <HAL_GPIO_WritePin>
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40022000 	.word	0x40022000

08003434 <LED_Toggle>:

void LED_Toggle(){
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8003438:	2102      	movs	r1, #2
 800343a:	4802      	ldr	r0, [pc, #8]	; (8003444 <LED_Toggle+0x10>)
 800343c:	f004 f865 	bl	800750a <HAL_GPIO_TogglePin>

}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40022000 	.word	0x40022000

08003448 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8003450:	1d39      	adds	r1, r7, #4
 8003452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003456:	2201      	movs	r2, #1
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <__io_putchar+0x20>)
 800345a:	f00c fafb 	bl	800fa54 <HAL_UART_Transmit>
	return ch;
 800345e:	687b      	ldr	r3, [r7, #4]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000b4e4 	.word	0x2000b4e4

0800346c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af04      	add	r7, sp, #16
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4603      	mov	r3, r0
 800347c:	72fb      	strb	r3, [r7, #11]
 800347e:	460b      	mov	r3, r1
 8003480:	813b      	strh	r3, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	b299      	uxth	r1, r3
 800348e:	88f8      	ldrh	r0, [r7, #6]
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	4603      	mov	r3, r0
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f005 ffa8 	bl	80093f8 <HAL_I2C_Mem_Read>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	4619      	mov	r1, r3
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f832 	bl	8003520 <I2Cx_Error>
  }
  return status;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b08a      	sub	sp, #40	; 0x28
 80034ca:	af04      	add	r7, sp, #16
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	4608      	mov	r0, r1
 80034d0:	4611      	mov	r1, r2
 80034d2:	461a      	mov	r2, r3
 80034d4:	4603      	mov	r3, r0
 80034d6:	72fb      	strb	r3, [r7, #11]
 80034d8:	460b      	mov	r3, r1
 80034da:	813b      	strh	r3, [r7, #8]
 80034dc:	4613      	mov	r3, r2
 80034de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034e4:	7afb      	ldrb	r3, [r7, #11]
 80034e6:	b299      	uxth	r1, r3
 80034e8:	88f8      	ldrh	r0, [r7, #6]
 80034ea:	893a      	ldrh	r2, [r7, #8]
 80034ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f0:	9302      	str	r3, [sp, #8]
 80034f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	4603      	mov	r3, r0
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f005 fe67 	bl	80091d0 <HAL_I2C_Mem_Write>
 8003502:	4603      	mov	r3, r0
 8003504:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800350c:	7afb      	ldrb	r3, [r7, #11]
 800350e:	4619      	mov	r1, r3
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f805 	bl	8003520 <I2Cx_Error>
  }
  return status;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f005 fe1f 	bl	8009170 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f005 fd8c 	bl	8009050 <HAL_I2C_Init>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
 800354a:	460b      	mov	r3, r1
 800354c:	80bb      	strh	r3, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003556:	89fb      	ldrh	r3, [r7, #14]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	b29b      	uxth	r3, r3
 800355c:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800355e:	89fb      	ldrh	r3, [r7, #14]
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	b29b      	uxth	r3, r3
 8003564:	b21a      	sxth	r2, r3
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	b21b      	sxth	r3, r3
 800356a:	4313      	orrs	r3, r2
 800356c:	b21b      	sxth	r3, r3
 800356e:	b29b      	uxth	r3, r3
 8003570:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003572:	88ba      	ldrh	r2, [r7, #4]
 8003574:	79f9      	ldrb	r1, [r7, #7]
 8003576:	2302      	movs	r3, #2
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	1cbb      	adds	r3, r7, #2
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2302      	movs	r3, #2
 8003580:	4803      	ldr	r0, [pc, #12]	; (8003590 <AUDIO_I2C_Write+0x50>)
 8003582:	f7ff ffa0 	bl	80034c6 <I2Cx_WriteMultiple>
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000af8c 	.word	0x2000af8c

08003594 <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
 800359a:	4603      	mov	r3, r0
 800359c:	460a      	mov	r2, r1
 800359e:	71fb      	strb	r3, [r7, #7]
 80035a0:	4613      	mov	r3, r2
 80035a2:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	81bb      	strh	r3, [r7, #12]
 80035a8:	2300      	movs	r3, #0
 80035aa:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80035ac:	88ba      	ldrh	r2, [r7, #4]
 80035ae:	79f9      	ldrb	r1, [r7, #7]
 80035b0:	2302      	movs	r3, #2
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2302      	movs	r3, #2
 80035bc:	480a      	ldr	r0, [pc, #40]	; (80035e8 <AUDIO_I2C_Read+0x54>)
 80035be:	f7ff ff55 	bl	800346c <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80035c2:	89bb      	ldrh	r3, [r7, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80035c8:	89bb      	ldrh	r3, [r7, #12]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b21b      	sxth	r3, r3
 80035d8:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	81bb      	strh	r3, [r7, #12]

  return read_value;
 80035de:	89bb      	ldrh	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000af8c 	.word	0x2000af8c

080035ec <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	4603      	mov	r3, r0
 80035f4:	460a      	mov	r2, r1
 80035f6:	71fb      	strb	r3, [r7, #7]
 80035f8:	4613      	mov	r3, r2
 80035fa:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	b29a      	uxth	r2, r3
 8003600:	2301      	movs	r3, #1
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	1dbb      	adds	r3, r7, #6
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2301      	movs	r3, #1
 800360a:	2170      	movs	r1, #112	; 0x70
 800360c:	4803      	ldr	r0, [pc, #12]	; (800361c <TS_I2C_Write+0x30>)
 800360e:	f7ff ff5a 	bl	80034c6 <I2Cx_WriteMultiple>

}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	2000af8c 	.word	0x2000af8c

08003620 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <LCD_Init+0x44>)
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	2b02      	cmp	r3, #2
 800362a:	d002      	beq.n	8003632 <LCD_Init+0x12>
 800362c:	480e      	ldr	r0, [pc, #56]	; (8003668 <LCD_Init+0x48>)
 800362e:	f7fe fcdf 	bl	8001ff0 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <LCD_Init+0x4c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	4619      	mov	r1, r3
 800363a:	480a      	ldr	r0, [pc, #40]	; (8003664 <LCD_Init+0x44>)
 800363c:	f006 fbb8 	bl	8009db0 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8003640:	f000 f81a 	bl	8003678 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8003644:	480a      	ldr	r0, [pc, #40]	; (8003670 <LCD_Init+0x50>)
 8003646:	f000 f87d 	bl	8003744 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 800364a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800364e:	f000 f861 	bl	8003714 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003652:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003656:	f000 f82d 	bl	80036b4 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 800365a:	4806      	ldr	r0, [pc, #24]	; (8003674 <LCD_Init+0x54>)
 800365c:	f000 f842 	bl	80036e4 <LCD_SetFillColor>


}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}
 8003664:	2000b3a4 	.word	0x2000b3a4
 8003668:	0801a070 	.word	0x0801a070
 800366c:	2000000c 	.word	0x2000000c
 8003670:	2000001c 	.word	0x2000001c
 8003674:	ffff0000 	.word	0xffff0000

08003678 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <LCD_DisplayOn+0x30>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <LCD_DisplayOn+0x30>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800368c:	2201      	movs	r2, #1
 800368e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003692:	4806      	ldr	r0, [pc, #24]	; (80036ac <LCD_DisplayOn+0x34>)
 8003694:	f003 ff20 	bl	80074d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003698:	2201      	movs	r2, #1
 800369a:	2108      	movs	r1, #8
 800369c:	4804      	ldr	r0, [pc, #16]	; (80036b0 <LCD_DisplayOn+0x38>)
 800369e:	f003 ff1b 	bl	80074d8 <HAL_GPIO_WritePin>
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000b3a4 	.word	0x2000b3a4
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40022800 	.word	0x40022800

080036b4 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 80036bc:	4a07      	ldr	r2, [pc, #28]	; (80036dc <LCD_SetStrokeColor+0x28>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <LCD_SetStrokeColor+0x28>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa2c 	bl	8003b24 <ARGB888ToRGB565>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <LCD_SetStrokeColor+0x2c>)
 80036d2:	601a      	str	r2, [r3, #0]
#endif
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000338 	.word	0x20000338
 80036e0:	20000344 	.word	0x20000344

080036e4 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <LCD_SetFillColor+0x28>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 80036f2:	4b06      	ldr	r3, [pc, #24]	; (800370c <LCD_SetFillColor+0x28>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fa14 	bl	8003b24 <ARGB888ToRGB565>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <LCD_SetFillColor+0x2c>)
 8003702:	601a      	str	r2, [r3, #0]
#endif
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	2000033c 	.word	0x2000033c
 8003710:	20000348 	.word	0x20000348

08003714 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 800371c:	4a07      	ldr	r2, [pc, #28]	; (800373c <LCD_SetBackColor+0x28>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <LCD_SetBackColor+0x28>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f9fc 	bl	8003b24 <ARGB888ToRGB565>
 800372c:	4603      	mov	r3, r0
 800372e:	461a      	mov	r2, r3
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <LCD_SetBackColor+0x2c>)
 8003732:	601a      	str	r2, [r3, #0]
#endif
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000340 	.word	0x20000340
 8003740:	2000034c 	.word	0x2000034c

08003744 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <LCD_SetFont+0x1c>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000350 	.word	0x20000350

08003764 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	460a      	mov	r2, r1
 800376e:	80fb      	strh	r3, [r7, #6]
 8003770:	4613      	mov	r3, r2
 8003772:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <LCD_ErasePixel+0x3c>)
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <LCD_ErasePixel+0x40>)
 800377a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800377c:	88ba      	ldrh	r2, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	015b      	lsls	r3, r3, #5
 8003786:	461a      	mov	r2, r3
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	4413      	add	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	440b      	add	r3, r1
 8003790:	b282      	uxth	r2, r0
 8003792:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	2000034c 	.word	0x2000034c
 80037a4:	2000b3a4 	.word	0x2000b3a4

080037a8 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <LCD_Clear+0x28>)
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	4618      	mov	r0, r3
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <LCD_Clear+0x2c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	f44f 7288 	mov.w	r2, #272	; 0x110
 80037c0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80037c4:	f000 f976 	bl	8003ab4 <LL_FillBuffer>
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	2000b3a4 	.word	0x2000b3a4
 80037d4:	20000340 	.word	0x20000340

080037d8 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4604      	mov	r4, r0
 80037e0:	4608      	mov	r0, r1
 80037e2:	4611      	mov	r1, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	4623      	mov	r3, r4
 80037e8:	80fb      	strh	r3, [r7, #6]
 80037ea:	4603      	mov	r3, r0
 80037ec:	80bb      	strh	r3, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	70fb      	strb	r3, [r7, #3]
 80037f2:	4613      	mov	r3, r2
 80037f4:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 80037f6:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <LCD_DrawChar+0x5c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	3b20      	subs	r3, #32
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <LCD_DrawChar+0x5c>)
 8003802:	6809      	ldr	r1, [r1, #0]
 8003804:	88c9      	ldrh	r1, [r1, #6]
 8003806:	fb01 f103 	mul.w	r1, r1, r3
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <LCD_DrawChar+0x5c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	889b      	ldrh	r3, [r3, #4]
 8003810:	3307      	adds	r3, #7
 8003812:	2b00      	cmp	r3, #0
 8003814:	da00      	bge.n	8003818 <LCD_DrawChar+0x40>
 8003816:	3307      	adds	r3, #7
 8003818:	10db      	asrs	r3, r3, #3
 800381a:	fb03 f301 	mul.w	r3, r3, r1
 800381e:	441a      	add	r2, r3
 8003820:	78bb      	ldrb	r3, [r7, #2]
 8003822:	88b9      	ldrh	r1, [r7, #4]
 8003824:	88f8      	ldrh	r0, [r7, #6]
 8003826:	f000 f89d 	bl	8003964 <DrawChar>

}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bd90      	pop	{r4, r7, pc}
 8003832:	bf00      	nop
 8003834:	20000350 	.word	0x20000350

08003838 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	60ba      	str	r2, [r7, #8]
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	81fb      	strh	r3, [r7, #14]
 8003846:	460b      	mov	r3, r1
 8003848:	81bb      	strh	r3, [r7, #12]
 800384a:	4613      	mov	r3, r2
 800384c:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 800384e:	2301      	movs	r3, #1
 8003850:	83fb      	strh	r3, [r7, #30]
 8003852:	2300      	movs	r3, #0
 8003854:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 8003862:	e002      	b.n	800386a <LCD_DrawString+0x32>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	3301      	adds	r3, #1
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	617a      	str	r2, [r7, #20]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f6      	bne.n	8003864 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 8003876:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <LCD_DrawString+0x128>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	889b      	ldrh	r3, [r3, #4]
 800387c:	461a      	mov	r2, r3
 800387e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003882:	fb93 f3f2 	sdiv	r3, r3, r2
 8003886:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d014      	beq.n	80038b8 <LCD_DrawString+0x80>
 800388e:	2b03      	cmp	r3, #3
 8003890:	dc23      	bgt.n	80038da <LCD_DrawString+0xa2>
 8003892:	2b01      	cmp	r3, #1
 8003894:	d002      	beq.n	800389c <LCD_DrawString+0x64>
 8003896:	2b02      	cmp	r3, #2
 8003898:	d011      	beq.n	80038be <LCD_DrawString+0x86>
 800389a:	e01e      	b.n	80038da <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	4a2f      	ldr	r2, [pc, #188]	; (8003960 <LCD_DrawString+0x128>)
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	8892      	ldrh	r2, [r2, #4]
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	4413      	add	r3, r2
 80038b4:	83fb      	strh	r3, [r7, #30]
		break;
 80038b6:	e013      	b.n	80038e0 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	83fb      	strh	r3, [r7, #30]
		break;
 80038bc:	e010      	b.n	80038e0 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	4b26      	ldr	r3, [pc, #152]	; (8003960 <LCD_DrawString+0x128>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	889b      	ldrh	r3, [r3, #4]
 80038cc:	fb12 f303 	smulbb	r3, r2, r3
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	83fb      	strh	r3, [r7, #30]
		break;
 80038d8:	e002      	b.n	80038e0 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 80038da:	89fb      	ldrh	r3, [r7, #14]
 80038dc:	83fb      	strh	r3, [r7, #30]
		break;
 80038de:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 80038e0:	8bfb      	ldrh	r3, [r7, #30]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <LCD_DrawString+0xb6>
 80038e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	da16      	bge.n	800391c <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80038f2:	e013      	b.n	800391c <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038fc:	89b9      	ldrh	r1, [r7, #12]
 80038fe:	8bf8      	ldrh	r0, [r7, #30]
 8003900:	f7ff ff6a 	bl	80037d8 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <LCD_DrawString+0x128>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	889a      	ldrh	r2, [r3, #4]
 800390a:	8bfb      	ldrh	r3, [r7, #30]
 800390c:	4413      	add	r3, r2
 800390e:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
		i++;
 8003916:	8bbb      	ldrh	r3, [r7, #28]
 8003918:	3301      	adds	r3, #1
 800391a:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2da      	uxtb	r2, r3
 800392a:	8bbb      	ldrh	r3, [r7, #28]
 800392c:	490c      	ldr	r1, [pc, #48]	; (8003960 <LCD_DrawString+0x128>)
 800392e:	6809      	ldr	r1, [r1, #0]
 8003930:	8889      	ldrh	r1, [r1, #4]
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800393a:	b29b      	uxth	r3, r3
 800393c:	4908      	ldr	r1, [pc, #32]	; (8003960 <LCD_DrawString+0x128>)
 800393e:	6809      	ldr	r1, [r1, #0]
 8003940:	8889      	ldrh	r1, [r1, #4]
 8003942:	428b      	cmp	r3, r1
 8003944:	bfac      	ite	ge
 8003946:	2301      	movge	r3, #1
 8003948:	2300      	movlt	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	4013      	ands	r3, r2
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1cf      	bne.n	80038f4 <LCD_DrawString+0xbc>
	}
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000350 	.word	0x20000350

08003964 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b08b      	sub	sp, #44	; 0x2c
 8003968:	af00      	add	r7, sp, #0
 800396a:	60ba      	str	r2, [r7, #8]
 800396c:	461a      	mov	r2, r3
 800396e:	4603      	mov	r3, r0
 8003970:	81fb      	strh	r3, [r7, #14]
 8003972:	460b      	mov	r3, r1
 8003974:	81bb      	strh	r3, [r7, #12]
 8003976:	4613      	mov	r3, r2
 8003978:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 8003982:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <DrawChar+0x144>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	88db      	ldrh	r3, [r3, #6]
 8003988:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <DrawChar+0x144>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	889b      	ldrh	r3, [r3, #4]
 8003990:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 8003992:	8b3b      	ldrh	r3, [r7, #24]
 8003994:	3307      	adds	r3, #7
 8003996:	2b00      	cmp	r3, #0
 8003998:	da00      	bge.n	800399c <DrawChar+0x38>
 800399a:	3307      	adds	r3, #7
 800399c:	10db      	asrs	r3, r3, #3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	8b3b      	ldrh	r3, [r7, #24]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	e070      	b.n	8003a94 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80039b2:	8b3b      	ldrh	r3, [r7, #24]
 80039b4:	3307      	adds	r3, #7
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da00      	bge.n	80039bc <DrawChar+0x58>
 80039ba:	3307      	adds	r3, #7
 80039bc:	10db      	asrs	r3, r3, #3
 80039be:	461a      	mov	r2, r3
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	fb03 f302 	mul.w	r3, r3, r2
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	4413      	add	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 80039cc:	8b3b      	ldrh	r3, [r7, #24]
 80039ce:	3307      	adds	r3, #7
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da00      	bge.n	80039d6 <DrawChar+0x72>
 80039d4:	3307      	adds	r3, #7
 80039d6:	10db      	asrs	r3, r3, #3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d002      	beq.n	80039e2 <DrawChar+0x7e>
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d004      	beq.n	80039ea <DrawChar+0x86>
 80039e0:	e00c      	b.n	80039fc <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	61fb      	str	r3, [r7, #28]
			break;
 80039e8:	e016      	b.n	8003a18 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	3201      	adds	r2, #1
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61fb      	str	r3, [r7, #28]
			break;
 80039fa:	e00d      	b.n	8003a18 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	041a      	lsls	r2, r3, #16
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3301      	adds	r3, #1
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	3202      	adds	r2, #2
 8003a10:	7812      	ldrb	r2, [r2, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61fb      	str	r3, [r7, #28]
			break;
 8003a16:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	e030      	b.n	8003a80 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8003a1e:	8b3a      	ldrh	r2, [r7, #24]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	4413      	add	r3, r2
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <DrawChar+0x148>)
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <DrawChar+0x14c>)
 8003a40:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a42:	89ba      	ldrh	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	015b      	lsls	r3, r3, #5
 8003a4c:	461c      	mov	r4, r3
 8003a4e:	89fa      	ldrh	r2, [r7, #14]
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	4413      	add	r3, r2
 8003a54:	4423      	add	r3, r4
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	440b      	add	r3, r1
 8003a5a:	b282      	uxth	r2, r0
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e00c      	b.n	8003a7a <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d109      	bne.n	8003a7a <DrawChar+0x116>
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	89ba      	ldrh	r2, [r7, #12]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fe75 	bl	8003764 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	8b3b      	ldrh	r3, [r7, #24]
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d3ca      	bcc.n	8003a1e <DrawChar+0xba>
			}
		}
		Ypos++;
 8003a88:	89bb      	ldrh	r3, [r7, #12]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	3301      	adds	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
 8003a94:	8b7b      	ldrh	r3, [r7, #26]
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d38a      	bcc.n	80039b2 <DrawChar+0x4e>
	}

	__CleanDCache();
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	372c      	adds	r7, #44	; 0x2c
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd90      	pop	{r4, r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000350 	.word	0x20000350
 8003aac:	20000344 	.word	0x20000344
 8003ab0:	2000b3a4 	.word	0x2000b3a4

08003ab4 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <LL_FillBuffer+0x68>)
 8003ac4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ac8:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8003aca:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <LL_FillBuffer+0x68>)
 8003acc:	2202      	movs	r2, #2
 8003ace:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8003ad0:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <LL_FillBuffer+0x68>)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <LL_FillBuffer+0x68>)
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <LL_FillBuffer+0x6c>)
 8003ada:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003adc:	480f      	ldr	r0, [pc, #60]	; (8003b1c <LL_FillBuffer+0x68>)
 8003ade:	f002 fe8f 	bl	8006800 <HAL_DMA2D_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d115      	bne.n	8003b14 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8003ae8:	2100      	movs	r1, #0
 8003aea:	480c      	ldr	r0, [pc, #48]	; (8003b1c <LL_FillBuffer+0x68>)
 8003aec:	f003 f8f6 	bl	8006cdc <HAL_DMA2D_ConfigLayer>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10e      	bne.n	8003b14 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	69b9      	ldr	r1, [r7, #24]
 8003b00:	4806      	ldr	r0, [pc, #24]	; (8003b1c <LL_FillBuffer+0x68>)
 8003b02:	f002 fec7 	bl	8006894 <HAL_DMA2D_Start>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8003b0c:	210a      	movs	r1, #10
 8003b0e:	4803      	ldr	r0, [pc, #12]	; (8003b1c <LL_FillBuffer+0x68>)
 8003b10:	f002 feeb 	bl	80068ea <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	2000b6b8 	.word	0x2000b6b8
 8003b20:	4002b000 	.word	0x4002b000

08003b24 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8003b3c:	7d7b      	ldrb	r3, [r7, #21]
 8003b3e:	08db      	lsrs	r3, r3, #3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8003b4a:	7dbb      	ldrb	r3, [r7, #22]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	015b      	lsls	r3, r3, #5
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003b58:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	08db      	lsrs	r3, r3, #3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	02db      	lsls	r3, r3, #11
 8003b62:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8003b64:	89fa      	ldrh	r2, [r7, #14]
 8003b66:	8a3b      	ldrh	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	8a7b      	ldrh	r3, [r7, #18]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b29b      	uxth	r3, r3
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b090      	sub	sp, #64	; 0x40
 8003b84:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b8a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8003b8c:	23eb      	movs	r3, #235	; 0xeb
 8003b8e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003b90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b9a:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003ba0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8003ba6:	230a      	movs	r3, #10
 8003ba8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003baa:	2300      	movs	r3, #0
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003bbe:	463a      	mov	r2, r7
 8003bc0:	f107 0308 	add.w	r3, r7, #8
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4806      	ldr	r0, [pc, #24]	; (8003be0 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8003bc8:	f006 ff6c 	bl	800aaa4 <HAL_QSPI_MemoryMapped>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3740      	adds	r7, #64	; 0x40
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	2000b7c4 	.word	0x2000b7c4

08003be4 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b090      	sub	sp, #64	; 0x40
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003bf2:	2366      	movs	r3, #102	; 0x66
 8003bf4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f006 fd33 	bl	800a688 <HAL_QSPI_Command>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e019      	b.n	8003c60 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8003c2c:	2399      	movs	r3, #153	; 0x99
 8003c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f006 fd24 	bl	800a688 <HAL_QSPI_Command>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00a      	b.n	8003c60 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8c7 	bl	8003de2 <QSPI_AutoPollingMemReady>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3740      	adds	r7, #64	; 0x40
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b094      	sub	sp, #80	; 0x50
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003c76:	2385      	movs	r3, #133	; 0x85
 8003c78:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c94:	2300      	movs	r3, #0
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f006 fcee 	bl	800a688 <HAL_QSPI_Command>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e048      	b.n	8003d48 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cb6:	f107 030f 	add.w	r3, r7, #15
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f006 fdd6 	bl	800a872 <HAL_QSPI_Receive>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e03b      	b.n	8003d48 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f83d 	bl	8003d50 <QSPI_WriteEnable>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e033      	b.n	8003d48 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003ce0:	2381      	movs	r3, #129	; 0x81
 8003ce2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	b25a      	sxtb	r2, r3
 8003cee:	23f0      	movs	r3, #240	; 0xf0
 8003cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	4619      	mov	r1, r3
 8003d04:	230a      	movs	r3, #10
 8003d06:	408b      	lsls	r3, r1
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d12:	f107 0310 	add.w	r3, r7, #16
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f006 fcb3 	bl	800a688 <HAL_QSPI_Command>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e00d      	b.n	8003d48 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d2c:	f107 030f 	add.w	r3, r7, #15
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f006 fd04 	bl	800a744 <HAL_QSPI_Transmit>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3750      	adds	r7, #80	; 0x50
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b096      	sub	sp, #88	; 0x58
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003d5e:	2306      	movs	r3, #6
 8003d60:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d76:	2300      	movs	r3, #0
 8003d78:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d7e:	f107 0320 	add.w	r3, r7, #32
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f006 fc7d 	bl	800a688 <HAL_QSPI_Command>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e020      	b.n	8003dda <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003da8:	2310      	movs	r3, #16
 8003daa:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003db0:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003db2:	2305      	movs	r3, #5
 8003db4:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003db6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dbc:	f107 0208 	add.w	r2, r7, #8
 8003dc0:	f107 0120 	add.w	r1, r7, #32
 8003dc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f006 fdf4 	bl	800a9b6 <HAL_QSPI_AutoPolling>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3758      	adds	r7, #88	; 0x58
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b096      	sub	sp, #88	; 0x58
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003df2:	2305      	movs	r3, #5
 8003df4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003dfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e02:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e10:	2300      	movs	r3, #0
 8003e12:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003e20:	2301      	movs	r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003e24:	2310      	movs	r3, #16
 8003e26:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003e28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e2c:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003e2e:	f107 0208 	add.w	r2, r7, #8
 8003e32:	f107 0120 	add.w	r1, r7, #32
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f006 fdbc 	bl	800a9b6 <HAL_QSPI_AutoPolling>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3758      	adds	r7, #88	; 0x58
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e68:	d005      	beq.n	8003e76 <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003e6a:	887b      	ldrh	r3, [r7, #2]
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e70:	d001      	beq.n	8003e76 <start_Audio_Processing+0x22>
		Error_Handler();
 8003e72:	f7fe f91f 	bl	80020b4 <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <start_Audio_Processing+0xb4>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <start_Audio_Processing+0xb4>)
 8003e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e80:	6453      	str	r3, [r2, #68]	; 0x44
 8003e82:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <start_Audio_Processing+0xb4>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8003e8e:	2034      	movs	r0, #52	; 0x34
 8003e90:	f001 f820 	bl	8004ed4 <wm8994_ReadID>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f648 1294 	movw	r2, #35220	; 0x8994
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d001      	beq.n	8003ea2 <start_Audio_Processing+0x4e>
 8003e9e:	f7fe f909 	bl	80020b4 <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8003ea2:	2034      	movs	r0, #52	; 0x34
 8003ea4:	f001 f998 	bl	80051d8 <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	b299      	uxth	r1, r3
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	2264      	movs	r2, #100	; 0x64
 8003eb4:	2034      	movs	r0, #52	; 0x34
 8003eb6:	f000 f953 	bl	8004160 <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec0:	d104      	bne.n	8003ecc <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 8003ec2:	214b      	movs	r1, #75	; 0x4b
 8003ec4:	2034      	movs	r0, #52	; 0x34
 8003ec6:	f001 f815 	bl	8004ef4 <wm8994_SetVolume>
 8003eca:	e007      	b.n	8003edc <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8003ecc:	887b      	ldrh	r3, [r7, #2]
 8003ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed2:	d103      	bne.n	8003edc <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8003ed4:	21c8      	movs	r1, #200	; 0xc8
 8003ed6:	2034      	movs	r0, #52	; 0x34
 8003ed8:	f001 f80c 	bl	8004ef4 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8003edc:	2100      	movs	r1, #0
 8003ede:	2034      	movs	r0, #52	; 0x34
 8003ee0:	f001 f92c 	bl	800513c <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	4807      	ldr	r0, [pc, #28]	; (8003f0c <start_Audio_Processing+0xb8>)
 8003eee:	f009 f939 	bl	800d164 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68f9      	ldr	r1, [r7, #12]
 8003efa:	4805      	ldr	r0, [pc, #20]	; (8003f10 <start_Audio_Processing+0xbc>)
 8003efc:	f009 f882 	bl	800d004 <HAL_SAI_Transmit_DMA>

}
 8003f00:	bf00      	nop
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	2000af04 	.word	0x2000af04
 8003f10:	2000b130 	.word	0x2000b130

08003f14 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <HAL_SAI_ErrorCallback+0x30>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d103      	bne.n	8003f54 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8003f4c:	4808      	ldr	r0, [pc, #32]	; (8003f70 <HAL_SAI_ErrorCallback+0x34>)
 8003f4e:	f014 ff69 	bl	8018e24 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8003f52:	e006      	b.n	8003f62 <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <HAL_SAI_ErrorCallback+0x38>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d102      	bne.n	8003f62 <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8003f5c:	4806      	ldr	r0, [pc, #24]	; (8003f78 <HAL_SAI_ErrorCallback+0x3c>)
 8003f5e:	f014 ff61 	bl	8018e24 <puts>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000b130 	.word	0x2000b130
 8003f70:	0801a0c0 	.word	0x0801a0c0
 8003f74:	2000af04 	.word	0x2000af04
 8003f78:	0801a0d0 	.word	0x0801a0d0

08003f7c <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003f88:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003f8e:	4b29      	ldr	r3, [pc, #164]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f90:	2210      	movs	r2, #16
 8003f92:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fa4:	4923      	ldr	r1, [pc, #140]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fa6:	4824      	ldr	r0, [pc, #144]	; (8004038 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003fa8:	f00a fb59 	bl	800e65e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003fac:	2001      	movs	r0, #1
 8003fae:	f001 f9a1 	bl	80052f4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fba:	2210      	movs	r2, #16
 8003fbc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fce:	4919      	ldr	r1, [pc, #100]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fd0:	4819      	ldr	r0, [pc, #100]	; (8004038 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003fd2:	f00a fb44 	bl	800e65e <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fd8:	2203      	movs	r2, #3
 8003fda:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003fdc:	4b15      	ldr	r3, [pc, #84]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fde:	2210      	movs	r2, #16
 8003fe0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ff2:	4910      	ldr	r1, [pc, #64]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8003ff4:	4810      	ldr	r0, [pc, #64]	; (8004038 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8003ff6:	f00a fb32 	bl	800e65e <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003ffa:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003ffe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004002:	2204      	movs	r2, #4
 8004004:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004008:	2210      	movs	r2, #16
 800400a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800400e:	2201      	movs	r2, #1
 8004010:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004016:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800401c:	4905      	ldr	r1, [pc, #20]	; (8004034 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800401e:	4806      	ldr	r0, [pc, #24]	; (8004038 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004020:	f00a fb1d 	bl	800e65e <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4804      	ldr	r0, [pc, #16]	; (8004038 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004028:	f00a fb44 	bl	800e6b4 <HAL_SDRAM_ProgramRefreshRate>
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000354 	.word	0x20000354
 8004038:	2000b790 	.word	0x2000b790

0800403c <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8004040:	20c8      	movs	r0, #200	; 0xc8
 8004042:	f001 f957 	bl	80052f4 <HAL_Delay>

	TS_DisableIT();
 8004046:	f000 f802 	bl	800404e <TS_DisableIT>

}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}

0800404e <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004058:	2300      	movs	r3, #0
 800405a:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	4619      	mov	r1, r3
 8004060:	20a4      	movs	r0, #164	; 0xa4
 8004062:	f7ff fac3 	bl	80035ec <TS_I2C_Write>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8004074:	f001 fcfe 	bl	8005a74 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004078:	2301      	movs	r3, #1
 800407a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 800407c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8004080:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8004082:	231b      	movs	r3, #27
 8004084:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004086:	2303      	movs	r3, #3
 8004088:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004092:	2300      	movs	r3, #0
 8004094:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8004096:	2302      	movs	r3, #2
 8004098:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800409a:	2300      	movs	r3, #0
 800409c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800409e:	2300      	movs	r3, #0
 80040a0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80040a6:	463b      	mov	r3, r7
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 fd1b 	bl	8005ae4 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 80040b2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80040b6:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80040b8:	2317      	movs	r3, #23
 80040ba:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80040bc:	2303      	movs	r3, #3
 80040be:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80040cc:	2303      	movs	r3, #3
 80040ce:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80040d4:	2300      	movs	r3, #0
 80040d6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80040d8:	2300      	movs	r3, #0
 80040da:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80040dc:	463b      	mov	r3, r7
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 fd00 	bl	8005ae4 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 80040e8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80040ec:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80040ee:	2316      	movs	r3, #22
 80040f0:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80040f2:	2303      	movs	r3, #3
 80040f4:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80040fe:	2301      	movs	r3, #1
 8004100:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004102:	2300      	movs	r3, #0
 8004104:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004106:	2300      	movs	r3, #0
 8004108:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800410a:	2300      	movs	r3, #0
 800410c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800410e:	2301      	movs	r3, #1
 8004110:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004112:	463b      	mov	r3, r7
 8004114:	4618      	mov	r0, r3
 8004116:	f001 fce5 	bl	8005ae4 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800411a:	2301      	movs	r3, #1
 800411c:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 800411e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004122:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8004124:	2312      	movs	r3, #18
 8004126:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004128:	2303      	movs	r3, #3
 800412a:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004130:	2300      	movs	r3, #0
 8004132:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004134:	2300      	movs	r3, #0
 8004136:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004138:	2301      	movs	r3, #1
 800413a:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800413c:	2300      	movs	r3, #0
 800413e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004140:	2300      	movs	r3, #0
 8004142:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004144:	2300      	movs	r3, #0
 8004146:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004148:	463b      	mov	r3, r7
 800414a:	4618      	mov	r0, r3
 800414c:	f001 fcca 	bl	8005ae4 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004150:	2004      	movs	r0, #4
 8004152:	f001 fca7 	bl	8005aa4 <HAL_MPU_Enable>

}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	4603      	mov	r3, r0
 800416a:	81fb      	strh	r3, [r7, #14]
 800416c:	460b      	mov	r3, r1
 800416e:	81bb      	strh	r3, [r7, #12]
 8004170:	4613      	mov	r3, r2
 8004172:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004178:	89bb      	ldrh	r3, [r7, #12]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800417e:	89bb      	ldrh	r3, [r7, #12]
 8004180:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004184:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2203      	movs	r2, #3
 8004190:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004194:	4618      	mov	r0, r3
 8004196:	f001 f83f 	bl	8005218 <CODEC_IO_Write>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80041a4:	89fb      	ldrh	r3, [r7, #14]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2200      	movs	r2, #0
 80041aa:	f640 0117 	movw	r1, #2071	; 0x817
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 f832 	bl	8005218 <CODEC_IO_Write>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80041be:	89fb      	ldrh	r3, [r7, #14]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 f825 	bl	8005218 <CODEC_IO_Write>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461a      	mov	r2, r3
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80041d8:	89fb      	ldrh	r3, [r7, #14]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	226c      	movs	r2, #108	; 0x6c
 80041de:	2139      	movs	r1, #57	; 0x39
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 f819 	bl	8005218 <CODEC_IO_Write>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80041f0:	8afb      	ldrh	r3, [r7, #22]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2213      	movs	r2, #19
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 f80a 	bl	8005218 <CODEC_IO_Write>
 8004204:	4603      	mov	r3, r0
 8004206:	461a      	mov	r2, r3
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e00b      	b.n	8004228 <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004210:	89fb      	ldrh	r3, [r7, #14]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2203      	movs	r2, #3
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fffd 	bl	8005218 <CODEC_IO_Write>
 800421e:	4603      	mov	r3, r0
 8004220:	461a      	mov	r2, r3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8004228:	2032      	movs	r0, #50	; 0x32
 800422a:	f001 f863 	bl	80052f4 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800422e:	8b3b      	ldrh	r3, [r7, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 815f 	beq.w	80044f4 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8004236:	4bae      	ldr	r3, [pc, #696]	; (80044f0 <wm8994_Init+0x390>)
 8004238:	2201      	movs	r2, #1
 800423a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800423c:	8b3b      	ldrh	r3, [r7, #24]
 800423e:	2b03      	cmp	r3, #3
 8004240:	f000 808c 	beq.w	800435c <wm8994_Init+0x1fc>
 8004244:	2b03      	cmp	r3, #3
 8004246:	f300 8111 	bgt.w	800446c <wm8994_Init+0x30c>
 800424a:	2b01      	cmp	r3, #1
 800424c:	d002      	beq.n	8004254 <wm8994_Init+0xf4>
 800424e:	2b02      	cmp	r3, #2
 8004250:	d042      	beq.n	80042d8 <wm8994_Init+0x178>
 8004252:	e10b      	b.n	800446c <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004254:	89fb      	ldrh	r3, [r7, #14]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f640 420c 	movw	r2, #3084	; 0xc0c
 800425c:	2105      	movs	r1, #5
 800425e:	4618      	mov	r0, r3
 8004260:	f000 ffda 	bl	8005218 <CODEC_IO_Write>
 8004264:	4603      	mov	r3, r0
 8004266:	461a      	mov	r2, r3
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2200      	movs	r2, #0
 8004274:	f240 6101 	movw	r1, #1537	; 0x601
 8004278:	4618      	mov	r0, r3
 800427a:	f000 ffcd 	bl	8005218 <CODEC_IO_Write>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004288:	89fb      	ldrh	r3, [r7, #14]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2200      	movs	r2, #0
 800428e:	f240 6102 	movw	r1, #1538	; 0x602
 8004292:	4618      	mov	r0, r3
 8004294:	f000 ffc0 	bl	8005218 <CODEC_IO_Write>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80042a2:	89fb      	ldrh	r3, [r7, #14]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2202      	movs	r2, #2
 80042a8:	f240 6104 	movw	r1, #1540	; 0x604
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 ffb3 	bl	8005218 <CODEC_IO_Write>
 80042b2:	4603      	mov	r3, r0
 80042b4:	461a      	mov	r2, r3
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80042bc:	89fb      	ldrh	r3, [r7, #14]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2202      	movs	r2, #2
 80042c2:	f240 6105 	movw	r1, #1541	; 0x605
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 ffa6 	bl	8005218 <CODEC_IO_Write>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	61fb      	str	r3, [r7, #28]
      break;
 80042d6:	e110      	b.n	80044fa <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80042d8:	89fb      	ldrh	r3, [r7, #14]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f240 3203 	movw	r2, #771	; 0x303
 80042e0:	2105      	movs	r1, #5
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 ff98 	bl	8005218 <CODEC_IO_Write>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80042f2:	89fb      	ldrh	r3, [r7, #14]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2201      	movs	r2, #1
 80042f8:	f240 6101 	movw	r1, #1537	; 0x601
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 ff8b 	bl	8005218 <CODEC_IO_Write>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800430c:	89fb      	ldrh	r3, [r7, #14]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2201      	movs	r2, #1
 8004312:	f240 6102 	movw	r1, #1538	; 0x602
 8004316:	4618      	mov	r0, r3
 8004318:	f000 ff7e 	bl	8005218 <CODEC_IO_Write>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004326:	89fb      	ldrh	r3, [r7, #14]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2200      	movs	r2, #0
 800432c:	f240 6104 	movw	r1, #1540	; 0x604
 8004330:	4618      	mov	r0, r3
 8004332:	f000 ff71 	bl	8005218 <CODEC_IO_Write>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004340:	89fb      	ldrh	r3, [r7, #14]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2200      	movs	r2, #0
 8004346:	f240 6105 	movw	r1, #1541	; 0x605
 800434a:	4618      	mov	r0, r3
 800434c:	f000 ff64 	bl	8005218 <CODEC_IO_Write>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	61fb      	str	r3, [r7, #28]
      break;
 800435a:	e0ce      	b.n	80044fa <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800435c:	8afb      	ldrh	r3, [r7, #22]
 800435e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004362:	d141      	bne.n	80043e8 <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004364:	89fb      	ldrh	r3, [r7, #14]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f640 720f 	movw	r2, #3855	; 0xf0f
 800436c:	2105      	movs	r1, #5
 800436e:	4618      	mov	r0, r3
 8004370:	f000 ff52 	bl	8005218 <CODEC_IO_Write>
 8004374:	4603      	mov	r3, r0
 8004376:	461a      	mov	r2, r3
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2203      	movs	r2, #3
 8004384:	f240 6101 	movw	r1, #1537	; 0x601
 8004388:	4618      	mov	r0, r3
 800438a:	f000 ff45 	bl	8005218 <CODEC_IO_Write>
 800438e:	4603      	mov	r3, r0
 8004390:	461a      	mov	r2, r3
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004398:	89fb      	ldrh	r3, [r7, #14]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2203      	movs	r2, #3
 800439e:	f240 6102 	movw	r1, #1538	; 0x602
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 ff38 	bl	8005218 <CODEC_IO_Write>
 80043a8:	4603      	mov	r3, r0
 80043aa:	461a      	mov	r2, r3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4413      	add	r3, r2
 80043b0:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80043b2:	89fb      	ldrh	r3, [r7, #14]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2203      	movs	r2, #3
 80043b8:	f240 6104 	movw	r1, #1540	; 0x604
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 ff2b 	bl	8005218 <CODEC_IO_Write>
 80043c2:	4603      	mov	r3, r0
 80043c4:	461a      	mov	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2203      	movs	r2, #3
 80043d2:	f240 6105 	movw	r1, #1541	; 0x605
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 ff1e 	bl	8005218 <CODEC_IO_Write>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 80043e6:	e088      	b.n	80044fa <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80043e8:	89fb      	ldrh	r3, [r7, #14]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f640 720f 	movw	r2, #3855	; 0xf0f
 80043f0:	2105      	movs	r1, #5
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 ff10 	bl	8005218 <CODEC_IO_Write>
 80043f8:	4603      	mov	r3, r0
 80043fa:	461a      	mov	r2, r3
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004402:	89fb      	ldrh	r3, [r7, #14]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2201      	movs	r2, #1
 8004408:	f240 6101 	movw	r1, #1537	; 0x601
 800440c:	4618      	mov	r0, r3
 800440e:	f000 ff03 	bl	8005218 <CODEC_IO_Write>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800441c:	89fb      	ldrh	r3, [r7, #14]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2201      	movs	r2, #1
 8004422:	f240 6102 	movw	r1, #1538	; 0x602
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fef6 	bl	8005218 <CODEC_IO_Write>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004436:	89fb      	ldrh	r3, [r7, #14]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2202      	movs	r2, #2
 800443c:	f240 6104 	movw	r1, #1540	; 0x604
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fee9 	bl	8005218 <CODEC_IO_Write>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	4413      	add	r3, r2
 800444e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004450:	89fb      	ldrh	r3, [r7, #14]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2202      	movs	r2, #2
 8004456:	f240 6105 	movw	r1, #1541	; 0x605
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fedc 	bl	8005218 <CODEC_IO_Write>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	61fb      	str	r3, [r7, #28]
      break;
 800446a:	e046      	b.n	80044fa <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800446c:	89fb      	ldrh	r3, [r7, #14]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f240 3203 	movw	r2, #771	; 0x303
 8004474:	2105      	movs	r1, #5
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fece 	bl	8005218 <CODEC_IO_Write>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004486:	89fb      	ldrh	r3, [r7, #14]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2201      	movs	r2, #1
 800448c:	f240 6101 	movw	r1, #1537	; 0x601
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fec1 	bl	8005218 <CODEC_IO_Write>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80044a0:	89fb      	ldrh	r3, [r7, #14]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2201      	movs	r2, #1
 80044a6:	f240 6102 	movw	r1, #1538	; 0x602
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 feb4 	bl	8005218 <CODEC_IO_Write>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80044ba:	89fb      	ldrh	r3, [r7, #14]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2200      	movs	r2, #0
 80044c0:	f240 6104 	movw	r1, #1540	; 0x604
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fea7 	bl	8005218 <CODEC_IO_Write>
 80044ca:	4603      	mov	r3, r0
 80044cc:	461a      	mov	r2, r3
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80044d4:	89fb      	ldrh	r3, [r7, #14]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2200      	movs	r2, #0
 80044da:	f240 6105 	movw	r1, #1541	; 0x605
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fe9a 	bl	8005218 <CODEC_IO_Write>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	61fb      	str	r3, [r7, #28]
      break;
 80044ee:	e004      	b.n	80044fa <wm8994_Init+0x39a>
 80044f0:	20000364 	.word	0x20000364
    }
  }
  else
  {
    outputEnabled = 0;
 80044f4:	4b99      	ldr	r3, [pc, #612]	; (800475c <wm8994_Init+0x5fc>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80044fa:	8afb      	ldrh	r3, [r7, #22]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 81ab 	beq.w	8004858 <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 8004502:	4b97      	ldr	r3, [pc, #604]	; (8004760 <wm8994_Init+0x600>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004508:	8afb      	ldrh	r3, [r7, #22]
 800450a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800450e:	f000 8129 	beq.w	8004764 <wm8994_Init+0x604>
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004516:	f300 819b 	bgt.w	8004850 <wm8994_Init+0x6f0>
 800451a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451e:	d05a      	beq.n	80045d6 <wm8994_Init+0x476>
 8004520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004524:	f300 8194 	bgt.w	8004850 <wm8994_Init+0x6f0>
 8004528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452c:	f000 80c6 	beq.w	80046bc <wm8994_Init+0x55c>
 8004530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004534:	f040 818c 	bne.w	8004850 <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8004538:	89fb      	ldrh	r3, [r7, #14]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8004540:	2104      	movs	r1, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fe68 	bl	8005218 <CODEC_IO_Write>
 8004548:	4603      	mov	r3, r0
 800454a:	461a      	mov	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004552:	89fb      	ldrh	r3, [r7, #14]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	22db      	movs	r2, #219	; 0xdb
 8004558:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fe5b 	bl	8005218 <CODEC_IO_Write>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800456c:	89fb      	ldrh	r3, [r7, #14]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8004574:	2102      	movs	r1, #2
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fe4e 	bl	8005218 <CODEC_IO_Write>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004586:	89fb      	ldrh	r3, [r7, #14]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2202      	movs	r2, #2
 800458c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fe41 	bl	8005218 <CODEC_IO_Write>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80045a0:	89fb      	ldrh	r3, [r7, #14]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2202      	movs	r2, #2
 80045a6:	f240 6109 	movw	r1, #1545	; 0x609
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fe34 	bl	8005218 <CODEC_IO_Write>
 80045b0:	4603      	mov	r3, r0
 80045b2:	461a      	mov	r2, r3
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80045ba:	89fb      	ldrh	r3, [r7, #14]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	220e      	movs	r2, #14
 80045c0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fe27 	bl	8005218 <CODEC_IO_Write>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	61fb      	str	r3, [r7, #28]
      break;
 80045d4:	e143      	b.n	800485e <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80045d6:	89fb      	ldrh	r3, [r7, #14]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2211      	movs	r2, #17
 80045dc:	2128      	movs	r1, #40	; 0x28
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fe1a 	bl	8005218 <CODEC_IO_Write>
 80045e4:	4603      	mov	r3, r0
 80045e6:	461a      	mov	r2, r3
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80045ee:	89fb      	ldrh	r3, [r7, #14]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2220      	movs	r2, #32
 80045f4:	2129      	movs	r1, #41	; 0x29
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fe0e 	bl	8005218 <CODEC_IO_Write>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8004606:	89fb      	ldrh	r3, [r7, #14]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2220      	movs	r2, #32
 800460c:	212a      	movs	r1, #42	; 0x2a
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fe02 	bl	8005218 <CODEC_IO_Write>
 8004614:	4603      	mov	r3, r0
 8004616:	461a      	mov	r2, r3
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800461e:	89fb      	ldrh	r3, [r7, #14]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f240 3203 	movw	r2, #771	; 0x303
 8004626:	2104      	movs	r1, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fdf5 	bl	8005218 <CODEC_IO_Write>
 800462e:	4603      	mov	r3, r0
 8004630:	461a      	mov	r2, r3
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004638:	89fb      	ldrh	r3, [r7, #14]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	22db      	movs	r2, #219	; 0xdb
 800463e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fde8 	bl	8005218 <CODEC_IO_Write>
 8004648:	4603      	mov	r3, r0
 800464a:	461a      	mov	r2, r3
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	4413      	add	r3, r2
 8004650:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f246 3250 	movw	r2, #25424	; 0x6350
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fddb 	bl	8005218 <CODEC_IO_Write>
 8004662:	4603      	mov	r3, r0
 8004664:	461a      	mov	r2, r3
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2202      	movs	r2, #2
 8004672:	f240 6106 	movw	r1, #1542	; 0x606
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fdce 	bl	8005218 <CODEC_IO_Write>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004686:	89fb      	ldrh	r3, [r7, #14]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2202      	movs	r2, #2
 800468c:	f240 6107 	movw	r1, #1543	; 0x607
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fdc1 	bl	8005218 <CODEC_IO_Write>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80046a0:	89fb      	ldrh	r3, [r7, #14]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	220d      	movs	r2, #13
 80046a6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fdb4 	bl	8005218 <CODEC_IO_Write>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	61fb      	str	r3, [r7, #28]
      break;
 80046ba:	e0d0      	b.n	800485e <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80046bc:	89fb      	ldrh	r3, [r7, #14]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80046c4:	2104      	movs	r1, #4
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fda6 	bl	8005218 <CODEC_IO_Write>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80046d6:	89fb      	ldrh	r3, [r7, #14]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	22db      	movs	r2, #219	; 0xdb
 80046dc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fd99 	bl	8005218 <CODEC_IO_Write>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80046f0:	89fb      	ldrh	r3, [r7, #14]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f246 3250 	movw	r2, #25424	; 0x6350
 80046f8:	2102      	movs	r1, #2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fd8c 	bl	8005218 <CODEC_IO_Write>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800470a:	89fb      	ldrh	r3, [r7, #14]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2202      	movs	r2, #2
 8004710:	f240 6106 	movw	r1, #1542	; 0x606
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fd7f 	bl	8005218 <CODEC_IO_Write>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004724:	89fb      	ldrh	r3, [r7, #14]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2202      	movs	r2, #2
 800472a:	f240 6107 	movw	r1, #1543	; 0x607
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fd72 	bl	8005218 <CODEC_IO_Write>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800473e:	89fb      	ldrh	r3, [r7, #14]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	220d      	movs	r2, #13
 8004744:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fd65 	bl	8005218 <CODEC_IO_Write>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	61fb      	str	r3, [r7, #28]
      break;
 8004758:	e081      	b.n	800485e <wm8994_Init+0x6fe>
 800475a:	bf00      	nop
 800475c:	20000364 	.word	0x20000364
 8004760:	20000368 	.word	0x20000368
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8004764:	89fb      	ldrh	r3, [r7, #14]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f640 723c 	movw	r2, #3900	; 0xf3c
 800476c:	2104      	movs	r1, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fd52 	bl	8005218 <CODEC_IO_Write>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800477e:	89fb      	ldrh	r3, [r7, #14]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	22db      	movs	r2, #219	; 0xdb
 8004784:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd45 	bl	8005218 <CODEC_IO_Write>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	22db      	movs	r2, #219	; 0xdb
 800479e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fd38 	bl	8005218 <CODEC_IO_Write>
 80047a8:	4603      	mov	r3, r0
 80047aa:	461a      	mov	r2, r3
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	4413      	add	r3, r2
 80047b0:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80047b2:	89fb      	ldrh	r3, [r7, #14]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fd2b 	bl	8005218 <CODEC_IO_Write>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80047cc:	89fb      	ldrh	r3, [r7, #14]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2202      	movs	r2, #2
 80047d2:	f240 6106 	movw	r1, #1542	; 0x606
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fd1e 	bl	8005218 <CODEC_IO_Write>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80047e6:	89fb      	ldrh	r3, [r7, #14]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2202      	movs	r2, #2
 80047ec:	f240 6107 	movw	r1, #1543	; 0x607
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fd11 	bl	8005218 <CODEC_IO_Write>
 80047f6:	4603      	mov	r3, r0
 80047f8:	461a      	mov	r2, r3
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004800:	89fb      	ldrh	r3, [r7, #14]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2202      	movs	r2, #2
 8004806:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fd04 	bl	8005218 <CODEC_IO_Write>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800481a:	89fb      	ldrh	r3, [r7, #14]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2202      	movs	r2, #2
 8004820:	f240 6109 	movw	r1, #1545	; 0x609
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fcf7 	bl	8005218 <CODEC_IO_Write>
 800482a:	4603      	mov	r3, r0
 800482c:	461a      	mov	r2, r3
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004834:	89fb      	ldrh	r3, [r7, #14]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	220d      	movs	r2, #13
 800483a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fcea 	bl	8005218 <CODEC_IO_Write>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	4413      	add	r3, r2
 800484c:	61fb      	str	r3, [r7, #28]
      break;
 800484e:	e006      	b.n	800485e <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3301      	adds	r3, #1
 8004854:	61fb      	str	r3, [r7, #28]
      break;
 8004856:	e002      	b.n	800485e <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 8004858:	4ba4      	ldr	r3, [pc, #656]	; (8004aec <wm8994_Init+0x98c>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4aa3      	ldr	r2, [pc, #652]	; (8004af0 <wm8994_Init+0x990>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d079      	beq.n	800495a <wm8994_Init+0x7fa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4aa1      	ldr	r2, [pc, #644]	; (8004af0 <wm8994_Init+0x990>)
 800486a:	4293      	cmp	r3, r2
 800486c:	f200 80ad 	bhi.w	80049ca <wm8994_Init+0x86a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004876:	4293      	cmp	r3, r2
 8004878:	d061      	beq.n	800493e <wm8994_Init+0x7de>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004880:	4293      	cmp	r3, r2
 8004882:	f200 80a2 	bhi.w	80049ca <wm8994_Init+0x86a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f64a 4244 	movw	r2, #44100	; 0xac44
 800488c:	4293      	cmp	r3, r2
 800488e:	f000 808e 	beq.w	80049ae <wm8994_Init+0x84e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004898:	4293      	cmp	r3, r2
 800489a:	f200 8096 	bhi.w	80049ca <wm8994_Init+0x86a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80048a4:	d03d      	beq.n	8004922 <wm8994_Init+0x7c2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80048ac:	f200 808d 	bhi.w	80049ca <wm8994_Init+0x86a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f245 6222 	movw	r2, #22050	; 0x5622
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d06b      	beq.n	8004992 <wm8994_Init+0x832>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f245 6222 	movw	r2, #22050	; 0x5622
 80048c0:	4293      	cmp	r3, r2
 80048c2:	f200 8082 	bhi.w	80049ca <wm8994_Init+0x86a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80048cc:	d01b      	beq.n	8004906 <wm8994_Init+0x7a6>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80048d4:	d879      	bhi.n	80049ca <wm8994_Init+0x86a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80048dc:	d005      	beq.n	80048ea <wm8994_Init+0x78a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d046      	beq.n	8004976 <wm8994_Init+0x816>
 80048e8:	e06f      	b.n	80049ca <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80048ea:	89fb      	ldrh	r3, [r7, #14]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2203      	movs	r2, #3
 80048f0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fc8f 	bl	8005218 <CODEC_IO_Write>
 80048fa:	4603      	mov	r3, r0
 80048fc:	461a      	mov	r2, r3
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	61fb      	str	r3, [r7, #28]
    break;
 8004904:	e06f      	b.n	80049e6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004906:	89fb      	ldrh	r3, [r7, #14]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2233      	movs	r2, #51	; 0x33
 800490c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fc81 	bl	8005218 <CODEC_IO_Write>
 8004916:	4603      	mov	r3, r0
 8004918:	461a      	mov	r2, r3
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	61fb      	str	r3, [r7, #28]
    break;
 8004920:	e061      	b.n	80049e6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004922:	89fb      	ldrh	r3, [r7, #14]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2263      	movs	r2, #99	; 0x63
 8004928:	f44f 7104 	mov.w	r1, #528	; 0x210
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fc73 	bl	8005218 <CODEC_IO_Write>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
    break;
 800493c:	e053      	b.n	80049e6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800493e:	89fb      	ldrh	r3, [r7, #14]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2283      	movs	r2, #131	; 0x83
 8004944:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fc65 	bl	8005218 <CODEC_IO_Write>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
    break;
 8004958:	e045      	b.n	80049e6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800495a:	89fb      	ldrh	r3, [r7, #14]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	22a3      	movs	r2, #163	; 0xa3
 8004960:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fc57 	bl	8005218 <CODEC_IO_Write>
 800496a:	4603      	mov	r3, r0
 800496c:	461a      	mov	r2, r3
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	61fb      	str	r3, [r7, #28]
    break;
 8004974:	e037      	b.n	80049e6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004976:	89fb      	ldrh	r3, [r7, #14]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2213      	movs	r2, #19
 800497c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fc49 	bl	8005218 <CODEC_IO_Write>
 8004986:	4603      	mov	r3, r0
 8004988:	461a      	mov	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]
    break;
 8004990:	e029      	b.n	80049e6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004992:	89fb      	ldrh	r3, [r7, #14]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2243      	movs	r2, #67	; 0x43
 8004998:	f44f 7104 	mov.w	r1, #528	; 0x210
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fc3b 	bl	8005218 <CODEC_IO_Write>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	61fb      	str	r3, [r7, #28]
    break;
 80049ac:	e01b      	b.n	80049e6 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80049ae:	89fb      	ldrh	r3, [r7, #14]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2273      	movs	r2, #115	; 0x73
 80049b4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fc2d 	bl	8005218 <CODEC_IO_Write>
 80049be:	4603      	mov	r3, r0
 80049c0:	461a      	mov	r2, r3
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	4413      	add	r3, r2
 80049c6:	61fb      	str	r3, [r7, #28]
    break;
 80049c8:	e00d      	b.n	80049e6 <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80049ca:	89fb      	ldrh	r3, [r7, #14]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2283      	movs	r2, #131	; 0x83
 80049d0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fc1f 	bl	8005218 <CODEC_IO_Write>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	61fb      	str	r3, [r7, #28]
    break;
 80049e4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80049e6:	8afb      	ldrh	r3, [r7, #22]
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ec:	d10e      	bne.n	8004a0c <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 80049ee:	89fb      	ldrh	r3, [r7, #14]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	f244 0218 	movw	r2, #16408	; 0x4018
 80049f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fc0c 	bl	8005218 <CODEC_IO_Write>
 8004a00:	4603      	mov	r3, r0
 8004a02:	461a      	mov	r2, r3
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	e00d      	b.n	8004a28 <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f244 0210 	movw	r2, #16400	; 0x4010
 8004a14:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fbfd 	bl	8005218 <CODEC_IO_Write>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	461a      	mov	r2, r3
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8004a28:	89fb      	ldrh	r3, [r7, #14]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f240 3102 	movw	r1, #770	; 0x302
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fbf0 	bl	8005218 <CODEC_IO_Write>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8004a42:	89fb      	ldrh	r3, [r7, #14]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	220a      	movs	r2, #10
 8004a48:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fbe3 	bl	8005218 <CODEC_IO_Write>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461a      	mov	r2, r3
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2201      	movs	r2, #1
 8004a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fbd6 	bl	8005218 <CODEC_IO_Write>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8004a76:	8b3b      	ldrh	r3, [r7, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 817b 	beq.w	8004d74 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8004a7e:	8b3b      	ldrh	r3, [r7, #24]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d157      	bne.n	8004b34 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004a84:	89fb      	ldrh	r3, [r7, #14]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a8c:	212d      	movs	r1, #45	; 0x2d
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fbc2 	bl	8005218 <CODEC_IO_Write>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461a      	mov	r2, r3
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 8004a9e:	89fb      	ldrh	r3, [r7, #14]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aa6:	212e      	movs	r1, #46	; 0x2e
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fbb5 	bl	8005218 <CODEC_IO_Write>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <wm8994_Init+0x994>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01b      	beq.n	8004af8 <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8004ac0:	89fb      	ldrh	r3, [r7, #14]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8004ac8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fba3 	bl	8005218 <CODEC_IO_Write>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <wm8994_Init+0x994>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 8004ae2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004ae6:	f000 fc05 	bl	80052f4 <HAL_Delay>
 8004aea:	e016      	b.n	8004b1a <wm8994_Init+0x9ba>
 8004aec:	20000368 	.word	0x20000368
 8004af0:	00017700 	.word	0x00017700
 8004af4:	20000010 	.word	0x20000010
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8004af8:	89fb      	ldrh	r3, [r7, #14]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f248 1208 	movw	r2, #33032	; 0x8108
 8004b00:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fb87 	bl	8005218 <CODEC_IO_Write>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 8004b14:	2032      	movs	r0, #50	; 0x32
 8004b16:	f000 fbed 	bl	80052f4 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004b1a:	89fb      	ldrh	r3, [r7, #14]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fb77 	bl	8005218 <CODEC_IO_Write>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004b3c:	2103      	movs	r1, #3
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fb6a 	bl	8005218 <CODEC_IO_Write>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2200      	movs	r2, #0
 8004b54:	2122      	movs	r1, #34	; 0x22
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fb5e 	bl	8005218 <CODEC_IO_Write>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8004b66:	89fb      	ldrh	r3, [r7, #14]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2123      	movs	r1, #35	; 0x23
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb52 	bl	8005218 <CODEC_IO_Write>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8004b7e:	89fb      	ldrh	r3, [r7, #14]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004b86:	2136      	movs	r1, #54	; 0x36
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fb45 	bl	8005218 <CODEC_IO_Write>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	461a      	mov	r2, r3
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8004b98:	89fb      	ldrh	r3, [r7, #14]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f243 0203 	movw	r2, #12291	; 0x3003
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fb38 	bl	8005218 <CODEC_IO_Write>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004bb2:	8afb      	ldrh	r3, [r7, #22]
 8004bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb8:	d10d      	bne.n	8004bd6 <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8004bba:	89fb      	ldrh	r3, [r7, #14]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f240 2205 	movw	r2, #517	; 0x205
 8004bc2:	2151      	movs	r1, #81	; 0x51
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fb27 	bl	8005218 <CODEC_IO_Write>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	61fb      	str	r3, [r7, #28]
 8004bd4:	e00b      	b.n	8004bee <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 8004bd6:	89fb      	ldrh	r3, [r7, #14]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2205      	movs	r2, #5
 8004bdc:	2151      	movs	r1, #81	; 0x51
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fb1a 	bl	8005218 <CODEC_IO_Write>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8004bee:	8b7b      	ldrh	r3, [r7, #26]
 8004bf0:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8004bf4:	f043 0303 	orr.w	r3, r3, #3
 8004bf8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004bfa:	89fb      	ldrh	r3, [r7, #14]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	8b7a      	ldrh	r2, [r7, #26]
 8004c00:	2101      	movs	r1, #1
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fb08 	bl	8005218 <CODEC_IO_Write>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2222      	movs	r2, #34	; 0x22
 8004c18:	2160      	movs	r1, #96	; 0x60
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fafc 	bl	8005218 <CODEC_IO_Write>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8004c32:	214c      	movs	r1, #76	; 0x4c
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 faef 	bl	8005218 <CODEC_IO_Write>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 8004c44:	200f      	movs	r0, #15
 8004c46:	f000 fb55 	bl	80052f4 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2201      	movs	r2, #1
 8004c50:	212d      	movs	r1, #45	; 0x2d
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fae0 	bl	8005218 <CODEC_IO_Write>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004c62:	89fb      	ldrh	r3, [r7, #14]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2201      	movs	r2, #1
 8004c68:	212e      	movs	r1, #46	; 0x2e
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fad4 	bl	8005218 <CODEC_IO_Write>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004c7a:	89fb      	ldrh	r3, [r7, #14]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004c82:	2103      	movs	r1, #3
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fac7 	bl	8005218 <CODEC_IO_Write>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004c94:	89fb      	ldrh	r3, [r7, #14]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2233      	movs	r2, #51	; 0x33
 8004c9a:	2154      	movs	r1, #84	; 0x54
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fabb 	bl	8005218 <CODEC_IO_Write>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 8004cac:	f240 1001 	movw	r0, #257	; 0x101
 8004cb0:	f000 fb20 	bl	80052f4 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004cb4:	89fb      	ldrh	r3, [r7, #14]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	22ee      	movs	r2, #238	; 0xee
 8004cba:	2160      	movs	r1, #96	; 0x60
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 faab 	bl	8005218 <CODEC_IO_Write>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8004ccc:	89fb      	ldrh	r3, [r7, #14]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	22c0      	movs	r2, #192	; 0xc0
 8004cd2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fa9e 	bl	8005218 <CODEC_IO_Write>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8004ce6:	89fb      	ldrh	r3, [r7, #14]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	22c0      	movs	r2, #192	; 0xc0
 8004cec:	f240 6111 	movw	r1, #1553	; 0x611
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fa91 	bl	8005218 <CODEC_IO_Write>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004d00:	89fb      	ldrh	r3, [r7, #14]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2210      	movs	r2, #16
 8004d06:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fa84 	bl	8005218 <CODEC_IO_Write>
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8004d1a:	89fb      	ldrh	r3, [r7, #14]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	22c0      	movs	r2, #192	; 0xc0
 8004d20:	f240 6112 	movw	r1, #1554	; 0x612
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fa77 	bl	8005218 <CODEC_IO_Write>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8004d34:	89fb      	ldrh	r3, [r7, #14]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	22c0      	movs	r2, #192	; 0xc0
 8004d3a:	f240 6113 	movw	r1, #1555	; 0x613
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fa6a 	bl	8005218 <CODEC_IO_Write>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004d4e:	89fb      	ldrh	r3, [r7, #14]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2210      	movs	r2, #16
 8004d54:	f240 4122 	movw	r1, #1058	; 0x422
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fa5d 	bl	8005218 <CODEC_IO_Write>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004d68:	7afa      	ldrb	r2, [r7, #11]
 8004d6a:	89fb      	ldrh	r3, [r7, #14]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f8c0 	bl	8004ef4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80a6 	beq.w	8004ec8 <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004d7c:	8afb      	ldrh	r3, [r7, #22]
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d003      	beq.n	8004d8c <wm8994_Init+0xc2c>
 8004d84:	8afb      	ldrh	r3, [r7, #22]
 8004d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8a:	d12b      	bne.n	8004de4 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004d8c:	8b7b      	ldrh	r3, [r7, #26]
 8004d8e:	f043 0313 	orr.w	r3, r3, #19
 8004d92:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004d94:	89fb      	ldrh	r3, [r7, #14]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	8b7a      	ldrh	r2, [r7, #26]
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fa3b 	bl	8005218 <CODEC_IO_Write>
 8004da2:	4603      	mov	r3, r0
 8004da4:	461a      	mov	r2, r3
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004dac:	89fb      	ldrh	r3, [r7, #14]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2202      	movs	r2, #2
 8004db2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa2e 	bl	8005218 <CODEC_IO_Write>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8004dc6:	89fb      	ldrh	r3, [r7, #14]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004dce:	f240 4111 	movw	r1, #1041	; 0x411
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa20 	bl	8005218 <CODEC_IO_Write>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e06b      	b.n	8004ebc <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004de4:	8afb      	ldrh	r3, [r7, #22]
 8004de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dea:	d139      	bne.n	8004e60 <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004dec:	8b7b      	ldrh	r3, [r7, #26]
 8004dee:	f043 0313 	orr.w	r3, r3, #19
 8004df2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004df4:	89fb      	ldrh	r3, [r7, #14]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	8b7a      	ldrh	r2, [r7, #26]
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fa0b 	bl	8005218 <CODEC_IO_Write>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2202      	movs	r2, #2
 8004e12:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f9fe 	bl	8005218 <CODEC_IO_Write>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004e26:	89fb      	ldrh	r3, [r7, #14]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004e2e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f9f0 	bl	8005218 <CODEC_IO_Write>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 8004e42:	89fb      	ldrh	r3, [r7, #14]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004e4a:	f240 4111 	movw	r1, #1041	; 0x411
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f9e2 	bl	8005218 <CODEC_IO_Write>
 8004e54:	4603      	mov	r3, r0
 8004e56:	461a      	mov	r2, r3
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e02d      	b.n	8004ebc <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8004e60:	8afb      	ldrh	r3, [r7, #22]
 8004e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e66:	d003      	beq.n	8004e70 <wm8994_Init+0xd10>
 8004e68:	8afb      	ldrh	r3, [r7, #22]
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d125      	bne.n	8004ebc <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8004e70:	89fb      	ldrh	r3, [r7, #14]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	220b      	movs	r2, #11
 8004e76:	2118      	movs	r1, #24
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f9cd 	bl	8005218 <CODEC_IO_Write>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8004e88:	89fb      	ldrh	r3, [r7, #14]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	220b      	movs	r2, #11
 8004e8e:	211a      	movs	r1, #26
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 f9c1 	bl	8005218 <CODEC_IO_Write>
 8004e96:	4603      	mov	r3, r0
 8004e98:	461a      	mov	r2, r3
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004ea8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f9b3 	bl	8005218 <CODEC_IO_Write>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004ebc:	7afa      	ldrb	r2, [r7, #11]
 8004ebe:	89fb      	ldrh	r3, [r7, #14]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f816 	bl	8004ef4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop

08004ed4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fe fb55 	bl	8003594 <AUDIO_I2C_Read>
 8004eea:	4603      	mov	r3, r0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	460a      	mov	r2, r1
 8004efe:	80fb      	strh	r3, [r7, #6]
 8004f00:	4613      	mov	r3, r2
 8004f02:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004f08:	797b      	ldrb	r3, [r7, #5]
 8004f0a:	2b64      	cmp	r3, #100	; 0x64
 8004f0c:	d80b      	bhi.n	8004f26 <wm8994_SetVolume+0x32>
 8004f0e:	797a      	ldrb	r2, [r7, #5]
 8004f10:	4613      	mov	r3, r2
 8004f12:	019b      	lsls	r3, r3, #6
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	4a86      	ldr	r2, [pc, #536]	; (8005130 <wm8994_SetVolume+0x23c>)
 8004f18:	fb82 1203 	smull	r1, r2, r2, r3
 8004f1c:	1152      	asrs	r2, r2, #5
 8004f1e:	17db      	asrs	r3, r3, #31
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e000      	b.n	8004f28 <wm8994_SetVolume+0x34>
 8004f26:	2364      	movs	r3, #100	; 0x64
 8004f28:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004f2a:	4b82      	ldr	r3, [pc, #520]	; (8005134 <wm8994_SetVolume+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 809b 	beq.w	800506a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004f34:	7afb      	ldrb	r3, [r7, #11]
 8004f36:	2b3e      	cmp	r3, #62	; 0x3e
 8004f38:	d93d      	bls.n	8004fb6 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f8fc 	bl	800513c <wm8994_SetMute>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f240 127f 	movw	r2, #383	; 0x17f
 8004f54:	211c      	movs	r1, #28
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f95e 	bl	8005218 <CODEC_IO_Write>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f240 127f 	movw	r2, #383	; 0x17f
 8004f6e:	211d      	movs	r1, #29
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f951 	bl	8005218 <CODEC_IO_Write>
 8004f76:	4603      	mov	r3, r0
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f240 127f 	movw	r2, #383	; 0x17f
 8004f88:	2126      	movs	r1, #38	; 0x26
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f944 	bl	8005218 <CODEC_IO_Write>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f240 127f 	movw	r2, #383	; 0x17f
 8004fa2:	2127      	movs	r1, #39	; 0x27
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f937 	bl	8005218 <CODEC_IO_Write>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e059      	b.n	800506a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8004fb6:	797b      	ldrb	r3, [r7, #5]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f8bb 	bl	800513c <wm8994_SetMute>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e04c      	b.n	800506a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f8b1 	bl	800513c <wm8994_SetMute>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	b2d8      	uxtb	r0, r3
 8004fe6:	7afb      	ldrb	r3, [r7, #11]
 8004fe8:	b21b      	sxth	r3, r3
 8004fea:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004fee:	b21b      	sxth	r3, r3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	211c      	movs	r1, #28
 8004ff6:	f000 f90f 	bl	8005218 <CODEC_IO_Write>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	b2d8      	uxtb	r0, r3
 8005008:	7afb      	ldrb	r3, [r7, #11]
 800500a:	b21b      	sxth	r3, r3
 800500c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005010:	b21b      	sxth	r3, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	211d      	movs	r1, #29
 8005018:	f000 f8fe 	bl	8005218 <CODEC_IO_Write>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	b2d8      	uxtb	r0, r3
 800502a:	7afb      	ldrb	r3, [r7, #11]
 800502c:	b21b      	sxth	r3, r3
 800502e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005032:	b21b      	sxth	r3, r3
 8005034:	b29b      	uxth	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	2126      	movs	r1, #38	; 0x26
 800503a:	f000 f8ed 	bl	8005218 <CODEC_IO_Write>
 800503e:	4603      	mov	r3, r0
 8005040:	461a      	mov	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	b2d8      	uxtb	r0, r3
 800504c:	7afb      	ldrb	r3, [r7, #11]
 800504e:	b21b      	sxth	r3, r3
 8005050:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005054:	b21b      	sxth	r3, r3
 8005056:	b29b      	uxth	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	2127      	movs	r1, #39	; 0x27
 800505c:	f000 f8dc 	bl	8005218 <CODEC_IO_Write>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800506a:	4b33      	ldr	r3, [pc, #204]	; (8005138 <wm8994_SetVolume+0x244>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d059      	beq.n	8005126 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005072:	797b      	ldrb	r3, [r7, #5]
 8005074:	2b63      	cmp	r3, #99	; 0x63
 8005076:	d80c      	bhi.n	8005092 <wm8994_SetVolume+0x19e>
 8005078:	797a      	ldrb	r2, [r7, #5]
 800507a:	4613      	mov	r3, r2
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <wm8994_SetVolume+0x23c>)
 8005084:	fb82 1203 	smull	r1, r2, r2, r3
 8005088:	1152      	asrs	r2, r2, #5
 800508a:	17db      	asrs	r3, r3, #31
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e000      	b.n	8005094 <wm8994_SetVolume+0x1a0>
 8005092:	23ef      	movs	r3, #239	; 0xef
 8005094:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	b2d8      	uxtb	r0, r3
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	b21b      	sxth	r3, r3
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	b21b      	sxth	r3, r3
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050ac:	f000 f8b4 	bl	8005218 <CODEC_IO_Write>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	b2d8      	uxtb	r0, r3
 80050be:	7afb      	ldrb	r3, [r7, #11]
 80050c0:	b21b      	sxth	r3, r3
 80050c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c6:	b21b      	sxth	r3, r3
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	f240 4101 	movw	r1, #1025	; 0x401
 80050d0:	f000 f8a2 	bl	8005218 <CODEC_IO_Write>
 80050d4:	4603      	mov	r3, r0
 80050d6:	461a      	mov	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	b2d8      	uxtb	r0, r3
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	b21b      	sxth	r3, r3
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	b21b      	sxth	r3, r3
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	f240 4104 	movw	r1, #1028	; 0x404
 80050f4:	f000 f890 	bl	8005218 <CODEC_IO_Write>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	b2d8      	uxtb	r0, r3
 8005106:	7afb      	ldrb	r3, [r7, #11]
 8005108:	b21b      	sxth	r3, r3
 800510a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510e:	b21b      	sxth	r3, r3
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	f240 4105 	movw	r1, #1029	; 0x405
 8005118:	f000 f87e 	bl	8005218 <CODEC_IO_Write>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	51eb851f 	.word	0x51eb851f
 8005134:	20000364 	.word	0x20000364
 8005138:	20000368 	.word	0x20000368

0800513c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 800514c:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <wm8994_SetMute+0x98>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d039      	beq.n	80051c8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d11c      	bne.n	8005194 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005162:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f856 	bl	8005218 <CODEC_IO_Write>
 800516c:	4603      	mov	r3, r0
 800516e:	461a      	mov	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517e:	f240 4122 	movw	r1, #1058	; 0x422
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f848 	bl	8005218 <CODEC_IO_Write>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e019      	b.n	80051c8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2210      	movs	r2, #16
 800519a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f83a 	bl	8005218 <CODEC_IO_Write>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2210      	movs	r2, #16
 80051b4:	f240 4122 	movw	r1, #1058	; 0x422
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 f82d 	bl	8005218 <CODEC_IO_Write>
 80051be:	4603      	mov	r3, r0
 80051c0:	461a      	mov	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80051c8:	68fb      	ldr	r3, [r7, #12]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000364 	.word	0x20000364

080051d8 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2200      	movs	r2, #0
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f812 	bl	8005218 <CODEC_IO_Write>
 80051f4:	4603      	mov	r3, r0
 80051f6:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <wm8994_Reset+0x38>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <wm8994_Reset+0x3c>)
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

  return counter;
 8005204:	68fb      	ldr	r3, [r7, #12]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000364 	.word	0x20000364
 8005214:	20000368 	.word	0x20000368

08005218 <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
 8005222:	460b      	mov	r3, r1
 8005224:	80bb      	strh	r3, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	88b9      	ldrh	r1, [r7, #4]
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe f983 	bl	8003540 <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	b2db      	uxtb	r3, r3
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800524c:	480d      	ldr	r0, [pc, #52]	; (8005284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800524e:	490e      	ldr	r1, [pc, #56]	; (8005288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005250:	4a0e      	ldr	r2, [pc, #56]	; (800528c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005254:	e002      	b.n	800525c <LoopCopyDataInit>

08005256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800525a:	3304      	adds	r3, #4

0800525c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800525c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800525e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005260:	d3f9      	bcc.n	8005256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005262:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005264:	4c0b      	ldr	r4, [pc, #44]	; (8005294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005268:	e001      	b.n	800526e <LoopFillZerobss>

0800526a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800526a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800526c:	3204      	adds	r2, #4

0800526e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800526e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005270:	d3fb      	bcc.n	800526a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005272:	f7fe f8b5 	bl	80033e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005276:	f013 fc45 	bl	8018b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800527a:	f7fb fbbf 	bl	80009fc <main>
  bx  lr    
 800527e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005280:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005288:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 800528c:	0802fd00 	.word	0x0802fd00
  ldr r2, =_sbss
 8005290:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8005294:	2004bfc4 	.word	0x2004bfc4

08005298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005298:	e7fe      	b.n	8005298 <ADC_IRQHandler>

0800529a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800529e:	2003      	movs	r0, #3
 80052a0:	f000 fba5 	bl	80059ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052a4:	2000      	movs	r0, #0
 80052a6:	f7fd ff27 	bl	80030f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052aa:	f7fc ff0b 	bl	80020c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_IncTick+0x20>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_IncTick+0x24>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4413      	add	r3, r2
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <HAL_IncTick+0x24>)
 80052c6:	6013      	str	r3, [r2, #0]
}
 80052c8:	bf00      	nop
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000028 	.word	0x20000028
 80052d8:	2004b45c 	.word	0x2004b45c

080052dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return uwTick;
 80052e0:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <HAL_GetTick+0x14>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	2004b45c 	.word	0x2004b45c

080052f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052fc:	f7ff ffee 	bl	80052dc <HAL_GetTick>
 8005300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800530c:	d005      	beq.n	800531a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <HAL_Delay+0x44>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800531a:	bf00      	nop
 800531c:	f7ff ffde 	bl	80052dc <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d8f7      	bhi.n	800531c <HAL_Delay+0x28>
  {
  }
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000028 	.word	0x20000028

0800533c <HAL_ADC_Init>:
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_ADC_Init+0x16>
 800534e:	2301      	movs	r3, #1
 8005350:	e031      	b.n	80053b6 <HAL_ADC_Init+0x7a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <HAL_ADC_Init+0x32>
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fc feda 	bl	8002114 <HAL_ADC_MspInit>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	645a      	str	r2, [r3, #68]	; 0x44
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	d116      	bne.n	80053a8 <HAL_ADC_Init+0x6c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <HAL_ADC_Init+0x84>)
 8005380:	4013      	ands	r3, r2
 8005382:	f043 0202 	orr.w	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f964 	bl	8005658 <ADC_Init>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	645a      	str	r2, [r3, #68]	; 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40
 80053a6:	e001      	b.n	80053ac <HAL_ADC_Init+0x70>
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	ffffeefd 	.word	0xffffeefd

080053c4 <HAL_ADC_ConfigChannel>:
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x1c>
 80053dc:	2302      	movs	r3, #2
 80053de:	e12a      	b.n	8005636 <HAL_ADC_ConfigChannel+0x272>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b09      	cmp	r3, #9
 80053ee:	d93a      	bls.n	8005466 <HAL_ADC_ConfigChannel+0xa2>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f8:	d035      	beq.n	8005466 <HAL_ADC_ConfigChannel+0xa2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68d9      	ldr	r1, [r3, #12]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	4613      	mov	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4413      	add	r3, r2
 800540e:	3b1e      	subs	r3, #30
 8005410:	2207      	movs	r2, #7
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43da      	mvns	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	400a      	ands	r2, r1
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a87      	ldr	r2, [pc, #540]	; (8005644 <HAL_ADC_ConfigChannel+0x280>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10a      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x7c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68d9      	ldr	r1, [r3, #12]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	061a      	lsls	r2, r3, #24
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	e035      	b.n	80054ac <HAL_ADC_ConfigChannel+0xe8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68d9      	ldr	r1, [r3, #12]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	4618      	mov	r0, r3
 8005452:	4603      	mov	r3, r0
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4403      	add	r3, r0
 8005458:	3b1e      	subs	r3, #30
 800545a:	409a      	lsls	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	60da      	str	r2, [r3, #12]
 8005464:	e022      	b.n	80054ac <HAL_ADC_ConfigChannel+0xe8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6919      	ldr	r1, [r3, #16]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	4613      	mov	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	2207      	movs	r2, #7
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43da      	mvns	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	400a      	ands	r2, r1
 8005488:	611a      	str	r2, [r3, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6919      	ldr	r1, [r3, #16]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	4618      	mov	r0, r3
 800549c:	4603      	mov	r3, r0
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4403      	add	r3, r0
 80054a2:	409a      	lsls	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	611a      	str	r2, [r3, #16]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	d824      	bhi.n	80054fe <HAL_ADC_ConfigChannel+0x13a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	3b05      	subs	r3, #5
 80054c6:	221f      	movs	r2, #31
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43da      	mvns	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	400a      	ands	r2, r1
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	4618      	mov	r0, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	3b05      	subs	r3, #5
 80054f0:	fa00 f203 	lsl.w	r2, r0, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34
 80054fc:	e04c      	b.n	8005598 <HAL_ADC_ConfigChannel+0x1d4>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b0c      	cmp	r3, #12
 8005504:	d824      	bhi.n	8005550 <HAL_ADC_ConfigChannel+0x18c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	3b23      	subs	r3, #35	; 0x23
 8005518:	221f      	movs	r2, #31
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43da      	mvns	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	400a      	ands	r2, r1
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	4618      	mov	r0, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	3b23      	subs	r3, #35	; 0x23
 8005542:	fa00 f203 	lsl.w	r2, r0, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
 800554e:	e023      	b.n	8005598 <HAL_ADC_ConfigChannel+0x1d4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	3b41      	subs	r3, #65	; 0x41
 8005562:	221f      	movs	r2, #31
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43da      	mvns	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	400a      	ands	r2, r1
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	4618      	mov	r0, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	3b41      	subs	r3, #65	; 0x41
 800558c:	fa00 f203 	lsl.w	r2, r0, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2a      	ldr	r2, [pc, #168]	; (8005648 <HAL_ADC_ConfigChannel+0x284>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10a      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x1f4>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055aa:	d105      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x1f4>
 80055ac:	4b27      	ldr	r3, [pc, #156]	; (800564c <HAL_ADC_ConfigChannel+0x288>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a26      	ldr	r2, [pc, #152]	; (800564c <HAL_ADC_ConfigChannel+0x288>)
 80055b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80055b6:	6053      	str	r3, [r2, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <HAL_ADC_ConfigChannel+0x284>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d109      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x212>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b12      	cmp	r3, #18
 80055c8:	d105      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x212>
 80055ca:	4b20      	ldr	r3, [pc, #128]	; (800564c <HAL_ADC_ConfigChannel+0x288>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4a1f      	ldr	r2, [pc, #124]	; (800564c <HAL_ADC_ConfigChannel+0x288>)
 80055d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055d4:	6053      	str	r3, [r2, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1b      	ldr	r2, [pc, #108]	; (8005648 <HAL_ADC_ConfigChannel+0x284>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d125      	bne.n	800562c <HAL_ADC_ConfigChannel+0x268>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a17      	ldr	r2, [pc, #92]	; (8005644 <HAL_ADC_ConfigChannel+0x280>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <HAL_ADC_ConfigChannel+0x22e>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b11      	cmp	r3, #17
 80055f0:	d11c      	bne.n	800562c <HAL_ADC_ConfigChannel+0x268>
 80055f2:	4b16      	ldr	r3, [pc, #88]	; (800564c <HAL_ADC_ConfigChannel+0x288>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4a15      	ldr	r2, [pc, #84]	; (800564c <HAL_ADC_ConfigChannel+0x288>)
 80055f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055fc:	6053      	str	r3, [r2, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a10      	ldr	r2, [pc, #64]	; (8005644 <HAL_ADC_ConfigChannel+0x280>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d111      	bne.n	800562c <HAL_ADC_ConfigChannel+0x268>
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_ADC_ConfigChannel+0x28c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a11      	ldr	r2, [pc, #68]	; (8005654 <HAL_ADC_ConfigChannel+0x290>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	0c9a      	lsrs	r2, r3, #18
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	e002      	b.n	8005626 <HAL_ADC_ConfigChannel+0x262>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b01      	subs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f9      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x25c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005634:	2300      	movs	r3, #0
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	10000012 	.word	0x10000012
 8005648:	40012000 	.word	0x40012000
 800564c:	40012300 	.word	0x40012300
 8005650:	20000008 	.word	0x20000008
 8005654:	431bde83 	.word	0x431bde83

08005658 <ADC_Init>:
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	4b78      	ldr	r3, [pc, #480]	; (8005844 <ADC_Init+0x1ec>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a77      	ldr	r2, [pc, #476]	; (8005844 <ADC_Init+0x1ec>)
 8005666:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800566a:	6053      	str	r3, [r2, #4]
 800566c:	4b75      	ldr	r3, [pc, #468]	; (8005844 <ADC_Init+0x1ec>)
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4973      	ldr	r1, [pc, #460]	; (8005844 <ADC_Init+0x1ec>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6859      	ldr	r1, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	021a      	lsls	r2, r3, #8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6899      	ldr	r1, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	4a58      	ldr	r2, [pc, #352]	; (8005848 <ADC_Init+0x1f0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <ADC_Init+0xda>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6899      	ldr	r1, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6899      	ldr	r1, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	609a      	str	r2, [r3, #8]
 8005730:	e00f      	b.n	8005752 <ADC_Init+0xfa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005740:	609a      	str	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005750:	609a      	str	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0202 	bic.w	r2, r2, #2
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6899      	ldr	r1, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	005a      	lsls	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <ADC_Init+0x160>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6859      	ldr	r1, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	3b01      	subs	r3, #1
 80057ac:	035a      	lsls	r2, r3, #13
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	e007      	b.n	80057c8 <ADC_Init+0x170>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	051a      	lsls	r2, r3, #20
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057fc:	609a      	str	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6899      	ldr	r1, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800580a:	025a      	lsls	r2, r3, #9
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	029a      	lsls	r2, r3, #10
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	40012300 	.word	0x40012300
 8005848:	0f000001 	.word	0x0f000001

0800584c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <__NVIC_SetPriorityGrouping+0x40>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005868:	4013      	ands	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <__NVIC_SetPriorityGrouping+0x44>)
 8005876:	4313      	orrs	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800587a:	4a04      	ldr	r2, [pc, #16]	; (800588c <__NVIC_SetPriorityGrouping+0x40>)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	60d3      	str	r3, [r2, #12]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	e000ed00 	.word	0xe000ed00
 8005890:	05fa0000 	.word	0x05fa0000

08005894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <__NVIC_GetPriorityGrouping+0x18>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	0a1b      	lsrs	r3, r3, #8
 800589e:	f003 0307 	and.w	r3, r3, #7
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	e000ed00 	.word	0xe000ed00

080058b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	db0b      	blt.n	80058da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	f003 021f 	and.w	r2, r3, #31
 80058c8:	4907      	ldr	r1, [pc, #28]	; (80058e8 <__NVIC_EnableIRQ+0x38>)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2001      	movs	r0, #1
 80058d2:	fa00 f202 	lsl.w	r2, r0, r2
 80058d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	e000e100 	.word	0xe000e100

080058ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	db12      	blt.n	8005924 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	f003 021f 	and.w	r2, r3, #31
 8005904:	490a      	ldr	r1, [pc, #40]	; (8005930 <__NVIC_DisableIRQ+0x44>)
 8005906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	2001      	movs	r0, #1
 800590e:	fa00 f202 	lsl.w	r2, r0, r2
 8005912:	3320      	adds	r3, #32
 8005914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005918:	f3bf 8f4f 	dsb	sy
}
 800591c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800591e:	f3bf 8f6f 	isb	sy
}
 8005922:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	e000e100 	.word	0xe000e100

08005934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	6039      	str	r1, [r7, #0]
 800593e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	db0a      	blt.n	800595e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	490c      	ldr	r1, [pc, #48]	; (8005980 <__NVIC_SetPriority+0x4c>)
 800594e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005952:	0112      	lsls	r2, r2, #4
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	440b      	add	r3, r1
 8005958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800595c:	e00a      	b.n	8005974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	4908      	ldr	r1, [pc, #32]	; (8005984 <__NVIC_SetPriority+0x50>)
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	3b04      	subs	r3, #4
 800596c:	0112      	lsls	r2, r2, #4
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	440b      	add	r3, r1
 8005972:	761a      	strb	r2, [r3, #24]
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	e000e100 	.word	0xe000e100
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005988:	b480      	push	{r7}
 800598a:	b089      	sub	sp, #36	; 0x24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f1c3 0307 	rsb	r3, r3, #7
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	bf28      	it	cs
 80059a6:	2304      	movcs	r3, #4
 80059a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3304      	adds	r3, #4
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d902      	bls.n	80059b8 <NVIC_EncodePriority+0x30>
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3b03      	subs	r3, #3
 80059b6:	e000      	b.n	80059ba <NVIC_EncodePriority+0x32>
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43da      	mvns	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	401a      	ands	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	fa01 f303 	lsl.w	r3, r1, r3
 80059da:	43d9      	mvns	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e0:	4313      	orrs	r3, r2
         );
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3724      	adds	r7, #36	; 0x24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_NVIC_SetPriorityGrouping>:
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff ff28 	bl	800584c <__NVIC_SetPriorityGrouping>

 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_NVIC_SetPriority>:
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	73fb      	strb	r3, [r7, #15]
  
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
 8005a16:	f7ff ff3d 	bl	8005894 <__NVIC_GetPriorityGrouping>
 8005a1a:	6178      	str	r0, [r7, #20]
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	6978      	ldr	r0, [r7, #20]
 8005a22:	f7ff ffb1 	bl	8005988 <NVIC_EncodePriority>
 8005a26:	4602      	mov	r2, r0
 8005a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff ff80 	bl	8005934 <__NVIC_SetPriority>

 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ff30 	bl	80058b0 <__NVIC_EnableIRQ>

 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff40 	bl	80058ec <__NVIC_DisableIRQ>

 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_MPU_Disable>:
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
  /* Make sure outstanding transfers are done */
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005a78:	f3bf 8f5f 	dmb	sy
}
 8005a7c:	bf00      	nop
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
  
 8005a7e:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <HAL_MPU_Disable+0x28>)
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	4a06      	ldr	r2, [pc, #24]	; (8005a9c <HAL_MPU_Disable+0x28>)
 8005a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a88:	6253      	str	r3, [r2, #36]	; 0x24
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
}
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <HAL_MPU_Disable+0x2c>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	605a      	str	r2, [r3, #4]

 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	e000ed00 	.word	0xe000ed00
 8005aa0:	e000ed90 	.word	0xe000ed90

08005aa4 <HAL_MPU_Enable>:
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
 8005aac:	4a0b      	ldr	r2, [pc, #44]	; (8005adc <HAL_MPU_Enable+0x38>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6053      	str	r3, [r2, #4]
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
  
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <HAL_MPU_Enable+0x3c>)
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <HAL_MPU_Enable+0x3c>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005ac2:	f3bf 8f4f 	dsb	sy
}
 8005ac6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ac8:	f3bf 8f6f 	isb	sy
}
 8005acc:	bf00      	nop
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}

 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000ed90 	.word	0xe000ed90
 8005ae0:	e000ed00 	.word	0xe000ed00

08005ae4 <HAL_MPU_ConfigRegion>:
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
  /* Check the parameters */
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;

 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	785a      	ldrb	r2, [r3, #1]
 8005af0:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <HAL_MPU_ConfigRegion+0x84>)
 8005af2:	609a      	str	r2, [r3, #8]
  if ((MPU_Init->Enable) != RESET)
  {
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d029      	beq.n	8005b50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005afc:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <HAL_MPU_ConfigRegion+0x84>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	7b1b      	ldrb	r3, [r3, #12]
 8005b08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7adb      	ldrb	r3, [r3, #11]
 8005b0e:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005b10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	7a9b      	ldrb	r3, [r3, #10]
 8005b16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005b18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	7b5b      	ldrb	r3, [r3, #13]
 8005b1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005b20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	7b9b      	ldrb	r3, [r3, #14]
 8005b26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005b28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	7bdb      	ldrb	r3, [r3, #15]
 8005b2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005b30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	7a5b      	ldrb	r3, [r3, #9]
 8005b36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005b38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	7a1b      	ldrb	r3, [r3, #8]
 8005b3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005b40:	4313      	orrs	r3, r2
  }
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	7812      	ldrb	r2, [r2, #0]
 8005b46:	4611      	mov	r1, r2
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005b48:	4a07      	ldr	r2, [pc, #28]	; (8005b68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005b4a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005b4c:	6113      	str	r3, [r2, #16]
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
#endif /* __MPU_PRESENT */
 8005b4e:	e005      	b.n	8005b5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RASR = 0x00;
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <HAL_MPU_ConfigRegion+0x84>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	60da      	str	r2, [r3, #12]
  }
 8005b56:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <HAL_MPU_ConfigRegion+0x84>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	611a      	str	r2, [r3, #16]
#endif /* __MPU_PRESENT */
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	e000ed90 	.word	0xe000ed90

08005b6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e054      	b.n	8005c28 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7f5b      	ldrb	r3, [r3, #29]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc fb1a 	bl	80021c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	791b      	ldrb	r3, [r3, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10c      	bne.n	8005bbc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <HAL_CRC_Init+0xc4>)
 8005ba8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0218 	bic.w	r2, r2, #24
 8005bb8:	609a      	str	r2, [r3, #8]
 8005bba:	e00c      	b.n	8005bd6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6899      	ldr	r1, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f834 	bl	8005c34 <HAL_CRCEx_Polynomial_Set>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e028      	b.n	8005c28 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	795b      	ldrb	r3, [r3, #5]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005be6:	611a      	str	r2, [r3, #16]
 8005be8:	e004      	b.n	8005bf4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6912      	ldr	r2, [r2, #16]
 8005bf2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699a      	ldr	r2, [r3, #24]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	04c11db7 	.word	0x04c11db7

08005c34 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005c44:	231f      	movs	r3, #31
 8005c46:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005c48:	bf00      	nop
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1e5a      	subs	r2, r3, #1
 8005c4e:	613a      	str	r2, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <HAL_CRCEx_Polynomial_Set+0x34>
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f0      	beq.n	8005c4a <HAL_CRCEx_Polynomial_Set+0x16>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b18      	cmp	r3, #24
 8005c6c:	d846      	bhi.n	8005cfc <HAL_CRCEx_Polynomial_Set+0xc8>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005d03 	.word	0x08005d03
 8005c78:	08005cfd 	.word	0x08005cfd
 8005c7c:	08005cfd 	.word	0x08005cfd
 8005c80:	08005cfd 	.word	0x08005cfd
 8005c84:	08005cfd 	.word	0x08005cfd
 8005c88:	08005cfd 	.word	0x08005cfd
 8005c8c:	08005cfd 	.word	0x08005cfd
 8005c90:	08005cfd 	.word	0x08005cfd
 8005c94:	08005cf1 	.word	0x08005cf1
 8005c98:	08005cfd 	.word	0x08005cfd
 8005c9c:	08005cfd 	.word	0x08005cfd
 8005ca0:	08005cfd 	.word	0x08005cfd
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005cfd 	.word	0x08005cfd
 8005cb0:	08005cfd 	.word	0x08005cfd
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005cfd 	.word	0x08005cfd
 8005cbc:	08005cfd 	.word	0x08005cfd
 8005cc0:	08005cfd 	.word	0x08005cfd
 8005cc4:	08005cfd 	.word	0x08005cfd
 8005cc8:	08005cfd 	.word	0x08005cfd
 8005ccc:	08005cfd 	.word	0x08005cfd
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005cd9 	.word	0x08005cd9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b06      	cmp	r3, #6
 8005cdc:	d913      	bls.n	8005d06 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005ce2:	e010      	b.n	8005d06 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b07      	cmp	r3, #7
 8005ce8:	d90f      	bls.n	8005d0a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cee:	e00c      	b.n	8005d0a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d90b      	bls.n	8005d0e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cfa:	e008      	b.n	8005d0e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005d00:	e006      	b.n	8005d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005d0e:	bf00      	nop
  }
  if (status == HAL_OK)
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10d      	bne.n	8005d32 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f023 0118 	bic.w	r1, r3, #24
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e069      	b.n	8005e26 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fc fa52 	bl	8002208 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <HAL_DCMI_Init+0xf0>)
 8005d86:	400b      	ands	r3, r1
 8005d88:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005d9e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005daa:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005db6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005dc2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005dce:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d112      	bne.n	8005e06 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	7f1b      	ldrb	r3, [r3, #28]
 8005de4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	7f5b      	ldrb	r3, [r3, #29]
 8005dea:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005dec:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7f9b      	ldrb	r3, [r3, #30]
 8005df2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005df4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	7fdb      	ldrb	r3, [r3, #31]
 8005dfc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005e02:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005e04:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 021e 	orr.w	r2, r2, #30
 8005e14:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	ffe0f007 	.word	0xffe0f007

08005e34 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2204      	movs	r2, #4
 8005e54:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5a:	f043 0202 	orr.w	r2, r3, #2
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2204      	movs	r2, #4
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6e:	4a35      	ldr	r2, [pc, #212]	; (8005f44 <HAL_DCMI_IRQHandler+0x110>)
 8005e70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fa2a 	bl	80062d0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01e      	beq.n	8005ec4 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea6:	4a27      	ldr	r2, [pc, #156]	; (8005f44 <HAL_DCMI_IRQHandler+0x110>)
 8005ea8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fa0e 	bl	80062d0 <HAL_DMA_Abort_IT>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f86a 	bl	8005f98 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d006      	beq.n	8005edc <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f840 	bl	8005f5c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d006      	beq.n	8005ef4 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2208      	movs	r2, #8
 8005eec:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f83e 	bl	8005f70 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01d      	beq.n	8005f3a <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d107      	bne.n	8005f1c <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 021e 	bic.w	r2, r2, #30
 8005f1a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2201      	movs	r2, #1
 8005f32:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f825 	bl	8005f84 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	08005f99 	.word	0x08005f99

08005f48 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d009      	beq.n	8005fc4 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff ffbf 	bl	8005f48 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <HAL_DMA_Init>:
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
  DMA_Base_Registers *regs;
 8005fe0:	f7ff f97c 	bl	80052dc <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_DMA_Init+0x1c>
    return HAL_ERROR;
  }
 8005fec:	2301      	movs	r3, #1
 8005fee:	e099      	b.n	8006124 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006010:	e00f      	b.n	8006032 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006012:	f7ff f963 	bl	80052dc <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b05      	cmp	r3, #5
 800601e:	d908      	bls.n	8006032 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2203      	movs	r2, #3
 800602a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e078      	b.n	8006124 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e8      	bne.n	8006012 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4b38      	ldr	r3, [pc, #224]	; (800612c <HAL_DMA_Init+0x158>)
 800604c:	4013      	ands	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800605e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800606a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b04      	cmp	r3, #4
 800608a:	d107      	bne.n	800609c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	4313      	orrs	r3, r2
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 0307 	bic.w	r3, r3, #7
 80060b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d117      	bne.n	80060f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00e      	beq.n	80060f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fb15 	bl	8006708 <DMA_CheckFifoParam>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80060f2:	2301      	movs	r3, #1
 80060f4:	e016      	b.n	8006124 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 facc 	bl	800669c <DMA_CalcBaseAndBitshift>
 8006104:	4603      	mov	r3, r0
 8006106:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	223f      	movs	r2, #63	; 0x3f
 800610e:	409a      	lsls	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	f010803f 	.word	0xf010803f

08006130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006146:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_DMA_Start_IT+0x26>
 8006152:	2302      	movs	r3, #2
 8006154:	e048      	b.n	80061e8 <HAL_DMA_Start_IT+0xb8>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	d137      	bne.n	80061da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fa5e 	bl	8006640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006188:	223f      	movs	r2, #63	; 0x3f
 800618a:	409a      	lsls	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0216 	orr.w	r2, r2, #22
 800619e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0208 	orr.w	r2, r2, #8
 80061c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e005      	b.n	80061e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
 80061e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80061fe:	f7ff f86d 	bl	80052dc <HAL_GetTick>
 8006202:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d008      	beq.n	8006222 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e052      	b.n	80062c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0216 	bic.w	r2, r2, #22
 8006230:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006240:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <HAL_DMA_Abort+0x62>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0208 	bic.w	r2, r2, #8
 8006260:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006272:	e013      	b.n	800629c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006274:	f7ff f832 	bl	80052dc <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b05      	cmp	r3, #5
 8006280:	d90c      	bls.n	800629c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2203      	movs	r2, #3
 8006294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e015      	b.n	80062c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e4      	bne.n	8006274 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ae:	223f      	movs	r2, #63	; 0x3f
 80062b0:	409a      	lsls	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
  }
 80062c6:	2300      	movs	r3, #0
  return HAL_OK;
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_DMA_Abort_IT>:
  * @brief  Aborts the DMA Transfer in Interrupt mode.
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
{
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d004      	beq.n	80062ee <HAL_DMA_Abort_IT+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2280      	movs	r2, #128	; 0x80
 80062e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e00c      	b.n	8006308 <HAL_DMA_Abort_IT+0x38>
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2205      	movs	r2, #5
 80062f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0201 	bic.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
  }

 8006306:	2300      	movs	r3, #0
  return HAL_OK;
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_DMA_IRQHandler>:
/**
  * @brief  Handles DMA interrupt request.
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800631c:	2300      	movs	r3, #0
 800631e:	60bb      	str	r3, [r7, #8]
  uint32_t tmpisr;
 8006320:	4b92      	ldr	r3, [pc, #584]	; (800656c <HAL_DMA_IRQHandler+0x258>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a92      	ldr	r2, [pc, #584]	; (8006570 <HAL_DMA_IRQHandler+0x25c>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	0a9b      	lsrs	r3, r3, #10
 800632c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;

 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006332:	613b      	str	r3, [r7, #16]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]

  tmpisr = regs->ISR;

 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633e:	2208      	movs	r2, #8
 8006340:	409a      	lsls	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4013      	ands	r3, r2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01a      	beq.n	8006380 <HAL_DMA_IRQHandler+0x6c>
  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0204 	bic.w	r2, r2, #4
 8006366:	601a      	str	r2, [r3, #0]
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
      
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636c:	2208      	movs	r2, #8
 800636e:	409a      	lsls	r2, r3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	609a      	str	r2, [r3, #8]
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
      
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	2201      	movs	r2, #1
 8006386:	409a      	lsls	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d012      	beq.n	80063b6 <HAL_DMA_IRQHandler+0xa2>
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
    {
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a2:	2201      	movs	r2, #1
 80063a4:	409a      	lsls	r2, r3
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	609a      	str	r2, [r3, #8]
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;

 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f043 0202 	orr.w	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	655a      	str	r2, [r3, #84]	; 0x54
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ba:	2204      	movs	r2, #4
 80063bc:	409a      	lsls	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d012      	beq.n	80063ec <HAL_DMA_IRQHandler+0xd8>
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
    {
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	2204      	movs	r2, #4
 80063da:	409a      	lsls	r2, r3
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	609a      	str	r2, [r3, #8]
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;

 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e4:	f043 0204 	orr.w	r2, r3, #4
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	655a      	str	r2, [r3, #84]	; 0x54
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f0:	2210      	movs	r2, #16
 80063f2:	409a      	lsls	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d043      	beq.n	8006484 <HAL_DMA_IRQHandler+0x170>
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b00      	cmp	r3, #0
 8006408:	d03c      	beq.n	8006484 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
    {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	2210      	movs	r2, #16
 8006410:	409a      	lsls	r2, r3
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	609a      	str	r2, [r3, #8]
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
      
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d018      	beq.n	8006456 <HAL_DMA_IRQHandler+0x142>
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
      {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d108      	bne.n	8006444 <HAL_DMA_IRQHandler+0x130>
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d024      	beq.n	8006484 <HAL_DMA_IRQHandler+0x170>
        {
          if(hdma->XferHalfCpltCallback != NULL)
          {
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
 8006442:	e01f      	b.n	8006484 <HAL_DMA_IRQHandler+0x170>
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01b      	beq.n	8006484 <HAL_DMA_IRQHandler+0x170>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
          {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
 8006454:	e016      	b.n	8006484 <HAL_DMA_IRQHandler+0x170>
            hdma->XferM1HalfCpltCallback(hdma);
          }
        }
      }
      else
      {
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d107      	bne.n	8006474 <HAL_DMA_IRQHandler+0x160>
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
        {
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0208 	bic.w	r2, r2, #8
 8006472:	601a      	str	r2, [r3, #0]
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_DMA_IRQHandler+0x170>
        
        if(hdma->XferHalfCpltCallback != NULL)
        {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
        }
      }
    }
  }
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006488:	2220      	movs	r2, #32
 800648a:	409a      	lsls	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 808e 	beq.w	80065b2 <HAL_DMA_IRQHandler+0x29e>
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8086 	beq.w	80065b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	2220      	movs	r2, #32
 80064ac:	409a      	lsls	r2, r3
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	609a      	str	r2, [r3, #8]
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	d136      	bne.n	800652c <HAL_DMA_IRQHandler+0x218>
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
      {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0216 	bic.w	r2, r2, #22
 80064cc:	601a      	str	r2, [r3, #0]
        /* Disable all the transfer interrupts */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064dc:	615a      	str	r2, [r3, #20]
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <HAL_DMA_IRQHandler+0x1da>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <HAL_DMA_IRQHandler+0x1ea>
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0208 	bic.w	r2, r2, #8
 80064fc:	601a      	str	r2, [r3, #0]
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }

 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	223f      	movs	r2, #63	; 0x3f
 8006504:	409a      	lsls	r2, r3
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	609a      	str	r2, [r3, #8]
        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;

 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;

 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651e:	2b00      	cmp	r3, #0
 8006520:	d07d      	beq.n	800661e <HAL_DMA_IRQHandler+0x30a>

        if(hdma->XferAbortCallback != NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	4798      	blx	r3
        {
          hdma->XferAbortCallback(hdma);
 800652a:	e078      	b.n	800661e <HAL_DMA_IRQHandler+0x30a>
        }
        return;
      }
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01c      	beq.n	8006574 <HAL_DMA_IRQHandler+0x260>

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
      {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d108      	bne.n	800655a <HAL_DMA_IRQHandler+0x246>
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654c:	2b00      	cmp	r3, #0
 800654e:	d030      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x29e>
        {
          if(hdma->XferM1CpltCallback != NULL)
          {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
 8006558:	e02b      	b.n	80065b2 <HAL_DMA_IRQHandler+0x29e>
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d027      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x29e>
        {
          if(hdma->XferCpltCallback != NULL)
          {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
 800656a:	e022      	b.n	80065b2 <HAL_DMA_IRQHandler+0x29e>
 800656c:	20000008 	.word	0x20000008
 8006570:	1b4e81b5 	.word	0x1b4e81b5
            hdma->XferCpltCallback(hdma);
          }
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <HAL_DMA_IRQHandler+0x28e>
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
        {
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0210 	bic.w	r2, r2, #16
 8006590:	601a      	str	r2, [r3, #0]
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;

 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x29e>
        }

        if(hdma->XferCpltCallback != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
        }
      }
    }
  }
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d032      	beq.n	8006620 <HAL_DMA_IRQHandler+0x30c>
  
  /* manage error case */
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d022      	beq.n	800660c <HAL_DMA_IRQHandler+0x2f8>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2205      	movs	r2, #5
 80065ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0201 	bic.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3301      	adds	r3, #1
 80065e2:	60bb      	str	r3, [r7, #8]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d307      	bcc.n	80065fa <HAL_DMA_IRQHandler+0x2e6>
      do
      {
        if (++count > timeout)
        {
          break;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f2      	bne.n	80065de <HAL_DMA_IRQHandler+0x2ca>
 80065f8:	e000      	b.n	80065fc <HAL_DMA_IRQHandler+0x2e8>
      {
 80065fa:	bf00      	nop
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_DMA_IRQHandler+0x30c>

    }

 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
 800661c:	e000      	b.n	8006620 <HAL_DMA_IRQHandler+0x30c>
          hdma->XferAbortCallback(hdma);
 800661e:	bf00      	nop
    if(hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop

08006628 <HAL_DMA_GetError>:
{
  return hdma->State;
}

/**
  * @brief  Return the DMA error code
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  *              the configuration information for the specified DMA Stream.
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <DMA_SetConfig>:

/**
  * @brief  Sets the DMA Transfer parameter.
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @param  SrcAddress The source memory Buffer address
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800665c:	601a      	str	r2, [r3, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	605a      	str	r2, [r3, #4]
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d108      	bne.n	8006680 <DMA_SetConfig+0x40>

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	60da      	str	r2, [r3, #12]
    hdma->Instance->M0AR = SrcAddress;
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
 800667e:	e007      	b.n	8006690 <DMA_SetConfig+0x50>
    hdma->Instance->M0AR = SrcAddress;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	609a      	str	r2, [r3, #8]
  else
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	60da      	str	r2, [r3, #12]
    /* Configure DMA Stream source address */
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <DMA_CalcBaseAndBitshift>:
    hdma->Instance->M0AR = DstAddress;
  }
}

/**
  * @brief  Returns the DMA Stream base address depending on stream number
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	3b10      	subs	r3, #16
 80066ac:	4a13      	ldr	r2, [pc, #76]	; (80066fc <DMA_CalcBaseAndBitshift+0x60>)
 80066ae:	fba2 2303 	umull	r2, r3, r2, r3
 80066b2:	091b      	lsrs	r3, r3, #4
 80066b4:	60fb      	str	r3, [r7, #12]
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
 80066b6:	4a12      	ldr	r2, [pc, #72]	; (8006700 <DMA_CalcBaseAndBitshift+0x64>)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	65da      	str	r2, [r3, #92]	; 0x5c
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d908      	bls.n	80066dc <DMA_CalcBaseAndBitshift+0x40>
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <DMA_CalcBaseAndBitshift+0x68>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	1d1a      	adds	r2, r3, #4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	659a      	str	r2, [r3, #88]	; 0x58
 80066da:	e006      	b.n	80066ea <DMA_CalcBaseAndBitshift+0x4e>
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b08      	ldr	r3, [pc, #32]	; (8006704 <DMA_CalcBaseAndBitshift+0x68>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6593      	str	r3, [r2, #88]	; 0x58
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  {
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	aaaaaaab 	.word	0xaaaaaaab
 8006700:	0801c7e4 	.word	0x0801c7e4
 8006704:	fffffc00 	.word	0xfffffc00

08006708 <DMA_CheckFifoParam>:
  
  return hdma->StreamBaseAddress;
}

/**
  * @brief  Check compatibility between FIFO threshold level and size of the memory burst
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 8006710:	2300      	movs	r3, #0
 8006712:	73fb      	strb	r3, [r7, #15]
  *                     the configuration information for the specified DMA Stream. 
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	60bb      	str	r3, [r7, #8]
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11f      	bne.n	8006762 <DMA_CheckFifoParam+0x5a>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d856      	bhi.n	80067d6 <DMA_CheckFifoParam+0xce>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <DMA_CheckFifoParam+0x28>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006741 	.word	0x08006741
 8006734:	08006753 	.word	0x08006753
 8006738:	08006741 	.word	0x08006741
 800673c:	080067d7 	.word	0x080067d7
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d046      	beq.n	80067da <DMA_CheckFifoParam+0xd2>
  {
    switch (tmp)
 800674c:	2301      	movs	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
 8006750:	e043      	b.n	80067da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800675a:	d140      	bne.n	80067de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006760:	e03d      	b.n	80067de <DMA_CheckFifoParam+0xd6>
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      break;
    default:
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	d121      	bne.n	80067b0 <DMA_CheckFifoParam+0xa8>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b03      	cmp	r3, #3
 8006770:	d837      	bhi.n	80067e2 <DMA_CheckFifoParam+0xda>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <DMA_CheckFifoParam+0x70>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006789 	.word	0x08006789
 800677c:	0800678f 	.word	0x0800678f
 8006780:	08006789 	.word	0x08006789
 8006784:	080067a1 	.word	0x080067a1
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
  {
 800678c:	e030      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
    switch (tmp)
    {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d025      	beq.n	80067e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
 800679a:	2301      	movs	r3, #1
 800679c:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
      break;
 800679e:	e022      	b.n	80067e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067a8:	d11f      	bne.n	80067ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067ae:	e01c      	b.n	80067ea <DMA_CheckFifoParam+0xe2>
        status = HAL_ERROR;
      }
      break;   
    default:
      break;
    }
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d903      	bls.n	80067be <DMA_CheckFifoParam+0xb6>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d003      	beq.n	80067c4 <DMA_CheckFifoParam+0xbc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067bc:	e018      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
  {
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
    switch (tmp)
 80067c2:	e015      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00e      	beq.n	80067ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      break;
 80067d4:	e00b      	b.n	80067ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80067d6:	bf00      	nop
 80067d8:	e00a      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
 80067da:	bf00      	nop
 80067dc:	e008      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
      break;
 80067de:	bf00      	nop
 80067e0:	e006      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067e2:	bf00      	nop
 80067e4:	e004      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
      break;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
      break;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <DMA_CheckFifoParam+0xe8>
      break;
 80067ee:	bf00      	nop
      {
        status = HAL_ERROR;
      }
      break;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
    default:
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop

08006800 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e039      	b.n	8006886 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb fde8 	bl	80023fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	f023 0107 	bic.w	r1, r3, #7
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006866:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <HAL_DMA2D_Init+0x90>)
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68d1      	ldr	r1, [r2, #12]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	430b      	orrs	r3, r1
 8006874:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	ffffc000 	.word	0xffffc000

08006894 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_DMA2D_Start+0x1c>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e018      	b.n	80068e2 <HAL_DMA2D_Start+0x4e>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fa98 	bl	8006e00 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b086      	sub	sp, #24
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d056      	beq.n	80069b4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006906:	f7fe fce9 	bl	80052dc <HAL_GetTick>
 800690a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800690c:	e04b      	b.n	80069a6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800691c:	2b00      	cmp	r3, #0
 800691e:	d023      	beq.n	8006968 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692e:	f043 0202 	orr.w	r2, r3, #2
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006944:	f043 0201 	orr.w	r2, r3, #1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2221      	movs	r2, #33	; 0x21
 8006952:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2204      	movs	r2, #4
 8006958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e0a5      	b.n	8006ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800696e:	d01a      	beq.n	80069a6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006970:	f7fe fcb4 	bl	80052dc <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d302      	bcc.n	8006986 <HAL_DMA2D_PollForTransfer+0x9c>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10f      	bne.n	80069a6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698a:	f043 0220 	orr.w	r2, r3, #32
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e086      	b.n	8006ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0ac      	beq.n	800690e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d061      	beq.n	8006a9a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80069d6:	f7fe fc81 	bl	80052dc <HAL_GetTick>
 80069da:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80069dc:	e056      	b.n	8006a8c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d02e      	beq.n	8006a4e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	f043 0204 	orr.w	r2, r3, #4
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a14:	f043 0202 	orr.w	r2, r3, #2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2a:	f043 0201 	orr.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2229      	movs	r2, #41	; 0x29
 8006a38:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e032      	b.n	8006ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a54:	d01a      	beq.n	8006a8c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a56:	f7fe fc41 	bl	80052dc <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d302      	bcc.n	8006a6c <HAL_DMA2D_PollForTransfer+0x182>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10f      	bne.n	8006a8c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a70:	f043 0220 	orr.w	r2, r3, #32
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e013      	b.n	8006ab4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0a1      	beq.n	80069de <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2212      	movs	r2, #18
 8006aa0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d026      	beq.n	8006b2c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d021      	beq.n	8006b2c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006af6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afc:	f043 0201 	orr.w	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2204      	movs	r2, #4
 8006b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d026      	beq.n	8006b84 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d021      	beq.n	8006b84 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b4e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2220      	movs	r2, #32
 8006b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5c:	f043 0202 	orr.w	r2, r3, #2
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2204      	movs	r2, #4
 8006b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d026      	beq.n	8006bdc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d021      	beq.n	8006bdc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2208      	movs	r2, #8
 8006bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb4:	f043 0204 	orr.w	r2, r3, #4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d013      	beq.n	8006c0e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00e      	beq.n	8006c0e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bfe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2204      	movs	r2, #4
 8006c06:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f853 	bl	8006cb4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d024      	beq.n	8006c62 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01f      	beq.n	8006c62 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c30:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2202      	movs	r2, #2
 8006c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 0310 	and.w	r3, r3, #16
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01f      	beq.n	8006cac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d01a      	beq.n	8006cac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c84:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f80e 	bl	8006cc8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_DMA2D_ConfigLayer+0x20>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e079      	b.n	8006df0 <HAL_DMA2D_ConfigLayer+0x114>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	3318      	adds	r3, #24
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006d26:	4b35      	ldr	r3, [pc, #212]	; (8006dfc <HAL_DMA2D_ConfigLayer+0x120>)
 8006d28:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b0a      	cmp	r3, #10
 8006d30:	d003      	beq.n	8006d3a <HAL_DMA2D_ConfigLayer+0x5e>
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b09      	cmp	r3, #9
 8006d38:	d107      	bne.n	8006d4a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e005      	b.n	8006d56 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	061b      	lsls	r3, r3, #24
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d120      	bne.n	8006d9e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	ea02 0103 	and.w	r1, r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b0a      	cmp	r3, #10
 8006d84:	d003      	beq.n	8006d8e <HAL_DMA2D_ConfigLayer+0xb2>
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d127      	bne.n	8006dde <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d9c:	e01f      	b.n	8006dde <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	43db      	mvns	r3, r3
 8006da8:	ea02 0103 	and.w	r1, r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b0a      	cmp	r3, #10
 8006dc6:	d003      	beq.n	8006dd0 <HAL_DMA2D_ConfigLayer+0xf4>
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	d106      	bne.n	8006dde <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006ddc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	ff03000f 	.word	0xff03000f

08006e00 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b08b      	sub	sp, #44	; 0x2c
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	041a      	lsls	r2, r3, #16
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e38:	d174      	bne.n	8006f24 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e40:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e48:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e50:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d108      	bne.n	8006e72 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	431a      	orrs	r2, r3
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e70:	e053      	b.n	8006f1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d106      	bne.n	8006e88 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
 8006e86:	e048      	b.n	8006f1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d111      	bne.n	8006eb4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	0cdb      	lsrs	r3, r3, #19
 8006e94:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	0a9b      	lsrs	r3, r3, #10
 8006e9a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	08db      	lsrs	r3, r3, #3
 8006ea0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	02db      	lsls	r3, r3, #11
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb2:	e032      	b.n	8006f1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d117      	bne.n	8006eec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	0fdb      	lsrs	r3, r3, #31
 8006ec0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	0cdb      	lsrs	r3, r3, #19
 8006ec6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	0adb      	lsrs	r3, r3, #11
 8006ecc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	08db      	lsrs	r3, r3, #3
 8006ed2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	431a      	orrs	r2, r3
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	03db      	lsls	r3, r3, #15
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eea:	e016      	b.n	8006f1a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	0f1b      	lsrs	r3, r3, #28
 8006ef0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	0d1b      	lsrs	r3, r3, #20
 8006ef6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	0b1b      	lsrs	r3, r3, #12
 8006efc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	011a      	lsls	r2, r3, #4
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	4313      	orrs	r3, r2
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006f22:	e003      	b.n	8006f2c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	60da      	str	r2, [r3, #12]
}
 8006f2c:	bf00      	nop
 8006f2e:	372c      	adds	r7, #44	; 0x2c
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006f42:	2300      	movs	r3, #0
 8006f44:	61fb      	str	r3, [r7, #28]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006f46:	2300      	movs	r3, #0
 8006f48:	617b      	str	r3, [r7, #20]

 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]
  /* Configure the port pins */
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61bb      	str	r3, [r7, #24]
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
    {
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	e175      	b.n	8007244 <HAL_GPIO_Init+0x30c>
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f58:	2201      	movs	r2, #1
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	617b      	str	r3, [r7, #20]
      {
        /* Check the Speed parameter */
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	f040 8164 	bne.w	800723e <HAL_GPIO_Init+0x306>
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d00b      	beq.n	8006f96 <HAL_GPIO_Init+0x5e>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d007      	beq.n	8006f96 <HAL_GPIO_Init+0x5e>

 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
        GPIOx->OSPEEDR = temp;
 8006f8a:	2b11      	cmp	r3, #17
 8006f8c:	d003      	beq.n	8006f96 <HAL_GPIO_Init+0x5e>

 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b12      	cmp	r3, #18
 8006f94:	d130      	bne.n	8006ff8 <HAL_GPIO_Init+0xc0>
        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	61bb      	str	r3, [r7, #24]
      }
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	43db      	mvns	r3, r3
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	4013      	ands	r3, r2
 8006fac:	61bb      	str	r3, [r7, #24]
      
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	61bb      	str	r3, [r7, #24]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	609a      	str	r2, [r3, #8]
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	61bb      	str	r3, [r7, #24]

 8006fcc:	2201      	movs	r2, #1
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	61bb      	str	r3, [r7, #24]
        /* Activate the Pull-up or Pull down resistor for the current IO */
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	091b      	lsrs	r3, r3, #4
 8006fe2:	f003 0201 	and.w	r2, r3, #1
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	61bb      	str	r3, [r7, #24]
        temp = GPIOx->PUPDR;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	605a      	str	r2, [r3, #4]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
        temp |= ((GPIO_Init->Pull) << (position * 2));
        GPIOx->PUPDR = temp;
      }
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	61bb      	str	r3, [r7, #24]

 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	2203      	movs	r2, #3
 8007004:	fa02 f303 	lsl.w	r3, r2, r3
 8007008:	43db      	mvns	r3, r3
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	4013      	ands	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
      /* In case of Alternate function mode selection */
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	4313      	orrs	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	60da      	str	r2, [r3, #12]
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d003      	beq.n	8007038 <HAL_GPIO_Init+0x100>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b12      	cmp	r3, #18
 8007036:	d123      	bne.n	8007080 <HAL_GPIO_Init+0x148>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	08da      	lsrs	r2, r3, #3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3208      	adds	r2, #8
 8007040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007044:	61bb      	str	r3, [r7, #24]
      }
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	220f      	movs	r2, #15
 8007050:	fa02 f303 	lsl.w	r3, r2, r3
 8007054:	43db      	mvns	r3, r3
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	4013      	ands	r3, r2
 800705a:	61bb      	str	r3, [r7, #24]
      
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	4313      	orrs	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	08da      	lsrs	r2, r3, #3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3208      	adds	r2, #8
 800707a:	69b9      	ldr	r1, [r7, #24]
 800707c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	61bb      	str	r3, [r7, #24]

 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	2203      	movs	r2, #3
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	43db      	mvns	r3, r3
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	4013      	ands	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
      /*--------------------- EXTI Mode Configuration ------------------------*/
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f003 0203 	and.w	r2, r3, #3
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]
      /* Configure the External Interrupt or event for the current IO */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	601a      	str	r2, [r3, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80be 	beq.w	800723e <HAL_GPIO_Init+0x306>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80070c2:	4b66      	ldr	r3, [pc, #408]	; (800725c <HAL_GPIO_Init+0x324>)
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	4a65      	ldr	r2, [pc, #404]	; (800725c <HAL_GPIO_Init+0x324>)
 80070c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070cc:	6453      	str	r3, [r2, #68]	; 0x44
 80070ce:	4b63      	ldr	r3, [pc, #396]	; (800725c <HAL_GPIO_Init+0x324>)
 80070d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 80070da:	4a61      	ldr	r2, [pc, #388]	; (8007260 <HAL_GPIO_Init+0x328>)
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	089b      	lsrs	r3, r3, #2
 80070e0:	3302      	adds	r3, #2
 80070e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e6:	61bb      	str	r3, [r7, #24]

 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	220f      	movs	r2, #15
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43db      	mvns	r3, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	4013      	ands	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
        /* Clear Rising Falling edge configuration */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a58      	ldr	r2, [pc, #352]	; (8007264 <HAL_GPIO_Init+0x32c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d037      	beq.n	8007176 <HAL_GPIO_Init+0x23e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a57      	ldr	r2, [pc, #348]	; (8007268 <HAL_GPIO_Init+0x330>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d031      	beq.n	8007172 <HAL_GPIO_Init+0x23a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a56      	ldr	r2, [pc, #344]	; (800726c <HAL_GPIO_Init+0x334>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d02b      	beq.n	800716e <HAL_GPIO_Init+0x236>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a55      	ldr	r2, [pc, #340]	; (8007270 <HAL_GPIO_Init+0x338>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d025      	beq.n	800716a <HAL_GPIO_Init+0x232>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a54      	ldr	r2, [pc, #336]	; (8007274 <HAL_GPIO_Init+0x33c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01f      	beq.n	8007166 <HAL_GPIO_Init+0x22e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a53      	ldr	r2, [pc, #332]	; (8007278 <HAL_GPIO_Init+0x340>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d019      	beq.n	8007162 <HAL_GPIO_Init+0x22a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a52      	ldr	r2, [pc, #328]	; (800727c <HAL_GPIO_Init+0x344>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <HAL_GPIO_Init+0x226>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a51      	ldr	r2, [pc, #324]	; (8007280 <HAL_GPIO_Init+0x348>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00d      	beq.n	800715a <HAL_GPIO_Init+0x222>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a50      	ldr	r2, [pc, #320]	; (8007284 <HAL_GPIO_Init+0x34c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <HAL_GPIO_Init+0x21e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a4f      	ldr	r2, [pc, #316]	; (8007288 <HAL_GPIO_Init+0x350>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d101      	bne.n	8007152 <HAL_GPIO_Init+0x21a>
 800714e:	2309      	movs	r3, #9
 8007150:	e012      	b.n	8007178 <HAL_GPIO_Init+0x240>
 8007152:	230a      	movs	r3, #10
 8007154:	e010      	b.n	8007178 <HAL_GPIO_Init+0x240>
 8007156:	2308      	movs	r3, #8
 8007158:	e00e      	b.n	8007178 <HAL_GPIO_Init+0x240>
 800715a:	2307      	movs	r3, #7
 800715c:	e00c      	b.n	8007178 <HAL_GPIO_Init+0x240>
 800715e:	2306      	movs	r3, #6
 8007160:	e00a      	b.n	8007178 <HAL_GPIO_Init+0x240>
 8007162:	2305      	movs	r3, #5
 8007164:	e008      	b.n	8007178 <HAL_GPIO_Init+0x240>
 8007166:	2304      	movs	r3, #4
 8007168:	e006      	b.n	8007178 <HAL_GPIO_Init+0x240>
 800716a:	2303      	movs	r3, #3
 800716c:	e004      	b.n	8007178 <HAL_GPIO_Init+0x240>
 800716e:	2302      	movs	r3, #2
 8007170:	e002      	b.n	8007178 <HAL_GPIO_Init+0x240>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <HAL_GPIO_Init+0x240>
 8007176:	2300      	movs	r3, #0
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	f002 0203 	and.w	r2, r2, #3
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	4093      	lsls	r3, r2
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	4313      	orrs	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
        temp = EXTI->RTSR;
 8007188:	4935      	ldr	r1, [pc, #212]	; (8007260 <HAL_GPIO_Init+0x328>)
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	089b      	lsrs	r3, r3, #2
 800718e:	3302      	adds	r3, #2
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
 8007196:	4b3d      	ldr	r3, [pc, #244]	; (800728c <HAL_GPIO_Init+0x354>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	61bb      	str	r3, [r7, #24]
          temp |= iocurrent;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	43db      	mvns	r3, r3
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	4013      	ands	r3, r2
 80071a4:	61bb      	str	r3, [r7, #24]
        }
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_GPIO_Init+0x282>
        EXTI->RTSR = temp;

 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61bb      	str	r3, [r7, #24]
        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80071ba:	4a34      	ldr	r2, [pc, #208]	; (800728c <HAL_GPIO_Init+0x354>)
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	6013      	str	r3, [r2, #0]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
        {
 80071c0:	4b32      	ldr	r3, [pc, #200]	; (800728c <HAL_GPIO_Init+0x354>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	61bb      	str	r3, [r7, #24]
          temp |= iocurrent;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	43db      	mvns	r3, r3
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	4013      	ands	r3, r2
 80071ce:	61bb      	str	r3, [r7, #24]
        }
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <HAL_GPIO_Init+0x2ac>
        EXTI->FTSR = temp;

 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	61bb      	str	r3, [r7, #24]
        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80071e4:	4a29      	ldr	r2, [pc, #164]	; (800728c <HAL_GPIO_Init+0x354>)
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	6053      	str	r3, [r2, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
        {
          temp |= iocurrent;
 80071ea:	4b28      	ldr	r3, [pc, #160]	; (800728c <HAL_GPIO_Init+0x354>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	61bb      	str	r3, [r7, #24]
        }
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	43db      	mvns	r3, r3
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	4013      	ands	r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]
        EXTI->EMR = temp;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_GPIO_Init+0x2d6>

        /* Clear EXTI line configuration */
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	61bb      	str	r3, [r7, #24]
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800720e:	4a1f      	ldr	r2, [pc, #124]	; (800728c <HAL_GPIO_Init+0x354>)
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	6093      	str	r3, [r2, #8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
        {
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <HAL_GPIO_Init+0x354>)
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	61bb      	str	r3, [r7, #24]
          temp |= iocurrent;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	43db      	mvns	r3, r3
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	4013      	ands	r3, r2
 8007222:	61bb      	str	r3, [r7, #24]
        }
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_GPIO_Init+0x300>
        EXTI->IMR = temp;
      }
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
    }
  }
 8007238:	4a14      	ldr	r2, [pc, #80]	; (800728c <HAL_GPIO_Init+0x354>)
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	60d3      	str	r3, [r2, #12]
    {
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	3301      	adds	r3, #1
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	2b0f      	cmp	r3, #15
 8007248:	f67f ae86 	bls.w	8006f58 <HAL_GPIO_Init+0x20>
}

/**
  * @brief  De-initializes the GPIOx peripheral registers to their default reset values.
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	3724      	adds	r7, #36	; 0x24
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40023800 	.word	0x40023800
 8007260:	40013800 	.word	0x40013800
 8007264:	40020000 	.word	0x40020000
 8007268:	40020400 	.word	0x40020400
 800726c:	40020800 	.word	0x40020800
 8007270:	40020c00 	.word	0x40020c00
 8007274:	40021000 	.word	0x40021000
 8007278:	40021400 	.word	0x40021400
 800727c:	40021800 	.word	0x40021800
 8007280:	40021c00 	.word	0x40021c00
 8007284:	40022000 	.word	0x40022000
 8007288:	40022400 	.word	0x40022400
 800728c:	40013c00 	.word	0x40013c00

08007290 <HAL_GPIO_DeInit>:
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0x00;

 800729a:	2300      	movs	r3, #0
 800729c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80072a2:	2300      	movs	r3, #0
 80072a4:	60bb      	str	r3, [r7, #8]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e0d9      	b.n	8007460 <HAL_GPIO_DeInit+0x1d0>
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;

 80072ac:	2201      	movs	r2, #1
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	613b      	str	r3, [r7, #16]
    if(iocurrent == ioposition)
    {
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	4013      	ands	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	f040 80c9 	bne.w	800745a <HAL_GPIO_DeInit+0x1ca>
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
 80072c8:	4a6b      	ldr	r2, [pc, #428]	; (8007478 <HAL_GPIO_DeInit+0x1e8>)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	089b      	lsrs	r3, r3, #2
 80072ce:	3302      	adds	r3, #2
 80072d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d4:	60bb      	str	r3, [r7, #8]
        /* Clear EXTI line configuration */
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	220f      	movs	r2, #15
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	4013      	ands	r3, r2
 80072e8:	60bb      	str	r3, [r7, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a63      	ldr	r2, [pc, #396]	; (800747c <HAL_GPIO_DeInit+0x1ec>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d037      	beq.n	8007362 <HAL_GPIO_DeInit+0xd2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a62      	ldr	r2, [pc, #392]	; (8007480 <HAL_GPIO_DeInit+0x1f0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d031      	beq.n	800735e <HAL_GPIO_DeInit+0xce>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a61      	ldr	r2, [pc, #388]	; (8007484 <HAL_GPIO_DeInit+0x1f4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d02b      	beq.n	800735a <HAL_GPIO_DeInit+0xca>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a60      	ldr	r2, [pc, #384]	; (8007488 <HAL_GPIO_DeInit+0x1f8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d025      	beq.n	8007356 <HAL_GPIO_DeInit+0xc6>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a5f      	ldr	r2, [pc, #380]	; (800748c <HAL_GPIO_DeInit+0x1fc>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01f      	beq.n	8007352 <HAL_GPIO_DeInit+0xc2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a5e      	ldr	r2, [pc, #376]	; (8007490 <HAL_GPIO_DeInit+0x200>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d019      	beq.n	800734e <HAL_GPIO_DeInit+0xbe>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a5d      	ldr	r2, [pc, #372]	; (8007494 <HAL_GPIO_DeInit+0x204>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d013      	beq.n	800734a <HAL_GPIO_DeInit+0xba>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a5c      	ldr	r2, [pc, #368]	; (8007498 <HAL_GPIO_DeInit+0x208>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00d      	beq.n	8007346 <HAL_GPIO_DeInit+0xb6>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a5b      	ldr	r2, [pc, #364]	; (800749c <HAL_GPIO_DeInit+0x20c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d007      	beq.n	8007342 <HAL_GPIO_DeInit+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a5a      	ldr	r2, [pc, #360]	; (80074a0 <HAL_GPIO_DeInit+0x210>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d101      	bne.n	800733e <HAL_GPIO_DeInit+0xae>
 800733a:	2309      	movs	r3, #9
 800733c:	e012      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 800733e:	230a      	movs	r3, #10
 8007340:	e010      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 8007342:	2308      	movs	r3, #8
 8007344:	e00e      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 8007346:	2307      	movs	r3, #7
 8007348:	e00c      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 800734a:	2306      	movs	r3, #6
 800734c:	e00a      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 800734e:	2305      	movs	r3, #5
 8007350:	e008      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 8007352:	2304      	movs	r3, #4
 8007354:	e006      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 8007356:	2303      	movs	r3, #3
 8007358:	e004      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 800735a:	2302      	movs	r3, #2
 800735c:	e002      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <HAL_GPIO_DeInit+0xd4>
 8007362:	2300      	movs	r3, #0
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	f002 0203 	and.w	r2, r2, #3
 800736a:	0092      	lsls	r2, r2, #2
 800736c:	4093      	lsls	r3, r2
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	d132      	bne.n	80073da <HAL_GPIO_DeInit+0x14a>
        EXTI->EMR &= ~((uint32_t)iocurrent);

        /* Clear Rising Falling edge configuration */
 8007374:	4b4b      	ldr	r3, [pc, #300]	; (80074a4 <HAL_GPIO_DeInit+0x214>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	43db      	mvns	r3, r3
 800737c:	4949      	ldr	r1, [pc, #292]	; (80074a4 <HAL_GPIO_DeInit+0x214>)
 800737e:	4013      	ands	r3, r2
 8007380:	600b      	str	r3, [r1, #0]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007382:	4b48      	ldr	r3, [pc, #288]	; (80074a4 <HAL_GPIO_DeInit+0x214>)
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	43db      	mvns	r3, r3
 800738a:	4946      	ldr	r1, [pc, #280]	; (80074a4 <HAL_GPIO_DeInit+0x214>)
 800738c:	4013      	ands	r3, r2
 800738e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);

        /* Configure the External Interrupt or event for the current IO */
 8007390:	4b44      	ldr	r3, [pc, #272]	; (80074a4 <HAL_GPIO_DeInit+0x214>)
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	43db      	mvns	r3, r3
 8007398:	4942      	ldr	r1, [pc, #264]	; (80074a4 <HAL_GPIO_DeInit+0x214>)
 800739a:	4013      	ands	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800739e:	4b41      	ldr	r3, [pc, #260]	; (80074a4 <HAL_GPIO_DeInit+0x214>)
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	43db      	mvns	r3, r3
 80073a6:	493f      	ldr	r1, [pc, #252]	; (80074a4 <HAL_GPIO_DeInit+0x214>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	60cb      	str	r3, [r1, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	220f      	movs	r2, #15
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	60bb      	str	r3, [r7, #8]
      /* Configure IO Direction in Input Floating Mode */
 80073bc:	4a2e      	ldr	r2, [pc, #184]	; (8007478 <HAL_GPIO_DeInit+0x1e8>)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	089b      	lsrs	r3, r3, #2
 80073c2:	3302      	adds	r3, #2
 80073c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	43da      	mvns	r2, r3
 80073cc:	482a      	ldr	r0, [pc, #168]	; (8007478 <HAL_GPIO_DeInit+0x1e8>)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	089b      	lsrs	r3, r3, #2
 80073d2:	400a      	ands	r2, r1
 80073d4:	3302      	adds	r3, #2
 80073d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	2103      	movs	r1, #3
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	43db      	mvns	r3, r3
 80073ea:	401a      	ands	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	08da      	lsrs	r2, r3, #3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3208      	adds	r2, #8
 80073f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	220f      	movs	r2, #15
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43db      	mvns	r3, r3
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	08d2      	lsrs	r2, r2, #3
 8007410:	4019      	ands	r1, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3208      	adds	r2, #8
 8007416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	2103      	movs	r1, #3
 8007424:	fa01 f303 	lsl.w	r3, r1, r3
 8007428:	43db      	mvns	r3, r3
 800742a:	401a      	ands	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	2101      	movs	r1, #1
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	fa01 f303 	lsl.w	r3, r1, r3
 800743c:	43db      	mvns	r3, r3
 800743e:	401a      	ands	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	2103      	movs	r1, #3
 800744e:	fa01 f303 	lsl.w	r3, r1, r3
 8007452:	43db      	mvns	r3, r3
 8007454:	401a      	ands	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	609a      	str	r2, [r3, #8]
    ioposition = ((uint32_t)0x01) << position;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	3301      	adds	r3, #1
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b0f      	cmp	r3, #15
 8007464:	f67f af22 	bls.w	80072ac <HAL_GPIO_DeInit+0x1c>

/**
  * @}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40013800 	.word	0x40013800
 800747c:	40020000 	.word	0x40020000
 8007480:	40020400 	.word	0x40020400
 8007484:	40020800 	.word	0x40020800
 8007488:	40020c00 	.word	0x40020c00
 800748c:	40021000 	.word	0x40021000
 8007490:	40021400 	.word	0x40021400
 8007494:	40021800 	.word	0x40021800
 8007498:	40021c00 	.word	0x40021c00
 800749c:	40022000 	.word	0x40022000
 80074a0:	40022400 	.word	0x40022400
 80074a4:	40013c00 	.word	0x40013c00

080074a8 <HAL_GPIO_ReadPin>:
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  GPIO_PinState bitstatus;

  /* Check the parameters */
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	807b      	strh	r3, [r7, #2]
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
  {
    bitstatus = GPIO_PIN_SET;
  }
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	887b      	ldrh	r3, [r7, #2]
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <HAL_GPIO_ReadPin+0x1e>
  else
  {
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
 80074c4:	e001      	b.n	80074ca <HAL_GPIO_ReadPin+0x22>
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]

/**
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
  * @brief  Sets or clears the selected data port bit.
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_GPIO_WritePin>:
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	807b      	strh	r3, [r7, #2]
 80074e4:	4613      	mov	r3, r2
 80074e6:	707b      	strb	r3, [r7, #1]

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
  }
 80074e8:	787b      	ldrb	r3, [r7, #1]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_WritePin+0x1e>
  else
  {
 80074ee:	887a      	ldrh	r2, [r7, #2]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	619a      	str	r2, [r3, #24]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}

/**
  * @brief  Toggles the specified GPIO pins.
 80074f4:	e003      	b.n	80074fe <HAL_GPIO_WritePin+0x26>

 80074f6:	887b      	ldrh	r3, [r7, #2]
 80074f8:	041a      	lsls	r2, r3, #16
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	619a      	str	r2, [r3, #24]
  * @brief  Toggles the specified GPIO pins.
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <HAL_GPIO_TogglePin>:
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  uint32_t odr;

  /* Check the parameters */
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	807b      	strh	r3, [r7, #2]

  /* get current Output Data Register value */
  odr = GPIOx->ODR;

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	60fb      	str	r3, [r7, #12]
}

/**
 800751c:	887a      	ldrh	r2, [r7, #2]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4013      	ands	r3, r2
 8007522:	041a      	lsls	r2, r3, #16
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	43d9      	mvns	r1, r3
 8007528:	887b      	ldrh	r3, [r7, #2]
 800752a:	400b      	ands	r3, r1
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	619a      	str	r2, [r3, #24]
  * @brief  Locks GPIO Pins configuration registers.
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
	...

08007540 <HAL_GPIO_EXTI_IRQHandler>:
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
  {
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800754a:	4b08      	ldr	r3, [pc, #32]	; (800756c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	4013      	ands	r3, r2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d006      	beq.n	8007564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  }
}
 8007556:	4a05      	ldr	r2, [pc, #20]	; (800756c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	6153      	str	r3, [r2, #20]

 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 f806 	bl	8007570 <HAL_GPIO_EXTI_Callback>
/**
  * @brief  EXTI line detection callbacks.
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40013c00 	.word	0x40013c00

08007570 <HAL_GPIO_EXTI_Callback>:
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	80fb      	strh	r3, [r7, #6]
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}

/**
  * @}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <HAL_HCD_Init>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx;
 8007586:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007588:	b08f      	sub	sp, #60	; 0x3c
 800758a:	af0a      	add	r7, sp, #40	; 0x28
 800758c:	6078      	str	r0, [r7, #4]

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
  {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_HCD_Init+0x12>
    return HAL_ERROR;
  }
 8007594:	2301      	movs	r3, #1
 8007596:	e054      	b.n	8007642 <HAL_HCD_Init+0xbc>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;

 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60fb      	str	r3, [r7, #12]
  if (hhcd->State == HAL_HCD_STATE_RESET)
  {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_HCD_Init+0x32>
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;

 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f00f ff0c 	bl	80173d0 <HAL_HCD_MspInit>
  }

  hhcd->State = HAL_HCD_STATE_BUSY;

 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2203      	movs	r2, #3
 80075bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
  {
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <HAL_HCD_Init+0x4c>
    hhcd->Init.dma_enable = 0U;
  }
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);

 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f009 fd7d 	bl	80110d6 <USB_DisableGlobalInt>
  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);

 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	687e      	ldr	r6, [r7, #4]
 80075e4:	466d      	mov	r5, sp
 80075e6:	f106 0410 	add.w	r4, r6, #16
 80075ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80075f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80075fa:	1d33      	adds	r3, r6, #4
 80075fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075fe:	6838      	ldr	r0, [r7, #0]
 8007600:	f009 fd00 	bl	8011004 <USB_CoreInit>
  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);

 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2101      	movs	r1, #1
 800760a:	4618      	mov	r0, r3
 800760c:	f009 fd74 	bl	80110f8 <USB_SetCurrentMode>
  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);

 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	603b      	str	r3, [r7, #0]
 8007616:	687e      	ldr	r6, [r7, #4]
 8007618:	466d      	mov	r5, sp
 800761a:	f106 0410 	add.w	r4, r6, #16
 800761e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800762a:	e885 0003 	stmia.w	r5, {r0, r1}
 800762e:	1d33      	adds	r3, r6, #4
 8007630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007632:	6838      	ldr	r0, [r7, #0]
 8007634:	f009 fe86 	bl	8011344 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;

 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
  return HAL_OK;
}
 8007640:	2300      	movs	r3, #0

 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800764a <HAL_HCD_HC_Init>:
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
  HAL_StatusTypeDef status;
 800764a:	b590      	push	{r4, r7, lr}
 800764c:	b089      	sub	sp, #36	; 0x24
 800764e:	af04      	add	r7, sp, #16
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	4608      	mov	r0, r1
 8007654:	4611      	mov	r1, r2
 8007656:	461a      	mov	r2, r3
 8007658:	4603      	mov	r3, r0
 800765a:	70fb      	strb	r3, [r7, #3]
 800765c:	460b      	mov	r3, r1
 800765e:	70bb      	strb	r3, [r7, #2]
 8007660:	4613      	mov	r3, r2
 8007662:	707b      	strb	r3, [r7, #1]

  __HAL_LOCK(hhcd);
  hhcd->hc[ch_num].do_ping = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_HCD_HC_Init+0x28>
 800766e:	2302      	movs	r3, #2
 8007670:	e076      	b.n	8007760 <HAL_HCD_HC_Init+0x116>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].dev_addr = dev_address;
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	212c      	movs	r1, #44	; 0x2c
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	4413      	add	r3, r2
 8007686:	333d      	adds	r3, #61	; 0x3d
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	212c      	movs	r1, #44	; 0x2c
 8007692:	fb01 f303 	mul.w	r3, r1, r3
 8007696:	4413      	add	r3, r2
 8007698:	3338      	adds	r3, #56	; 0x38
 800769a:	787a      	ldrb	r2, [r7, #1]
 800769c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	212c      	movs	r1, #44	; 0x2c
 80076a4:	fb01 f303 	mul.w	r3, r1, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	3340      	adds	r3, #64	; 0x40
 80076ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80076ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	212c      	movs	r1, #44	; 0x2c
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	3339      	adds	r3, #57	; 0x39
 80076be:	78fa      	ldrb	r2, [r7, #3]
 80076c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	212c      	movs	r1, #44	; 0x2c
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	333f      	adds	r3, #63	; 0x3f
 80076d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80076d4:	701a      	strb	r2, [r3, #0]

 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	78ba      	ldrb	r2, [r7, #2]
 80076da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80076de:	b2d0      	uxtb	r0, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	212c      	movs	r1, #44	; 0x2c
 80076e4:	fb01 f303 	mul.w	r3, r1, r3
 80076e8:	4413      	add	r3, r2
 80076ea:	333a      	adds	r3, #58	; 0x3a
 80076ec:	4602      	mov	r2, r0
 80076ee:	701a      	strb	r2, [r3, #0]
  if ((epnum & 0x80U) == 0x80U)
  {
 80076f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	da09      	bge.n	800770c <HAL_HCD_HC_Init+0xc2>
    hhcd->hc[ch_num].ep_is_in = 1U;
  }
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	212c      	movs	r1, #44	; 0x2c
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	4413      	add	r3, r2
 8007704:	333b      	adds	r3, #59	; 0x3b
 8007706:	2201      	movs	r2, #1
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e008      	b.n	800771e <HAL_HCD_HC_Init+0xd4>
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	212c      	movs	r1, #44	; 0x2c
 8007712:	fb01 f303 	mul.w	r3, r1, r3
 8007716:	4413      	add	r3, r2
 8007718:	333b      	adds	r3, #59	; 0x3b
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]

  hhcd->hc[ch_num].speed = speed;

 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	212c      	movs	r1, #44	; 0x2c
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	4413      	add	r3, r2
 800772a:	333c      	adds	r3, #60	; 0x3c
 800772c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007730:	701a      	strb	r2, [r3, #0]
  status =  USB_HC_Init(hhcd->Instance,
                        ch_num,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	787c      	ldrb	r4, [r7, #1]
 8007738:	78ba      	ldrb	r2, [r7, #2]
 800773a:	78f9      	ldrb	r1, [r7, #3]
 800773c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800773e:	9302      	str	r3, [sp, #8]
 8007740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	f897 3020 	ldrb.w	r3, [r7, #32]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4623      	mov	r3, r4
 800774e:	f009 ff6f 	bl	8011630 <USB_HC_Init>
 8007752:	4603      	mov	r3, r0
 8007754:	73fb      	strb	r3, [r7, #15]
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);

 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  return status;
}
 800775e:	7bfb      	ldrb	r3, [r7, #15]

 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	bd90      	pop	{r4, r7, pc}

08007768 <HAL_HCD_HC_Halt>:
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]

 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
  __HAL_LOCK(hhcd);
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_HCD_HC_Halt+0x1e>
 8007782:	2302      	movs	r3, #2
 8007784:	e00f      	b.n	80077a6 <HAL_HCD_HC_Halt+0x3e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_UNLOCK(hhcd);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	4611      	mov	r1, r2
 8007796:	4618      	mov	r0, r3
 8007798:	f00a f9ab 	bl	8011af2 <USB_HC_Halt>

 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  return status;
}
 80077a4:	7bfb      	ldrb	r3, [r7, #15]

 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
  hhcd->hc[ch_num].ep_is_in = direction;
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	4608      	mov	r0, r1
 80077ba:	4611      	mov	r1, r2
 80077bc:	461a      	mov	r2, r3
 80077be:	4603      	mov	r3, r0
 80077c0:	70fb      	strb	r3, [r7, #3]
 80077c2:	460b      	mov	r3, r1
 80077c4:	70bb      	strb	r3, [r7, #2]
 80077c6:	4613      	mov	r3, r2
 80077c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	212c      	movs	r1, #44	; 0x2c
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	333b      	adds	r3, #59	; 0x3b
 80077d8:	78ba      	ldrb	r2, [r7, #2]
 80077da:	701a      	strb	r2, [r3, #0]

 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	212c      	movs	r1, #44	; 0x2c
 80077e2:	fb01 f303 	mul.w	r3, r1, r3
 80077e6:	4413      	add	r3, r2
 80077e8:	333f      	adds	r3, #63	; 0x3f
 80077ea:	787a      	ldrb	r2, [r7, #1]
 80077ec:	701a      	strb	r2, [r3, #0]
  if (token == 0U)
  {
 80077ee:	7c3b      	ldrb	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d112      	bne.n	800781a <HAL_HCD_HC_SubmitRequest+0x6a>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
    hhcd->hc[ch_num].do_ping = do_ping;
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	212c      	movs	r1, #44	; 0x2c
 80077fa:	fb01 f303 	mul.w	r3, r1, r3
 80077fe:	4413      	add	r3, r2
 8007800:	3342      	adds	r3, #66	; 0x42
 8007802:	2203      	movs	r2, #3
 8007804:	701a      	strb	r2, [r3, #0]
  }
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	212c      	movs	r1, #44	; 0x2c
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	4413      	add	r3, r2
 8007812:	333d      	adds	r3, #61	; 0x3d
 8007814:	7f3a      	ldrb	r2, [r7, #28]
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	e008      	b.n	800782c <HAL_HCD_HC_SubmitRequest+0x7c>
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	212c      	movs	r1, #44	; 0x2c
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	4413      	add	r3, r2
 8007826:	3342      	adds	r3, #66	; 0x42
 8007828:	2202      	movs	r2, #2
 800782a:	701a      	strb	r2, [r3, #0]

  /* Manage Data Toggle */
  switch (ep_type)
  {
 800782c:	787b      	ldrb	r3, [r7, #1]
 800782e:	2b03      	cmp	r3, #3
 8007830:	f200 80c6 	bhi.w	80079c0 <HAL_HCD_HC_SubmitRequest+0x210>
 8007834:	a201      	add	r2, pc, #4	; (adr r2, 800783c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	0800784d 	.word	0x0800784d
 8007840:	080079ad 	.word	0x080079ad
 8007844:	080078b1 	.word	0x080078b1
 8007848:	0800792f 	.word	0x0800792f
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
      {
 800784c:	7c3b      	ldrb	r3, [r7, #16]
 800784e:	2b01      	cmp	r3, #1
 8007850:	f040 80b8 	bne.w	80079c4 <HAL_HCD_HC_SubmitRequest+0x214>
 8007854:	78bb      	ldrb	r3, [r7, #2]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 80b4 	bne.w	80079c4 <HAL_HCD_HC_SubmitRequest+0x214>
        if (length == 0U)
        {
 800785c:	8b3b      	ldrh	r3, [r7, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d108      	bne.n	8007874 <HAL_HCD_HC_SubmitRequest+0xc4>
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
        }
 8007862:	78fb      	ldrb	r3, [r7, #3]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	212c      	movs	r1, #44	; 0x2c
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	4413      	add	r3, r2
 800786e:	3355      	adds	r3, #85	; 0x55
 8007870:	2201      	movs	r2, #1
 8007872:	701a      	strb	r2, [r3, #0]

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
        {
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	212c      	movs	r1, #44	; 0x2c
 800787a:	fb01 f303 	mul.w	r3, r1, r3
 800787e:	4413      	add	r3, r2
 8007880:	3355      	adds	r3, #85	; 0x55
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_HCD_HC_SubmitRequest+0xec>
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
        }
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	212c      	movs	r1, #44	; 0x2c
 800788e:	fb01 f303 	mul.w	r3, r1, r3
 8007892:	4413      	add	r3, r2
 8007894:	3342      	adds	r3, #66	; 0x42
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;

 800789a:	e093      	b.n	80079c4 <HAL_HCD_HC_SubmitRequest+0x214>
        }
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	212c      	movs	r1, #44	; 0x2c
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	3342      	adds	r3, #66	; 0x42
 80078aa:	2202      	movs	r2, #2
 80078ac:	701a      	strb	r2, [r3, #0]

 80078ae:	e089      	b.n	80079c4 <HAL_HCD_HC_SubmitRequest+0x214>
    case EP_TYPE_BULK:
      if (direction == 0U)
      {
 80078b0:	78bb      	ldrb	r3, [r7, #2]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11d      	bne.n	80078f2 <HAL_HCD_HC_SubmitRequest+0x142>
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
        {
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	212c      	movs	r1, #44	; 0x2c
 80078bc:	fb01 f303 	mul.w	r3, r1, r3
 80078c0:	4413      	add	r3, r2
 80078c2:	3355      	adds	r3, #85	; 0x55
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <HAL_HCD_HC_SubmitRequest+0x12e>
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
        }
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	212c      	movs	r1, #44	; 0x2c
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	3342      	adds	r3, #66	; 0x42
 80078d8:	2200      	movs	r2, #0
 80078da:	701a      	strb	r2, [r3, #0]
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
    case EP_TYPE_INTR:
 80078dc:	e073      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
        }
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	212c      	movs	r1, #44	; 0x2c
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	3342      	adds	r3, #66	; 0x42
 80078ec:	2202      	movs	r2, #2
 80078ee:	701a      	strb	r2, [r3, #0]
    case EP_TYPE_INTR:
 80078f0:	e069      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
        {
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	212c      	movs	r1, #44	; 0x2c
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	3354      	adds	r3, #84	; 0x54
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <HAL_HCD_HC_SubmitRequest+0x16a>
        }
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	212c      	movs	r1, #44	; 0x2c
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	4413      	add	r3, r2
 8007912:	3342      	adds	r3, #66	; 0x42
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
    case EP_TYPE_INTR:
 8007918:	e055      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
        }
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	212c      	movs	r1, #44	; 0x2c
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	4413      	add	r3, r2
 8007926:	3342      	adds	r3, #66	; 0x42
 8007928:	2202      	movs	r2, #2
 800792a:	701a      	strb	r2, [r3, #0]
    case EP_TYPE_INTR:
 800792c:	e04b      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
      if (direction == 0U)
      {
 800792e:	78bb      	ldrb	r3, [r7, #2]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d11d      	bne.n	8007970 <HAL_HCD_HC_SubmitRequest+0x1c0>
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
        {
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	212c      	movs	r1, #44	; 0x2c
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	3355      	adds	r3, #85	; 0x55
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d109      	bne.n	800795c <HAL_HCD_HC_SubmitRequest+0x1ac>
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
        }
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	212c      	movs	r1, #44	; 0x2c
 800794e:	fb01 f303 	mul.w	r3, r1, r3
 8007952:	4413      	add	r3, r2
 8007954:	3342      	adds	r3, #66	; 0x42
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;

 800795a:	e034      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
        }
 800795c:	78fb      	ldrb	r3, [r7, #3]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	212c      	movs	r1, #44	; 0x2c
 8007962:	fb01 f303 	mul.w	r3, r1, r3
 8007966:	4413      	add	r3, r2
 8007968:	3342      	adds	r3, #66	; 0x42
 800796a:	2202      	movs	r2, #2
 800796c:	701a      	strb	r2, [r3, #0]

 800796e:	e02a      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
        {
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	212c      	movs	r1, #44	; 0x2c
 8007976:	fb01 f303 	mul.w	r3, r1, r3
 800797a:	4413      	add	r3, r2
 800797c:	3354      	adds	r3, #84	; 0x54
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <HAL_HCD_HC_SubmitRequest+0x1e8>
        }
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	212c      	movs	r1, #44	; 0x2c
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	3342      	adds	r3, #66	; 0x42
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]

 8007996:	e016      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
        }
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	212c      	movs	r1, #44	; 0x2c
 800799e:	fb01 f303 	mul.w	r3, r1, r3
 80079a2:	4413      	add	r3, r2
 80079a4:	3342      	adds	r3, #66	; 0x42
 80079a6:	2202      	movs	r2, #2
 80079a8:	701a      	strb	r2, [r3, #0]

 80079aa:	e00c      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
      break;
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	212c      	movs	r1, #44	; 0x2c
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	3342      	adds	r3, #66	; 0x42
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]

 80079be:	e002      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>
    default:
      break;
  }
 80079c0:	bf00      	nop
 80079c2:	e000      	b.n	80079c6 <HAL_HCD_HC_SubmitRequest+0x216>

 80079c4:	bf00      	nop

  hhcd->hc[ch_num].xfer_buff = pbuff;
  hhcd->hc[ch_num].xfer_len  = length;
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	212c      	movs	r1, #44	; 0x2c
 80079cc:	fb01 f303 	mul.w	r3, r1, r3
 80079d0:	4413      	add	r3, r2
 80079d2:	3344      	adds	r3, #68	; 0x44
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80079d8:	78fb      	ldrb	r3, [r7, #3]
 80079da:	8b3a      	ldrh	r2, [r7, #24]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	202c      	movs	r0, #44	; 0x2c
 80079e0:	fb00 f303 	mul.w	r3, r0, r3
 80079e4:	440b      	add	r3, r1
 80079e6:	334c      	adds	r3, #76	; 0x4c
 80079e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	212c      	movs	r1, #44	; 0x2c
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	4413      	add	r3, r2
 80079f6:	3360      	adds	r3, #96	; 0x60
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	212c      	movs	r1, #44	; 0x2c
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	4413      	add	r3, r2
 8007a08:	3350      	adds	r3, #80	; 0x50
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	212c      	movs	r1, #44	; 0x2c
 8007a14:	fb01 f303 	mul.w	r3, r1, r3
 8007a18:	4413      	add	r3, r2
 8007a1a:	3339      	adds	r3, #57	; 0x39
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	701a      	strb	r2, [r3, #0]

 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	212c      	movs	r1, #44	; 0x2c
 8007a26:	fb01 f303 	mul.w	r3, r1, r3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3361      	adds	r3, #97	; 0x61
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
}
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	222c      	movs	r2, #44	; 0x2c
 8007a3a:	fb02 f303 	mul.w	r3, r2, r3
 8007a3e:	3338      	adds	r3, #56	; 0x38
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	18d1      	adds	r1, r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f009 fefe 	bl	801184c <USB_HC_StartXfer>
 8007a50:	4603      	mov	r3, r0

 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop

08007a5c <HAL_HCD_IRQHandler>:
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	613b      	str	r3, [r7, #16]
  uint32_t i;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	60fb      	str	r3, [r7, #12]
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f009 fc23 	bl	80112be <USB_GetMode>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	f040 80ef 	bne.w	8007c5e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f009 fc07 	bl	8011298 <USB_ReadInterrupts>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 80e5 	beq.w	8007c5c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f009 fbfe 	bl	8011298 <USB_ReadInterrupts>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aa6:	d104      	bne.n	8007ab2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007ab0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f009 fbee 	bl	8011298 <USB_ReadInterrupts>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac6:	d104      	bne.n	8007ad2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ad0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f009 fbde 	bl	8011298 <USB_ReadInterrupts>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ae6:	d104      	bne.n	8007af2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007af0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f009 fbce 	bl	8011298 <USB_ReadInterrupts>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d103      	bne.n	8007b0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f009 fbc0 	bl	8011298 <USB_ReadInterrupts>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b22:	d115      	bne.n	8007b50 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007b2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d108      	bne.n	8007b50 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
        (void)USB_FlushRxFifo(USBx);

        /* Restore FS Clock */
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f00f fcb8 	bl	80174b4 <HAL_HCD_Disconnect_Callback>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);

        /* Handle Host Port Disconnect Interrupt */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f009 fcaa 	bl	80114a4 <USB_InitFSLSPClkSel>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f009 fb9f 	bl	8011298 <USB_ReadInterrupts>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b64:	d102      	bne.n	8007b6c <HAL_HCD_IRQHandler+0x110>
      }
    }
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 f9ff 	bl	8008f6a <HCD_Port_IRQHandler>

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
    {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f009 fb91 	bl	8011298 <USB_ReadInterrupts>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d106      	bne.n	8007b8e <HAL_HCD_IRQHandler+0x132>
      HCD_Port_IRQHandler(hhcd);
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f00f fc7b 	bl	801747c <HAL_HCD_SOF_Callback>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2208      	movs	r2, #8
 8007b8c:	615a      	str	r2, [r3, #20]
#else
      HAL_HCD_SOF_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f009 fb80 	bl	8011298 <USB_ReadInterrupts>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d101      	bne.n	8007ba6 <HAL_HCD_IRQHandler+0x14a>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <HAL_HCD_IRQHandler+0x14c>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d012      	beq.n	8007bd2 <HAL_HCD_IRQHandler+0x176>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
    }
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0210 	bic.w	r2, r2, #16
 8007bba:	619a      	str	r2, [r3, #24]

    /* Handle Rx Queue Level Interrupts */
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f902 	bl	8008dc6 <HCD_RXQLVL_IRQHandler>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
    {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0210 	orr.w	r2, r2, #16
 8007bd0:	619a      	str	r2, [r3, #24]
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);

      HCD_RXQLVL_IRQHandler(hhcd);

 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f009 fb5e 	bl	8011298 <USB_ReadInterrupts>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007be6:	d13a      	bne.n	8007c5e <HAL_HCD_IRQHandler+0x202>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f009 ff6f 	bl	8011ad0 <USB_HC_ReadInterrupt>
 8007bf2:	60b8      	str	r0, [r7, #8]

 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e025      	b.n	8007c46 <HAL_HCD_IRQHandler+0x1ea>
    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d018      	beq.n	8007c40 <HAL_HCD_IRQHandler+0x1e4>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c24:	d106      	bne.n	8007c34 <HAL_HCD_IRQHandler+0x1d8>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
      {
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f8ab 	bl	8007d88 <HCD_HC_IN_IRQHandler>
 8007c32:	e005      	b.n	8007c40 <HAL_HCD_IRQHandler+0x1e4>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
          {
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fcc6 	bl	80085cc <HCD_HC_OUT_IRQHandler>

 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	3301      	adds	r3, #1
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d3d4      	bcc.n	8007bfa <HAL_HCD_IRQHandler+0x19e>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
          }
          else
          {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c58:	615a      	str	r2, [r3, #20]
 8007c5a:	e000      	b.n	8007c5e <HAL_HCD_IRQHandler+0x202>
      return;
 8007c5c:	bf00      	nop
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
          }
        }
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_HCD_Start>:

@endverbatim
  * @{
  */

/**
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  * @brief  Start the host driver.
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_HCD_Start+0x16>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e013      	b.n	8007ca2 <HAL_HCD_Start+0x3e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  * @param  hhcd HCD handle
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f009 fa14 	bl	80110b4 <USB_EnableGlobalInt>
  * @retval HAL status
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2101      	movs	r1, #1
 8007c92:	4618      	mov	r0, r3
 8007c94:	f009 fc6a 	bl	801156c <USB_DriveVbus>
  */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007ca0:	2300      	movs	r3, #0
  __HAL_LOCK(hhcd);
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_HCD_Stop>:
  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
  __HAL_UNLOCK(hhcd);

  return HAL_OK;
}
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]

 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d101      	bne.n	8007cc0 <HAL_HCD_Stop+0x16>
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	e00d      	b.n	8007cdc <HAL_HCD_Stop+0x32>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
/**
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f00a f869 	bl	8011da4 <USB_StopHost>
  * @brief  Stop the host driver.
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  * @param  hhcd HCD handle
  * @retval HAL status
 8007cda:	2300      	movs	r3, #0
  */
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_HCD_ResetPort>:
{
  __HAL_LOCK(hhcd);
  (void)USB_StopHost(hhcd->Instance);
  __HAL_UNLOCK(hhcd);

  return HAL_OK;
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
}
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f009 fc11 	bl	8011518 <USB_ResetPort>
 8007cf6:	4603      	mov	r3, r0

 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_HCD_HC_GetURBState>:
  * @brief  Return  URB state for a channel.
  * @param  hhcd HCD handle
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval URB state.
  *          This parameter can be one of these values:
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  *            URB_IDLE/
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	212c      	movs	r1, #44	; 0x2c
 8007d12:	fb01 f303 	mul.w	r3, r1, r3
 8007d16:	4413      	add	r3, r2
 8007d18:	3360      	adds	r3, #96	; 0x60
 8007d1a:	781b      	ldrb	r3, [r3, #0]
  *            URB_DONE/
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_HCD_HC_GetXferCount>:
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
  return hhcd->hc[chnum].urb_state;
}


 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
/**
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	212c      	movs	r1, #44	; 0x2c
 8007d3a:	fb01 f303 	mul.w	r3, r1, r3
 8007d3e:	4413      	add	r3, r2
 8007d40:	3350      	adds	r3, #80	; 0x50
 8007d42:	681b      	ldr	r3, [r3, #0]
  * @brief  Return the last host transfer size.
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_HCD_GetCurrentFrame>:
  *            HC_BBLERR/
  *            HC_DATATGLERR
  */
HCD_HCStateTypeDef  HAL_HCD_HC_GetState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
  return hhcd->hc[chnum].state;
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
}
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f009 fc55 	bl	801160c <USB_GetCurrentFrame>
 8007d62:	4603      	mov	r3, r0

 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_HCD_GetCurrentSpeed>:
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
}
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f009 fc30 	bl	80115de <USB_GetHostSpeed>
 8007d7e:	4603      	mov	r3, r0

 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HCD_HC_IN_IRQHandler>:
  * @}
  */

/** @addtogroup HCD_Private_Functions
  * @{
  */
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
/**
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	617b      	str	r3, [r7, #20]
  * @brief  Handle Host Channel IN interrupt requests.
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	613b      	str	r3, [r7, #16]
  * @param  hhcd HCD handle
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	60fb      	str	r3, [r7, #12]
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d119      	bne.n	8007dec <HCD_HC_IN_IRQHandler+0x64>
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	2304      	movs	r3, #4
 8007dc8:	6093      	str	r3, [r2, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007de4:	f043 0302 	orr.w	r3, r3, #2
 8007de8:	60d3      	str	r3, [r2, #12]
 8007dea:	e101      	b.n	8007ff0 <HCD_HC_IN_IRQHandler+0x268>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t ch_num = (uint32_t)chnum;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e02:	d12b      	bne.n	8007e5c <HCD_HC_IN_IRQHandler+0xd4>

  uint32_t tmpreg;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e10:	461a      	mov	r2, r3
 8007e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e16:	6093      	str	r3, [r2, #8]

 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	212c      	movs	r1, #44	; 0x2c
 8007e1e:	fb01 f303 	mul.w	r3, r1, r3
 8007e22:	4413      	add	r3, r2
 8007e24:	3361      	adds	r3, #97	; 0x61
 8007e26:	2207      	movs	r2, #7
 8007e28:	701a      	strb	r2, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e44:	f043 0302 	orr.w	r3, r3, #2
 8007e48:	60d3      	str	r3, [r2, #12]
  {
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	4611      	mov	r1, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f009 fe4c 	bl	8011af2 <USB_HC_Halt>
 8007e5a:	e0c9      	b.n	8007ff0 <HCD_HC_IN_IRQHandler+0x268>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d109      	bne.n	8007e86 <HCD_HC_IN_IRQHandler+0xfe>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
  }
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7e:	461a      	mov	r2, r3
 8007e80:	2320      	movs	r3, #32
 8007e82:	6093      	str	r3, [r2, #8]
 8007e84:	e0b4      	b.n	8007ff0 <HCD_HC_IN_IRQHandler+0x268>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
  {
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d133      	bne.n	8007f04 <HCD_HC_IN_IRQHandler+0x17c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb6:	f043 0302 	orr.w	r3, r3, #2
 8007eba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	212c      	movs	r1, #44	; 0x2c
 8007ec2:	fb01 f303 	mul.w	r3, r1, r3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	3361      	adds	r3, #97	; 0x61
 8007eca:	2205      	movs	r2, #5
 8007ecc:	701a      	strb	r2, [r3, #0]
  }
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eda:	461a      	mov	r2, r3
 8007edc:	2310      	movs	r3, #16
 8007ede:	6093      	str	r3, [r2, #8]
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eec:	461a      	mov	r2, r3
 8007eee:	2308      	movs	r3, #8
 8007ef0:	6093      	str	r3, [r2, #8]
  {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f009 fdf8 	bl	8011af2 <USB_HC_Halt>
 8007f02:	e075      	b.n	8007ff0 <HCD_HC_IN_IRQHandler+0x268>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
  }
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1a:	d134      	bne.n	8007f86 <HCD_HC_IN_IRQHandler+0x1fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
  {
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	0151      	lsls	r1, r2, #5
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	440a      	add	r2, r1
 8007f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f36:	f043 0302 	orr.w	r3, r3, #2
 8007f3a:	60d3      	str	r3, [r2, #12]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	212c      	movs	r1, #44	; 0x2c
 8007f42:	fb01 f303 	mul.w	r3, r1, r3
 8007f46:	4413      	add	r3, r2
 8007f48:	3361      	adds	r3, #97	; 0x61
 8007f4a:	2208      	movs	r2, #8
 8007f4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_STALL;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f72:	6093      	str	r3, [r2, #8]
  }
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f009 fdb7 	bl	8011af2 <USB_HC_Halt>
 8007f84:	e034      	b.n	8007ff0 <HCD_HC_IN_IRQHandler+0x268>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
  {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f98:	2b80      	cmp	r3, #128	; 0x80
 8007f9a:	d129      	bne.n	8007ff0 <HCD_HC_IN_IRQHandler+0x268>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb6:	f043 0302 	orr.w	r3, r3, #2
 8007fba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	212c      	movs	r1, #44	; 0x2c
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	3361      	adds	r3, #97	; 0x61
 8007fca:	2206      	movs	r2, #6
 8007fcc:	701a      	strb	r2, [r3, #0]
  }
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f009 fd8a 	bl	8011af2 <USB_HC_Halt>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fea:	461a      	mov	r2, r3
 8007fec:	2380      	movs	r3, #128	; 0x80
 8007fee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
    hhcd->hc[ch_num].state = HC_XACTERR;
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
  }
  else
  {
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008006:	d122      	bne.n	800804e <HCD_HC_IN_IRQHandler+0x2c6>
    /* ... */
  }
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4413      	add	r3, r2
 8008010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	440a      	add	r2, r1
 800801e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008022:	f043 0302 	orr.w	r3, r3, #2
 8008026:	60d3      	str	r3, [r2, #12]

 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f009 fd5d 	bl	8011af2 <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4413      	add	r3, r2
 8008040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008044:	461a      	mov	r2, r3
 8008046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800804a:	6093      	str	r3, [r2, #8]
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
  }
  else
  {
 800804c:	e2ba      	b.n	80085c4 <HCD_HC_IN_IRQHandler+0x83c>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	4413      	add	r3, r2
 8008056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b01      	cmp	r3, #1
 8008062:	f040 811b 	bne.w	800829c <HCD_HC_IN_IRQHandler+0x514>
  }
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d019      	beq.n	80080a2 <HCD_HC_IN_IRQHandler+0x31a>
  {
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	212c      	movs	r1, #44	; 0x2c
 8008074:	fb01 f303 	mul.w	r3, r1, r3
 8008078:	4413      	add	r3, r2
 800807a:	3348      	adds	r3, #72	; 0x48
 800807c:	681a      	ldr	r2, [r3, #0]
    if (hhcd->Init.dma_enable != 0U)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	0159      	lsls	r1, r3, #5
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	440b      	add	r3, r1
 8008086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f3c3 0312 	ubfx	r3, r3, #0, #19
  {
 8008090:	1ad2      	subs	r2, r2, r3
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	202c      	movs	r0, #44	; 0x2c
 8008098:	fb00 f303 	mul.w	r3, r0, r3
 800809c:	440b      	add	r3, r1
 800809e:	3350      	adds	r3, #80	; 0x50
 80080a0:	601a      	str	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	212c      	movs	r1, #44	; 0x2c
 80080a8:	fb01 f303 	mul.w	r3, r1, r3
 80080ac:	4413      	add	r3, r2
 80080ae:	3361      	adds	r3, #97	; 0x61
 80080b0:	2201      	movs	r2, #1
 80080b2:	701a      	strb	r2, [r3, #0]
    }
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	212c      	movs	r1, #44	; 0x2c
 80080ba:	fb01 f303 	mul.w	r3, r1, r3
 80080be:	4413      	add	r3, r2
 80080c0:	335c      	adds	r3, #92	; 0x5c
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d2:	461a      	mov	r2, r3
 80080d4:	2301      	movs	r3, #1
 80080d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	212c      	movs	r1, #44	; 0x2c
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	4413      	add	r3, r2
 80080e4:	333f      	adds	r3, #63	; 0x3f
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d009      	beq.n	8008100 <HCD_HC_IN_IRQHandler+0x378>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	212c      	movs	r1, #44	; 0x2c
 80080f2:	fb01 f303 	mul.w	r3, r1, r3
 80080f6:	4413      	add	r3, r2
 80080f8:	333f      	adds	r3, #63	; 0x3f
 80080fa:	781b      	ldrb	r3, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d121      	bne.n	8008144 <HCD_HC_IN_IRQHandler+0x3bc>
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	4413      	add	r3, r2
 8008108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	440a      	add	r2, r1
 8008116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800811a:	f043 0302 	orr.w	r3, r3, #2
 800811e:	60d3      	str	r3, [r2, #12]
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f009 fce1 	bl	8011af2 <USB_HC_Halt>
    {
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	4413      	add	r3, r2
 8008138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813c:	461a      	mov	r2, r3
 800813e:	2310      	movs	r3, #16
 8008140:	6093      	str	r3, [r2, #8]
 8008142:	e066      	b.n	8008212 <HCD_HC_IN_IRQHandler+0x48a>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	212c      	movs	r1, #44	; 0x2c
 800814a:	fb01 f303 	mul.w	r3, r1, r3
 800814e:	4413      	add	r3, r2
 8008150:	333f      	adds	r3, #63	; 0x3f
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b03      	cmp	r3, #3
 8008156:	d127      	bne.n	80081a8 <HCD_HC_IN_IRQHandler+0x420>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	4413      	add	r3, r2
 8008160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	440a      	add	r2, r1
 800816e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008176:	6013      	str	r3, [r2, #0]
    {
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	212c      	movs	r1, #44	; 0x2c
 800817e:	fb01 f303 	mul.w	r3, r1, r3
 8008182:	4413      	add	r3, r2
 8008184:	3360      	adds	r3, #96	; 0x60
 8008186:	2201      	movs	r2, #1
 8008188:	701a      	strb	r2, [r3, #0]
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	b2d9      	uxtb	r1, r3
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	202c      	movs	r0, #44	; 0x2c
 8008194:	fb00 f303 	mul.w	r3, r0, r3
 8008198:	4413      	add	r3, r2
 800819a:	3360      	adds	r3, #96	; 0x60
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f00f f995 	bl	80174d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80081a6:	e034      	b.n	8008212 <HCD_HC_IN_IRQHandler+0x48a>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	212c      	movs	r1, #44	; 0x2c
 80081ae:	fb01 f303 	mul.w	r3, r1, r3
 80081b2:	4413      	add	r3, r2
 80081b4:	333f      	adds	r3, #63	; 0x3f
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d12a      	bne.n	8008212 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	212c      	movs	r1, #44	; 0x2c
 80081c2:	fb01 f303 	mul.w	r3, r1, r3
 80081c6:	4413      	add	r3, r2
 80081c8:	3360      	adds	r3, #96	; 0x60
 80081ca:	2201      	movs	r2, #1
 80081cc:	701a      	strb	r2, [r3, #0]
    {
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	212c      	movs	r1, #44	; 0x2c
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	3354      	adds	r3, #84	; 0x54
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f083 0301 	eor.w	r3, r3, #1
 80081e2:	b2d8      	uxtb	r0, r3
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	212c      	movs	r1, #44	; 0x2c
 80081ea:	fb01 f303 	mul.w	r3, r1, r3
 80081ee:	4413      	add	r3, r2
 80081f0:	3354      	adds	r3, #84	; 0x54
 80081f2:	4602      	mov	r2, r0
 80081f4:	701a      	strb	r2, [r3, #0]
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	b2d9      	uxtb	r1, r3
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	202c      	movs	r0, #44	; 0x2c
 8008200:	fb00 f303 	mul.w	r3, r0, r3
 8008204:	4413      	add	r3, r2
 8008206:	3360      	adds	r3, #96	; 0x60
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f00f f95f 	bl	80174d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    }
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d12b      	bne.n	8008272 <HCD_HC_IN_IRQHandler+0x4ea>
    if (hhcd->Init.dma_enable == 1U)
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	212c      	movs	r1, #44	; 0x2c
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	4413      	add	r3, r2
 8008226:	3348      	adds	r3, #72	; 0x48
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	202c      	movs	r0, #44	; 0x2c
 8008230:	fb00 f202 	mul.w	r2, r0, r2
 8008234:	440a      	add	r2, r1
 8008236:	3240      	adds	r2, #64	; 0x40
 8008238:	8812      	ldrh	r2, [r2, #0]
 800823a:	fbb3 f3f2 	udiv	r3, r3, r2
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 81be 	beq.w	80085c4 <HCD_HC_IN_IRQHandler+0x83c>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	212c      	movs	r1, #44	; 0x2c
 800824e:	fb01 f303 	mul.w	r3, r1, r3
 8008252:	4413      	add	r3, r2
 8008254:	3354      	adds	r3, #84	; 0x54
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	f083 0301 	eor.w	r3, r3, #1
 800825c:	b2d8      	uxtb	r0, r3
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	212c      	movs	r1, #44	; 0x2c
 8008264:	fb01 f303 	mul.w	r3, r1, r3
 8008268:	4413      	add	r3, r2
 800826a:	3354      	adds	r3, #84	; 0x54
 800826c:	4602      	mov	r2, r0
 800826e:	701a      	strb	r2, [r3, #0]
  {
 8008270:	e1a8      	b.n	80085c4 <HCD_HC_IN_IRQHandler+0x83c>
    else
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	212c      	movs	r1, #44	; 0x2c
 8008278:	fb01 f303 	mul.w	r3, r1, r3
 800827c:	4413      	add	r3, r2
 800827e:	3354      	adds	r3, #84	; 0x54
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	f083 0301 	eor.w	r3, r3, #1
 8008286:	b2d8      	uxtb	r0, r3
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	212c      	movs	r1, #44	; 0x2c
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	4413      	add	r3, r2
 8008294:	3354      	adds	r3, #84	; 0x54
 8008296:	4602      	mov	r2, r0
 8008298:	701a      	strb	r2, [r3, #0]
  {
 800829a:	e193      	b.n	80085c4 <HCD_HC_IN_IRQHandler+0x83c>
    }
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	f040 8106 	bne.w	80084c0 <HCD_HC_IN_IRQHandler+0x738>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	0151      	lsls	r1, r2, #5
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	440a      	add	r2, r1
 80082ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ce:	f023 0302 	bic.w	r3, r3, #2
 80082d2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	212c      	movs	r1, #44	; 0x2c
 80082da:	fb01 f303 	mul.w	r3, r1, r3
 80082de:	4413      	add	r3, r2
 80082e0:	3361      	adds	r3, #97	; 0x61
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d109      	bne.n	80082fc <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	212c      	movs	r1, #44	; 0x2c
 80082ee:	fb01 f303 	mul.w	r3, r1, r3
 80082f2:	4413      	add	r3, r2
 80082f4:	3360      	adds	r3, #96	; 0x60
 80082f6:	2201      	movs	r2, #1
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	e0c9      	b.n	8008490 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	212c      	movs	r1, #44	; 0x2c
 8008302:	fb01 f303 	mul.w	r3, r1, r3
 8008306:	4413      	add	r3, r2
 8008308:	3361      	adds	r3, #97	; 0x61
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	2b05      	cmp	r3, #5
 800830e:	d109      	bne.n	8008324 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	212c      	movs	r1, #44	; 0x2c
 8008316:	fb01 f303 	mul.w	r3, r1, r3
 800831a:	4413      	add	r3, r2
 800831c:	3360      	adds	r3, #96	; 0x60
 800831e:	2205      	movs	r2, #5
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e0b5      	b.n	8008490 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	212c      	movs	r1, #44	; 0x2c
 800832a:	fb01 f303 	mul.w	r3, r1, r3
 800832e:	4413      	add	r3, r2
 8008330:	3361      	adds	r3, #97	; 0x61
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b06      	cmp	r3, #6
 8008336:	d009      	beq.n	800834c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	212c      	movs	r1, #44	; 0x2c
 800833e:	fb01 f303 	mul.w	r3, r1, r3
 8008342:	4413      	add	r3, r2
 8008344:	3361      	adds	r3, #97	; 0x61
 8008346:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008348:	2b08      	cmp	r3, #8
 800834a:	d150      	bne.n	80083ee <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	212c      	movs	r1, #44	; 0x2c
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	335c      	adds	r3, #92	; 0x5c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	202c      	movs	r0, #44	; 0x2c
 8008364:	fb00 f303 	mul.w	r3, r0, r3
 8008368:	440b      	add	r3, r1
 800836a:	335c      	adds	r3, #92	; 0x5c
 800836c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	212c      	movs	r1, #44	; 0x2c
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	4413      	add	r3, r2
 800837a:	335c      	adds	r3, #92	; 0x5c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b02      	cmp	r3, #2
 8008380:	d912      	bls.n	80083a8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	212c      	movs	r1, #44	; 0x2c
 8008388:	fb01 f303 	mul.w	r3, r1, r3
 800838c:	4413      	add	r3, r2
 800838e:	335c      	adds	r3, #92	; 0x5c
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	212c      	movs	r1, #44	; 0x2c
 800839a:	fb01 f303 	mul.w	r3, r1, r3
 800839e:	4413      	add	r3, r2
 80083a0:	3360      	adds	r3, #96	; 0x60
 80083a2:	2204      	movs	r2, #4
 80083a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80083a6:	e073      	b.n	8008490 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	212c      	movs	r1, #44	; 0x2c
 80083ae:	fb01 f303 	mul.w	r3, r1, r3
 80083b2:	4413      	add	r3, r2
 80083b4:	3360      	adds	r3, #96	; 0x60
 80083b6:	2202      	movs	r2, #2
 80083b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083d0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083d8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e6:	461a      	mov	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80083ec:	e050      	b.n	8008490 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	212c      	movs	r1, #44	; 0x2c
 80083f4:	fb01 f303 	mul.w	r3, r1, r3
 80083f8:	4413      	add	r3, r2
 80083fa:	3361      	adds	r3, #97	; 0x61
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d122      	bne.n	8008448 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	212c      	movs	r1, #44	; 0x2c
 8008408:	fb01 f303 	mul.w	r3, r1, r3
 800840c:	4413      	add	r3, r2
 800840e:	3360      	adds	r3, #96	; 0x60
 8008410:	2202      	movs	r2, #2
 8008412:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	4413      	add	r3, r2
 800841c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800842a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008432:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	4413      	add	r3, r2
 800843c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008440:	461a      	mov	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	e023      	b.n	8008490 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	212c      	movs	r1, #44	; 0x2c
 800844e:	fb01 f303 	mul.w	r3, r1, r3
 8008452:	4413      	add	r3, r2
 8008454:	3361      	adds	r3, #97	; 0x61
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b07      	cmp	r3, #7
 800845a:	d119      	bne.n	8008490 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	212c      	movs	r1, #44	; 0x2c
 8008462:	fb01 f303 	mul.w	r3, r1, r3
 8008466:	4413      	add	r3, r2
 8008468:	335c      	adds	r3, #92	; 0x5c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	202c      	movs	r0, #44	; 0x2c
 8008474:	fb00 f303 	mul.w	r3, r0, r3
 8008478:	440b      	add	r3, r1
 800847a:	335c      	adds	r3, #92	; 0x5c
 800847c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	212c      	movs	r1, #44	; 0x2c
 8008484:	fb01 f303 	mul.w	r3, r1, r3
 8008488:	4413      	add	r3, r2
 800848a:	3360      	adds	r3, #96	; 0x60
 800848c:	2204      	movs	r2, #4
 800848e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	4413      	add	r3, r2
 8008498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849c:	461a      	mov	r2, r3
 800849e:	2302      	movs	r3, #2
 80084a0:	6093      	str	r3, [r2, #8]

 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	b2d9      	uxtb	r1, r3
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	202c      	movs	r0, #44	; 0x2c
 80084ac:	fb00 f303 	mul.w	r3, r0, r3
 80084b0:	4413      	add	r3, r2
 80084b2:	3360      	adds	r3, #96	; 0x60
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f00f f809 	bl	80174d0 <HAL_HCD_HC_NotifyURBChange_Callback>
  {
 80084be:	e081      	b.n	80085c4 <HCD_HC_IN_IRQHandler+0x83c>
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 0310 	and.w	r3, r3, #16
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d176      	bne.n	80085c4 <HCD_HC_IN_IRQHandler+0x83c>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	212c      	movs	r1, #44	; 0x2c
 80084dc:	fb01 f303 	mul.w	r3, r1, r3
 80084e0:	4413      	add	r3, r2
 80084e2:	333f      	adds	r3, #63	; 0x3f
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d121      	bne.n	800852e <HCD_HC_IN_IRQHandler+0x7a6>
  }
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	212c      	movs	r1, #44	; 0x2c
 80084f0:	fb01 f303 	mul.w	r3, r1, r3
 80084f4:	4413      	add	r3, r2
 80084f6:	335c      	adds	r3, #92	; 0x5c
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	4413      	add	r3, r2
 8008504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	0151      	lsls	r1, r2, #5
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	440a      	add	r2, r1
 8008512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008516:	f043 0302 	orr.w	r3, r3, #2
 800851a:	60d3      	str	r3, [r2, #12]
  {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	4611      	mov	r1, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f009 fae3 	bl	8011af2 <USB_HC_Halt>
 800852c:	e041      	b.n	80085b2 <HCD_HC_IN_IRQHandler+0x82a>
    {
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	212c      	movs	r1, #44	; 0x2c
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	4413      	add	r3, r2
 800853a:	333f      	adds	r3, #63	; 0x3f
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <HCD_HC_IN_IRQHandler+0x7ce>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	212c      	movs	r1, #44	; 0x2c
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	4413      	add	r3, r2
 800854e:	333f      	adds	r3, #63	; 0x3f
 8008550:	781b      	ldrb	r3, [r3, #0]
    {
 8008552:	2b02      	cmp	r3, #2
 8008554:	d12d      	bne.n	80085b2 <HCD_HC_IN_IRQHandler+0x82a>
    }
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	212c      	movs	r1, #44	; 0x2c
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	4413      	add	r3, r2
 8008562:	335c      	adds	r3, #92	; 0x5c
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d120      	bne.n	80085b2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	212c      	movs	r1, #44	; 0x2c
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	4413      	add	r3, r2
 800857c:	3361      	adds	r3, #97	; 0x61
 800857e:	2203      	movs	r2, #3
 8008580:	701a      	strb	r2, [r3, #0]

 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	440a      	add	r2, r1
 8008598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800859c:	f043 0302 	orr.w	r3, r3, #2
 80085a0:	60d3      	str	r3, [r2, #12]
      if (hhcd->Init.dma_enable == 0U)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f009 faa0 	bl	8011af2 <USB_HC_Halt>
    {
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085be:	461a      	mov	r2, r3
 80085c0:	2310      	movs	r3, #16
 80085c2:	6093      	str	r3, [r2, #8]
  {
 80085c4:	bf00      	nop
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HCD_HC_OUT_IRQHandler>:
/**
  * @brief  Handle Host Channel OUT interrupt requests.
  * @param  hhcd HCD handle
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	61fb      	str	r3, [r7, #28]
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	61bb      	str	r3, [r7, #24]
{
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	617b      	str	r3, [r7, #20]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t ch_num = (uint32_t)chnum;
  uint32_t tmpreg;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d119      	bne.n	8008630 <HCD_HC_OUT_IRQHandler+0x64>
  uint32_t num_packets;

 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	4413      	add	r3, r2
 8008604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008608:	461a      	mov	r2, r3
 800860a:	2304      	movs	r3, #4
 800860c:	6093      	str	r3, [r2, #8]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	0151      	lsls	r1, r2, #5
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	440a      	add	r2, r1
 8008624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008628:	f043 0302 	orr.w	r3, r3, #2
 800862c:	60d3      	str	r3, [r2, #12]
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    /* ... */
  }
 800862e:	e3c6      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	4413      	add	r3, r2
 8008638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b20      	cmp	r3, #32
 8008644:	d13e      	bne.n	80086c4 <HCD_HC_OUT_IRQHandler+0xf8>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	4413      	add	r3, r2
 800864e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008652:	461a      	mov	r2, r3
 8008654:	2320      	movs	r3, #32
 8008656:	6093      	str	r3, [r2, #8]
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	212c      	movs	r1, #44	; 0x2c
 800865e:	fb01 f303 	mul.w	r3, r1, r3
 8008662:	4413      	add	r3, r2
 8008664:	333d      	adds	r3, #61	; 0x3d
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b01      	cmp	r3, #1
 800866a:	f040 83a8 	bne.w	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	212c      	movs	r1, #44	; 0x2c
 8008674:	fb01 f303 	mul.w	r3, r1, r3
 8008678:	4413      	add	r3, r2
 800867a:	333d      	adds	r3, #61	; 0x3d
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]

 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	212c      	movs	r1, #44	; 0x2c
 8008686:	fb01 f303 	mul.w	r3, r1, r3
 800868a:	4413      	add	r3, r2
 800868c:	3360      	adds	r3, #96	; 0x60
 800868e:	2202      	movs	r2, #2
 8008690:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	4413      	add	r3, r2
 800869a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ac:	f043 0302 	orr.w	r3, r3, #2
 80086b0:	60d3      	str	r3, [r2, #12]
    {
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	4611      	mov	r1, r2
 80086bc:	4618      	mov	r0, r3
 80086be:	f009 fa18 	bl	8011af2 <USB_HC_Halt>
  }
 80086c2:	e37c      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086da:	d122      	bne.n	8008722 <HCD_HC_OUT_IRQHandler+0x156>
  }
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086f6:	f043 0302 	orr.w	r3, r3, #2
 80086fa:	60d3      	str	r3, [r2, #12]
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f009 f9f3 	bl	8011af2 <USB_HC_Halt>
  {
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	4413      	add	r3, r2
 8008714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008718:	461a      	mov	r2, r3
 800871a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800871e:	6093      	str	r3, [r2, #8]
  }
 8008720:	e34d      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	4413      	add	r3, r2
 800872a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b01      	cmp	r3, #1
 8008736:	d150      	bne.n	80087da <HCD_HC_OUT_IRQHandler+0x20e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	212c      	movs	r1, #44	; 0x2c
 800873e:	fb01 f303 	mul.w	r3, r1, r3
 8008742:	4413      	add	r3, r2
 8008744:	335c      	adds	r3, #92	; 0x5c
 8008746:	2200      	movs	r2, #0
 8008748:	601a      	str	r2, [r3, #0]

 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	4413      	add	r3, r2
 8008752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d111      	bne.n	8008784 <HCD_HC_OUT_IRQHandler+0x1b8>
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	212c      	movs	r1, #44	; 0x2c
 8008766:	fb01 f303 	mul.w	r3, r1, r3
 800876a:	4413      	add	r3, r2
 800876c:	333d      	adds	r3, #61	; 0x3d
 800876e:	2201      	movs	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
    {
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877e:	461a      	mov	r2, r3
 8008780:	2340      	movs	r3, #64	; 0x40
 8008782:	6093      	str	r3, [r2, #8]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	4413      	add	r3, r2
 800878c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	0151      	lsls	r1, r2, #5
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	440a      	add	r2, r1
 800879a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800879e:	f043 0302 	orr.w	r3, r3, #2
 80087a2:	60d3      	str	r3, [r2, #12]
    }
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f009 f99f 	bl	8011af2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c0:	461a      	mov	r2, r3
 80087c2:	2301      	movs	r3, #1
 80087c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	212c      	movs	r1, #44	; 0x2c
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	4413      	add	r3, r2
 80087d2:	3361      	adds	r3, #97	; 0x61
 80087d4:	2201      	movs	r2, #1
 80087d6:	701a      	strb	r2, [r3, #0]
  }
 80087d8:	e2f1      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  }
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b40      	cmp	r3, #64	; 0x40
 80087ee:	d13c      	bne.n	800886a <HCD_HC_OUT_IRQHandler+0x29e>
  {
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	212c      	movs	r1, #44	; 0x2c
 80087f6:	fb01 f303 	mul.w	r3, r1, r3
 80087fa:	4413      	add	r3, r2
 80087fc:	3361      	adds	r3, #97	; 0x61
 80087fe:	2204      	movs	r2, #4
 8008800:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NYET;
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	212c      	movs	r1, #44	; 0x2c
 8008808:	fb01 f303 	mul.w	r3, r1, r3
 800880c:	4413      	add	r3, r2
 800880e:	333d      	adds	r3, #61	; 0x3d
 8008810:	2201      	movs	r2, #1
 8008812:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	212c      	movs	r1, #44	; 0x2c
 800881a:	fb01 f303 	mul.w	r3, r1, r3
 800881e:	4413      	add	r3, r2
 8008820:	335c      	adds	r3, #92	; 0x5c
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	4413      	add	r3, r2
 800882e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	0151      	lsls	r1, r2, #5
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	440a      	add	r2, r1
 800883c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008840:	f043 0302 	orr.w	r3, r3, #2
 8008844:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	b2d2      	uxtb	r2, r2
 800884e:	4611      	mov	r1, r2
 8008850:	4618      	mov	r0, r3
 8008852:	f009 f94e 	bl	8011af2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	4413      	add	r3, r2
 800885e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008862:	461a      	mov	r2, r3
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	6093      	str	r3, [r2, #8]
  }
 8008868:	e2a9      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	4413      	add	r3, r2
 8008872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 0308 	and.w	r3, r3, #8
 800887c:	2b08      	cmp	r3, #8
 800887e:	d12a      	bne.n	80088d6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	4413      	add	r3, r2
 8008888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888c:	461a      	mov	r2, r3
 800888e:	2308      	movs	r3, #8
 8008890:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	4413      	add	r3, r2
 800889a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	0151      	lsls	r1, r2, #5
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	440a      	add	r2, r1
 80088a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ac:	f043 0302 	orr.w	r3, r3, #2
 80088b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f009 f918 	bl	8011af2 <USB_HC_Halt>
  }
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	212c      	movs	r1, #44	; 0x2c
 80088c8:	fb01 f303 	mul.w	r3, r1, r3
 80088cc:	4413      	add	r3, r2
 80088ce:	3361      	adds	r3, #97	; 0x61
 80088d0:	2205      	movs	r2, #5
 80088d2:	701a      	strb	r2, [r3, #0]
  }
 80088d4:	e273      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  {
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0310 	and.w	r3, r3, #16
 80088e8:	2b10      	cmp	r3, #16
 80088ea:	d150      	bne.n	800898e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].state = HC_NAK;
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	212c      	movs	r1, #44	; 0x2c
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	4413      	add	r3, r2
 80088f8:	335c      	adds	r3, #92	; 0x5c
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]

 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	212c      	movs	r1, #44	; 0x2c
 8008904:	fb01 f303 	mul.w	r3, r1, r3
 8008908:	4413      	add	r3, r2
 800890a:	3361      	adds	r3, #97	; 0x61
 800890c:	2203      	movs	r2, #3
 800890e:	701a      	strb	r2, [r3, #0]
    {
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	212c      	movs	r1, #44	; 0x2c
 8008916:	fb01 f303 	mul.w	r3, r1, r3
 800891a:	4413      	add	r3, r2
 800891c:	333d      	adds	r3, #61	; 0x3d
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d112      	bne.n	800894a <HCD_HC_OUT_IRQHandler+0x37e>
      {
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	212c      	movs	r1, #44	; 0x2c
 800892a:	fb01 f303 	mul.w	r3, r1, r3
 800892e:	4413      	add	r3, r2
 8008930:	333c      	adds	r3, #60	; 0x3c
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d108      	bne.n	800894a <HCD_HC_OUT_IRQHandler+0x37e>
      }
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	212c      	movs	r1, #44	; 0x2c
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	333d      	adds	r3, #61	; 0x3d
 8008946:	2201      	movs	r2, #1
 8008948:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	440a      	add	r2, r1
 8008960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008964:	f043 0302 	orr.w	r3, r3, #2
 8008968:	60d3      	str	r3, [r2, #12]
  }
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f009 f8bc 	bl	8011af2 <USB_HC_Halt>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	4413      	add	r3, r2
 8008982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008986:	461a      	mov	r2, r3
 8008988:	2310      	movs	r3, #16
 800898a:	6093      	str	r3, [r2, #8]
  }
 800898c:	e217      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
    if (hhcd->Init.dma_enable == 0U)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	4413      	add	r3, r2
 8008996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a0:	2b80      	cmp	r3, #128	; 0x80
 80089a2:	d174      	bne.n	8008a8e <HCD_HC_OUT_IRQHandler+0x4c2>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d121      	bne.n	80089f0 <HCD_HC_OUT_IRQHandler+0x424>
    }
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	212c      	movs	r1, #44	; 0x2c
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	4413      	add	r3, r2
 80089b8:	3361      	adds	r3, #97	; 0x61
 80089ba:	2206      	movs	r2, #6
 80089bc:	701a      	strb	r2, [r3, #0]
    else
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	0151      	lsls	r1, r2, #5
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	440a      	add	r2, r1
 80089d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089d8:	f043 0302 	orr.w	r3, r3, #2
 80089dc:	60d3      	str	r3, [r2, #12]
    {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	b2d2      	uxtb	r2, r2
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f009 f882 	bl	8011af2 <USB_HC_Halt>
 80089ee:	e044      	b.n	8008a7a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	212c      	movs	r1, #44	; 0x2c
 80089f6:	fb01 f303 	mul.w	r3, r1, r3
 80089fa:	4413      	add	r3, r2
 80089fc:	335c      	adds	r3, #92	; 0x5c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	202c      	movs	r0, #44	; 0x2c
 8008a08:	fb00 f303 	mul.w	r3, r0, r3
 8008a0c:	440b      	add	r3, r1
 8008a0e:	335c      	adds	r3, #92	; 0x5c
 8008a10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	212c      	movs	r1, #44	; 0x2c
 8008a18:	fb01 f303 	mul.w	r3, r1, r3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	335c      	adds	r3, #92	; 0x5c
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d920      	bls.n	8008a68 <HCD_HC_OUT_IRQHandler+0x49c>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	212c      	movs	r1, #44	; 0x2c
 8008a2c:	fb01 f303 	mul.w	r3, r1, r3
 8008a30:	4413      	add	r3, r2
 8008a32:	335c      	adds	r3, #92	; 0x5c
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	212c      	movs	r1, #44	; 0x2c
 8008a3e:	fb01 f303 	mul.w	r3, r1, r3
 8008a42:	4413      	add	r3, r2
 8008a44:	3360      	adds	r3, #96	; 0x60
 8008a46:	2204      	movs	r2, #4
 8008a48:	701a      	strb	r2, [r3, #0]
#else
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	b2d9      	uxtb	r1, r3
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	202c      	movs	r0, #44	; 0x2c
 8008a54:	fb00 f303 	mul.w	r3, r0, r3
 8008a58:	4413      	add	r3, r2
 8008a5a:	3360      	adds	r3, #96	; 0x60
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f00e fd35 	bl	80174d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008a66:	e008      	b.n	8008a7a <HCD_HC_OUT_IRQHandler+0x4ae>
      else
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	212c      	movs	r1, #44	; 0x2c
 8008a6e:	fb01 f303 	mul.w	r3, r1, r3
 8008a72:	4413      	add	r3, r2
 8008a74:	3360      	adds	r3, #96	; 0x60
 8008a76:	2202      	movs	r2, #2
 8008a78:	701a      	strb	r2, [r3, #0]
      }
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a86:	461a      	mov	r2, r3
 8008a88:	2380      	movs	r3, #128	; 0x80
 8008a8a:	6093      	str	r3, [r2, #8]
  }
 8008a8c:	e197      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa4:	d134      	bne.n	8008b10 <HCD_HC_OUT_IRQHandler+0x544>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	0151      	lsls	r1, r2, #5
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	440a      	add	r2, r1
 8008abc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ac0:	f043 0302 	orr.w	r3, r3, #2
 8008ac4:	60d3      	str	r3, [r2, #12]
  {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f009 f80e 	bl	8011af2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af4:	461a      	mov	r2, r3
 8008af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008afa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	212c      	movs	r1, #44	; 0x2c
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	3361      	adds	r3, #97	; 0x61
 8008b0a:	2208      	movs	r2, #8
 8008b0c:	701a      	strb	r2, [r3, #0]
  }
 8008b0e:	e156      	b.n	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	f040 814b 	bne.w	8008dbe <HCD_HC_OUT_IRQHandler+0x7f2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b42:	f023 0302 	bic.w	r3, r3, #2
 8008b46:	60d3      	str	r3, [r2, #12]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	212c      	movs	r1, #44	; 0x2c
 8008b4e:	fb01 f303 	mul.w	r3, r1, r3
 8008b52:	4413      	add	r3, r2
 8008b54:	3361      	adds	r3, #97	; 0x61
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d179      	bne.n	8008c50 <HCD_HC_OUT_IRQHandler+0x684>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	212c      	movs	r1, #44	; 0x2c
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	4413      	add	r3, r2
 8008b68:	3360      	adds	r3, #96	; 0x60
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	701a      	strb	r2, [r3, #0]
      {
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	212c      	movs	r1, #44	; 0x2c
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	4413      	add	r3, r2
 8008b7a:	333f      	adds	r3, #63	; 0x3f
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d00a      	beq.n	8008b98 <HCD_HC_OUT_IRQHandler+0x5cc>
        if (hhcd->Init.dma_enable == 0U)
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	212c      	movs	r1, #44	; 0x2c
 8008b88:	fb01 f303 	mul.w	r3, r1, r3
 8008b8c:	4413      	add	r3, r2
 8008b8e:	333f      	adds	r3, #63	; 0x3f
 8008b90:	781b      	ldrb	r3, [r3, #0]
      {
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	f040 80fc 	bne.w	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d142      	bne.n	8008c26 <HCD_HC_OUT_IRQHandler+0x65a>

 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	212c      	movs	r1, #44	; 0x2c
 8008ba6:	fb01 f303 	mul.w	r3, r1, r3
 8008baa:	4413      	add	r3, r2
 8008bac:	334c      	adds	r3, #76	; 0x4c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 80ed 	beq.w	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
        {
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	212c      	movs	r1, #44	; 0x2c
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	334c      	adds	r3, #76	; 0x4c
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	202c      	movs	r0, #44	; 0x2c
 8008bcc:	fb00 f202 	mul.w	r2, r0, r2
 8008bd0:	440a      	add	r2, r1
 8008bd2:	3240      	adds	r2, #64	; 0x40
 8008bd4:	8812      	ldrh	r2, [r2, #0]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	202c      	movs	r0, #44	; 0x2c
 8008be0:	fb00 f202 	mul.w	r2, r0, r2
 8008be4:	440a      	add	r2, r1
 8008be6:	3240      	adds	r2, #64	; 0x40
 8008be8:	8812      	ldrh	r2, [r2, #0]
 8008bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80ca 	beq.w	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
          {
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	212c      	movs	r1, #44	; 0x2c
 8008c02:	fb01 f303 	mul.w	r3, r1, r3
 8008c06:	4413      	add	r3, r2
 8008c08:	3355      	adds	r3, #85	; 0x55
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	f083 0301 	eor.w	r3, r3, #1
 8008c10:	b2d8      	uxtb	r0, r3
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	212c      	movs	r1, #44	; 0x2c
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3355      	adds	r3, #85	; 0x55
 8008c20:	4602      	mov	r2, r0
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e0b4      	b.n	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	212c      	movs	r1, #44	; 0x2c
 8008c2c:	fb01 f303 	mul.w	r3, r1, r3
 8008c30:	4413      	add	r3, r2
 8008c32:	3355      	adds	r3, #85	; 0x55
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f083 0301 	eor.w	r3, r3, #1
 8008c3a:	b2d8      	uxtb	r0, r3
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	212c      	movs	r1, #44	; 0x2c
 8008c42:	fb01 f303 	mul.w	r3, r1, r3
 8008c46:	4413      	add	r3, r2
 8008c48:	3355      	adds	r3, #85	; 0x55
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	e09f      	b.n	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	212c      	movs	r1, #44	; 0x2c
 8008c56:	fb01 f303 	mul.w	r3, r1, r3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3361      	adds	r3, #97	; 0x61
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d109      	bne.n	8008c78 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	212c      	movs	r1, #44	; 0x2c
 8008c6a:	fb01 f303 	mul.w	r3, r1, r3
 8008c6e:	4413      	add	r3, r2
 8008c70:	3360      	adds	r3, #96	; 0x60
 8008c72:	2202      	movs	r2, #2
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	e08b      	b.n	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	212c      	movs	r1, #44	; 0x2c
 8008c7e:	fb01 f303 	mul.w	r3, r1, r3
 8008c82:	4413      	add	r3, r2
 8008c84:	3361      	adds	r3, #97	; 0x61
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d109      	bne.n	8008ca0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	212c      	movs	r1, #44	; 0x2c
 8008c92:	fb01 f303 	mul.w	r3, r1, r3
 8008c96:	4413      	add	r3, r2
 8008c98:	3360      	adds	r3, #96	; 0x60
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e077      	b.n	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	212c      	movs	r1, #44	; 0x2c
 8008ca6:	fb01 f303 	mul.w	r3, r1, r3
 8008caa:	4413      	add	r3, r2
 8008cac:	3361      	adds	r3, #97	; 0x61
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	d109      	bne.n	8008cc8 <HCD_HC_OUT_IRQHandler+0x6fc>
    {
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	212c      	movs	r1, #44	; 0x2c
 8008cba:	fb01 f303 	mul.w	r3, r1, r3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	3360      	adds	r3, #96	; 0x60
 8008cc2:	2205      	movs	r2, #5
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	e063      	b.n	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	212c      	movs	r1, #44	; 0x2c
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3361      	adds	r3, #97	; 0x61
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b06      	cmp	r3, #6
 8008cda:	d009      	beq.n	8008cf0 <HCD_HC_OUT_IRQHandler+0x724>
      {
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	212c      	movs	r1, #44	; 0x2c
 8008ce2:	fb01 f303 	mul.w	r3, r1, r3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3361      	adds	r3, #97	; 0x61
 8008cea:	781b      	ldrb	r3, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d14f      	bne.n	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	212c      	movs	r1, #44	; 0x2c
 8008cf6:	fb01 f303 	mul.w	r3, r1, r3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	335c      	adds	r3, #92	; 0x5c
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	202c      	movs	r0, #44	; 0x2c
 8008d08:	fb00 f303 	mul.w	r3, r0, r3
 8008d0c:	440b      	add	r3, r1
 8008d0e:	335c      	adds	r3, #92	; 0x5c
 8008d10:	601a      	str	r2, [r3, #0]
      }
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	212c      	movs	r1, #44	; 0x2c
 8008d18:	fb01 f303 	mul.w	r3, r1, r3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	335c      	adds	r3, #92	; 0x5c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d912      	bls.n	8008d4c <HCD_HC_OUT_IRQHandler+0x780>
      {
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	212c      	movs	r1, #44	; 0x2c
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	4413      	add	r3, r2
 8008d32:	335c      	adds	r3, #92	; 0x5c
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	212c      	movs	r1, #44	; 0x2c
 8008d3e:	fb01 f303 	mul.w	r3, r1, r3
 8008d42:	4413      	add	r3, r2
 8008d44:	3360      	adds	r3, #96	; 0x60
 8008d46:	2204      	movs	r2, #4
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	e021      	b.n	8008d90 <HCD_HC_OUT_IRQHandler+0x7c4>
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	212c      	movs	r1, #44	; 0x2c
 8008d52:	fb01 f303 	mul.w	r3, r1, r3
 8008d56:	4413      	add	r3, r2
 8008d58:	3360      	adds	r3, #96	; 0x60
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	701a      	strb	r2, [r3, #0]
      }
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	613b      	str	r3, [r7, #16]
    }
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d74:	613b      	str	r3, [r7, #16]
    else
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d7c:	613b      	str	r3, [r7, #16]
    {
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	6013      	str	r3, [r2, #0]
#else
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2302      	movs	r3, #2
 8008da0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	b2d9      	uxtb	r1, r3
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	202c      	movs	r0, #44	; 0x2c
 8008dac:	fb00 f303 	mul.w	r3, r0, r3
 8008db0:	4413      	add	r3, r2
 8008db2:	3360      	adds	r3, #96	; 0x60
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f00e fb89 	bl	80174d0 <HAL_HCD_HC_NotifyURBChange_Callback>
  }
 8008dbe:	bf00      	nop
 8008dc0:	3720      	adds	r7, #32
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HCD_RXQLVL_IRQHandler>:
/**
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b08a      	sub	sp, #40	; 0x28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
{
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	61fb      	str	r3, [r7, #28]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	61bb      	str	r3, [r7, #24]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	0c5b      	lsrs	r3, r3, #17
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	617b      	str	r3, [r7, #20]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	091b      	lsrs	r3, r3, #4
 8008df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dfa:	613b      	str	r3, [r7, #16]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;

 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d004      	beq.n	8008e0c <HCD_RXQLVL_IRQHandler+0x46>
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b05      	cmp	r3, #5
 8008e06:	f000 80a9 	beq.w	8008f5c <HCD_RXQLVL_IRQHandler+0x196>
    case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
 8008e0a:	e0aa      	b.n	8008f62 <HCD_RXQLVL_IRQHandler+0x19c>
      /* Read the data into the host buffer. */
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80a6 	beq.w	8008f60 <HCD_RXQLVL_IRQHandler+0x19a>
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	212c      	movs	r1, #44	; 0x2c
 8008e1a:	fb01 f303 	mul.w	r3, r1, r3
 8008e1e:	4413      	add	r3, r2
 8008e20:	3344      	adds	r3, #68	; 0x44
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 809b 	beq.w	8008f60 <HCD_RXQLVL_IRQHandler+0x19a>
      {
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	212c      	movs	r1, #44	; 0x2c
 8008e30:	fb01 f303 	mul.w	r3, r1, r3
 8008e34:	4413      	add	r3, r2
 8008e36:	3350      	adds	r3, #80	; 0x50
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	441a      	add	r2, r3
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	202c      	movs	r0, #44	; 0x2c
 8008e44:	fb00 f303 	mul.w	r3, r0, r3
 8008e48:	440b      	add	r3, r1
 8008e4a:	334c      	adds	r3, #76	; 0x4c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d87a      	bhi.n	8008f48 <HCD_RXQLVL_IRQHandler+0x182>
        {
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	212c      	movs	r1, #44	; 0x2c
 8008e5c:	fb01 f303 	mul.w	r3, r1, r3
 8008e60:	4413      	add	r3, r2
 8008e62:	3344      	adds	r3, #68	; 0x44
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	b292      	uxth	r2, r2
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	f008 f9eb 	bl	8011246 <USB_ReadPacket>
          /* manage multiple Xfer */
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	212c      	movs	r1, #44	; 0x2c
 8008e76:	fb01 f303 	mul.w	r3, r1, r3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	3344      	adds	r3, #68	; 0x44
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	441a      	add	r2, r3
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	202c      	movs	r0, #44	; 0x2c
 8008e8a:	fb00 f303 	mul.w	r3, r0, r3
 8008e8e:	440b      	add	r3, r1
 8008e90:	3344      	adds	r3, #68	; 0x44
 8008e92:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	212c      	movs	r1, #44	; 0x2c
 8008e9a:	fb01 f303 	mul.w	r3, r1, r3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3350      	adds	r3, #80	; 0x50
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	441a      	add	r2, r3
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	202c      	movs	r0, #44	; 0x2c
 8008eae:	fb00 f303 	mul.w	r3, r0, r3
 8008eb2:	440b      	add	r3, r1
 8008eb4:	3350      	adds	r3, #80	; 0x50
 8008eb6:	601a      	str	r2, [r3, #0]
          /* get transfer size packet count */
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	0cdb      	lsrs	r3, r3, #19
 8008ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ecc:	60fb      	str	r3, [r7, #12]

 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	212c      	movs	r1, #44	; 0x2c
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	3340      	adds	r3, #64	; 0x40
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d13c      	bne.n	8008f60 <HCD_RXQLVL_IRQHandler+0x19a>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d039      	beq.n	8008f60 <HCD_RXQLVL_IRQHandler+0x19a>
            /* re-activate the channel when more packets are expected */
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60bb      	str	r3, [r7, #8]
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f02:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f0a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f18:	461a      	mov	r2, r3
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6013      	str	r3, [r2, #0]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	212c      	movs	r1, #44	; 0x2c
 8008f24:	fb01 f303 	mul.w	r3, r1, r3
 8008f28:	4413      	add	r3, r2
 8008f2a:	3354      	adds	r3, #84	; 0x54
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	f083 0301 	eor.w	r3, r3, #1
 8008f32:	b2d8      	uxtb	r0, r3
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	212c      	movs	r1, #44	; 0x2c
 8008f3a:	fb01 f303 	mul.w	r3, r1, r3
 8008f3e:	4413      	add	r3, r2
 8008f40:	3354      	adds	r3, #84	; 0x54
 8008f42:	4602      	mov	r2, r0
 8008f44:	701a      	strb	r2, [r3, #0]
      }
 8008f46:	e00b      	b.n	8008f60 <HCD_RXQLVL_IRQHandler+0x19a>
        {
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	212c      	movs	r1, #44	; 0x2c
 8008f4e:	fb01 f303 	mul.w	r3, r1, r3
 8008f52:	4413      	add	r3, r2
 8008f54:	3360      	adds	r3, #96	; 0x60
 8008f56:	2204      	movs	r2, #4
 8008f58:	701a      	strb	r2, [r3, #0]
      }
 8008f5a:	e001      	b.n	8008f60 <HCD_RXQLVL_IRQHandler+0x19a>
    case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
 8008f5c:	bf00      	nop
 8008f5e:	e000      	b.n	8008f62 <HCD_RXQLVL_IRQHandler+0x19c>
      }
 8008f60:	bf00      	nop
      break;
  }
 8008f62:	bf00      	nop
 8008f64:	3728      	adds	r7, #40	; 0x28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <HCD_Port_IRQHandler>:
/**
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b086      	sub	sp, #24
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
{
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	617b      	str	r3, [r7, #20]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60fb      	str	r3, [r7, #12]
  /* Handle Host Port Interrupts */
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60bb      	str	r3, [r7, #8]
  hprt0 = USBx_HPRT0;
  hprt0_dup = USBx_HPRT0;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f96:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d10b      	bne.n	8008fba <HCD_Port_IRQHandler+0x50>
  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d102      	bne.n	8008fb2 <HCD_Port_IRQHandler+0x48>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f00e fa73 	bl	8017498 <HAL_HCD_Connect_Callback>
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f043 0302 	orr.w	r3, r3, #2
 8008fb8:	60bb      	str	r3, [r7, #8]
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
  }

 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d132      	bne.n	800902a <HCD_Port_IRQHandler+0xc0>
  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f043 0308 	orr.w	r3, r3, #8
 8008fca:	60bb      	str	r3, [r7, #8]
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f003 0304 	and.w	r3, r3, #4
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	d126      	bne.n	8009024 <HCD_Port_IRQHandler+0xba>

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d113      	bne.n	8009006 <HCD_Port_IRQHandler+0x9c>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008fe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fe8:	d106      	bne.n	8008ff8 <HCD_Port_IRQHandler+0x8e>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2102      	movs	r1, #2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f008 fa57 	bl	80114a4 <USB_InitFSLSPClkSel>
 8008ff6:	e011      	b.n	800901c <HCD_Port_IRQHandler+0xb2>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	4618      	mov	r0, r3
 8009000:	f008 fa50 	bl	80114a4 <USB_InitFSLSPClkSel>
 8009004:	e00a      	b.n	800901c <HCD_Port_IRQHandler+0xb2>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d106      	bne.n	800901c <HCD_Port_IRQHandler+0xb2>
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009014:	461a      	mov	r2, r3
 8009016:	f64e 2360 	movw	r3, #60000	; 0xea60
 800901a:	6053      	str	r3, [r2, #4]
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f00e fa69 	bl	80174f4 <HAL_HCD_PortEnabled_Callback>
 8009022:	e002      	b.n	800902a <HCD_Port_IRQHandler+0xc0>

    }
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f00e fa73 	bl	8017510 <HAL_HCD_PortDisabled_Callback>
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 0320 	and.w	r3, r3, #32
 8009030:	2b20      	cmp	r3, #32
 8009032:	d103      	bne.n	800903c <HCD_Port_IRQHandler+0xd2>
  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f043 0320 	orr.w	r3, r3, #32
 800903a:	60bb      	str	r3, [r7, #8]
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
  }

 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009042:	461a      	mov	r2, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	6013      	str	r3, [r2, #0]
  /* Clear Port Interrupts */
 8009048:	bf00      	nop
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_I2C_Init>:
                               uint32_t Request);

/* Private function to Convert Specific options */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c);
/**
  * @}
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  */

 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_I2C_Init+0x12>
/* Exported functions --------------------------------------------------------*/

 800905e:	2301      	movs	r3, #1
 8009060:	e07f      	b.n	8009162 <HAL_I2C_Init+0x112>
@verbatim
 ===============================================================================
              ##### Initialization and de-initialization functions #####
 ===============================================================================
    [..]  This subsection provides a set of functions allowing to initialize and
          deinitialize the I2Cx peripheral:
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d106      	bne.n	800907c <HAL_I2C_Init+0x2c>

      (+) User must Implement HAL_I2C_MspInit() function in which he configures
          all related peripherals resources (CLOCK, GPIO, DMA, IT and NVIC ).
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/**
  * @brief  Initializes the I2C according to the specified parameters
  *         in the I2C_InitTypeDef and initialize the associated handle.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7f9 f9e6 	bl	8002448 <HAL_I2C_MspInit>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2224      	movs	r2, #36	; 0x24
 8009080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0201 	bic.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]
    return HAL_ERROR;
  }

  /* Check the parameters */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80090a0:	611a      	str	r2, [r3, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090b0:	609a      	str	r2, [r3, #8]
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d107      	bne.n	80090ca <HAL_I2C_Init+0x7a>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090c6:	609a      	str	r2, [r3, #8]
 80090c8:	e006      	b.n	80090d8 <HAL_I2C_Init+0x88>
  if (hi2c->State == HAL_I2C_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80090d6:	609a      	str	r2, [r3, #8]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d104      	bne.n	80090ea <HAL_I2C_Init+0x9a>
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090e8:	605a      	str	r2, [r3, #4]
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6859      	ldr	r1, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	4b1d      	ldr	r3, [pc, #116]	; (800916c <HAL_I2C_Init+0x11c>)
 80090f6:	430b      	orrs	r3, r1
 80090f8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */

 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009108:	60da      	str	r2, [r3, #12]
    if (hi2c->MspInitCallback == NULL)
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	691a      	ldr	r2, [r3, #16]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	ea42 0103 	orr.w	r1, r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	021a      	lsls	r2, r3, #8
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	60da      	str	r2, [r3, #12]
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	69d9      	ldr	r1, [r3, #28]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a1a      	ldr	r2, [r3, #32]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	601a      	str	r2, [r3, #0]
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	645a      	str	r2, [r3, #68]	; 0x44

 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	631a      	str	r2, [r3, #48]	; 0x30

 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009160:	2300      	movs	r3, #0

 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	02008000 	.word	0x02008000

08009170 <HAL_I2C_DeInit>:

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <HAL_I2C_DeInit+0x12>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
 800917e:	2301      	movs	r3, #1
 8009180:	e021      	b.n	80091c6 <HAL_I2C_DeInit+0x56>
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2224      	movs	r2, #36	; 0x24
 8009186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0201 	bic.w	r2, r2, #1
 8009198:	601a      	str	r2, [r3, #0]
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
                          (hi2c->Init.OwnAddress2Masks << 8));
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7f9 f9cc 	bl	8002538 <HAL_I2C_MspDeInit>

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	631a      	str	r2, [r3, #48]	; 0x30
  /* Enable the selected I2C peripheral */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
 80091c4:	2300      	movs	r3, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <HAL_I2C_Mem_Write>:
    if (hi2c->hdmarx != NULL)
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;

      /* Set the DMA error callback */
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af02      	add	r7, sp, #8
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	4608      	mov	r0, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	461a      	mov	r2, r3
 80091de:	4603      	mov	r3, r0
 80091e0:	817b      	strh	r3, [r7, #10]
 80091e2:	460b      	mov	r3, r1
 80091e4:	813b      	strh	r3, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	80fb      	strh	r3, [r7, #6]
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
      hi2c->hdmarx->XferAbortCallback = NULL;

 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	f040 80f9 	bne.w	80093ea <HAL_I2C_Mem_Write+0x21a>
      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <HAL_I2C_Mem_Write+0x34>
 80091fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009200:	2b00      	cmp	r3, #0
 8009202:	d105      	bne.n	8009210 <HAL_I2C_Mem_Write+0x40>
                                       hi2c->XferSize);
    }
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800920a:	645a      	str	r2, [r3, #68]	; 0x44
    else
 800920c:	2301      	movs	r3, #1
 800920e:	e0ed      	b.n	80093ec <HAL_I2C_Mem_Write+0x21c>
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_LISTEN;
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_I2C_Mem_Write+0x4e>
 800921a:	2302      	movs	r3, #2
 800921c:	e0e6      	b.n	80093ec <HAL_I2C_Mem_Write+0x21c>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009226:	f7fc f859 	bl	80052dc <HAL_GetTick>
 800922a:	6178      	str	r0, [r7, #20]

      /* Process Unlocked */
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	2319      	movs	r3, #25
 8009232:	2201      	movs	r2, #1
 8009234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 fac3 	bl	80097c4 <I2C_WaitOnFlagUntilTimeout>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <HAL_I2C_Mem_Write+0x78>
      __HAL_UNLOCK(hi2c);

 8009244:	2301      	movs	r3, #1
 8009246:	e0d1      	b.n	80093ec <HAL_I2C_Mem_Write+0x21c>
      return HAL_ERROR;
    }

 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2221      	movs	r2, #33	; 0x21
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (dmaxferstatus == HAL_OK)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2240      	movs	r2, #64	; 0x40
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    {
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;

 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a3a      	ldr	r2, [r7, #32]
 8009262:	625a      	str	r2, [r3, #36]	; 0x24
      /* Process Unlocked */
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009268:	855a      	strh	r2, [r3, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
 8009270:	88f8      	ldrh	r0, [r7, #6]
 8009272:	893a      	ldrh	r2, [r7, #8]
 8009274:	8979      	ldrh	r1, [r7, #10]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	4603      	mov	r3, r0
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f9d3 	bl	800962c <I2C_RequestMemoryWrite>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <HAL_I2C_Mem_Write+0xc8>
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

 8009294:	2301      	movs	r3, #1
 8009296:	e0a9      	b.n	80093ec <HAL_I2C_Mem_Write+0x21c>
      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
    }
    else
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800929c:	b29b      	uxth	r3, r3
 800929e:	2bff      	cmp	r3, #255	; 0xff
 80092a0:	d90e      	bls.n	80092c0 <HAL_I2C_Mem_Write+0xf0>
    {
      /* Update I2C state */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	22ff      	movs	r2, #255	; 0xff
 80092a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	8979      	ldrh	r1, [r7, #10]
 80092b0:	2300      	movs	r3, #0
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 fba5 	bl	8009a08 <I2C_TransferConfig>
 80092be:	e00f      	b.n	80092e0 <HAL_I2C_Mem_Write+0x110>
      hi2c->Mode      = HAL_I2C_MODE_NONE;

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	851a      	strh	r2, [r3, #40]	; 0x28

 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	8979      	ldrh	r1, [r7, #10]
 80092d2:	2300      	movs	r3, #0
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 fb94 	bl	8009a08 <I2C_TransferConfig>
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 faad 	bl	8009844 <I2C_WaitOnTXISFlagUntilTimeout>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <HAL_I2C_Mem_Write+0x124>
    return HAL_OK;
  }
 80092f0:	2301      	movs	r3, #1
 80092f2:	e07b      	b.n	80093ec <HAL_I2C_Mem_Write+0x21c>
  else
  {
    return HAL_BUSY;
  }
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	781a      	ldrb	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	629a      	str	r2, [r3, #40]	; 0x28
}
/**
  * @brief  Write an amount of data in blocking mode to a specific memory address
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	625a      	str	r2, [r3, #36]	; 0x24
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	855a      	strh	r2, [r3, #42]	; 0x2a
  * @param  DevAddress Target device address: The device 7 bits address value
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800931c:	3b01      	subs	r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	851a      	strh	r2, [r3, #40]	; 0x28
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009328:	b29b      	uxth	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d034      	beq.n	8009398 <HAL_I2C_Mem_Write+0x1c8>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009332:	2b00      	cmp	r3, #0
 8009334:	d130      	bne.n	8009398 <HAL_I2C_Mem_Write+0x1c8>
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	2200      	movs	r2, #0
 800933e:	2180      	movs	r1, #128	; 0x80
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 fa3f 	bl	80097c4 <I2C_WaitOnFlagUntilTimeout>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <HAL_I2C_Mem_Write+0x180>
  * @param  Timeout Timeout duration
  * @retval HAL status
 800934c:	2301      	movs	r3, #1
 800934e:	e04d      	b.n	80093ec <HAL_I2C_Mem_Write+0x21c>
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009354:	b29b      	uxth	r3, r3
 8009356:	2bff      	cmp	r3, #255	; 0xff
 8009358:	d90e      	bls.n	8009378 <HAL_I2C_Mem_Write+0x1a8>
{
  uint32_t tickstart;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	22ff      	movs	r2, #255	; 0xff
 800935e:	851a      	strh	r2, [r3, #40]	; 0x28

 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009364:	b2da      	uxtb	r2, r3
 8009366:	8979      	ldrh	r1, [r7, #10]
 8009368:	2300      	movs	r3, #0
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fb49 	bl	8009a08 <I2C_TransferConfig>
 8009376:	e00f      	b.n	8009398 <HAL_I2C_Mem_Write+0x1c8>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	851a      	strh	r2, [r3, #40]	; 0x28
  {
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009386:	b2da      	uxtb	r2, r3
 8009388:	8979      	ldrh	r1, [r7, #10]
 800938a:	2300      	movs	r3, #0
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fb38 	bl	8009a08 <I2C_TransferConfig>
    if ((pData == NULL) || (Size == 0U))
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
      return  HAL_ERROR;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d19e      	bne.n	80092e0 <HAL_I2C_Mem_Write+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fa8c 	bl	80098c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <HAL_I2C_Mem_Write+0x1e6>

    /* Init tickstart for timeout management*/
 80093b2:	2301      	movs	r3, #1
 80093b4:	e01a      	b.n	80093ec <HAL_I2C_Mem_Write+0x21c>
    tickstart = HAL_GetTick();

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
    {
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2220      	movs	r2, #32
 80093bc:	61da      	str	r2, [r3, #28]
      return HAL_ERROR;
    }

 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6859      	ldr	r1, [r3, #4]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <HAL_I2C_Mem_Write+0x224>)
 80093ca:	400b      	ands	r3, r1
 80093cc:	6053      	str	r3, [r2, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 80093e6:	2300      	movs	r3, #0
 80093e8:	e000      	b.n	80093ec <HAL_I2C_Mem_Write+0x21c>

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
 80093ea:	2302      	movs	r3, #2
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	fe00e800 	.word	0xfe00e800

080093f8 <HAL_I2C_Mem_Read>:
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
    }

    do
    {
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	4608      	mov	r0, r1
 8009402:	4611      	mov	r1, r2
 8009404:	461a      	mov	r2, r3
 8009406:	4603      	mov	r3, r0
 8009408:	817b      	strh	r3, [r7, #10]
 800940a:	460b      	mov	r3, r1
 800940c:	813b      	strh	r3, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	80fb      	strh	r3, [r7, #6]
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        return HAL_ERROR;
      }

 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b20      	cmp	r3, #32
 800941c:	f040 80fd 	bne.w	800961a <HAL_I2C_Mem_Read+0x222>
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <HAL_I2C_Mem_Read+0x34>
 8009426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009428:	2b00      	cmp	r3, #0
 800942a:	d105      	bne.n	8009438 <HAL_I2C_Mem_Read+0x40>

      /* Increment Buffer pointer */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009432:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->pBuffPtr++;
 8009434:	2301      	movs	r3, #1
 8009436:	e0f1      	b.n	800961c <HAL_I2C_Mem_Read+0x224>

      hi2c->XferCount--;
      hi2c->XferSize--;

 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_I2C_Mem_Read+0x4e>
 8009442:	2302      	movs	r3, #2
 8009444:	e0ea      	b.n	800961c <HAL_I2C_Mem_Read+0x224>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
      {
        /* Wait until TCR flag is set */
 800944e:	f7fb ff45 	bl	80052dc <HAL_GetTick>
 8009452:	6178      	str	r0, [r7, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
        {
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	2319      	movs	r3, #25
 800945a:	2201      	movs	r2, #1
 800945c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 f9af 	bl	80097c4 <I2C_WaitOnFlagUntilTimeout>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <HAL_I2C_Mem_Read+0x78>
          return HAL_ERROR;
        }
 800946c:	2301      	movs	r3, #1
 800946e:	e0d5      	b.n	800961c <HAL_I2C_Mem_Read+0x224>

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
        {
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2222      	movs	r2, #34	; 0x22
 8009474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2240      	movs	r2, #64	; 0x40
 800947c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	645a      	str	r2, [r3, #68]	; 0x44
                             I2C_NO_STARTSTOP);
        }
        else
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6a3a      	ldr	r2, [r7, #32]
 800948a:	625a      	str	r2, [r3, #36]	; 0x24
        {
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009490:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize = hi2c->XferCount;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	635a      	str	r2, [r3, #52]	; 0x34
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
                             I2C_NO_STARTSTOP);
        }
 8009498:	88f8      	ldrh	r0, [r7, #6]
 800949a:	893a      	ldrh	r2, [r7, #8]
 800949c:	8979      	ldrh	r1, [r7, #10]
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	4603      	mov	r3, r0
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 f913 	bl	80096d4 <I2C_RequestMemoryRead>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d005      	beq.n	80094c0 <HAL_I2C_Mem_Read+0xc8>
      }

    } while (hi2c->XferCount > 0U);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

 80094bc:	2301      	movs	r3, #1
 80094be:	e0ad      	b.n	800961c <HAL_I2C_Mem_Read+0x224>
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	2bff      	cmp	r3, #255	; 0xff
 80094c8:	d90e      	bls.n	80094e8 <HAL_I2C_Mem_Read+0xf0>
    }

 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	22ff      	movs	r2, #255	; 0xff
 80094ce:	851a      	strh	r2, [r3, #40]	; 0x28
    /* Clear STOP Flag */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	8979      	ldrh	r1, [r7, #10]
 80094d8:	4b52      	ldr	r3, [pc, #328]	; (8009624 <HAL_I2C_Mem_Read+0x22c>)
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 fa91 	bl	8009a08 <I2C_TransferConfig>
 80094e6:	e00f      	b.n	8009508 <HAL_I2C_Mem_Read+0x110>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	851a      	strh	r2, [r3, #40]	; 0x28

 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	8979      	ldrh	r1, [r7, #10]
 80094fa:	4b4a      	ldr	r3, [pc, #296]	; (8009624 <HAL_I2C_Mem_Read+0x22c>)
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fa80 	bl	8009a08 <I2C_TransferConfig>
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	2200      	movs	r2, #0
 8009510:	2104      	movs	r1, #4
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 f956 	bl	80097c4 <I2C_WaitOnFlagUntilTimeout>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <HAL_I2C_Mem_Read+0x12a>
    return HAL_OK;
  }
 800951e:	2301      	movs	r3, #1
 8009520:	e07c      	b.n	800961c <HAL_I2C_Mem_Read+0x224>
  else
  {
    return HAL_BUSY;
  }
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	701a      	strb	r2, [r3, #0]
}

/**
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	625a      	str	r2, [r3, #36]	; 0x24
  * @brief  Read an amount of data in blocking mode from a specific memory address
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953e:	3b01      	subs	r3, #1
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	851a      	strh	r2, [r3, #40]	; 0x28
  *                the configuration information for the specified I2C.
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954a:	b29b      	uxth	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	855a      	strh	r2, [r3, #42]	; 0x2a
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009558:	b29b      	uxth	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d034      	beq.n	80095c8 <HAL_I2C_Mem_Read+0x1d0>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	d130      	bne.n	80095c8 <HAL_I2C_Mem_Read+0x1d0>
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	2200      	movs	r2, #0
 800956e:	2180      	movs	r1, #128	; 0x80
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f927 	bl	80097c4 <I2C_WaitOnFlagUntilTimeout>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <HAL_I2C_Mem_Read+0x188>
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
 800957c:	2301      	movs	r3, #1
 800957e:	e04d      	b.n	800961c <HAL_I2C_Mem_Read+0x224>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009584:	b29b      	uxth	r3, r3
 8009586:	2bff      	cmp	r3, #255	; 0xff
 8009588:	d90e      	bls.n	80095a8 <HAL_I2C_Mem_Read+0x1b0>
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	22ff      	movs	r2, #255	; 0xff
 800958e:	851a      	strh	r2, [r3, #40]	; 0x28
  uint32_t tickstart;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009594:	b2da      	uxtb	r2, r3
 8009596:	8979      	ldrh	r1, [r7, #10]
 8009598:	2300      	movs	r3, #0
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 fa31 	bl	8009a08 <I2C_TransferConfig>
 80095a6:	e00f      	b.n	80095c8 <HAL_I2C_Mem_Read+0x1d0>

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	851a      	strh	r2, [r3, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	8979      	ldrh	r1, [r7, #10]
 80095ba:	2300      	movs	r3, #0
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f000 fa20 	bl	8009a08 <I2C_TransferConfig>
  {
    if ((pData == NULL) || (Size == 0U))
    {
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d19a      	bne.n	8009508 <HAL_I2C_Mem_Read+0x110>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
      return  HAL_ERROR;
    }

 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 f974 	bl	80098c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <HAL_I2C_Mem_Read+0x1ee>
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095e2:	2301      	movs	r3, #1
 80095e4:	e01a      	b.n	800961c <HAL_I2C_Mem_Read+0x224>

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();

 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2220      	movs	r2, #32
 80095ec:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6859      	ldr	r1, [r3, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <HAL_I2C_Mem_Read+0x230>)
 80095fa:	400b      	ands	r3, r1
 80095fc:	6053      	str	r3, [r2, #4]
    }

 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009616:	2300      	movs	r3, #0
 8009618:	e000      	b.n	800961c <HAL_I2C_Mem_Read+0x224>
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;

    /* Send Slave Address and Memory Address */
 800961a:	2302      	movs	r3, #2
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	80002400 	.word	0x80002400
 8009628:	fe00e800 	.word	0xfe00e800

0800962c <I2C_RequestMemoryWrite>:
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);

  /* Check if STOPF is set */
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af02      	add	r7, sp, #8
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	461a      	mov	r2, r3
 800963a:	4603      	mov	r3, r0
 800963c:	817b      	strh	r3, [r7, #10]
 800963e:	460b      	mov	r3, r1
 8009640:	813b      	strh	r3, [r7, #8]
 8009642:	4613      	mov	r3, r2
 8009644:	80fb      	strh	r3, [r7, #6]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	b2da      	uxtb	r2, r3
 800964a:	8979      	ldrh	r1, [r7, #10]
 800964c:	4b20      	ldr	r3, [pc, #128]	; (80096d0 <I2C_RequestMemoryWrite+0xa4>)
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 f9d7 	bl	8009a08 <I2C_TransferConfig>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
  {
    /* Call I2C Slave complete process */
 800965a:	69fa      	ldr	r2, [r7, #28]
 800965c:	69b9      	ldr	r1, [r7, #24]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f8f0 	bl	8009844 <I2C_WaitOnTXISFlagUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <I2C_RequestMemoryWrite+0x42>
    I2C_ITSlaveCplt(hi2c, ITFlags);
  }
 800966a:	2301      	movs	r3, #1
 800966c:	e02c      	b.n	80096c8 <I2C_RequestMemoryWrite+0x9c>

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
  {
 800966e:	88fb      	ldrh	r3, [r7, #6]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d105      	bne.n	8009680 <I2C_RequestMemoryWrite+0x54>
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
 8009674:	893b      	ldrh	r3, [r7, #8]
 8009676:	b2da      	uxtb	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	629a      	str	r2, [r3, #40]	; 0x28
 800967e:	e015      	b.n	80096ac <I2C_RequestMemoryWrite+0x80>
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009680:	893b      	ldrh	r3, [r7, #8]
 8009682:	0a1b      	lsrs	r3, r3, #8
 8009684:	b29b      	uxth	r3, r3
 8009686:	b2da      	uxtb	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	629a      	str	r2, [r3, #40]	; 0x28
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
        {
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	69b9      	ldr	r1, [r7, #24]
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 f8d6 	bl	8009844 <I2C_WaitOnTXISFlagUntilTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <I2C_RequestMemoryWrite+0x76>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
          {
 800969e:	2301      	movs	r3, #1
 80096a0:	e012      	b.n	80096c8 <I2C_RequestMemoryWrite+0x9c>
            treatdmanack = 1U;
          }
        }
      }
 80096a2:	893b      	ldrh	r3, [r7, #8]
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
      {
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	2200      	movs	r2, #0
 80096b4:	2180      	movs	r1, #128	; 0x80
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f884 	bl	80097c4 <I2C_WaitOnFlagUntilTimeout>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <I2C_RequestMemoryWrite+0x9a>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
        {
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <I2C_RequestMemoryWrite+0x9c>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
          {
            treatdmanack = 1U;
 80096c6:	2300      	movs	r3, #0
          }
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	80002000 	.word	0x80002000

080096d4 <I2C_RequestMemoryRead>:
          I2C_ITListenCplt(hi2c, ITFlags);
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af02      	add	r7, sp, #8
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	4608      	mov	r0, r1
 80096de:	4611      	mov	r1, r2
 80096e0:	461a      	mov	r2, r3
 80096e2:	4603      	mov	r3, r0
 80096e4:	817b      	strh	r3, [r7, #10]
 80096e6:	460b      	mov	r3, r1
 80096e8:	813b      	strh	r3, [r7, #8]
 80096ea:	4613      	mov	r3, r2
 80096ec:	80fb      	strh	r3, [r7, #6]

 80096ee:	88fb      	ldrh	r3, [r7, #6]
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	8979      	ldrh	r1, [r7, #10]
 80096f4:	4b20      	ldr	r3, [pc, #128]	; (8009778 <I2C_RequestMemoryRead+0xa4>)
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	2300      	movs	r3, #0
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f984 	bl	8009a08 <I2C_TransferConfig>
          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);

 8009700:	69fa      	ldr	r2, [r7, #28]
 8009702:	69b9      	ldr	r1, [r7, #24]
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 f89d 	bl	8009844 <I2C_WaitOnTXISFlagUntilTimeout>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <I2C_RequestMemoryRead+0x40>
          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
 8009710:	2301      	movs	r3, #1
 8009712:	e02c      	b.n	800976e <I2C_RequestMemoryRead+0x9a>
          I2C_ITSlaveSeqCplt(hi2c);
        }
        else
        {
 8009714:	88fb      	ldrh	r3, [r7, #6]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d105      	bne.n	8009726 <I2C_RequestMemoryRead+0x52>
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
        }
 800971a:	893b      	ldrh	r3, [r7, #8]
 800971c:	b2da      	uxtb	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	629a      	str	r2, [r3, #40]	; 0x28
 8009724:	e015      	b.n	8009752 <I2C_RequestMemoryRead+0x7e>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009726:	893b      	ldrh	r3, [r7, #8]
 8009728:	0a1b      	lsrs	r3, r3, #8
 800972a:	b29b      	uxth	r3, r3
 800972c:	b2da      	uxtb	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009734:	69fa      	ldr	r2, [r7, #28]
 8009736:	69b9      	ldr	r1, [r7, #24]
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 f883 	bl	8009844 <I2C_WaitOnTXISFlagUntilTimeout>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <I2C_RequestMemoryRead+0x74>

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
 8009744:	2301      	movs	r3, #1
 8009746:	e012      	b.n	800976e <I2C_RequestMemoryRead+0x9a>
        tmpstate = hi2c->State;

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
        {
 8009748:	893b      	ldrh	r3, [r7, #8]
 800974a:	b2da      	uxtb	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	629a      	str	r2, [r3, #40]	; 0x28
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
          }
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	2200      	movs	r2, #0
 800975a:	2140      	movs	r1, #64	; 0x40
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 f831 	bl	80097c4 <I2C_WaitOnFlagUntilTimeout>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <I2C_RequestMemoryRead+0x98>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
          {
 8009768:	2301      	movs	r3, #1
 800976a:	e000      	b.n	800976e <I2C_RequestMemoryRead+0x9a>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
          }
          else
 800976c:	2300      	movs	r3, #0
          {
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	80002000 	.word	0x80002000

0800977c <I2C_Flush_TXDR>:
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
  hi2c->XferCount     = 0U;

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;

 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	f003 0302 	and.w	r3, r3, #2
 800978e:	2b02      	cmp	r3, #2
 8009790:	d103      	bne.n	800979a <I2C_Flush_TXDR+0x1e>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2200      	movs	r2, #0
 8009798:	629a      	str	r2, [r3, #40]	; 0x28
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);

    /* keep HAL_I2C_STATE_LISTEN if set */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d007      	beq.n	80097b8 <I2C_Flush_TXDR+0x3c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f042 0201 	orr.w	r2, r2, #1
 80097b6:	619a      	str	r2, [r3, #24]
  }
  else
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <I2C_WaitOnFlagUntilTimeout>:
/**
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	4613      	mov	r3, r2
 80097d2:	71fb      	strb	r3, [r7, #7]
{
 80097d4:	e022      	b.n	800981c <I2C_WaitOnFlagUntilTimeout+0x58>
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);

 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097dc:	d01e      	beq.n	800981c <I2C_WaitOnFlagUntilTimeout+0x58>
  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80097de:	f7fb fd7d 	bl	80052dc <HAL_GetTick>
 80097e2:	4602      	mov	r2, r0
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d302      	bcc.n	80097f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d113      	bne.n	800981c <I2C_WaitOnFlagUntilTimeout+0x58>

  /* If last transfer, enable STOP interrupt */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f8:	f043 0220 	orr.w	r2, r3, #32
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	645a      	str	r2, [r3, #68]	; 0x44
  if (hi2c->XferCount == 0U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2220      	movs	r2, #32
 8009804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  {
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
  }
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* else prepare a new DMA transfer and enable TCReload interrupt */
 8009818:	2301      	movs	r3, #1
 800981a:	e00f      	b.n	800983c <I2C_WaitOnFlagUntilTimeout+0x78>
{
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	4013      	ands	r3, r2
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	429a      	cmp	r2, r3
 800982a:	bf0c      	ite	eq
 800982c:	2301      	moveq	r3, #1
 800982e:	2300      	movne	r3, #0
 8009830:	b2db      	uxtb	r3, r3
 8009832:	461a      	mov	r2, r3
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	429a      	cmp	r2, r3
 8009838:	d0cd      	beq.n	80097d6 <I2C_WaitOnFlagUntilTimeout+0x12>
  else
  {
    /* Update Buffer pointer */
    hi2c->pBuffPtr += hi2c->XferSize;
 800983a:	2300      	movs	r3, #0

 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <I2C_WaitOnTXISFlagUntilTimeout>:
    else
    {
      hi2c->XferSize = hi2c->XferCount;
    }

    /* Enable the DMA stream */
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009850:	e02c      	b.n	80098ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
                         hi2c->XferSize) != HAL_OK)
    {
      /* Call the corresponding callback to inform upper layer of End of Transfer */
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f870 	bl	800993c <I2C_IsAcknowledgeFailed>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
    }
 8009862:	2301      	movs	r3, #1
 8009864:	e02a      	b.n	80098bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    else
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800986c:	d01e      	beq.n	80098ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    }
  }
 800986e:	f7fb fd35 	bl	80052dc <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	429a      	cmp	r2, r3
 800987c:	d302      	bcc.n	8009884 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d113      	bne.n	80098ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
}

 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009888:	f043 0220 	orr.w	r2, r3, #32
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	645a      	str	r2, [r3, #68]	; 0x44
/**
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2220      	movs	r2, #32
 8009894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  * @brief  DMA I2C slave receive process complete callback.
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  * @param  hdma DMA handle
  * @retval None
  */
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098a8:	2301      	movs	r3, #1
 80098aa:	e007      	b.n	80098bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d1cb      	bne.n	8009852 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
  uint32_t tmpoptions = hi2c->XferOptions;

 80098ba:	2300      	movs	r3, #0
  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
  }
  else
  {
    /* No specific action, Master fully manage the generation of STOP condition */
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
 80098d0:	e028      	b.n	8009924 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	68b9      	ldr	r1, [r7, #8]
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f830 	bl	800993c <I2C_IsAcknowledgeFailed>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>

/**
 80098e2:	2301      	movs	r3, #1
 80098e4:	e026      	b.n	8009934 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
 80098e6:	f7fb fcf9 	bl	80052dc <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d302      	bcc.n	80098fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d113      	bne.n	8009924 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009900:	f043 0220 	orr.w	r2, r3, #32
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	645a      	str	r2, [r3, #68]	; 0x44
  uint32_t treatdmaerror = 0U;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2220      	movs	r2, #32
 800990c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  /* Derogation MISRAC2012-Rule-11.5 */
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);

  if (hi2c->hdmatx != NULL)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009920:	2301      	movs	r3, #1
 8009922:	e007      	b.n	8009934 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	f003 0320 	and.w	r3, r3, #32
 800992e:	2b20      	cmp	r3, #32
 8009930:	d1cf      	bne.n	80098d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    {
      treatdmaerror = 1U;
    }
 8009932:	2300      	movs	r3, #0
  }
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <I2C_IsAcknowledgeFailed>:

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
        return HAL_ERROR;
      }
    }
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
  }
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	f003 0310 	and.w	r3, r3, #16
 8009952:	2b10      	cmp	r3, #16
 8009954:	d151      	bne.n	80099fa <I2C_IsAcknowledgeFailed+0xbe>
  return HAL_OK;
}

/**
 8009956:	e022      	b.n	800999e <I2C_IsAcknowledgeFailed+0x62>
  * @brief  This function handles I2C Communication Timeout for specific usage of TXIS flag.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800995e:	d01e      	beq.n	800999e <I2C_IsAcknowledgeFailed+0x62>
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
 8009960:	f7fb fcbc 	bl	80052dc <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	429a      	cmp	r2, r3
 800996e:	d302      	bcc.n	8009976 <I2C_IsAcknowledgeFailed+0x3a>
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d113      	bne.n	800999e <I2C_IsAcknowledgeFailed+0x62>
  * @retval HAL status
  */
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997a:	f043 0220 	orr.w	r2, r3, #32
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	645a      	str	r2, [r3, #68]	; 0x44
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2220      	movs	r2, #32
 8009986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                                        uint32_t Tickstart)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800999a:	2301      	movs	r3, #1
 800999c:	e02e      	b.n	80099fc <I2C_IsAcknowledgeFailed+0xc0>
/**
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	d1d5      	bne.n	8009958 <I2C_IsAcknowledgeFailed+0x1c>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2210      	movs	r2, #16
 80099b2:	61da      	str	r2, [r3, #28]
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2220      	movs	r2, #32
 80099ba:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
        hi2c->State = HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff fedd 	bl	800977c <I2C_Flush_TXDR>

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6859      	ldr	r1, [r3, #4]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <I2C_IsAcknowledgeFailed+0xc8>)
 80099ce:	400b      	ands	r3, r1
 80099d0:	6053      	str	r3, [r2, #4]

        return HAL_ERROR;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d6:	f043 0204 	orr.w	r2, r3, #4
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  return HAL_OK;
}
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/**
 80099f6:	2301      	movs	r3, #1
 80099f8:	e000      	b.n	80099fc <I2C_IsAcknowledgeFailed+0xc0>
  * @brief  This function handles I2C Communication Timeout for specific usage of STOP flag.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 80099fa:	2300      	movs	r3, #0
  *                the configuration information for the specified I2C.
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	fe00e800 	.word	0xfe00e800

08009a08 <I2C_TransferConfig>:
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      hi2c->State = HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Process Unlocked */
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	607b      	str	r3, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	817b      	strh	r3, [r7, #10]
 8009a16:	4613      	mov	r3, r2
 8009a18:	727b      	strb	r3, [r7, #9]

      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	0d5b      	lsrs	r3, r3, #21
 8009a24:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009a28:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <I2C_TransferConfig+0x58>)
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	43db      	mvns	r3, r3
 8009a2e:	ea02 0103 	and.w	r1, r2, r3
 8009a32:	897b      	ldrh	r3, [r7, #10]
 8009a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009a38:	7a7b      	ldrb	r3, [r7, #9]
 8009a3a:	041b      	lsls	r3, r3, #16
 8009a3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a40:	431a      	orrs	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	431a      	orrs	r2, r3
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	605a      	str	r2, [r3, #4]

/**
  * @brief  This function handles I2C Communication Timeout for specific usage of RXNE flag.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	03ff63ff 	.word	0x03ff63ff

08009a64 <HAL_I2CEx_ConfigAnalogFilter>:
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
  {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b20      	cmp	r3, #32
 8009a78:	d138      	bne.n	8009aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
    /* Process Locked */
    __HAL_LOCK(hi2c);

 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e032      	b.n	8009aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;

 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2224      	movs	r2, #36	; 0x24
 8009a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);

 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0201 	bic.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]
    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);

 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ab6:	601a      	str	r2, [r3, #0]
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;

 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6819      	ldr	r1, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);

 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;

 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2220      	movs	r2, #32
 8009adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_OK;
  }
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e000      	b.n	8009aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  else
  {
    return HAL_BUSY;
  }
 8009aec:	2302      	movs	r3, #2
}

 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <HAL_I2CEx_ConfigDigitalFilter>:
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
  {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d139      	bne.n	8009b84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
    /* Process Locked */
    __HAL_LOCK(hi2c);

 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d101      	bne.n	8009b1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e033      	b.n	8009b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;

 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2224      	movs	r2, #36	; 0x24
 8009b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);

 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0201 	bic.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]
    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]
    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b4c:	60fb      	str	r3, [r7, #12]
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;

 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	021b      	lsls	r3, r3, #8
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);

 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f042 0201 	orr.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;

 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2220      	movs	r2, #32
 8009b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_OK;
  }
 8009b80:	2300      	movs	r3, #0
 8009b82:	e000      	b.n	8009b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  else
  {
    return HAL_BUSY;
  }
 8009b84:	2302      	movs	r3, #2
}
/**
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
	...

08009b94 <HAL_LTDC_Init>:
/** @defgroup LTDC_Exported_Functions LTDC Exported Functions
  * @{
  */

/** @defgroup LTDC_Exported_Functions_Group1 Initialization and Configuration functions
  *  @brief   Initialization and Configuration functions
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  *
@verbatim
 ===============================================================================
                ##### Initialization and Configuration functions #####
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_LTDC_Init+0x12>
 ===============================================================================
    [..]  This section provides functions allowing to:
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e0bf      	b.n	8009d26 <HAL_LTDC_Init+0x192>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d106      	bne.n	8009bc0 <HAL_LTDC_Init+0x2c>

#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  {
    /* Allocate lock resource and initialize it */
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7f8 fcf8 	bl	80025b0 <HAL_LTDC_MspInit>
    hltdc->Lock = HAL_UNLOCKED;

    /* Reset the LTDC callback to the legacy weak callbacks */
    hltdc->LineEventCallback   = HAL_LTDC_LineEventCallback;    /* Legacy weak LineEventCallback    */
    hltdc->ReloadEventCallback = HAL_LTDC_ReloadEventCallback;  /* Legacy weak ReloadEventCallback  */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
    hltdc->ErrorCallback       = HAL_LTDC_ErrorCallback;        /* Legacy weak ErrorCallback        */

    if (hltdc->MspInitCallback == NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009bd6:	619a      	str	r2, [r3, #24]
    {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6999      	ldr	r1, [r3, #24]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	431a      	orrs	r2, r3
      hltdc->MspInitCallback = HAL_LTDC_MspInit;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68db      	ldr	r3, [r3, #12]
    {
 8009bec:	431a      	orrs	r2, r3
      hltdc->MspInitCallback = HAL_LTDC_MspInit;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	431a      	orrs	r2, r3
    {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	619a      	str	r2, [r3, #24]
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6899      	ldr	r1, [r3, #8]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b4a      	ldr	r3, [pc, #296]	; (8009d30 <HAL_LTDC_Init+0x19c>)
 8009c08:	400b      	ands	r3, r1
 8009c0a:	6093      	str	r3, [r2, #8]
  }
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	041b      	lsls	r3, r3, #16
 8009c12:	60fb      	str	r3, [r7, #12]
#else
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6899      	ldr	r1, [r3, #8]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	431a      	orrs	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	609a      	str	r2, [r3, #8]
  if (hltdc->State == HAL_LTDC_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68d9      	ldr	r1, [r3, #12]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	4b3e      	ldr	r3, [pc, #248]	; (8009d30 <HAL_LTDC_Init+0x19c>)
 8009c36:	400b      	ands	r3, r1
 8009c38:	60d3      	str	r3, [r2, #12]
    hltdc->Lock = HAL_UNLOCKED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	041b      	lsls	r3, r3, #16
 8009c40:	60fb      	str	r3, [r7, #12]
    /* Init the low level hardware */
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68d9      	ldr	r1, [r3, #12]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a1a      	ldr	r2, [r3, #32]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	60da      	str	r2, [r3, #12]
    HAL_LTDC_MspInit(hltdc);
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6919      	ldr	r1, [r3, #16]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4b33      	ldr	r3, [pc, #204]	; (8009d30 <HAL_LTDC_Init+0x19c>)
 8009c64:	400b      	ands	r3, r1
 8009c66:	6113      	str	r3, [r2, #16]

 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	041b      	lsls	r3, r3, #16
 8009c6e:	60fb      	str	r3, [r7, #12]
  /* Change LTDC peripheral state */
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6919      	ldr	r1, [r3, #16]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	611a      	str	r2, [r3, #16]
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6959      	ldr	r1, [r3, #20]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	4b27      	ldr	r3, [pc, #156]	; (8009d30 <HAL_LTDC_Init+0x19c>)
 8009c92:	400b      	ands	r3, r1
 8009c94:	6153      	str	r3, [r2, #20]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	041b      	lsls	r3, r3, #16
 8009c9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6959      	ldr	r1, [r3, #20]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	431a      	orrs	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	615a      	str	r2, [r3, #20]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Set Synchronization size */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009cba:	021b      	lsls	r3, r3, #8
 8009cbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009cc4:	041b      	lsls	r3, r3, #16
 8009cc6:	60bb      	str	r3, [r7, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0206 	orr.w	r2, r2, #6
 8009d02:	635a      	str	r2, [r3, #52]	; 0x34
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);

 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	699a      	ldr	r2, [r3, #24]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f042 0201 	orr.w	r2, r2, #1
 8009d12:	619a      	str	r2, [r3, #24]
  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);

  /* Set Total Width */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009d24:	2300      	movs	r3, #0
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	f000f800 	.word	0xf000f800

08009d34 <HAL_LTDC_ConfigLayer>:
      (+) Configure the C-LUT.
      (+) Enable / Disable the color keying.
      (+) Enable / Disable the C-LUT.
      (+) Update the layer position.
      (+) Update the layer size.
      (+) Update pixel format on the fly.
 8009d34:	b5b0      	push	{r4, r5, r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  * @param  hltdc      pointer to a LTDC_HandleTypeDef structure that contains
  *                    the configuration information for the LTDC.
  * @param  pLayerCfg  pointer to a LTDC_LayerCfgTypeDef structure that contains
  *                    the configuration information for the Layer.
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values:
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_LTDC_ConfigLayer+0x1a>
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	e02c      	b.n	8009da8 <HAL_LTDC_ConfigLayer+0x74>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2202      	movs	r2, #2
 8009d5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
  /* Check the parameters */
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2134      	movs	r1, #52	; 0x34
 8009d64:	fb01 f303 	mul.w	r3, r1, r3
 8009d68:	4413      	add	r3, r2
 8009d6a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	4614      	mov	r4, r2
 8009d72:	461d      	mov	r5, r3
 8009d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	6023      	str	r3, [r4, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	68b9      	ldr	r1, [r7, #8]
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f847 	bl	8009e1c <LTDC_SetConfig>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2201      	movs	r2, #1
 8009d94:	625a      	str	r2, [r3, #36]	; 0x24
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Process locked */
 8009da6:	2300      	movs	r3, #0
  __HAL_LOCK(hltdc);
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bdb0      	pop	{r4, r5, r7, pc}

08009db0 <HAL_LTDC_SetAddress>:

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d101      	bne.n	8009dca <HAL_LTDC_SetAddress+0x1a>
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	e024      	b.n	8009e14 <HAL_LTDC_SetAddress+0x64>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  return HAL_OK;
}
/**
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  * @brief  Reconfigure the frame buffer Address.
  * @param  hltdc     pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2234      	movs	r2, #52	; 0x34
 8009dde:	fb02 f303 	mul.w	r3, r2, r3
 8009de2:	3338      	adds	r3, #56	; 0x38
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4413      	add	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]
  * @param  Address   new address value.
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values:
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	625a      	str	r2, [r3, #36]	; 0x24
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6979      	ldr	r1, [r7, #20]
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 f811 	bl	8009e1c <LTDC_SetConfig>
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
 8009e12:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <LTDC_SetConfig>:
{
  return hltdc->ErrorCode;
}

/**
  * @}
 8009e1c:	b480      	push	{r7}
 8009e1e:	b089      	sub	sp, #36	; 0x24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  */

/**
  * @}
  */

 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	0c1b      	lsrs	r3, r3, #16
 8009e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e38:	4413      	add	r3, r2
 8009e3a:	041b      	lsls	r3, r3, #16
 8009e3c:	61fb      	str	r3, [r7, #28]
/** @defgroup LTDC_Private_Functions LTDC Private Functions
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	01db      	lsls	r3, r3, #7
 8009e48:	4413      	add	r3, r2
 8009e4a:	3384      	adds	r3, #132	; 0x84
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	6812      	ldr	r2, [r2, #0]
 8009e52:	4611      	mov	r1, r2
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	01d2      	lsls	r2, r2, #7
 8009e58:	440a      	add	r2, r1
 8009e5a:	3284      	adds	r2, #132	; 0x84
 8009e5c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009e60:	6053      	str	r3, [r2, #4]
  * @{
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	0c1b      	lsrs	r3, r3, #16
 8009e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e72:	4413      	add	r3, r2
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	01db      	lsls	r3, r3, #7
 8009e80:	440b      	add	r3, r1
 8009e82:	3384      	adds	r3, #132	; 0x84
 8009e84:	4619      	mov	r1, r3
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	604b      	str	r3, [r1, #4]
  */

/**
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	68da      	ldr	r2, [r3, #12]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e9a:	4413      	add	r3, r2
 8009e9c:	041b      	lsls	r3, r3, #16
 8009e9e:	61fb      	str	r3, [r7, #28]
  * @brief  Configure the LTDC peripheral
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	01db      	lsls	r3, r3, #7
 8009eaa:	4413      	add	r3, r2
 8009eac:	3384      	adds	r3, #132	; 0x84
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	01d2      	lsls	r2, r2, #7
 8009eba:	440a      	add	r2, r1
 8009ebc:	3284      	adds	r2, #132	; 0x84
 8009ebe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009ec2:	6093      	str	r3, [r2, #8]
  * @param  hltdc     Pointer to a LTDC_HandleTypeDef structure that contains
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ed2:	4413      	add	r3, r2
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4619      	mov	r1, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	01db      	lsls	r3, r3, #7
 8009ee0:	440b      	add	r3, r1
 8009ee2:	3384      	adds	r3, #132	; 0x84
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	608b      	str	r3, [r1, #8]
  *                   the configuration information for the LTDC.
  * @param  pLayerCfg Pointer LTDC Layer Configuration structure
  * @param  LayerIdx  LTDC Layer index.
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	01db      	lsls	r3, r3, #7
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3384      	adds	r3, #132	; 0x84
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	4611      	mov	r1, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	01d2      	lsls	r2, r2, #7
 8009f06:	440a      	add	r2, r1
 8009f08:	3284      	adds	r2, #132	; 0x84
 8009f0a:	f023 0307 	bic.w	r3, r3, #7
 8009f0e:	6113      	str	r3, [r2, #16]
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	461a      	mov	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	01db      	lsls	r3, r3, #7
 8009f1a:	4413      	add	r3, r2
 8009f1c:	3384      	adds	r3, #132	; 0x84
 8009f1e:	461a      	mov	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	6113      	str	r3, [r2, #16]
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	61fb      	str	r3, [r7, #28]
{
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009f36:	041b      	lsls	r3, r3, #16
 8009f38:	61bb      	str	r3, [r7, #24]
  uint32_t tmp;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	061b      	lsls	r3, r3, #24
 8009f40:	617b      	str	r3, [r7, #20]
  uint32_t tmp1;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	01db      	lsls	r3, r3, #7
 8009f4c:	4413      	add	r3, r2
 8009f4e:	3384      	adds	r3, #132	; 0x84
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	01db      	lsls	r3, r3, #7
 8009f5c:	4413      	add	r3, r2
 8009f5e:	3384      	adds	r3, #132	; 0x84
 8009f60:	461a      	mov	r2, r3
 8009f62:	2300      	movs	r3, #0
 8009f64:	6193      	str	r3, [r2, #24]
  uint32_t tmp2;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	431a      	orrs	r2, r3
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	431a      	orrs	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	01db      	lsls	r3, r3, #7
 8009f80:	440b      	add	r3, r1
 8009f82:	3384      	adds	r3, #132	; 0x84
 8009f84:	4619      	mov	r1, r3
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	618b      	str	r3, [r1, #24]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	01db      	lsls	r3, r3, #7
 8009f96:	4413      	add	r3, r2
 8009f98:	3384      	adds	r3, #132	; 0x84
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	6812      	ldr	r2, [r2, #0]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	01d2      	lsls	r2, r2, #7
 8009fa6:	440a      	add	r2, r1
 8009fa8:	3284      	adds	r2, #132	; 0x84
 8009faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009fae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	01db      	lsls	r3, r3, #7
 8009fba:	4413      	add	r3, r2
 8009fbc:	3384      	adds	r3, #132	; 0x84
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);

  /* Configure the vertical start and stop position */
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	01db      	lsls	r3, r3, #7
 8009fd0:	4413      	add	r3, r2
 8009fd2:	3384      	adds	r3, #132	; 0x84
 8009fd4:	69da      	ldr	r2, [r3, #28]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	01db      	lsls	r3, r3, #7
 8009fe0:	440b      	add	r3, r1
 8009fe2:	3384      	adds	r3, #132	; 0x84
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4b58      	ldr	r3, [pc, #352]	; (800a148 <LTDC_SetConfig+0x32c>)
 8009fe8:	4013      	ands	r3, r2
 8009fea:	61cb      	str	r3, [r1, #28]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	68f9      	ldr	r1, [r7, #12]
 8009ff6:	6809      	ldr	r1, [r1, #0]
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	01c9      	lsls	r1, r1, #7
 8009ffe:	4401      	add	r1, r0
 800a000:	3184      	adds	r1, #132	; 0x84
 800a002:	4313      	orrs	r3, r2
 800a004:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);

 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	01db      	lsls	r3, r3, #7
 800a010:	4413      	add	r3, r2
 800a012:	3384      	adds	r3, #132	; 0x84
 800a014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	01db      	lsls	r3, r3, #7
 800a020:	4413      	add	r3, r2
 800a022:	3384      	adds	r3, #132	; 0x84
 800a024:	461a      	mov	r2, r3
 800a026:	2300      	movs	r3, #0
 800a028:	6293      	str	r3, [r2, #40]	; 0x28
  /* Specifies the pixel format */
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	01db      	lsls	r3, r3, #7
 800a034:	4413      	add	r3, r2
 800a036:	3384      	adds	r3, #132	; 0x84
 800a038:	461a      	mov	r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d102      	bne.n	800a04e <LTDC_SetConfig+0x232>

  /* Configure the default color values */
 800a048:	2304      	movs	r3, #4
 800a04a:	61fb      	str	r3, [r7, #28]
 800a04c:	e01b      	b.n	800a086 <LTDC_SetConfig+0x26a>
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d102      	bne.n	800a05c <LTDC_SetConfig+0x240>
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800a056:	2303      	movs	r3, #3
 800a058:	61fb      	str	r3, [r7, #28]
 800a05a:	e014      	b.n	800a086 <LTDC_SetConfig+0x26a>
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);

 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	2b04      	cmp	r3, #4
 800a062:	d00b      	beq.n	800a07c <LTDC_SetConfig+0x260>
  /* Specifies the constant alpha value */
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	691b      	ldr	r3, [r3, #16]

 800a068:	2b02      	cmp	r3, #2
 800a06a:	d007      	beq.n	800a07c <LTDC_SetConfig+0x260>
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	691b      	ldr	r3, [r3, #16]
  /* Specifies the constant alpha value */
 800a070:	2b03      	cmp	r3, #3
 800a072:	d003      	beq.n	800a07c <LTDC_SetConfig+0x260>
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	691b      	ldr	r3, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a078:	2b07      	cmp	r3, #7
 800a07a:	d102      	bne.n	800a082 <LTDC_SetConfig+0x266>

  /* Specifies the blending factors */
 800a07c:	2302      	movs	r3, #2
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	e001      	b.n	800a086 <LTDC_SetConfig+0x26a>
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);

  /* Configure the color frame buffer start address */
 800a082:	2301      	movs	r3, #1
 800a084:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	01db      	lsls	r3, r3, #7
 800a090:	4413      	add	r3, r2
 800a092:	3384      	adds	r3, #132	; 0x84
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	6812      	ldr	r2, [r2, #0]
 800a09a:	4611      	mov	r1, r2
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	01d2      	lsls	r2, r2, #7
 800a0a0:	440a      	add	r2, r1
 800a0a2:	3284      	adds	r2, #132	; 0x84
 800a0a4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a0a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  {
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	69fa      	ldr	r2, [r7, #28]
 800a0b0:	fb02 f303 	mul.w	r3, r2, r3
 800a0b4:	041a      	lsls	r2, r3, #16
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	6859      	ldr	r1, [r3, #4]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	1acb      	subs	r3, r1, r3
 800a0c0:	69f9      	ldr	r1, [r7, #28]
 800a0c2:	fb01 f303 	mul.w	r3, r1, r3
 800a0c6:	3303      	adds	r3, #3
 800a0c8:	68f9      	ldr	r1, [r7, #12]
 800a0ca:	6809      	ldr	r1, [r1, #0]
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	01c9      	lsls	r1, r1, #7
 800a0d2:	4401      	add	r1, r0
 800a0d4:	3184      	adds	r1, #132	; 0x84
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	62cb      	str	r3, [r1, #44]	; 0x2c
    tmp = 4U;
  }
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	01db      	lsls	r3, r3, #7
 800a0e4:	4413      	add	r3, r2
 800a0e6:	3384      	adds	r3, #132	; 0x84
 800a0e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	01db      	lsls	r3, r3, #7
 800a0f4:	440b      	add	r3, r1
 800a0f6:	3384      	adds	r3, #132	; 0x84
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4b14      	ldr	r3, [pc, #80]	; (800a14c <LTDC_SetConfig+0x330>)
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	630b      	str	r3, [r1, #48]	; 0x30
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	461a      	mov	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	01db      	lsls	r3, r3, #7
 800a10a:	4413      	add	r3, r2
 800a10c:	3384      	adds	r3, #132	; 0x84
 800a10e:	461a      	mov	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a114:	6313      	str	r3, [r2, #48]	; 0x30
  {
    tmp = 3U;
  }
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	01db      	lsls	r3, r3, #7
 800a120:	4413      	add	r3, r2
 800a122:	3384      	adds	r3, #132	; 0x84
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	4611      	mov	r1, r2
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	01d2      	lsls	r2, r2, #7
 800a130:	440a      	add	r2, r1
 800a132:	3284      	adds	r2, #132	; 0x84
 800a134:	f043 0301 	orr.w	r3, r3, #1
 800a138:	6013      	str	r3, [r2, #0]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a13a:	bf00      	nop
 800a13c:	3724      	adds	r7, #36	; 0x24
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	fffff8f8 	.word	0xfffff8f8
 800a14c:	fffff800 	.word	0xfffff800

0800a150 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
}
 800a154:	4b05      	ldr	r3, [pc, #20]	; (800a16c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a04      	ldr	r2, [pc, #16]	; (800a16c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a15a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a15e:	6013      	str	r3, [r2, #0]

 800a160:	bf00      	nop
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	40007000 	.word	0x40007000

0800a170 <HAL_PWREx_EnableOverDrive>:
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0

 800a176:	2300      	movs	r3, #0
 800a178:	607b      	str	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
  
 800a17a:	4b23      	ldr	r3, [pc, #140]	; (800a208 <HAL_PWREx_EnableOverDrive+0x98>)
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	4a22      	ldr	r2, [pc, #136]	; (800a208 <HAL_PWREx_EnableOverDrive+0x98>)
 800a180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a184:	6413      	str	r3, [r2, #64]	; 0x40
 800a186:	4b20      	ldr	r3, [pc, #128]	; (800a208 <HAL_PWREx_EnableOverDrive+0x98>)
 800a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	683b      	ldr	r3, [r7, #0]
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();

 800a192:	4b1e      	ldr	r3, [pc, #120]	; (800a20c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a1d      	ldr	r2, [pc, #116]	; (800a20c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a19c:	6013      	str	r3, [r2, #0]
  /* Get tick */
  tickstart = HAL_GetTick();

 800a19e:	f7fb f89d 	bl	80052dc <HAL_GetTick>
 800a1a2:	6078      	str	r0, [r7, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
  {
 800a1a4:	e009      	b.n	800a1ba <HAL_PWREx_EnableOverDrive+0x4a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
 800a1a6:	f7fb f899 	bl	80052dc <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1b4:	d901      	bls.n	800a1ba <HAL_PWREx_EnableOverDrive+0x4a>
      return HAL_TIMEOUT;
    }
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e022      	b.n	800a200 <HAL_PWREx_EnableOverDrive+0x90>
  {
 800a1ba:	4b14      	ldr	r3, [pc, #80]	; (800a20c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c6:	d1ee      	bne.n	800a1a6 <HAL_PWREx_EnableOverDrive+0x36>
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

 800a1c8:	4b10      	ldr	r3, [pc, #64]	; (800a20c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a0f      	ldr	r2, [pc, #60]	; (800a20c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1d2:	6013      	str	r3, [r2, #0]
  /* Get tick */
  tickstart = HAL_GetTick();

 800a1d4:	f7fb f882 	bl	80052dc <HAL_GetTick>
 800a1d8:	6078      	str	r0, [r7, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
  {
 800a1da:	e009      	b.n	800a1f0 <HAL_PWREx_EnableOverDrive+0x80>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
 800a1dc:	f7fb f87e 	bl	80052dc <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1ea:	d901      	bls.n	800a1f0 <HAL_PWREx_EnableOverDrive+0x80>
      return HAL_TIMEOUT;
    }
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e007      	b.n	800a200 <HAL_PWREx_EnableOverDrive+0x90>
  {
 800a1f0:	4b06      	ldr	r3, [pc, #24]	; (800a20c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1fc:	d1ee      	bne.n	800a1dc <HAL_PWREx_EnableOverDrive+0x6c>
  } 
  return HAL_OK;
}
 800a1fe:	2300      	movs	r3, #0

 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	40023800 	.word	0x40023800
 800a20c:	40007000 	.word	0x40007000

0800a210 <HAL_QSPI_Init>:
  * @brief Initialize the QSPI mode according to the specified parameters
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af02      	add	r7, sp, #8
 800a216:	6078      	str	r0, [r7, #4]
{
  HAL_StatusTypeDef status;
 800a218:	f7fb f860 	bl	80052dc <HAL_GetTick>
 800a21c:	60f8      	str	r0, [r7, #12]
  uint32_t tickstart = HAL_GetTick();

  /* Check the QSPI handle allocation */
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_QSPI_Init+0x18>
  if(hqspi == NULL)
  {
 800a224:	2301      	movs	r3, #1
 800a226:	e067      	b.n	800a2f8 <HAL_QSPI_Init+0xe8>

  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10b      	bne.n	800a24c <HAL_QSPI_Init+0x3c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7f8 fa77 	bl	8002730 <HAL_QSPI_MspInit>
    HAL_QSPI_MspInit(hqspi);
#endif

    /* Configure the default timeout for the QSPI memory access */
 800a242:	f241 3188 	movw	r1, #5000	; 0x1388
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fda8 	bl	800ad9c <HAL_QSPI_SetTimeout>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
  }

  /* Configure QSPI FIFO Threshold */
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	021a      	lsls	r2, r3, #8
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	2120      	movs	r1, #32
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fdd3 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	72fb      	strb	r3, [r7, #11]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);

 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d135      	bne.n	800a2ee <HAL_QSPI_Init+0xde>
  if(status == HAL_OK)
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	4b1d      	ldr	r3, [pc, #116]	; (800a300 <HAL_QSPI_Init+0xf0>)
 800a28a:	4013      	ands	r3, r2
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	6852      	ldr	r2, [r2, #4]
 800a290:	0611      	lsls	r1, r2, #24
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	68d2      	ldr	r2, [r2, #12]
 800a296:	4311      	orrs	r1, r2
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	69d2      	ldr	r2, [r2, #28]
 800a29c:	4311      	orrs	r1, r2
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	6a12      	ldr	r2, [r2, #32]
 800a2a2:	4311      	orrs	r1, r2
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	6812      	ldr	r2, [r2, #0]
 800a2a8:	430b      	orrs	r3, r1
 800a2aa:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	4b14      	ldr	r3, [pc, #80]	; (800a304 <HAL_QSPI_Init+0xf4>)
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	6912      	ldr	r2, [r2, #16]
 800a2ba:	0411      	lsls	r1, r2, #16
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6952      	ldr	r2, [r2, #20]
 800a2c0:	4311      	orrs	r1, r2
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	6992      	ldr	r2, [r2, #24]
 800a2c6:	4311      	orrs	r1, r2
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6812      	ldr	r2, [r2, #0]
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	6053      	str	r3, [r2, #4]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0201 	orr.w	r2, r2, #1
 800a2de:	601a      	str	r2, [r3, #0]
    __HAL_QSPI_ENABLE(hqspi);

    /* Set QSPI error code to none */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	645a      	str	r2, [r3, #68]	; 0x44
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;

    /* Initialize the QSPI state */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hqspi->State = HAL_QSPI_STATE_READY;
  }

  /* Release Lock */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hqspi);

  /* Return function status */
 800a2f6:	7afb      	ldrb	r3, [r7, #11]
  return status;
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	00ffff2f 	.word	0x00ffff2f
 800a304:	ffe0f8fe 	.word	0xffe0f8fe

0800a308 <HAL_QSPI_IRQHandler>:
/**
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
{
  __IO uint32_t *data_reg;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	617b      	str	r3, [r7, #20]
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	613b      	str	r3, [r7, #16]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	d064      	beq.n	800a3f4 <HAL_QSPI_IRQHandler+0xec>
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d05f      	beq.n	800a3f4 <HAL_QSPI_IRQHandler+0xec>
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
  {
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3320      	adds	r3, #32
 800a33a:	60fb      	str	r3, [r7, #12]
    data_reg = &hqspi->Instance->DR;

 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b12      	cmp	r3, #18
 800a346:	d125      	bne.n	800a394 <HAL_QSPI_IRQHandler+0x8c>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
    {
      /* Transmission process */
 800a348:	e01c      	b.n	800a384 <HAL_QSPI_IRQHandler+0x7c>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
      {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00f      	beq.n	800a372 <HAL_QSPI_IRQHandler+0x6a>
        if (hqspi->TxXferCount > 0U)
        {
          /* Fill the FIFO until the threshold is reached */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	781a      	ldrb	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	701a      	strb	r2, [r3, #0]
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->pTxBuffPtr++;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36a:	1e5a      	subs	r2, r3, #1
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	62da      	str	r2, [r3, #44]	; 0x2c
 800a370:	e008      	b.n	800a384 <HAL_QSPI_IRQHandler+0x7c>
          hqspi->TxXferCount--;
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a380:	601a      	str	r2, [r3, #0]
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a382:	e033      	b.n	800a3ec <HAL_QSPI_IRQHandler+0xe4>
      /* Transmission process */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f003 0304 	and.w	r3, r3, #4
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1db      	bne.n	800a34a <HAL_QSPI_IRQHandler+0x42>
 800a392:	e02b      	b.n	800a3ec <HAL_QSPI_IRQHandler+0xe4>
          break;
        }
      }
    }
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b22      	cmp	r3, #34	; 0x22
 800a39e:	d125      	bne.n	800a3ec <HAL_QSPI_IRQHandler+0xe4>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
    {
      /* Receiving Process */
 800a3a0:	e01d      	b.n	800a3de <HAL_QSPI_IRQHandler+0xd6>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
      {
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d010      	beq.n	800a3cc <HAL_QSPI_IRQHandler+0xc4>
        if (hqspi->RxXferCount > 0U)
        {
          /* Read the FIFO until the threshold is reached */
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	7812      	ldrb	r2, [r2, #0]
 800a3b2:	b2d2      	uxtb	r2, r2
 800a3b4:	701a      	strb	r2, [r3, #0]
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->pRxBuffPtr++;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c4:	1e5a      	subs	r2, r3, #1
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	639a      	str	r2, [r3, #56]	; 0x38
 800a3ca:	e008      	b.n	800a3de <HAL_QSPI_IRQHandler+0xd6>
          hqspi->RxXferCount--;
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a3da:	601a      	str	r2, [r3, #0]
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800a3dc:	e006      	b.n	800a3ec <HAL_QSPI_IRQHandler+0xe4>
      /* Receiving Process */
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1da      	bne.n	800a3a2 <HAL_QSPI_IRQHandler+0x9a>
    }

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fbed 	bl	800abcc <HAL_QSPI_FifoThresholdCallback>
 800a3f2:	e142      	b.n	800a67a <HAL_QSPI_IRQHandler+0x372>
    HAL_QSPI_FifoThresholdCallback(hqspi);
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 80b6 	beq.w	800a56c <HAL_QSPI_IRQHandler+0x264>
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 80b0 	beq.w	800a56c <HAL_QSPI_IRQHandler+0x264>
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
  {
    /* Clear interrupt */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2202      	movs	r2, #2
 800a412:	60da      	str	r2, [r3, #12]
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a422:	601a      	str	r2, [r3, #0]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);

    /* Transfer complete callback */
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b12      	cmp	r3, #18
 800a42e:	d123      	bne.n	800a478 <HAL_QSPI_IRQHandler+0x170>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
    {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d011      	beq.n	800a462 <HAL_QSPI_IRQHandler+0x15a>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0204 	bic.w	r2, r2, #4
 800a44c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);

        /* Disable the DMA channel */
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f022 0201 	bic.w	r2, r2, #1
 800a460:	601a      	str	r2, [r3, #0]
        __HAL_DMA_DISABLE(hqspi->hdma);
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fc3e 	bl	800ace4 <HAL_QSPI_Abort_IT>
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hqspi->State = HAL_QSPI_STATE_READY;

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fba1 	bl	800abb8 <HAL_QSPI_TxCpltCallback>
    /* Transfer complete callback */
 800a476:	e0fd      	b.n	800a674 <HAL_QSPI_IRQHandler+0x36c>
      HAL_QSPI_TxCpltCallback(hqspi);
#endif
    }
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b22      	cmp	r3, #34	; 0x22
 800a482:	d146      	bne.n	800a512 <HAL_QSPI_IRQHandler+0x20a>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
    {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0304 	and.w	r3, r3, #4
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d012      	beq.n	800a4b8 <HAL_QSPI_IRQHandler+0x1b0>
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0204 	bic.w	r2, r2, #4
 800a4a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);

        /* Disable the DMA channel */
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0201 	bic.w	r2, r2, #1
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	e021      	b.n	800a4fc <HAL_QSPI_IRQHandler+0x1f4>
        __HAL_DMA_DISABLE(hqspi->hdma);
      }
      else
      {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3320      	adds	r3, #32
 800a4be:	60fb      	str	r3, [r7, #12]
        data_reg = &hqspi->Instance->DR;
 800a4c0:	e013      	b.n	800a4ea <HAL_QSPI_IRQHandler+0x1e2>
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
        {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d017      	beq.n	800a4fa <HAL_QSPI_IRQHandler+0x1f2>
          if (hqspi->RxXferCount > 0U)
          {
            /* Read the last data received in the FIFO until it is empty */
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	7812      	ldrb	r2, [r2, #0]
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->pRxBuffPtr++;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	1e5a      	subs	r2, r3, #1
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	639a      	str	r2, [r3, #56]	; 0x38
        data_reg = &hqspi->Instance->DR;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e4      	bne.n	800a4c2 <HAL_QSPI_IRQHandler+0x1ba>
 800a4f8:	e000      	b.n	800a4fc <HAL_QSPI_IRQHandler+0x1f4>
            hqspi->RxXferCount--;
          }
          else
          {
            /* All data have been received for the transfer */
 800a4fa:	bf00      	nop
          }
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fbf1 	bl	800ace4 <HAL_QSPI_Abort_IT>
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hqspi->State = HAL_QSPI_STATE_READY;

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fb4a 	bl	800aba4 <HAL_QSPI_RxCpltCallback>
    /* Transfer complete callback */
 800a510:	e0b0      	b.n	800a674 <HAL_QSPI_IRQHandler+0x36c>
      HAL_QSPI_RxCpltCallback(hqspi);
#endif
    }
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d107      	bne.n	800a52e <HAL_QSPI_IRQHandler+0x226>
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
    {
      /* Change state of QSPI */
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hqspi->State = HAL_QSPI_STATE_READY;

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fb32 	bl	800ab90 <HAL_QSPI_CmdCpltCallback>
    /* Transfer complete callback */
 800a52c:	e0a2      	b.n	800a674 <HAL_QSPI_IRQHandler+0x36c>
      HAL_QSPI_CmdCpltCallback(hqspi);
#endif
    }
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b08      	cmp	r3, #8
 800a538:	f040 809c 	bne.w	800a674 <HAL_QSPI_IRQHandler+0x36c>
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
    {
      /* Reset functional mode configuration to indirect write mode by default */
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695a      	ldr	r2, [r3, #20]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a54a:	615a      	str	r2, [r3, #20]
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);

      /* Change state of QSPI */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hqspi->State = HAL_QSPI_STATE_READY;

 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d103      	bne.n	800a564 <HAL_QSPI_IRQHandler+0x25c>
        /* Abort called by the user */

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fb0d 	bl	800ab7c <HAL_QSPI_AbortCpltCallback>
    /* Transfer complete callback */
 800a562:	e087      	b.n	800a674 <HAL_QSPI_IRQHandler+0x36c>
        /* Abort due to an error (eg :  DMA error) */

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 faff 	bl	800ab68 <HAL_QSPI_ErrorCallback>
    /* Transfer complete callback */
 800a56a:	e083      	b.n	800a674 <HAL_QSPI_IRQHandler+0x36c>
    {
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f003 0308 	and.w	r3, r3, #8
 800a572:	2b00      	cmp	r3, #0
 800a574:	d01f      	beq.n	800a5b6 <HAL_QSPI_IRQHandler+0x2ae>
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d01a      	beq.n	800a5b6 <HAL_QSPI_IRQHandler+0x2ae>
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
  {
    /* Clear interrupt */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2208      	movs	r2, #8
 800a586:	60da      	str	r2, [r3, #12]
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);

    /* Check if the automatic poll mode stop is activated */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <HAL_QSPI_IRQHandler+0x2a6>
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800a5a4:	601a      	str	r2, [r3, #0]
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));

      /* Change state of QSPI */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fb16 	bl	800abe0 <HAL_QSPI_StatusMatchCallback>
 800a5b4:	e061      	b.n	800a67a <HAL_QSPI_IRQHandler+0x372>
    HAL_QSPI_StatusMatchCallback(hqspi);
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d047      	beq.n	800a650 <HAL_QSPI_IRQHandler+0x348>
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d042      	beq.n	800a650 <HAL_QSPI_IRQHandler+0x348>
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
  {
    /* Clear interrupt */
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);

    /* Disable all the QSPI Interrupts */
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800a5e0:	601a      	str	r2, [r3, #0]
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);

    /* Set error code */
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e6:	f043 0202 	orr.w	r2, r3, #2
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	645a      	str	r2, [r3, #68]	; 0x44
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;

 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d021      	beq.n	800a640 <HAL_QSPI_IRQHandler+0x338>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f022 0204 	bic.w	r2, r2, #4
 800a60a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);

      /* Disable the DMA channel */
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a610:	4a1c      	ldr	r2, [pc, #112]	; (800a684 <HAL_QSPI_IRQHandler+0x37c>)
 800a612:	651a      	str	r2, [r3, #80]	; 0x50
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fb fe59 	bl	80062d0 <HAL_DMA_Abort_IT>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d029      	beq.n	800a678 <HAL_QSPI_IRQHandler+0x370>
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
      {
        /* Set error code to DMA */
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a628:	f043 0204 	orr.w	r2, r3, #4
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	645a      	str	r2, [r3, #68]	; 0x44
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;

        /* Change state of QSPI */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->State = HAL_QSPI_STATE_READY;

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fa95 	bl	800ab68 <HAL_QSPI_ErrorCallback>

 800a63e:	e01b      	b.n	800a678 <HAL_QSPI_IRQHandler+0x370>
#endif
      }
    }
    else
    {
      /* Change state of QSPI */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hqspi->State = HAL_QSPI_STATE_READY;

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fa8d 	bl	800ab68 <HAL_QSPI_ErrorCallback>

 800a64e:	e013      	b.n	800a678 <HAL_QSPI_IRQHandler+0x370>
      HAL_QSPI_ErrorCallback(hqspi);
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f003 0310 	and.w	r3, r3, #16
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00f      	beq.n	800a67a <HAL_QSPI_IRQHandler+0x372>
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <HAL_QSPI_IRQHandler+0x372>
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
  {
    /* Clear interrupt */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2210      	movs	r2, #16
 800a66a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fac1 	bl	800abf4 <HAL_QSPI_TimeOutCallback>
  }

   else
  {
   /* Nothing to do */
  }
 800a672:	e002      	b.n	800a67a <HAL_QSPI_IRQHandler+0x372>
    /* Transfer complete callback */
 800a674:	bf00      	nop
 800a676:	e000      	b.n	800a67a <HAL_QSPI_IRQHandler+0x372>

 800a678:	bf00      	nop
  }
 800a67a:	bf00      	nop
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	0800adb9 	.word	0x0800adb9

0800a688 <HAL_QSPI_Command>:
  * @param cmd : structure that contains the command configuration information
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af02      	add	r7, sp, #8
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
{
  HAL_StatusTypeDef status;
 800a694:	f7fa fe22 	bl	80052dc <HAL_GetTick>
 800a698:	6138      	str	r0, [r7, #16]

  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d101      	bne.n	800a6aa <HAL_QSPI_Command+0x22>
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e048      	b.n	800a73c <HAL_QSPI_Command+0xb4>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  __HAL_LOCK(hqspi);

 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d137      	bne.n	800a72e <HAL_QSPI_Command+0xa6>
  if(hqspi->State == HAL_QSPI_STATE_READY)
  {
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	645a      	str	r2, [r3, #68]	; 0x44
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;

    /* Update QSPI state */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hqspi->State = HAL_QSPI_STATE_BUSY;

    /* Wait till BUSY flag reset */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2120      	movs	r1, #32
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 fba1 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	75fb      	strb	r3, [r7, #23]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);

 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d125      	bne.n	800a732 <HAL_QSPI_Command+0xaa>
    if (status == HAL_OK)
    {
      /* Call the configuration function */
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 fbce 	bl	800ae8c <QSPI_Config>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);

 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d115      	bne.n	800a724 <HAL_QSPI_Command+0x9c>
      if (cmd->DataMode == QSPI_DATA_NONE)
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	2201      	movs	r2, #1
 800a700:	2102      	movs	r1, #2
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 fb8b 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	75fb      	strb	r3, [r7, #23]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);

 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10f      	bne.n	800a732 <HAL_QSPI_Command+0xaa>
        if (status == HAL_OK)
        {
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2202      	movs	r2, #2
 800a718:	60da      	str	r2, [r3, #12]
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);

          /* Update QSPI state */
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a722:	e006      	b.n	800a732 <HAL_QSPI_Command+0xaa>
          hqspi->State = HAL_QSPI_STATE_READY;
        }
      }
      else
      {
        /* Update QSPI state */
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a72c:	e001      	b.n	800a732 <HAL_QSPI_Command+0xaa>
        hqspi->State = HAL_QSPI_STATE_READY;
      }
    }
  }
  else
  {
 800a72e:	2302      	movs	r3, #2
 800a730:	75fb      	strb	r3, [r7, #23]
    status = HAL_BUSY;
  }

  /* Process unlocked */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hqspi);

  /* Return function status */
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
  return status;
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08a      	sub	sp, #40	; 0x28
 800a748:	af02      	add	r7, sp, #8
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a754:	f7fa fdc2 	bl	80052dc <HAL_GetTick>
 800a758:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3320      	adds	r3, #32
 800a760:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d101      	bne.n	800a772 <HAL_QSPI_Transmit+0x2e>
 800a76e:	2302      	movs	r3, #2
 800a770:	e07b      	b.n	800a86a <HAL_QSPI_Transmit+0x126>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b01      	cmp	r3, #1
 800a784:	d16a      	bne.n	800a85c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d05b      	beq.n	800a84a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2212      	movs	r2, #18
 800a796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	695a      	ldr	r2, [r3, #20]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a7c6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800a7c8:	e01b      	b.n	800a802 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	2104      	movs	r1, #4
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f000 fb22 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a7de:	7ffb      	ldrb	r3, [r7, #31]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d113      	bne.n	800a80c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	781a      	ldrb	r2, [r3, #0]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fc:	1e5a      	subs	r2, r3, #1
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1df      	bne.n	800a7ca <HAL_QSPI_Transmit+0x86>
 800a80a:	e000      	b.n	800a80e <HAL_QSPI_Transmit+0xca>
          break;
 800a80c:	bf00      	nop
      }

      if (status == HAL_OK)
 800a80e:	7ffb      	ldrb	r3, [r7, #31]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d115      	bne.n	800a840 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2201      	movs	r2, #1
 800a81c:	2102      	movs	r1, #2
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 fafd 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800a824:	4603      	mov	r3, r0
 800a826:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a828:	7ffb      	ldrb	r3, [r7, #31]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d108      	bne.n	800a840 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2202      	movs	r2, #2
 800a834:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f000 f9e6 	bl	800ac08 <HAL_QSPI_Abort>
 800a83c:	4603      	mov	r3, r0
 800a83e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a848:	e00a      	b.n	800a860 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84e:	f043 0208 	orr.w	r2, r3, #8
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	77fb      	strb	r3, [r7, #31]
 800a85a:	e001      	b.n	800a860 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a85c:	2302      	movs	r3, #2
 800a85e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800a868:	7ffb      	ldrb	r3, [r7, #31]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3720      	adds	r7, #32
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b08a      	sub	sp, #40	; 0x28
 800a876:	af02      	add	r7, sp, #8
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a882:	f7fa fd2b 	bl	80052dc <HAL_GetTick>
 800a886:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3320      	adds	r3, #32
 800a896:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d101      	bne.n	800a8a8 <HAL_QSPI_Receive+0x36>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e082      	b.n	800a9ae <HAL_QSPI_Receive+0x13c>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d171      	bne.n	800a9a0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d062      	beq.n	800a98e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2222      	movs	r2, #34	; 0x22
 800a8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a900:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800a90a:	e01c      	b.n	800a946 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	2201      	movs	r2, #1
 800a914:	2106      	movs	r1, #6
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 fa81 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800a91c:	4603      	mov	r3, r0
 800a91e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800a920:	7ffb      	ldrb	r3, [r7, #31]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d114      	bne.n	800a950 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	693a      	ldr	r2, [r7, #16]
 800a92c:	7812      	ldrb	r2, [r2, #0]
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a940:	1e5a      	subs	r2, r3, #1
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1de      	bne.n	800a90c <HAL_QSPI_Receive+0x9a>
 800a94e:	e000      	b.n	800a952 <HAL_QSPI_Receive+0xe0>
          break;
 800a950:	bf00      	nop
      }

      if (status == HAL_OK)
 800a952:	7ffb      	ldrb	r3, [r7, #31]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d115      	bne.n	800a984 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	2201      	movs	r2, #1
 800a960:	2102      	movs	r1, #2
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f000 fa5b 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800a968:	4603      	mov	r3, r0
 800a96a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800a96c:	7ffb      	ldrb	r3, [r7, #31]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d108      	bne.n	800a984 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2202      	movs	r2, #2
 800a978:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 f944 	bl	800ac08 <HAL_QSPI_Abort>
 800a980:	4603      	mov	r3, r0
 800a982:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a98c:	e00a      	b.n	800a9a4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a992:	f043 0208 	orr.w	r2, r3, #8
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	77fb      	strb	r3, [r7, #31]
 800a99e:	e001      	b.n	800a9a4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800a9ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3720      	adds	r7, #32
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b088      	sub	sp, #32
 800a9ba:	af02      	add	r7, sp, #8
 800a9bc:	60f8      	str	r0, [r7, #12]
 800a9be:	60b9      	str	r1, [r7, #8]
 800a9c0:	607a      	str	r2, [r7, #4]
 800a9c2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a9c4:	f7fa fc8a 	bl	80052dc <HAL_GetTick>
 800a9c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d101      	bne.n	800a9da <HAL_QSPI_AutoPolling+0x24>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	e060      	b.n	800aa9c <HAL_QSPI_AutoPolling+0xe6>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d14f      	bne.n	800aa8e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2242      	movs	r2, #66	; 0x42
 800a9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2200      	movs	r2, #0
 800aa04:	2120      	movs	r1, #32
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f000 fa09 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d13d      	bne.n	800aa92 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	6812      	ldr	r2, [r2, #0]
 800aa1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6852      	ldr	r2, [r2, #4]
 800aa28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6892      	ldr	r2, [r2, #8]
 800aa32:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800aa4c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800aa56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 fa15 	bl	800ae8c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	2108      	movs	r1, #8
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 f9d6 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800aa72:	4603      	mov	r3, r0
 800aa74:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2208      	movs	r2, #8
 800aa82:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa8c:	e001      	b.n	800aa92 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800aa8e:	2302      	movs	r3, #2
 800aa90:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <HAL_QSPI_MemoryMapped>:
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
  HAL_StatusTypeDef status;
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = HAL_GetTick();

 800aab0:	f7fa fc14 	bl	80052dc <HAL_GetTick>
 800aab4:	6138      	str	r0, [r7, #16]

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);

 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d101      	bne.n	800aac6 <HAL_QSPI_MemoryMapped+0x22>
 800aac2:	2302      	movs	r3, #2
 800aac4:	e04c      	b.n	800ab60 <HAL_QSPI_MemoryMapped+0xbc>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
  {
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d13b      	bne.n	800ab52 <HAL_QSPI_MemoryMapped+0xae>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;

 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;

 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2282      	movs	r2, #130	; 0x82
 800aae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);

 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2120      	movs	r1, #32
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 f992 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800aafa:	4603      	mov	r3, r0
 800aafc:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)
    {
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d128      	bne.n	800ab56 <HAL_QSPI_MemoryMapped+0xb2>
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);

 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f023 0108 	bic.w	r1, r3, #8
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	601a      	str	r2, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
      {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	2b08      	cmp	r3, #8
 800ab20:	d110      	bne.n	800ab44 <HAL_QSPI_MemoryMapped+0xa0>
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);

 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	6812      	ldr	r2, [r2, #0]
 800ab2a:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);

 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2210      	movs	r2, #16
 800ab32:	60da      	str	r2, [r3, #12]
        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
      }
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ab42:	601a      	str	r2, [r3, #0]

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
    }
 800ab44:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f000 f99e 	bl	800ae8c <QSPI_Config>
 800ab50:	e001      	b.n	800ab56 <HAL_QSPI_MemoryMapped+0xb2>
  }
  else
  {
    status = HAL_BUSY;
  }
 800ab52:	2302      	movs	r3, #2
 800ab54:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);

 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Return function status */
  return status;
}
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]

 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <HAL_QSPI_ErrorCallback>:
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
  /* Prevent unused argument(s) compilation warning */
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}

 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_QSPI_AbortCpltCallback>:
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
  /* Prevent unused argument(s) compilation warning */
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}

 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_QSPI_CmdCpltCallback>:
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
  /* Prevent unused argument(s) compilation warning */
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}

 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_QSPI_RxCpltCallback>:
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
  /* Prevent unused argument(s) compilation warning */
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}

 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_QSPI_TxCpltCallback>:
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
  /* Prevent unused argument(s) compilation warning */
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}

 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_QSPI_FifoThresholdCallback>:
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
  /* Prevent unused argument(s) compilation warning */
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}

 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_QSPI_StatusMatchCallback>:
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
  /* Prevent unused argument(s) compilation warning */
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}

 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <HAL_QSPI_TimeOutCallback>:
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
  /* Prevent unused argument(s) compilation warning */
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_QSPI_Abort>:
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
  HAL_StatusTypeDef status = HAL_OK;
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]

 800ac14:	f7fa fb62 	bl	80052dc <HAL_GetTick>
 800ac18:	60b8      	str	r0, [r7, #8]
  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
  {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d056      	beq.n	800acd8 <HAL_QSPI_Abort+0xd0>
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);

 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
    {
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 0304 	and.w	r3, r3, #4
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d017      	beq.n	800ac70 <HAL_QSPI_Abort+0x68>
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);

 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0204 	bic.w	r2, r2, #4
 800ac4e:	601a      	str	r2, [r3, #0]
      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
      if(status != HAL_OK)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fb facb 	bl	80061f0 <HAL_DMA_Abort>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73fb      	strb	r3, [r7, #15]
      {
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <HAL_QSPI_Abort+0x68>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
      }
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac68:	f043 0204 	orr.w	r2, r3, #4
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);

 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0202 	orr.w	r2, r2, #2
 800ac7e:	601a      	str	r2, [r3, #0]
    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);

 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	2102      	movs	r1, #2
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f8c6 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
    {
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10e      	bne.n	800acba <HAL_QSPI_Abort+0xb2>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);

 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2202      	movs	r2, #2
 800aca2:	60da      	str	r2, [r3, #12]
      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
    }
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2200      	movs	r2, #0
 800acae:	2120      	movs	r1, #32
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f8b4 	bl	800ae1e <QSPI_WaitFlagStateUntilTimeout>
 800acb6:	4603      	mov	r3, r0
 800acb8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
    {
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10b      	bne.n	800acd8 <HAL_QSPI_Abort+0xd0>
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);

 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	695a      	ldr	r2, [r3, #20]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800acce:	615a      	str	r2, [r3, #20]
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
    }
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  return status;
}
 800acd8:	7bfb      	ldrb	r3, [r7, #15]

 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <HAL_QSPI_Abort_IT>:
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
  HAL_StatusTypeDef status = HAL_OK;
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]

 800acec:	2300      	movs	r3, #0
 800acee:	73fb      	strb	r3, [r7, #15]
  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
  {
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	f003 0302 	and.w	r3, r3, #2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d046      	beq.n	800ad8e <HAL_QSPI_Abort_IT+0xaa>
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);

 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;

 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2208      	movs	r2, #8
 800ad0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));

 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800ad1e:	601a      	str	r2, [r3, #0]
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
    {
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0304 	and.w	r3, r3, #4
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d01b      	beq.n	800ad66 <HAL_QSPI_Abort_IT+0x82>
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);

 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 0204 	bic.w	r2, r2, #4
 800ad3c:	601a      	str	r2, [r3, #0]
      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad42:	4a15      	ldr	r2, [pc, #84]	; (800ad98 <HAL_QSPI_Abort_IT+0xb4>)
 800ad44:	651a      	str	r2, [r3, #80]	; 0x50
      {
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fb fac0 	bl	80062d0 <HAL_DMA_Abort_IT>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d01b      	beq.n	800ad8e <HAL_QSPI_Abort_IT+0xaa>
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;

 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
#endif
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff ff0c 	bl	800ab7c <HAL_QSPI_AbortCpltCallback>
 800ad64:	e013      	b.n	800ad8e <HAL_QSPI_Abort_IT+0xaa>
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);

 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	60da      	str	r2, [r3, #12]
      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);

 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ad7c:	601a      	str	r2, [r3, #0]
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
    }
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f042 0202 	orr.w	r2, r2, #2
 800ad8c:	601a      	str	r2, [r3, #0]
  }
  return status;
}
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]

 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	0800adb9 	.word	0x0800adb9

0800ad9c <HAL_QSPI_SetTimeout>:
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
  hqspi->Timeout = Timeout;
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
}
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	649a      	str	r2, [r3, #72]	; 0x48

 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <QSPI_DMAAbortCplt>:
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]

 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
  hqspi->TxXferCount = 0U;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	639a      	str	r2, [r3, #56]	; 0x38

 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	62da      	str	r2, [r3, #44]	; 0x2c
  if(hqspi->State == HAL_QSPI_STATE_ABORT)
  {
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b08      	cmp	r3, #8
 800addc:	d114      	bne.n	800ae08 <QSPI_DMAAbortCplt+0x50>
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);

 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2202      	movs	r2, #2
 800ade4:	60da      	str	r2, [r3, #12]
    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);

 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800adf4:	601a      	str	r2, [r3, #0]
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
  }
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f042 0202 	orr.w	r2, r2, #2
 800ae04:	601a      	str	r2, [r3, #0]
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}

 800ae06:	e006      	b.n	800ae16 <QSPI_DMAAbortCplt+0x5e>

 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#endif
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f7ff fea9 	bl	800ab68 <HAL_QSPI_ErrorCallback>

 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <QSPI_WaitFlagStateUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is in expected state */
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	603b      	str	r3, [r7, #0]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	71fb      	strb	r3, [r7, #7]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
  {
 800ae2e:	e01a      	b.n	800ae66 <QSPI_WaitFlagStateUntilTimeout+0x48>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae36:	d016      	beq.n	800ae66 <QSPI_WaitFlagStateUntilTimeout+0x48>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
 800ae38:	f7fa fa50 	bl	80052dc <HAL_GetTick>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d302      	bcc.n	800ae4e <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10b      	bne.n	800ae66 <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2204      	movs	r2, #4
 800ae52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5a:	f043 0201 	orr.w	r2, r3, #1
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	645a      	str	r2, [r3, #68]	; 0x44
        return HAL_ERROR;
      }
 800ae62:	2301      	movs	r3, #1
 800ae64:	e00e      	b.n	800ae84 <QSPI_WaitFlagStateUntilTimeout+0x66>
  {
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	4013      	ands	r3, r2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bf14      	ite	ne
 800ae74:	2301      	movne	r3, #1
 800ae76:	2300      	moveq	r3, #0
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d1d6      	bne.n	800ae30 <QSPI_WaitFlagStateUntilTimeout+0x12>
    }
  }
  return HAL_OK;
}
 800ae82:	2300      	movs	r3, #0

 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <QSPI_Config>:
{ 
  __IO uint32_t count = Timeout * (SystemCoreClock / 16U / 1000U);
   do
   {
     if (count-- == 0U)
     {
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
       hqspi->State     = HAL_QSPI_STATE_ERROR;
       hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
       return HAL_TIMEOUT;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <QSPI_Config+0x28>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aea6:	d005      	beq.n	800aeb4 <QSPI_Config+0x28>
     }
   }
   while ((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3a01      	subs	r2, #1
 800aeb2:	611a      	str	r2, [r3, #16]
   
   return HAL_OK;   
}
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f000 80b9 	beq.w	800b030 <QSPI_Config+0x1a4>

/**
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d05f      	beq.n	800af86 <QSPI_Config+0xfa>
  * @brief  Configure the communication registers.
  * @param  hqspi : QSPI handle
  * @param  cmd : structure that contains the command configuration information
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	6892      	ldr	r2, [r2, #8]
 800aece:	61da      	str	r2, [r3, #28]
  * @param  FunctionalMode : functional mode to configured
  *           This parameter can be one of the following values:
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	69db      	ldr	r3, [r3, #28]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d031      	beq.n	800af3c <QSPI_Config+0xb0>
  *            @arg QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE: Indirect write mode
  *            @arg QSPI_FUNCTIONAL_MODE_INDIRECT_READ: Indirect read mode
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee0:	431a      	orrs	r2, r3
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee6:	431a      	orrs	r2, r3
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeec:	431a      	orrs	r2, r3
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	049b      	lsls	r3, r3, #18
 800aef4:	431a      	orrs	r2, r3
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	431a      	orrs	r2, r3
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	431a      	orrs	r2, r3
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	431a      	orrs	r2, r3
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	431a      	orrs	r2, r3
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	431a      	orrs	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	ea42 0103 	orr.w	r1, r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	430a      	orrs	r2, r1
 800af24:	615a      	str	r2, [r3, #20]
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800af2c:	f000 812e 	beq.w	800b18c <QSPI_Config+0x300>
  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68ba      	ldr	r2, [r7, #8]
 800af36:	6852      	ldr	r2, [r2, #4]
 800af38:	619a      	str	r2, [r3, #24]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with only address ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800af3a:	e127      	b.n	800b18c <QSPI_Config+0x300>
    {
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af44:	431a      	orrs	r2, r3
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4a:	431a      	orrs	r2, r3
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af50:	431a      	orrs	r2, r3
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	049b      	lsls	r3, r3, #18
 800af58:	431a      	orrs	r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	431a      	orrs	r2, r3
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6a1b      	ldr	r3, [r3, #32]
 800af64:	431a      	orrs	r2, r3
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	431a      	orrs	r2, r3
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	431a      	orrs	r2, r3
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	ea42 0103 	orr.w	r1, r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	430a      	orrs	r2, r1
 800af82:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800af84:	e102      	b.n	800b18c <QSPI_Config+0x300>
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d02e      	beq.n	800afec <QSPI_Config+0x160>

 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af96:	431a      	orrs	r2, r3
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9c:	431a      	orrs	r2, r3
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	431a      	orrs	r2, r3
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	695b      	ldr	r3, [r3, #20]
 800afa8:	049b      	lsls	r3, r3, #18
 800afaa:	431a      	orrs	r2, r3
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	431a      	orrs	r2, r3
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	431a      	orrs	r2, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	431a      	orrs	r2, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	431a      	orrs	r2, r3
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	ea42 0103 	orr.w	r1, r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	615a      	str	r2, [r3, #20]
        }
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800afdc:	f000 80d6 	beq.w	800b18c <QSPI_Config+0x300>
      {
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	6852      	ldr	r2, [r2, #4]
 800afe8:	619a      	str	r2, [r3, #24]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800afea:	e0cf      	b.n	800b18c <QSPI_Config+0x300>
                                         cmd->Instruction | FunctionalMode));
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff4:	431a      	orrs	r2, r3
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affa:	431a      	orrs	r2, r3
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	431a      	orrs	r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	049b      	lsls	r3, r3, #18
 800b008:	431a      	orrs	r2, r3
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	431a      	orrs	r2, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	431a      	orrs	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	431a      	orrs	r2, r3
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	ea42 0103 	orr.w	r1, r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	430a      	orrs	r2, r1
 800b02c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800b02e:	e0ad      	b.n	800b18c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	6a1b      	ldr	r3, [r3, #32]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d058      	beq.n	800b0ea <QSPI_Config+0x25e>
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	6892      	ldr	r2, [r2, #8]
 800b040:	61da      	str	r2, [r3, #28]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d02d      	beq.n	800b0a6 <QSPI_Config+0x21a>
        }
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b052:	431a      	orrs	r2, r3
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b058:	431a      	orrs	r2, r3
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05e:	431a      	orrs	r2, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	049b      	lsls	r3, r3, #18
 800b066:	431a      	orrs	r2, r3
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	431a      	orrs	r2, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	431a      	orrs	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	431a      	orrs	r2, r3
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	431a      	orrs	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	ea42 0103 	orr.w	r1, r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	430a      	orrs	r2, r1
 800b090:	615a      	str	r2, [r3, #20]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b098:	d078      	beq.n	800b18c <QSPI_Config+0x300>
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	6852      	ldr	r2, [r2, #4]
 800b0a2:	619a      	str	r2, [r3, #24]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800b0a4:	e072      	b.n	800b18c <QSPI_Config+0x300>
    {
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	049b      	lsls	r3, r3, #18
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	ea42 0103 	orr.w	r1, r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800b0e8:	e050      	b.n	800b18c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d02a      	beq.n	800b148 <QSPI_Config+0x2bc>
                                         cmd->InstructionMode | FunctionalMode));
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fa:	431a      	orrs	r2, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b100:	431a      	orrs	r2, r3
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	431a      	orrs	r2, r3
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	049b      	lsls	r3, r3, #18
 800b10e:	431a      	orrs	r2, r3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	431a      	orrs	r2, r3
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	431a      	orrs	r2, r3
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	69db      	ldr	r3, [r3, #28]
 800b120:	431a      	orrs	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	ea42 0103 	orr.w	r1, r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	430a      	orrs	r2, r1
 800b132:	615a      	str	r2, [r3, #20]
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b13a:	d027      	beq.n	800b18c <QSPI_Config+0x300>
      else
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	6852      	ldr	r2, [r2, #4]
 800b144:	619a      	str	r2, [r3, #24]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800b146:	e021      	b.n	800b18c <QSPI_Config+0x300>
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01d      	beq.n	800b18c <QSPI_Config+0x300>
    }
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b158:	431a      	orrs	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15e:	431a      	orrs	r2, r3
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	431a      	orrs	r2, r3
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	049b      	lsls	r3, r3, #18
 800b16c:	431a      	orrs	r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	431a      	orrs	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	431a      	orrs	r2, r3
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	ea42 0103 	orr.w	r1, r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	430a      	orrs	r2, r1
 800b18a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
 800b18c:	bf00      	nop
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <HAL_RCC_OscConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	75fb      	strb	r3, [r7, #23]
  if (RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <HAL_RCC_OscConfig+0x16>
  }

 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e291      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 8087 	beq.w	800b2ca <HAL_RCC_OscConfig+0x132>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
 800b1bc:	4b96      	ldr	r3, [pc, #600]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f003 030c 	and.w	r3, r3, #12
 800b1c4:	2b04      	cmp	r3, #4
 800b1c6:	d00c      	beq.n	800b1e2 <HAL_RCC_OscConfig+0x4a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1c8:	4b93      	ldr	r3, [pc, #588]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f003 030c 	and.w	r3, r3, #12
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d112      	bne.n	800b1fa <HAL_RCC_OscConfig+0x62>
 800b1d4:	4b90      	ldr	r3, [pc, #576]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1e0:	d10b      	bne.n	800b1fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800b1e2:	4b8d      	ldr	r3, [pc, #564]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d06c      	beq.n	800b2c8 <HAL_RCC_OscConfig+0x130>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d168      	bne.n	800b2c8 <HAL_RCC_OscConfig+0x130>
      }
    }
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e26b      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);

      /* Check the HSE State */
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b202:	d106      	bne.n	800b212 <HAL_RCC_OscConfig+0x7a>
 800b204:	4b84      	ldr	r3, [pc, #528]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a83      	ldr	r2, [pc, #524]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b20a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	e02e      	b.n	800b270 <HAL_RCC_OscConfig+0xd8>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10c      	bne.n	800b234 <HAL_RCC_OscConfig+0x9c>
 800b21a:	4b7f      	ldr	r3, [pc, #508]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a7e      	ldr	r2, [pc, #504]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	4b7c      	ldr	r3, [pc, #496]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a7b      	ldr	r2, [pc, #492]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b22c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b230:	6013      	str	r3, [r2, #0]
 800b232:	e01d      	b.n	800b270 <HAL_RCC_OscConfig+0xd8>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b23c:	d10c      	bne.n	800b258 <HAL_RCC_OscConfig+0xc0>
 800b23e:	4b76      	ldr	r3, [pc, #472]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a75      	ldr	r2, [pc, #468]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	4b73      	ldr	r3, [pc, #460]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a72      	ldr	r2, [pc, #456]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	e00b      	b.n	800b270 <HAL_RCC_OscConfig+0xd8>
 800b258:	4b6f      	ldr	r3, [pc, #444]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a6e      	ldr	r2, [pc, #440]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b25e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	4b6c      	ldr	r3, [pc, #432]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a6b      	ldr	r2, [pc, #428]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b26a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b26e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d013      	beq.n	800b2a0 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
 800b278:	f7fa f830 	bl	80052dc <HAL_GetTick>
 800b27c:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b27e:	e008      	b.n	800b292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b280:	f7fa f82c 	bl	80052dc <HAL_GetTick>
 800b284:	4602      	mov	r2, r0
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	2b64      	cmp	r3, #100	; 0x64
 800b28c:	d901      	bls.n	800b292 <HAL_RCC_OscConfig+0xfa>
          }
        }
 800b28e:	2303      	movs	r3, #3
 800b290:	e21f      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b292:	4b61      	ldr	r3, [pc, #388]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0f0      	beq.n	800b280 <HAL_RCC_OscConfig+0xe8>
 800b29e:	e014      	b.n	800b2ca <HAL_RCC_OscConfig+0x132>
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
 800b2a0:	f7fa f81c 	bl	80052dc <HAL_GetTick>
 800b2a4:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2a6:	e008      	b.n	800b2ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b2a8:	f7fa f818 	bl	80052dc <HAL_GetTick>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	2b64      	cmp	r3, #100	; 0x64
 800b2b4:	d901      	bls.n	800b2ba <HAL_RCC_OscConfig+0x122>
          }
        }
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e20b      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2ba:	4b57      	ldr	r3, [pc, #348]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1f0      	bne.n	800b2a8 <HAL_RCC_OscConfig+0x110>
 800b2c6:	e000      	b.n	800b2ca <HAL_RCC_OscConfig+0x132>
        return HAL_ERROR;
 800b2c8:	bf00      	nop
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d069      	beq.n	800b3aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
 800b2d6:	4b50      	ldr	r3, [pc, #320]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f003 030c 	and.w	r3, r3, #12
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00b      	beq.n	800b2fa <HAL_RCC_OscConfig+0x162>
      /* When HSI is used as system clock it will not disabled */
 800b2e2:	4b4d      	ldr	r3, [pc, #308]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	f003 030c 	and.w	r3, r3, #12
 800b2ea:	2b08      	cmp	r3, #8
 800b2ec:	d11c      	bne.n	800b328 <HAL_RCC_OscConfig+0x190>
 800b2ee:	4b4a      	ldr	r3, [pc, #296]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d116      	bne.n	800b328 <HAL_RCC_OscConfig+0x190>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 800b2fa:	4b47      	ldr	r3, [pc, #284]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <HAL_RCC_OscConfig+0x17a>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d001      	beq.n	800b312 <HAL_RCC_OscConfig+0x17a>
      }
      /* Otherwise, just the calibration is allowed */
 800b30e:	2301      	movs	r3, #1
 800b310:	e1df      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
    }
 800b312:	4b41      	ldr	r3, [pc, #260]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	493d      	ldr	r1, [pc, #244]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b322:	4313      	orrs	r3, r2
 800b324:	600b      	str	r3, [r1, #0]
        return HAL_ERROR;
 800b326:	e040      	b.n	800b3aa <HAL_RCC_OscConfig+0x212>
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d023      	beq.n	800b378 <HAL_RCC_OscConfig+0x1e0>
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
 800b330:	4b39      	ldr	r3, [pc, #228]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a38      	ldr	r2, [pc, #224]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b336:	f043 0301 	orr.w	r3, r3, #1
 800b33a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
 800b33c:	f7f9 ffce 	bl	80052dc <HAL_GetTick>
 800b340:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b342:	e008      	b.n	800b356 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b344:	f7f9 ffca 	bl	80052dc <HAL_GetTick>
 800b348:	4602      	mov	r2, r0
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d901      	bls.n	800b356 <HAL_RCC_OscConfig+0x1be>
          }
        }
 800b352:	2303      	movs	r3, #3
 800b354:	e1bd      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b356:	4b30      	ldr	r3, [pc, #192]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 0302 	and.w	r3, r3, #2
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0f0      	beq.n	800b344 <HAL_RCC_OscConfig+0x1ac>

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
 800b362:	4b2d      	ldr	r3, [pc, #180]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	4929      	ldr	r1, [pc, #164]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b372:	4313      	orrs	r3, r2
 800b374:	600b      	str	r3, [r1, #0]
 800b376:	e018      	b.n	800b3aa <HAL_RCC_OscConfig+0x212>
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
 800b378:	4b27      	ldr	r3, [pc, #156]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a26      	ldr	r2, [pc, #152]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b37e:	f023 0301 	bic.w	r3, r3, #1
 800b382:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
 800b384:	f7f9 ffaa 	bl	80052dc <HAL_GetTick>
 800b388:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b38a:	e008      	b.n	800b39e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b38c:	f7f9 ffa6 	bl	80052dc <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b02      	cmp	r3, #2
 800b398:	d901      	bls.n	800b39e <HAL_RCC_OscConfig+0x206>
          }
        }
 800b39a:	2303      	movs	r3, #3
 800b39c:	e199      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b39e:	4b1e      	ldr	r3, [pc, #120]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1f0      	bne.n	800b38c <HAL_RCC_OscConfig+0x1f4>
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0308 	and.w	r3, r3, #8
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d038      	beq.n	800b428 <HAL_RCC_OscConfig+0x290>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d019      	beq.n	800b3f2 <HAL_RCC_OscConfig+0x25a>
      __HAL_RCC_LSI_ENABLE();

      /* Get Start Tick*/
 800b3be:	4b16      	ldr	r3, [pc, #88]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b3c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3c2:	4a15      	ldr	r2, [pc, #84]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b3c4:	f043 0301 	orr.w	r3, r3, #1
 800b3c8:	6753      	str	r3, [r2, #116]	; 0x74
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
 800b3ca:	f7f9 ff87 	bl	80052dc <HAL_GetTick>
 800b3ce:	6138      	str	r0, [r7, #16]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3d0:	e008      	b.n	800b3e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b3d2:	f7f9 ff83 	bl	80052dc <HAL_GetTick>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d901      	bls.n	800b3e4 <HAL_RCC_OscConfig+0x24c>
        }
      }
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e176      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3e4:	4b0c      	ldr	r3, [pc, #48]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e8:	f003 0302 	and.w	r3, r3, #2
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0f0      	beq.n	800b3d2 <HAL_RCC_OscConfig+0x23a>
 800b3f0:	e01a      	b.n	800b428 <HAL_RCC_OscConfig+0x290>
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();

      /* Get Start Tick*/
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b3f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3f6:	4a08      	ldr	r2, [pc, #32]	; (800b418 <HAL_RCC_OscConfig+0x280>)
 800b3f8:	f023 0301 	bic.w	r3, r3, #1
 800b3fc:	6753      	str	r3, [r2, #116]	; 0x74
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
 800b3fe:	f7f9 ff6d 	bl	80052dc <HAL_GetTick>
 800b402:	6138      	str	r0, [r7, #16]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b404:	e00a      	b.n	800b41c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b406:	f7f9 ff69 	bl	80052dc <HAL_GetTick>
 800b40a:	4602      	mov	r2, r0
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	2b02      	cmp	r3, #2
 800b412:	d903      	bls.n	800b41c <HAL_RCC_OscConfig+0x284>
        }
      }
 800b414:	2303      	movs	r3, #3
 800b416:	e15c      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
 800b418:	40023800 	.word	0x40023800
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b41c:	4b91      	ldr	r3, [pc, #580]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b420:	f003 0302 	and.w	r3, r3, #2
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1ee      	bne.n	800b406 <HAL_RCC_OscConfig+0x26e>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b00      	cmp	r3, #0
 800b432:	f000 80a4 	beq.w	800b57e <HAL_RCC_OscConfig+0x3e6>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
    {
      /* Enable Power Clock*/
 800b436:	4b8b      	ldr	r3, [pc, #556]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10d      	bne.n	800b45e <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
 800b442:	4b88      	ldr	r3, [pc, #544]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b446:	4a87      	ldr	r2, [pc, #540]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b44c:	6413      	str	r3, [r2, #64]	; 0x40
 800b44e:	4b85      	ldr	r3, [pc, #532]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b456:	60bb      	str	r3, [r7, #8]
 800b458:	68bb      	ldr	r3, [r7, #8]

 800b45a:	2301      	movs	r3, #1
 800b45c:	75fb      	strb	r3, [r7, #23]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
 800b45e:	4b82      	ldr	r3, [pc, #520]	; (800b668 <HAL_RCC_OscConfig+0x4d0>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b466:	2b00      	cmp	r3, #0
 800b468:	d118      	bne.n	800b49c <HAL_RCC_OscConfig+0x304>
      PWR->CR1 |= PWR_CR1_DBP;

      /* Wait for Backup domain Write protection disable */
 800b46a:	4b7f      	ldr	r3, [pc, #508]	; (800b668 <HAL_RCC_OscConfig+0x4d0>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a7e      	ldr	r2, [pc, #504]	; (800b668 <HAL_RCC_OscConfig+0x4d0>)
 800b470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b474:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b476:	f7f9 ff31 	bl	80052dc <HAL_GetTick>
 800b47a:	6138      	str	r0, [r7, #16]
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b47c:	e008      	b.n	800b490 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b47e:	f7f9 ff2d 	bl	80052dc <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	2b64      	cmp	r3, #100	; 0x64
 800b48a:	d901      	bls.n	800b490 <HAL_RCC_OscConfig+0x2f8>
        }
      }
 800b48c:	2303      	movs	r3, #3
 800b48e:	e120      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b490:	4b75      	ldr	r3, [pc, #468]	; (800b668 <HAL_RCC_OscConfig+0x4d0>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0f0      	beq.n	800b47e <HAL_RCC_OscConfig+0x2e6>
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d106      	bne.n	800b4b2 <HAL_RCC_OscConfig+0x31a>
 800b4a4:	4b6f      	ldr	r3, [pc, #444]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a8:	4a6e      	ldr	r2, [pc, #440]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4aa:	f043 0301 	orr.w	r3, r3, #1
 800b4ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b4b0:	e02d      	b.n	800b50e <HAL_RCC_OscConfig+0x376>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10c      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x33c>
 800b4ba:	4b6a      	ldr	r3, [pc, #424]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4be:	4a69      	ldr	r2, [pc, #420]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4c0:	f023 0301 	bic.w	r3, r3, #1
 800b4c4:	6713      	str	r3, [r2, #112]	; 0x70
 800b4c6:	4b67      	ldr	r3, [pc, #412]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ca:	4a66      	ldr	r2, [pc, #408]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4cc:	f023 0304 	bic.w	r3, r3, #4
 800b4d0:	6713      	str	r3, [r2, #112]	; 0x70
 800b4d2:	e01c      	b.n	800b50e <HAL_RCC_OscConfig+0x376>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	2b05      	cmp	r3, #5
 800b4da:	d10c      	bne.n	800b4f6 <HAL_RCC_OscConfig+0x35e>
 800b4dc:	4b61      	ldr	r3, [pc, #388]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e0:	4a60      	ldr	r2, [pc, #384]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4e2:	f043 0304 	orr.w	r3, r3, #4
 800b4e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b4e8:	4b5e      	ldr	r3, [pc, #376]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ec:	4a5d      	ldr	r2, [pc, #372]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4ee:	f043 0301 	orr.w	r3, r3, #1
 800b4f2:	6713      	str	r3, [r2, #112]	; 0x70
 800b4f4:	e00b      	b.n	800b50e <HAL_RCC_OscConfig+0x376>
 800b4f6:	4b5b      	ldr	r3, [pc, #364]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fa:	4a5a      	ldr	r2, [pc, #360]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b4fc:	f023 0301 	bic.w	r3, r3, #1
 800b500:	6713      	str	r3, [r2, #112]	; 0x70
 800b502:	4b58      	ldr	r3, [pc, #352]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b506:	4a57      	ldr	r2, [pc, #348]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b508:	f023 0304 	bic.w	r3, r3, #4
 800b50c:	6713      	str	r3, [r2, #112]	; 0x70
    {
      /* Get Start Tick*/
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d015      	beq.n	800b542 <HAL_RCC_OscConfig+0x3aa>
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
 800b516:	f7f9 fee1 	bl	80052dc <HAL_GetTick>
 800b51a:	6138      	str	r0, [r7, #16]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b51c:	e00a      	b.n	800b534 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b51e:	f7f9 fedd 	bl	80052dc <HAL_GetTick>
 800b522:	4602      	mov	r2, r0
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	f241 3288 	movw	r2, #5000	; 0x1388
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d901      	bls.n	800b534 <HAL_RCC_OscConfig+0x39c>
        }
      }
 800b530:	2303      	movs	r3, #3
 800b532:	e0ce      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b534:	4b4b      	ldr	r3, [pc, #300]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b538:	f003 0302 	and.w	r3, r3, #2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0ee      	beq.n	800b51e <HAL_RCC_OscConfig+0x386>
 800b540:	e014      	b.n	800b56c <HAL_RCC_OscConfig+0x3d4>
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
 800b542:	f7f9 fecb 	bl	80052dc <HAL_GetTick>
 800b546:	6138      	str	r0, [r7, #16]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b548:	e00a      	b.n	800b560 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b54a:	f7f9 fec7 	bl	80052dc <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	f241 3288 	movw	r2, #5000	; 0x1388
 800b558:	4293      	cmp	r3, r2
 800b55a:	d901      	bls.n	800b560 <HAL_RCC_OscConfig+0x3c8>
        }
      }
 800b55c:	2303      	movs	r3, #3
 800b55e:	e0b8      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b560:	4b40      	ldr	r3, [pc, #256]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1ee      	bne.n	800b54a <HAL_RCC_OscConfig+0x3b2>
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d105      	bne.n	800b57e <HAL_RCC_OscConfig+0x3e6>
    }
  }
 800b572:	4b3c      	ldr	r3, [pc, #240]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b576:	4a3b      	ldr	r2, [pc, #236]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b57c:	6413      	str	r3, [r2, #64]	; 0x40
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	f000 80a4 	beq.w	800b6d0 <HAL_RCC_OscConfig+0x538>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b588:	4b36      	ldr	r3, [pc, #216]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f003 030c 	and.w	r3, r3, #12
 800b590:	2b08      	cmp	r3, #8
 800b592:	d06b      	beq.n	800b66c <HAL_RCC_OscConfig+0x4d4>
      {
        /* Check the parameters */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d149      	bne.n	800b630 <HAL_RCC_OscConfig+0x498>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
 800b59c:	4b31      	ldr	r3, [pc, #196]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a30      	ldr	r2, [pc, #192]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b5a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b5a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
 800b5a8:	f7f9 fe98 	bl	80052dc <HAL_GetTick>
 800b5ac:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5ae:	e008      	b.n	800b5c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b5b0:	f7f9 fe94 	bl	80052dc <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_OscConfig+0x42a>
          }
        }
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e087      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5c2:	4b28      	ldr	r3, [pc, #160]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1f0      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	69da      	ldr	r2, [r3, #28]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	019b      	lsls	r3, r3, #6
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e4:	085b      	lsrs	r3, r3, #1
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	041b      	lsls	r3, r3, #16
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	061b      	lsls	r3, r3, #24
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	4a1b      	ldr	r2, [pc, #108]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b5f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5fa:	6053      	str	r3, [r2, #4]
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();

        /* Get Start Tick*/
 800b5fc:	4b19      	ldr	r3, [pc, #100]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a18      	ldr	r2, [pc, #96]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b606:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
 800b608:	f7f9 fe68 	bl	80052dc <HAL_GetTick>
 800b60c:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b60e:	e008      	b.n	800b622 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b610:	f7f9 fe64 	bl	80052dc <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d901      	bls.n	800b622 <HAL_RCC_OscConfig+0x48a>
          }
        }
 800b61e:	2303      	movs	r3, #3
 800b620:	e057      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b622:	4b10      	ldr	r3, [pc, #64]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d0f0      	beq.n	800b610 <HAL_RCC_OscConfig+0x478>
 800b62e:	e04f      	b.n	800b6d0 <HAL_RCC_OscConfig+0x538>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
 800b630:	4b0c      	ldr	r3, [pc, #48]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a0b      	ldr	r2, [pc, #44]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b63a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
 800b63c:	f7f9 fe4e 	bl	80052dc <HAL_GetTick>
 800b640:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b642:	e008      	b.n	800b656 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b644:	f7f9 fe4a 	bl	80052dc <HAL_GetTick>
 800b648:	4602      	mov	r2, r0
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d901      	bls.n	800b656 <HAL_RCC_OscConfig+0x4be>
          }
        }
 800b652:	2303      	movs	r3, #3
 800b654:	e03d      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b656:	4b03      	ldr	r3, [pc, #12]	; (800b664 <HAL_RCC_OscConfig+0x4cc>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1f0      	bne.n	800b644 <HAL_RCC_OscConfig+0x4ac>
 800b662:	e035      	b.n	800b6d0 <HAL_RCC_OscConfig+0x538>
 800b664:	40023800 	.word	0x40023800
 800b668:	40007000 	.word	0x40007000
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <HAL_RCC_OscConfig+0x544>)
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d028      	beq.n	800b6cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	69db      	ldr	r3, [r3, #28]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b684:	429a      	cmp	r2, r3
 800b686:	d121      	bne.n	800b6cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b692:	429a      	cmp	r2, r3
 800b694:	d11a      	bne.n	800b6cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b69c:	4013      	ands	r3, r2
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d111      	bne.n	800b6cc <HAL_RCC_OscConfig+0x534>
#endif
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	085b      	lsrs	r3, r3, #1
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d107      	bne.n	800b6cc <HAL_RCC_OscConfig+0x534>
      {
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c6:	061b      	lsls	r3, r3, #24
#endif
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d001      	beq.n	800b6d0 <HAL_RCC_OscConfig+0x538>
        return HAL_ERROR;
      }
    }
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e000      	b.n	800b6d2 <HAL_RCC_OscConfig+0x53a>
  }
  return HAL_OK;
}

 800b6d0:	2300      	movs	r3, #0
/**
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	40023800 	.word	0x40023800

0800b6e0 <HAL_RCC_ClockConfig>:
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  /* Check Null pointer */
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60fb      	str	r3, [r7, #12]
  if (RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <HAL_RCC_ClockConfig+0x18>
  }

 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e0d0      	b.n	800b89a <HAL_RCC_ClockConfig+0x1ba>
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 800b6f8:	4b6a      	ldr	r3, [pc, #424]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 030f 	and.w	r3, r3, #15
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d910      	bls.n	800b728 <HAL_RCC_ClockConfig+0x48>
    __HAL_FLASH_SET_LATENCY(FLatency);

    /* Check that the new number of wait states is taken into account to access the Flash
 800b706:	4b67      	ldr	r3, [pc, #412]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f023 020f 	bic.w	r2, r3, #15
 800b70e:	4965      	ldr	r1, [pc, #404]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	4313      	orrs	r3, r2
 800b714:	600b      	str	r3, [r1, #0]
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 800b716:	4b63      	ldr	r3, [pc, #396]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 030f 	and.w	r3, r3, #15
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	429a      	cmp	r2, r3
 800b722:	d001      	beq.n	800b728 <HAL_RCC_ClockConfig+0x48>
    }
  }
 800b724:	2301      	movs	r3, #1
 800b726:	e0b8      	b.n	800b89a <HAL_RCC_ClockConfig+0x1ba>

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0302 	and.w	r3, r3, #2
 800b730:	2b00      	cmp	r3, #0
 800b732:	d020      	beq.n	800b776 <HAL_RCC_ClockConfig+0x96>
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0304 	and.w	r3, r3, #4
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d005      	beq.n	800b74c <HAL_RCC_ClockConfig+0x6c>
    }

 800b740:	4b59      	ldr	r3, [pc, #356]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	4a58      	ldr	r2, [pc, #352]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b74a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0308 	and.w	r3, r3, #8
 800b754:	2b00      	cmp	r3, #0
 800b756:	d005      	beq.n	800b764 <HAL_RCC_ClockConfig+0x84>
    }

 800b758:	4b53      	ldr	r3, [pc, #332]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	4a52      	ldr	r2, [pc, #328]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b75e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b762:	6093      	str	r3, [r2, #8]
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

 800b764:	4b50      	ldr	r3, [pc, #320]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	494d      	ldr	r1, [pc, #308]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b772:	4313      	orrs	r3, r2
 800b774:	608b      	str	r3, [r1, #8]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d040      	beq.n	800b804 <HAL_RCC_ClockConfig+0x124>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d107      	bne.n	800b79a <HAL_RCC_ClockConfig+0xba>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 800b78a:	4b47      	ldr	r3, [pc, #284]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d115      	bne.n	800b7c2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
 800b796:	2301      	movs	r3, #1
 800b798:	e07f      	b.n	800b89a <HAL_RCC_ClockConfig+0x1ba>
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d107      	bne.n	800b7b2 <HAL_RCC_ClockConfig+0xd2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 800b7a2:	4b41      	ldr	r3, [pc, #260]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d109      	bne.n	800b7c2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e073      	b.n	800b89a <HAL_RCC_ClockConfig+0x1ba>
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 800b7b2:	4b3d      	ldr	r3, [pc, #244]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0302 	and.w	r3, r3, #2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e06b      	b.n	800b89a <HAL_RCC_ClockConfig+0x1ba>

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
 800b7c2:	4b39      	ldr	r3, [pc, #228]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f023 0203 	bic.w	r2, r3, #3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	4936      	ldr	r1, [pc, #216]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7d4:	f7f9 fd82 	bl	80052dc <HAL_GetTick>
 800b7d8:	60f8      	str	r0, [r7, #12]
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7da:	e00a      	b.n	800b7f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b7dc:	f7f9 fd7e 	bl	80052dc <HAL_GetTick>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_ClockConfig+0x112>
      }
    }
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e053      	b.n	800b89a <HAL_RCC_ClockConfig+0x1ba>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7f2:	4b2d      	ldr	r3, [pc, #180]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f003 020c 	and.w	r2, r3, #12
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	429a      	cmp	r2, r3
 800b802:	d1eb      	bne.n	800b7dc <HAL_RCC_ClockConfig+0xfc>
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 800b804:	4b27      	ldr	r3, [pc, #156]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 030f 	and.w	r3, r3, #15
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d210      	bcs.n	800b834 <HAL_RCC_ClockConfig+0x154>
    __HAL_FLASH_SET_LATENCY(FLatency);

    /* Check that the new number of wait states is taken into account to access the Flash
 800b812:	4b24      	ldr	r3, [pc, #144]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f023 020f 	bic.w	r2, r3, #15
 800b81a:	4922      	ldr	r1, [pc, #136]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	4313      	orrs	r3, r2
 800b820:	600b      	str	r3, [r1, #0]
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 800b822:	4b20      	ldr	r3, [pc, #128]	; (800b8a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 030f 	and.w	r3, r3, #15
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d001      	beq.n	800b834 <HAL_RCC_ClockConfig+0x154>
    }
  }
 800b830:	2301      	movs	r3, #1
 800b832:	e032      	b.n	800b89a <HAL_RCC_ClockConfig+0x1ba>

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0304 	and.w	r3, r3, #4
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d008      	beq.n	800b852 <HAL_RCC_ClockConfig+0x172>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

 800b840:	4b19      	ldr	r3, [pc, #100]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	4916      	ldr	r1, [pc, #88]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b84e:	4313      	orrs	r3, r2
 800b850:	608b      	str	r3, [r1, #8]
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 0308 	and.w	r3, r3, #8
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d009      	beq.n	800b872 <HAL_RCC_ClockConfig+0x192>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
  }

 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	00db      	lsls	r3, r3, #3
 800b86c:	490e      	ldr	r1, [pc, #56]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	608b      	str	r3, [r1, #8]
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];

  /* Configure the source of time base considering new system clocks settings*/
 800b872:	f000 f821 	bl	800b8b8 <HAL_RCC_GetSysClockFreq>
 800b876:	4602      	mov	r2, r0
 800b878:	4b0b      	ldr	r3, [pc, #44]	; (800b8a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	091b      	lsrs	r3, r3, #4
 800b87e:	f003 030f 	and.w	r3, r3, #15
 800b882:	490a      	ldr	r1, [pc, #40]	; (800b8ac <HAL_RCC_ClockConfig+0x1cc>)
 800b884:	5ccb      	ldrb	r3, [r1, r3]
 800b886:	fa22 f303 	lsr.w	r3, r2, r3
 800b88a:	4a09      	ldr	r2, [pc, #36]	; (800b8b0 <HAL_RCC_ClockConfig+0x1d0>)
 800b88c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
 800b88e:	4b09      	ldr	r3, [pc, #36]	; (800b8b4 <HAL_RCC_ClockConfig+0x1d4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4618      	mov	r0, r3
 800b894:	f7f7 fc30 	bl	80030f8 <HAL_InitTick>
}

 800b898:	2300      	movs	r3, #0
/**
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	40023c00 	.word	0x40023c00
 800b8a8:	40023800 	.word	0x40023800
 800b8ac:	0801a134 	.word	0x0801a134
 800b8b0:	20000008 	.word	0x20000008
 800b8b4:	20000024 	.word	0x20000024

0800b8b8 <HAL_RCC_GetSysClockFreq>:
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;
 800b8b8:	b5b0      	push	{r4, r5, r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0

 800b8be:	2100      	movs	r1, #0
 800b8c0:	6079      	str	r1, [r7, #4]
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	60f9      	str	r1, [r7, #12]
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	6039      	str	r1, [r7, #0]
  /* Get SYSCLK source -------------------------------------------------------*/
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	60b9      	str	r1, [r7, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
 800b8ce:	4952      	ldr	r1, [pc, #328]	; (800ba18 <HAL_RCC_GetSysClockFreq+0x160>)
 800b8d0:	6889      	ldr	r1, [r1, #8]
 800b8d2:	f001 010c 	and.w	r1, r1, #12
 800b8d6:	2908      	cmp	r1, #8
 800b8d8:	d00d      	beq.n	800b8f6 <HAL_RCC_GetSysClockFreq+0x3e>
 800b8da:	2908      	cmp	r1, #8
 800b8dc:	f200 8094 	bhi.w	800ba08 <HAL_RCC_GetSysClockFreq+0x150>
 800b8e0:	2900      	cmp	r1, #0
 800b8e2:	d002      	beq.n	800b8ea <HAL_RCC_GetSysClockFreq+0x32>
 800b8e4:	2904      	cmp	r1, #4
 800b8e6:	d003      	beq.n	800b8f0 <HAL_RCC_GetSysClockFreq+0x38>
 800b8e8:	e08e      	b.n	800ba08 <HAL_RCC_GetSysClockFreq+0x150>
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
 800b8ea:	4b4c      	ldr	r3, [pc, #304]	; (800ba1c <HAL_RCC_GetSysClockFreq+0x164>)
 800b8ec:	60bb      	str	r3, [r7, #8]
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
 800b8ee:	e08e      	b.n	800ba0e <HAL_RCC_GetSysClockFreq+0x156>
    {
      sysclockfreq = HSE_VALUE;
      break;
    }
 800b8f0:	4b4b      	ldr	r3, [pc, #300]	; (800ba20 <HAL_RCC_GetSysClockFreq+0x168>)
 800b8f2:	60bb      	str	r3, [r7, #8]
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
 800b8f4:	e08b      	b.n	800ba0e <HAL_RCC_GetSysClockFreq+0x156>
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
      {
 800b8f6:	4948      	ldr	r1, [pc, #288]	; (800ba18 <HAL_RCC_GetSysClockFreq+0x160>)
 800b8f8:	6849      	ldr	r1, [r1, #4]
 800b8fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b8fe:	6079      	str	r1, [r7, #4]
        /* HSE used as PLL clock source */
 800b900:	4945      	ldr	r1, [pc, #276]	; (800ba18 <HAL_RCC_GetSysClockFreq+0x160>)
 800b902:	6849      	ldr	r1, [r1, #4]
 800b904:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b908:	2900      	cmp	r1, #0
 800b90a:	d024      	beq.n	800b956 <HAL_RCC_GetSysClockFreq+0x9e>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
 800b90c:	4942      	ldr	r1, [pc, #264]	; (800ba18 <HAL_RCC_GetSysClockFreq+0x160>)
 800b90e:	6849      	ldr	r1, [r1, #4]
 800b910:	0989      	lsrs	r1, r1, #6
 800b912:	4608      	mov	r0, r1
 800b914:	f04f 0100 	mov.w	r1, #0
 800b918:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b91c:	f04f 0500 	mov.w	r5, #0
 800b920:	ea00 0204 	and.w	r2, r0, r4
 800b924:	ea01 0305 	and.w	r3, r1, r5
 800b928:	493d      	ldr	r1, [pc, #244]	; (800ba20 <HAL_RCC_GetSysClockFreq+0x168>)
 800b92a:	fb01 f003 	mul.w	r0, r1, r3
 800b92e:	2100      	movs	r1, #0
 800b930:	fb01 f102 	mul.w	r1, r1, r2
 800b934:	1844      	adds	r4, r0, r1
 800b936:	493a      	ldr	r1, [pc, #232]	; (800ba20 <HAL_RCC_GetSysClockFreq+0x168>)
 800b938:	fba2 0101 	umull	r0, r1, r2, r1
 800b93c:	1863      	adds	r3, r4, r1
 800b93e:	4619      	mov	r1, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	461a      	mov	r2, r3
 800b944:	f04f 0300 	mov.w	r3, #0
 800b948:	f7f4 fd12 	bl	8000370 <__aeabi_uldivmod>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	4613      	mov	r3, r2
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	e04a      	b.n	800b9ec <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b956:	4b30      	ldr	r3, [pc, #192]	; (800ba18 <HAL_RCC_GetSysClockFreq+0x160>)
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	099b      	lsrs	r3, r3, #6
 800b95c:	461a      	mov	r2, r3
 800b95e:	f04f 0300 	mov.w	r3, #0
 800b962:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b966:	f04f 0100 	mov.w	r1, #0
 800b96a:	ea02 0400 	and.w	r4, r2, r0
 800b96e:	ea03 0501 	and.w	r5, r3, r1
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f04f 0200 	mov.w	r2, #0
 800b97a:	f04f 0300 	mov.w	r3, #0
 800b97e:	014b      	lsls	r3, r1, #5
 800b980:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b984:	0142      	lsls	r2, r0, #5
 800b986:	4610      	mov	r0, r2
 800b988:	4619      	mov	r1, r3
 800b98a:	1b00      	subs	r0, r0, r4
 800b98c:	eb61 0105 	sbc.w	r1, r1, r5
 800b990:	f04f 0200 	mov.w	r2, #0
 800b994:	f04f 0300 	mov.w	r3, #0
 800b998:	018b      	lsls	r3, r1, #6
 800b99a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b99e:	0182      	lsls	r2, r0, #6
 800b9a0:	1a12      	subs	r2, r2, r0
 800b9a2:	eb63 0301 	sbc.w	r3, r3, r1
 800b9a6:	f04f 0000 	mov.w	r0, #0
 800b9aa:	f04f 0100 	mov.w	r1, #0
 800b9ae:	00d9      	lsls	r1, r3, #3
 800b9b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b9b4:	00d0      	lsls	r0, r2, #3
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	1912      	adds	r2, r2, r4
 800b9bc:	eb45 0303 	adc.w	r3, r5, r3
 800b9c0:	f04f 0000 	mov.w	r0, #0
 800b9c4:	f04f 0100 	mov.w	r1, #0
 800b9c8:	0299      	lsls	r1, r3, #10
 800b9ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b9ce:	0290      	lsls	r0, r2, #10
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	f04f 0300 	mov.w	r3, #0
 800b9e0:	f7f4 fcc6 	bl	8000370 <__aeabi_uldivmod>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco / pllp;
 800b9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ba18 <HAL_RCC_GetSysClockFreq+0x160>)
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	0c1b      	lsrs	r3, r3, #16
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	603b      	str	r3, [r7, #0]
      break;
    }
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba04:	60bb      	str	r3, [r7, #8]
    default:
 800ba06:	e002      	b.n	800ba0e <HAL_RCC_GetSysClockFreq+0x156>
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
 800ba08:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <HAL_RCC_GetSysClockFreq+0x164>)
 800ba0a:	60bb      	str	r3, [r7, #8]
  }
 800ba0c:	bf00      	nop
  return sysclockfreq;
}

 800ba0e:	68bb      	ldr	r3, [r7, #8]
/**
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bdb0      	pop	{r4, r5, r7, pc}
 800ba18:	40023800 	.word	0x40023800
 800ba1c:	00f42400 	.word	0x00f42400
 800ba20:	017d7840 	.word	0x017d7840

0800ba24 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800ba24:	b480      	push	{r7}
 800ba26:	af00      	add	r7, sp, #0

 800ba28:	4b03      	ldr	r3, [pc, #12]	; (800ba38 <HAL_RCC_GetHCLKFreq+0x14>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
/**
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	20000008 	.word	0x20000008

0800ba3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
}

 800ba40:	f7ff fff0 	bl	800ba24 <HAL_RCC_GetHCLKFreq>
 800ba44:	4602      	mov	r2, r0
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	0a9b      	lsrs	r3, r3, #10
 800ba4c:	f003 0307 	and.w	r3, r3, #7
 800ba50:	4903      	ldr	r1, [pc, #12]	; (800ba60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba52:	5ccb      	ldrb	r3, [r1, r3]
 800ba54:	fa22 f303 	lsr.w	r3, r2, r3
/**
 800ba58:	4618      	mov	r0, r3
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	40023800 	.word	0x40023800
 800ba60:	0801a144 	.word	0x0801a144

0800ba64 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
}

 800ba68:	f7ff ffdc 	bl	800ba24 <HAL_RCC_GetHCLKFreq>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	0b5b      	lsrs	r3, r3, #13
 800ba74:	f003 0307 	and.w	r3, r3, #7
 800ba78:	4903      	ldr	r1, [pc, #12]	; (800ba88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba7a:	5ccb      	ldrb	r3, [r1, r3]
 800ba7c:	fa22 f303 	lsr.w	r3, r2, r3
/**
 800ba80:	4618      	mov	r0, r3
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	40023800 	.word	0x40023800
 800ba88:	0801a144 	.word	0x0801a144

0800ba8c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	220f      	movs	r2, #15
 800ba9a:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
 800ba9c:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <HAL_RCC_GetClockConfig+0x5c>)
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f003 0203 	and.w	r2, r3, #3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);

  /* Get the APB1 configuration ----------------------------------------------*/
 800baa8:	4b0f      	ldr	r3, [pc, #60]	; (800bae8 <HAL_RCC_GetClockConfig+0x5c>)
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);

  /* Get the APB2 configuration ----------------------------------------------*/
 800bab4:	4b0c      	ldr	r3, [pc, #48]	; (800bae8 <HAL_RCC_GetClockConfig+0x5c>)
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
 800bac0:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <HAL_RCC_GetClockConfig+0x5c>)
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	08db      	lsrs	r3, r3, #3
 800bac6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	611a      	str	r2, [r3, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
}

 800bace:	4b07      	ldr	r3, [pc, #28]	; (800baec <HAL_RCC_GetClockConfig+0x60>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 020f 	and.w	r2, r3, #15
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	601a      	str	r2, [r3, #0]
/**
 800bada:	bf00      	nop
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	40023800 	.word	0x40023800
 800baec:	40023c00 	.word	0x40023c00

0800baf0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]
  uint32_t plli2sused = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiused = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	60fb      	str	r3, [r7, #12]

 800bb04:	2300      	movs	r3, #0
 800bb06:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
 800bb08:	2300      	movs	r3, #0
 800bb0a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
  {
    /* Check the parameters */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d012      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);

    /* Enable the PLLI2S when it's used as clock source for I2S */
 800bb18:	4b69      	ldr	r3, [pc, #420]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	4a68      	ldr	r2, [pc, #416]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bb22:	6093      	str	r3, [r2, #8]
 800bb24:	4b66      	ldr	r3, [pc, #408]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb26:	689a      	ldr	r2, [r3, #8]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2c:	4964      	ldr	r1, [pc, #400]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	608b      	str	r3, [r1, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
    {
      plli2sused = 1;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    }
  }
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	61fb      	str	r3, [r7, #28]

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
  {
    /* Check the parameters */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d017      	beq.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bb4a:	4b5d      	ldr	r3, [pc, #372]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb58:	4959      	ldr	r1, [pc, #356]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    {
      plli2sused = 1;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb68:	d101      	bne.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	61fb      	str	r3, [r7, #28]
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    }
  }
 800bb76:	2301      	movs	r3, #1
 800bb78:	61bb      	str	r3, [r7, #24]

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
  {
    /* Check the parameters */
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d017      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);

    /* Enable the PLLI2S when it's used as clock source for SAI */
 800bb86:	4b4e      	ldr	r3, [pc, #312]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb94:	494a      	ldr	r1, [pc, #296]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb96:	4313      	orrs	r3, r2
 800bb98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bba4:	d101      	bne.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
 800bba6:	2301      	movs	r3, #1
 800bba8:	61fb      	str	r3, [r7, #28]
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    }
  }
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	61bb      	str	r3, [r7, #24]

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  }

 800bbc2:	2301      	movs	r3, #1
 800bbc4:	61fb      	str	r3, [r7, #28]
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* Check for RTC Parameters used to output RTCCLK */
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0320 	and.w	r3, r3, #32
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 808b 	beq.w	800bcea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();

    /* Enable write access to Backup domain */
 800bbd4:	4b3a      	ldr	r3, [pc, #232]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd8:	4a39      	ldr	r2, [pc, #228]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbde:	6413      	str	r3, [r2, #64]	; 0x40
 800bbe0:	4b37      	ldr	r3, [pc, #220]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbe8:	60bb      	str	r3, [r7, #8]
 800bbea:	68bb      	ldr	r3, [r7, #8]
    PWR->CR1 |= PWR_CR1_DBP;

    /* Get Start Tick*/
 800bbec:	4b35      	ldr	r3, [pc, #212]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a34      	ldr	r2, [pc, #208]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bbf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbf6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
 800bbf8:	f7f9 fb70 	bl	80052dc <HAL_GetTick>
 800bbfc:	6178      	str	r0, [r7, #20]
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbfe:	e008      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bc00:	f7f9 fb6c 	bl	80052dc <HAL_GetTick>
 800bc04:	4602      	mov	r2, r0
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	2b64      	cmp	r3, #100	; 0x64
 800bc0c:	d901      	bls.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      }
    }
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e357      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc12:	4b2c      	ldr	r3, [pc, #176]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d0f0      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x110>

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bc1e:	4b28      	ldr	r3, [pc, #160]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc26:	613b      	str	r3, [r7, #16]
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d035      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d02e      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
 800bc3c:	4b20      	ldr	r3, [pc, #128]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc44:	613b      	str	r3, [r7, #16]
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();

 800bc46:	4b1e      	ldr	r3, [pc, #120]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc4a:	4a1d      	ldr	r2, [pc, #116]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc50:	6713      	str	r3, [r2, #112]	; 0x70
      /* Restore the Content of BDCR register */
 800bc52:	4b1b      	ldr	r3, [pc, #108]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc56:	4a1a      	ldr	r2, [pc, #104]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc5c:	6713      	str	r3, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
 800bc5e:	4a18      	ldr	r2, [pc, #96]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	6713      	str	r3, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
 800bc64:	4b16      	ldr	r3, [pc, #88]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d114      	bne.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
 800bc70:	f7f9 fb34 	bl	80052dc <HAL_GetTick>
 800bc74:	6178      	str	r0, [r7, #20]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc76:	e00a      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bc78:	f7f9 fb30 	bl	80052dc <HAL_GetTick>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d901      	bls.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          }
        }
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	e319      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc8e:	4b0c      	ldr	r3, [pc, #48]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc92:	f003 0302 	and.w	r3, r3, #2
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d0ee      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bca6:	d111      	bne.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bca8:	4b05      	ldr	r3, [pc, #20]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bcb4:	4b04      	ldr	r3, [pc, #16]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bcb6:	400b      	ands	r3, r1
 800bcb8:	4901      	ldr	r1, [pc, #4]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	608b      	str	r3, [r1, #8]
 800bcbe:	e00b      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bcc0:	40023800 	.word	0x40023800
 800bcc4:	40007000 	.word	0x40007000
 800bcc8:	0ffffcff 	.word	0x0ffffcff
 800bccc:	4bb1      	ldr	r3, [pc, #708]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	4ab0      	ldr	r2, [pc, #704]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bcd6:	6093      	str	r3, [r2, #8]
 800bcd8:	4bae      	ldr	r3, [pc, #696]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bce4:	49ab      	ldr	r1, [pc, #684]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bce6:	4313      	orrs	r3, r2
 800bce8:	670b      	str	r3, [r1, #112]	; 0x70
  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    /* Check the parameters */
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0310 	and.w	r3, r3, #16
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d010      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x228>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }

 800bcf6:	4ba7      	ldr	r3, [pc, #668]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcfc:	4aa5      	ldr	r2, [pc, #660]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bcfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800bd06:	4ba3      	ldr	r3, [pc, #652]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd10:	49a0      	ldr	r1, [pc, #640]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
  {
    /* Check the parameters */
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00a      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

 800bd24:	4b9b      	ldr	r3, [pc, #620]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd32:	4998      	ldr	r1, [pc, #608]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
  {
    /* Check the parameters */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

 800bd46:	4b93      	ldr	r3, [pc, #588]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd54:	498f      	ldr	r1, [pc, #572]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd56:	4313      	orrs	r3, r2
 800bd58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
  {
    /* Check the parameters */
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00a      	beq.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

 800bd68:	4b8a      	ldr	r3, [pc, #552]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd76:	4987      	ldr	r1, [pc, #540]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
  {
    /* Check the parameters */
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00a      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
  }

 800bd8a:	4b82      	ldr	r3, [pc, #520]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd98:	497e      	ldr	r1, [pc, #504]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00a      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }

 800bdac:	4b79      	ldr	r3, [pc, #484]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bdae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdb2:	f023 0203 	bic.w	r2, r3, #3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdba:	4976      	ldr	r1, [pc, #472]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
  {
    /* Check the parameters */
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
  }

 800bdce:	4b71      	ldr	r3, [pc, #452]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bdd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdd4:	f023 020c 	bic.w	r2, r3, #12
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bddc:	496d      	ldr	r1, [pc, #436]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bdde:	4313      	orrs	r3, r2
 800bde0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
  {
    /* Check the parameters */
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00a      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x316>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }

 800bdf0:	4b68      	ldr	r3, [pc, #416]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bdf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdfe:	4965      	ldr	r1, [pc, #404]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be00:	4313      	orrs	r3, r2
 800be02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
  {
    /* Check the parameters */
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00a      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x338>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
  }

 800be12:	4b60      	ldr	r3, [pc, #384]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be20:	495c      	ldr	r1, [pc, #368]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be22:	4313      	orrs	r3, r2
 800be24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
  {
    /* Check the parameters */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00a      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
  }

 800be34:	4b57      	ldr	r3, [pc, #348]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be42:	4954      	ldr	r1, [pc, #336]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be44:	4313      	orrs	r3, r2
 800be46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00a      	beq.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
  }

 800be56:	4b4f      	ldr	r3, [pc, #316]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be64:	494b      	ldr	r1, [pc, #300]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be66:	4313      	orrs	r3, r2
 800be68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
  {
    /* Check the parameters */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00a      	beq.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
  }

 800be78:	4b46      	ldr	r3, [pc, #280]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be86:	4943      	ldr	r1, [pc, #268]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be88:	4313      	orrs	r3, r2
 800be8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
  {
    /* Check the parameters */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00a      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
  }

 800be9a:	4b3e      	ldr	r3, [pc, #248]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800be9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bea8:	493a      	ldr	r1, [pc, #232]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800beaa:	4313      	orrs	r3, r2
 800beac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
  }

 800bebc:	4b35      	ldr	r3, [pc, #212]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bec2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beca:	4932      	ldr	r1, [pc, #200]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800becc:	4313      	orrs	r3, r2
 800bece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
  {
    /* Check the parameters */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d011      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);

    /* Enable the PLLSAI when it's used as clock source for CK48 */
 800bede:	4b2d      	ldr	r3, [pc, #180]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bee4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beec:	4929      	ldr	r1, [pc, #164]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800beee:	4313      	orrs	r3, r2
 800bef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800befc:	d101      	bne.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
  }
 800befe:	2301      	movs	r3, #1
 800bf00:	61bb      	str	r3, [r7, #24]

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 0308 	and.w	r3, r3, #8
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */
 800bf0e:	2301      	movs	r3, #1
 800bf10:	61bb      	str	r3, [r7, #24]

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x444>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
   }

 800bf1e:	4b1d      	ldr	r3, [pc, #116]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf2c:	4919      	ldr	r1, [pc, #100]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
  {
    /* Check the parameters */
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00b      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x468>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
  }

 800bf40:	4b14      	ldr	r3, [pc, #80]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf50:	4910      	ldr	r1, [pc, #64]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf52:	4313      	orrs	r3, r2
 800bf54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d006      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 80d9 	beq.w	800c11e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    __HAL_RCC_PLLI2S_DISABLE();

    /* Get Start Tick*/
 800bf6c:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a08      	ldr	r2, [pc, #32]	; (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf76:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
 800bf78:	f7f9 f9b0 	bl	80052dc <HAL_GetTick>
 800bf7c:	6178      	str	r0, [r7, #20]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bf7e:	e00b      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
 800bf80:	f7f9 f9ac 	bl	80052dc <HAL_GetTick>
 800bf84:	4602      	mov	r2, r0
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	2b64      	cmp	r3, #100	; 0x64
 800bf8c:	d904      	bls.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        return HAL_TIMEOUT;
      }
    }
 800bf8e:	2303      	movs	r3, #3
 800bf90:	e197      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bf92:	bf00      	nop
 800bf94:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bf98:	4b6c      	ldr	r3, [pc, #432]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1ed      	bne.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x490>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
    {
      /* check for Parameters */
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d021      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d11d      	bne.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
 800bfb8:	4b64      	ldr	r3, [pc, #400]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfbe:	0c1b      	lsrs	r3, r3, #16
 800bfc0:	f003 0303 	and.w	r3, r3, #3
 800bfc4:	613b      	str	r3, [r7, #16]
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
 800bfc6:	4b61      	ldr	r3, [pc, #388]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfcc:	0e1b      	lsrs	r3, r3, #24
 800bfce:	f003 030f 	and.w	r3, r3, #15
 800bfd2:	60fb      	str	r3, [r7, #12]
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
    }

 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	019a      	lsls	r2, r3, #6
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	041b      	lsls	r3, r3, #16
 800bfde:	431a      	orrs	r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	061b      	lsls	r3, r3, #24
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	071b      	lsls	r3, r3, #28
 800bfec:	4957      	ldr	r1, [pc, #348]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
    {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c008:	d00a      	beq.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0x530>
      /* Check for PLLI2S Parameters */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    {
 800c012:	2b00      	cmp	r3, #0
 800c014:	d02e      	beq.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* Check for PLLI2S Parameters */
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c01e:	d129      	bne.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
 800c020:	4b4a      	ldr	r3, [pc, #296]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c026:	0c1b      	lsrs	r3, r3, #16
 800c028:	f003 0303 	and.w	r3, r3, #3
 800c02c:	613b      	str	r3, [r7, #16]
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
 800c02e:	4b47      	ldr	r3, [pc, #284]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c034:	0f1b      	lsrs	r3, r3, #28
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	60fb      	str	r3, [r7, #12]
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	019a      	lsls	r2, r3, #6
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	041b      	lsls	r3, r3, #16
 800c046:	431a      	orrs	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	061b      	lsls	r3, r3, #24
 800c04e:	431a      	orrs	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	071b      	lsls	r3, r3, #28
 800c054:	493d      	ldr	r1, [pc, #244]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c056:	4313      	orrs	r3, r2
 800c058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

 800c05c:	4b3b      	ldr	r3, [pc, #236]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c062:	f023 021f 	bic.w	r2, r3, #31
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06a:	3b01      	subs	r3, #1
 800c06c:	4937      	ldr	r1, [pc, #220]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c06e:	4313      	orrs	r3, r2
 800c070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
    {
      /* check for Parameters */
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d01d      	beq.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
 800c080:	4b32      	ldr	r3, [pc, #200]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c086:	0e1b      	lsrs	r3, r3, #24
 800c088:	f003 030f 	and.w	r3, r3, #15
 800c08c:	613b      	str	r3, [r7, #16]
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
 800c08e:	4b2f      	ldr	r3, [pc, #188]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c094:	0f1b      	lsrs	r3, r3, #28
 800c096:	f003 0307 	and.w	r3, r3, #7
 800c09a:	60fb      	str	r3, [r7, #12]
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
    }

 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	019a      	lsls	r2, r3, #6
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	041b      	lsls	r3, r3, #16
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	061b      	lsls	r3, r3, #24
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	071b      	lsls	r3, r3, #28
 800c0b4:	4925      	ldr	r1, [pc, #148]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
    {
      /* Check for Parameters */
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d011      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	019a      	lsls	r2, r3, #6
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	041b      	lsls	r3, r3, #16
 800c0d4:	431a      	orrs	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	061b      	lsls	r3, r3, #24
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	071b      	lsls	r3, r3, #28
 800c0e4:	4919      	ldr	r1, [pc, #100]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();

    /* Get Start Tick*/
 800c0ec:	4b17      	ldr	r3, [pc, #92]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a16      	ldr	r2, [pc, #88]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0f6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
 800c0f8:	f7f9 f8f0 	bl	80052dc <HAL_GetTick>
 800c0fc:	6178      	str	r0, [r7, #20]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c0fe:	e008      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
 800c100:	f7f9 f8ec 	bl	80052dc <HAL_GetTick>
 800c104:	4602      	mov	r2, r0
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	2b64      	cmp	r3, #100	; 0x64
 800c10c:	d901      	bls.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x622>
        return HAL_TIMEOUT;
      }
    }
 800c10e:	2303      	movs	r3, #3
 800c110:	e0d7      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c112:	4b0e      	ldr	r3, [pc, #56]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d0f0      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x610>

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	2b01      	cmp	r3, #1
 800c122:	f040 80cd 	bne.w	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_PLLSAI_DISABLE();

    /* Get Start Tick*/
 800c126:	4b09      	ldr	r3, [pc, #36]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a08      	ldr	r2, [pc, #32]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c12c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c130:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
 800c132:	f7f9 f8d3 	bl	80052dc <HAL_GetTick>
 800c136:	6178      	str	r0, [r7, #20]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c138:	e00a      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
 800c13a:	f7f9 f8cf 	bl	80052dc <HAL_GetTick>
 800c13e:	4602      	mov	r2, r0
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	2b64      	cmp	r3, #100	; 0x64
 800c146:	d903      	bls.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x660>
        return HAL_TIMEOUT;
      }
    }
 800c148:	2303      	movs	r3, #3
 800c14a:	e0ba      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c14c:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c150:	4b5e      	ldr	r3, [pc, #376]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c15c:	d0ed      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x64a>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
    {
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d009      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x696>
      /* check for PLLSAIQ Parameter */
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    {
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d02e      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      /* check for PLLSAIQ Parameter */
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c182:	2b00      	cmp	r3, #0
 800c184:	d12a      	bne.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
 800c186:	4b51      	ldr	r3, [pc, #324]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c18c:	0c1b      	lsrs	r3, r3, #16
 800c18e:	f003 0303 	and.w	r3, r3, #3
 800c192:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 800c194:	4b4d      	ldr	r3, [pc, #308]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c19a:	0f1b      	lsrs	r3, r3, #28
 800c19c:	f003 0307 	and.w	r3, r3, #7
 800c1a0:	60fb      	str	r3, [r7, #12]
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	019a      	lsls	r2, r3, #6
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	041b      	lsls	r3, r3, #16
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	061b      	lsls	r3, r3, #24
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	071b      	lsls	r3, r3, #28
 800c1ba:	4944      	ldr	r1, [pc, #272]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }

 800c1c2:	4b42      	ldr	r3, [pc, #264]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	021b      	lsls	r3, r3, #8
 800c1d4:	493d      	ldr	r1, [pc, #244]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
    {
      /* check for Parameters */
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d022      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1f0:	d11d      	bne.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);

 800c1f2:	4b36      	ldr	r3, [pc, #216]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f8:	0e1b      	lsrs	r3, r3, #24
 800c1fa:	f003 030f 	and.w	r3, r3, #15
 800c1fe:	613b      	str	r3, [r7, #16]
      /* Configure the PLLSAI division factors */
 800c200:	4b32      	ldr	r3, [pc, #200]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c206:	0f1b      	lsrs	r3, r3, #28
 800c208:	f003 0307 	and.w	r3, r3, #7
 800c20c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }

 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	019a      	lsls	r2, r3, #6
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a1b      	ldr	r3, [r3, #32]
 800c218:	041b      	lsls	r3, r3, #16
 800c21a:	431a      	orrs	r2, r3
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	061b      	lsls	r3, r3, #24
 800c220:	431a      	orrs	r2, r3
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	071b      	lsls	r3, r3, #28
 800c226:	4929      	ldr	r1, [pc, #164]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c228:	4313      	orrs	r3, r2
 800c22a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 0308 	and.w	r3, r3, #8
 800c236:	2b00      	cmp	r3, #0
 800c238:	d028      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);

 800c23a:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c240:	0e1b      	lsrs	r3, r3, #24
 800c242:	f003 030f 	and.w	r3, r3, #15
 800c246:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
 800c248:	4b20      	ldr	r3, [pc, #128]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c24e:	0c1b      	lsrs	r3, r3, #16
 800c250:	f003 0303 	and.w	r3, r3, #3
 800c254:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	019a      	lsls	r2, r3, #6
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	041b      	lsls	r3, r3, #16
 800c260:	431a      	orrs	r2, r3
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	061b      	lsls	r3, r3, #24
 800c266:	431a      	orrs	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	69db      	ldr	r3, [r3, #28]
 800c26c:	071b      	lsls	r3, r3, #28
 800c26e:	4917      	ldr	r1, [pc, #92]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c270:	4313      	orrs	r3, r2
 800c272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */
 800c276:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c27c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	4911      	ldr	r1, [pc, #68]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c286:	4313      	orrs	r3, r2
 800c288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();

    /* Get Start Tick*/
 800c28c:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0e      	ldr	r2, [pc, #56]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c296:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
 800c298:	f7f9 f820 	bl	80052dc <HAL_GetTick>
 800c29c:	6178      	str	r0, [r7, #20]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c29e:	e008      	b.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
 800c2a0:	f7f9 f81c 	bl	80052dc <HAL_GetTick>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	2b64      	cmp	r3, #100	; 0x64
 800c2ac:	d901      	bls.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        return HAL_TIMEOUT;
      }
    }
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	e007      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c2b2:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2be:	d1ef      	bne.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  }
  return HAL_OK;
}

 800c2c0:	2300      	movs	r3, #0
/**
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3720      	adds	r7, #32
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	40023800 	.word	0x40023800

0800c2d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
  uint32_t tmpreg = 0;
  /* This variable is used to store the SAI clock frequency (value in Hz) */
 800c2d0:	b480      	push	{r7}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	613b      	str	r3, [r7, #16]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60bb      	str	r3, [r7, #8]
  {
    saiclocksource = RCC->DCKCFGR1;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c2ee:	f040 808c 	bne.w	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
    switch (saiclocksource)
 800c2f2:	4b95      	ldr	r3, [pc, #596]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2f8:	60bb      	str	r3, [r7, #8]
    {
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c300:	60bb      	str	r3, [r7, #8]
    case 0: /* PLLSAI is the clock source for SAI1 */
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c308:	d07c      	beq.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c310:	d87d      	bhi.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d004      	beq.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c31e:	d039      	beq.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
      }
    }
 800c320:	e075      	b.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
          /* In Case the PLL Source is HSI (Internal Clock) */
 800c322:	4b89      	ldr	r3, [pc, #548]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d108      	bne.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        else
 800c32e:	4b86      	ldr	r3, [pc, #536]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c336:	4a85      	ldr	r2, [pc, #532]	; (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c338:	fbb2 f3f3 	udiv	r3, r2, r3
 800c33c:	613b      	str	r3, [r7, #16]
 800c33e:	e007      	b.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 800c340:	4b81      	ldr	r3, [pc, #516]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c348:	4a81      	ldr	r2, [pc, #516]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c34a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c34e:	613b      	str	r3, [r7, #16]

 800c350:	4b7d      	ldr	r3, [pc, #500]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c356:	0e1b      	lsrs	r3, r3, #24
 800c358:	f003 030f 	and.w	r3, r3, #15
 800c35c:	60fb      	str	r3, [r7, #12]
        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
 800c35e:	4b7a      	ldr	r3, [pc, #488]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c364:	099b      	lsrs	r3, r3, #6
 800c366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	fb02 f203 	mul.w	r2, r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	fbb2 f3f3 	udiv	r3, r2, r3
 800c376:	617b      	str	r3, [r7, #20]
        break;
 800c378:	4b73      	ldr	r3, [pc, #460]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c37e:	0a1b      	lsrs	r3, r3, #8
 800c380:	f003 031f 	and.w	r3, r3, #31
 800c384:	3301      	adds	r3, #1
 800c386:	60fb      	str	r3, [r7, #12]
      }
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c390:	617b      	str	r3, [r7, #20]
    case RCC_DCKCFGR1_SAI1SEL_0: /* PLLI2S is the clock source for SAI1 */
 800c392:	e03d      	b.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          /* In Case the PLL Source is HSI (Internal Clock) */
 800c394:	4b6c      	ldr	r3, [pc, #432]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d108      	bne.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        else
 800c3a0:	4b69      	ldr	r3, [pc, #420]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3a8:	4a68      	ldr	r2, [pc, #416]	; (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ae:	613b      	str	r3, [r7, #16]
 800c3b0:	e007      	b.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>

 800c3b2:	4b65      	ldr	r3, [pc, #404]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3ba:	4a65      	ldr	r2, [pc, #404]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3c0:	613b      	str	r3, [r7, #16]

 800c3c2:	4b61      	ldr	r3, [pc, #388]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c8:	0e1b      	lsrs	r3, r3, #24
 800c3ca:	f003 030f 	and.w	r3, r3, #15
 800c3ce:	60fb      	str	r3, [r7, #12]
        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 800c3d0:	4b5d      	ldr	r3, [pc, #372]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3d6:	099b      	lsrs	r3, r3, #6
 800c3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	fb02 f203 	mul.w	r2, r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e8:	617b      	str	r3, [r7, #20]
        break;
 800c3ea:	4b57      	ldr	r3, [pc, #348]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3f0:	f003 031f 	and.w	r3, r3, #31
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	60fb      	str	r3, [r7, #12]
      }
 800c3f8:	697a      	ldr	r2, [r7, #20]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c400:	617b      	str	r3, [r7, #20]
    case RCC_DCKCFGR1_SAI1SEL_1: /* External clock is the clock source for SAI1 */
 800c402:	e005      	b.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
 800c404:	4b53      	ldr	r3, [pc, #332]	; (800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c406:	617b      	str	r3, [r7, #20]
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
 800c408:	e002      	b.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c40a:	bf00      	nop
 800c40c:	e000      	b.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    }
 800c40e:	bf00      	nop
  {
    saiclocksource = RCC->DCKCFGR1;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c416:	f040 808c 	bne.w	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 800c41a:	4b4b      	ldr	r3, [pc, #300]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c420:	60bb      	str	r3, [r7, #8]
    {
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c428:	60bb      	str	r3, [r7, #8]
    case 0: /* PLLSAI is the clock source for SAI*/
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c430:	d07c      	beq.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c438:	d87d      	bhi.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d004      	beq.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c446:	d039      	beq.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
      }
    }
 800c448:	e075      	b.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          /* In Case the PLL Source is HSI (Internal Clock) */
 800c44a:	4b3f      	ldr	r3, [pc, #252]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d108      	bne.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
        else
 800c456:	4b3c      	ldr	r3, [pc, #240]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c45e:	4a3b      	ldr	r2, [pc, #236]	; (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c460:	fbb2 f3f3 	udiv	r3, r2, r3
 800c464:	613b      	str	r3, [r7, #16]
 800c466:	e007      	b.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 800c468:	4b37      	ldr	r3, [pc, #220]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c470:	4a37      	ldr	r2, [pc, #220]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c472:	fbb2 f3f3 	udiv	r3, r2, r3
 800c476:	613b      	str	r3, [r7, #16]

 800c478:	4b33      	ldr	r3, [pc, #204]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c47e:	0e1b      	lsrs	r3, r3, #24
 800c480:	f003 030f 	and.w	r3, r3, #15
 800c484:	60fb      	str	r3, [r7, #12]
        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
 800c486:	4b30      	ldr	r3, [pc, #192]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c48c:	099b      	lsrs	r3, r3, #6
 800c48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c492:	693a      	ldr	r2, [r7, #16]
 800c494:	fb02 f203 	mul.w	r2, r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c49e:	617b      	str	r3, [r7, #20]
        break;
 800c4a0:	4b29      	ldr	r3, [pc, #164]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4a6:	0a1b      	lsrs	r3, r3, #8
 800c4a8:	f003 031f 	and.w	r3, r3, #31
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	60fb      	str	r3, [r7, #12]
      }
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b8:	617b      	str	r3, [r7, #20]
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
 800c4ba:	e03d      	b.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
          /* In Case the PLL Source is HSI (Internal Clock) */
 800c4bc:	4b22      	ldr	r3, [pc, #136]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d108      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
        else
 800c4c8:	4b1f      	ldr	r3, [pc, #124]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4d0:	4a1e      	ldr	r2, [pc, #120]	; (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4d6:	613b      	str	r3, [r7, #16]
 800c4d8:	e007      	b.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x21a>

 800c4da:	4b1b      	ldr	r3, [pc, #108]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4e2:	4a1b      	ldr	r2, [pc, #108]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e8:	613b      	str	r3, [r7, #16]

 800c4ea:	4b17      	ldr	r3, [pc, #92]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4f0:	0e1b      	lsrs	r3, r3, #24
 800c4f2:	f003 030f 	and.w	r3, r3, #15
 800c4f6:	60fb      	str	r3, [r7, #12]
        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 800c4f8:	4b13      	ldr	r3, [pc, #76]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4fe:	099b      	lsrs	r3, r3, #6
 800c500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	fb02 f203 	mul.w	r2, r2, r3
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c510:	617b      	str	r3, [r7, #20]
        break;
 800c512:	4b0d      	ldr	r3, [pc, #52]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c518:	f003 031f 	and.w	r3, r3, #31
 800c51c:	3301      	adds	r3, #1
 800c51e:	60fb      	str	r3, [r7, #12]
      }
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	fbb2 f3f3 	udiv	r3, r2, r3
 800c528:	617b      	str	r3, [r7, #20]
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
 800c52a:	e005      	b.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
 800c52c:	4b09      	ldr	r3, [pc, #36]	; (800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c52e:	617b      	str	r3, [r7, #20]
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
 800c530:	e002      	b.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
  }

  return frequency;
 800c532:	bf00      	nop
 800c534:	e000      	b.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
    }
 800c536:	bf00      	nop
}

 800c538:	697b      	ldr	r3, [r7, #20]
/**
 800c53a:	4618      	mov	r0, r3
 800c53c:	371c      	adds	r7, #28
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	40023800 	.word	0x40023800
 800c54c:	00f42400 	.word	0x00f42400
 800c550:	017d7840 	.word	0x017d7840
 800c554:	00bb8000 	.word	0x00bb8000

0800c558 <HAL_RTC_Init>:
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  if(hrtc == NULL)
  {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <HAL_RTC_Init+0x12>
     return HAL_ERROR;
  }
 800c566:	2301      	movs	r3, #1
 800c568:	e081      	b.n	800c66e <HAL_RTC_Init+0x116>
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
  {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7f5b      	ldrb	r3, [r3, #29]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	d105      	bne.n	800c580 <HAL_RTC_Init+0x28>
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;

 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
  }
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7f6 f970 	bl	8002860 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2202      	movs	r2, #2
 800c584:	775a      	strb	r2, [r3, #29]
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	22ca      	movs	r2, #202	; 0xca
 800c58c:	625a      	str	r2, [r3, #36]	; 0x24
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2253      	movs	r2, #83	; 0x53
 800c594:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
  {
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fb16 	bl	800cbc8 <RTC_EnterInitMode>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d008      	beq.n	800c5b4 <HAL_RTC_Init+0x5c>
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	22ff      	movs	r2, #255	; 0xff
 800c5a8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;

 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2204      	movs	r2, #4
 800c5ae:	775a      	strb	r2, [r3, #29]
    return HAL_ERROR;
  }
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e05c      	b.n	800c66e <HAL_RTC_Init+0x116>
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
    /* Set RTC_CR register */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6899      	ldr	r1, [r3, #8]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4b2e      	ldr	r3, [pc, #184]	; (800c678 <HAL_RTC_Init+0x120>)
 800c5c0:	400b      	ands	r3, r1
 800c5c2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);

 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6899      	ldr	r1, [r3, #8]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	695b      	ldr	r3, [r3, #20]
 800c5d8:	431a      	orrs	r2, r3
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	430a      	orrs	r2, r1
 800c5e0:	609a      	str	r2, [r3, #8]
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	68d2      	ldr	r2, [r2, #12]
 800c5ea:	611a      	str	r2, [r3, #16]

 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6919      	ldr	r1, [r3, #16]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	041a      	lsls	r2, r3, #16
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	430a      	orrs	r2, r1
 800c5fe:	611a      	str	r2, [r3, #16]
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68da      	ldr	r2, [r3, #12]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c60e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
    {
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	f003 0320 	and.w	r3, r3, #32
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10e      	bne.n	800c63c <HAL_RTC_Init+0xe4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
      {
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 faaa 	bl	800cb78 <HAL_RTC_WaitForSynchro>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d008      	beq.n	800c63c <HAL_RTC_Init+0xe4>
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	22ff      	movs	r2, #255	; 0xff
 800c630:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;

 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2204      	movs	r2, #4
 800c636:	775a      	strb	r2, [r3, #29]
        return HAL_ERROR;
      }
 800c638:	2301      	movs	r3, #1
 800c63a:	e018      	b.n	800c66e <HAL_RTC_Init+0x116>
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 0208 	bic.w	r2, r2, #8
 800c64a:	64da      	str	r2, [r3, #76]	; 0x4c

 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	699a      	ldr	r2, [r3, #24]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	22ff      	movs	r2, #255	; 0xff
 800c664:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;

 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2201      	movs	r2, #1
 800c66a:	775a      	strb	r2, [r3, #29]
    return HAL_OK;
  }
 800c66c:	2300      	movs	r3, #0
}

 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	ff8fffbf 	.word	0xff8fffbf

0800c67c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
  uint32_t tmpreg = 0;
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]

 800c688:	2300      	movs	r3, #0
 800c68a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);

 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	7f1b      	ldrb	r3, [r3, #28]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <HAL_RTC_SetTime+0x1c>
 800c694:	2302      	movs	r3, #2
 800c696:	e0a8      	b.n	800c7ea <HAL_RTC_SetTime+0x16e>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2201      	movs	r2, #1
 800c69c:	771a      	strb	r2, [r3, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;

 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	775a      	strb	r2, [r3, #29]
  if(Format == RTC_FORMAT_BIN)
  {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d126      	bne.n	800c6f8 <HAL_RTC_SetTime+0x7c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
    {
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d102      	bne.n	800c6be <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	731a      	strb	r2, [r3, #12]
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 faac 	bl	800cc20 <RTC_ByteToBcd2>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	785b      	ldrb	r3, [r3, #1]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 faa5 	bl	800cc20 <RTC_ByteToBcd2>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	021b      	lsls	r3, r3, #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c6da:	431c      	orrs	r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	789b      	ldrb	r3, [r3, #2]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 fa9d 	bl	800cc20 <RTC_ByteToBcd2>
 800c6e6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c6e8:	ea44 0203 	orr.w	r2, r4, r3
  }
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	7b1b      	ldrb	r3, [r3, #12]
 800c6f0:	041b      	lsls	r3, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	e018      	b.n	800c72a <HAL_RTC_SetTime+0xae>
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
    {
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c702:	2b00      	cmp	r3, #0
 800c704:	d102      	bne.n	800c70c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2200      	movs	r2, #0
 800c70a:	731a      	strb	r2, [r3, #12]
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	041a      	lsls	r2, r3, #16
              ((uint32_t)sTime->Seconds) | \
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	785b      	ldrb	r3, [r3, #1]
 800c716:	021b      	lsls	r3, r3, #8
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c718:	4313      	orrs	r3, r2
              ((uint32_t)(sTime->TimeFormat) << 16));
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sTime->Seconds) | \
 800c71e:	431a      	orrs	r2, r3
  }
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	7b1b      	ldrb	r3, [r3, #12]
 800c724:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800c726:	4313      	orrs	r3, r2
 800c728:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	22ca      	movs	r2, #202	; 0xca
 800c730:	625a      	str	r2, [r3, #36]	; 0x24
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2253      	movs	r2, #83	; 0x53
 800c738:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
  {
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f000 fa44 	bl	800cbc8 <RTC_EnterInitMode>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00b      	beq.n	800c75e <HAL_RTC_SetTime+0xe2>
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	22ff      	movs	r2, #255	; 0xff
 800c74c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;

 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2204      	movs	r2, #4
 800c752:	775a      	strb	r2, [r3, #29]
    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);

 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	771a      	strb	r2, [r3, #28]
    return HAL_ERROR;
  }
 800c75a:	2301      	movs	r3, #1
 800c75c:	e045      	b.n	800c7ea <HAL_RTC_SetTime+0x16e>
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);

 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	6979      	ldr	r1, [r7, #20]
 800c764:	4b23      	ldr	r3, [pc, #140]	; (800c7f4 <HAL_RTC_SetTime+0x178>)
 800c766:	400b      	ands	r3, r1
 800c768:	6013      	str	r3, [r2, #0]
    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;

 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	689a      	ldr	r2, [r3, #8]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c778:	609a      	str	r2, [r3, #8]
    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);

 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	6899      	ldr	r1, [r3, #8]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	691a      	ldr	r2, [r3, #16]
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	431a      	orrs	r2, r3
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	430a      	orrs	r2, r1
 800c790:	609a      	str	r2, [r3, #8]
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;

 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68da      	ldr	r2, [r3, #12]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7a0:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
    {
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	f003 0320 	and.w	r3, r3, #32
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d111      	bne.n	800c7d4 <HAL_RTC_SetTime+0x158>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
      {
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f000 f9e1 	bl	800cb78 <HAL_RTC_WaitForSynchro>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00b      	beq.n	800c7d4 <HAL_RTC_SetTime+0x158>
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	22ff      	movs	r2, #255	; 0xff
 800c7c2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;

 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2204      	movs	r2, #4
 800c7c8:	775a      	strb	r2, [r3, #29]
        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);

 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	771a      	strb	r2, [r3, #28]
        return HAL_ERROR;
      }
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e00a      	b.n	800c7ea <HAL_RTC_SetTime+0x16e>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	22ff      	movs	r2, #255	; 0xff
 800c7da:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;

 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	775a      	strb	r2, [r3, #29]
   __HAL_UNLOCK(hrtc);

 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	771a      	strb	r2, [r3, #28]
   return HAL_OK;
  }
 800c7e8:	2300      	movs	r3, #0
}

 800c7ea:	4618      	mov	r0, r3
 800c7ec:	371c      	adds	r7, #28
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd90      	pop	{r4, r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	007f7f7f 	.word	0x007f7f7f

0800c7f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
  uint32_t datetmpreg = 0;
 800c7f8:	b590      	push	{r4, r7, lr}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]

 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);

 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	7f1b      	ldrb	r3, [r3, #28]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d101      	bne.n	800c814 <HAL_RTC_SetDate+0x1c>
 800c810:	2302      	movs	r3, #2
 800c812:	e092      	b.n	800c93a <HAL_RTC_SetDate+0x142>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	771a      	strb	r2, [r3, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;

 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2202      	movs	r2, #2
 800c81e:	775a      	strb	r2, [r3, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
  {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10e      	bne.n	800c844 <HAL_RTC_SetDate+0x4c>
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	785b      	ldrb	r3, [r3, #1]
 800c82a:	f003 0310 	and.w	r3, r3, #16
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d008      	beq.n	800c844 <HAL_RTC_SetDate+0x4c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
  }
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	785b      	ldrb	r3, [r3, #1]
 800c836:	f023 0310 	bic.w	r3, r3, #16
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	330a      	adds	r3, #10
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	705a      	strb	r2, [r3, #1]

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
  {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d11c      	bne.n	800c884 <HAL_RTC_SetDate+0x8c>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	78db      	ldrb	r3, [r3, #3]
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 f9e6 	bl	800cc20 <RTC_ByteToBcd2>
 800c854:	4603      	mov	r3, r0
 800c856:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	785b      	ldrb	r3, [r3, #1]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 f9df 	bl	800cc20 <RTC_ByteToBcd2>
 800c862:	4603      	mov	r3, r0
 800c864:	021b      	lsls	r3, r3, #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c866:	431c      	orrs	r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	789b      	ldrb	r3, [r3, #2]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 f9d7 	bl	800cc20 <RTC_ByteToBcd2>
 800c872:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c874:	ea44 0203 	orr.w	r2, r4, r3
  }
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	035b      	lsls	r3, r3, #13
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800c87e:	4313      	orrs	r3, r2
 800c880:	617b      	str	r3, [r7, #20]
 800c882:	e00e      	b.n	800c8a2 <HAL_RTC_SetDate+0xaa>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
                  (((uint32_t)sDate->Month) << 8) | \
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	78db      	ldrb	r3, [r3, #3]
 800c888:	041a      	lsls	r2, r3, #16
                  ((uint32_t)sDate->Date) | \
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	785b      	ldrb	r3, [r3, #1]
 800c88e:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->Month) << 8) | \
 800c890:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->WeekDay) << 13));
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)sDate->Date) | \
 800c896:	431a      	orrs	r2, r3
  }
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	035b      	lsls	r3, r3, #13
                  (((uint32_t)sDate->Month) << 8) | \
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	22ca      	movs	r2, #202	; 0xca
 800c8a8:	625a      	str	r2, [r3, #36]	; 0x24
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2253      	movs	r2, #83	; 0x53
 800c8b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
  {
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f000 f988 	bl	800cbc8 <RTC_EnterInitMode>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00b      	beq.n	800c8d6 <HAL_RTC_SetDate+0xde>
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	22ff      	movs	r2, #255	; 0xff
 800c8c4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;

 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2204      	movs	r2, #4
 800c8ca:	775a      	strb	r2, [r3, #29]
    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);

 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	771a      	strb	r2, [r3, #28]
    return HAL_ERROR;
  }
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e031      	b.n	800c93a <HAL_RTC_SetDate+0x142>
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);

 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	6979      	ldr	r1, [r7, #20]
 800c8dc:	4b19      	ldr	r3, [pc, #100]	; (800c944 <HAL_RTC_SetDate+0x14c>)
 800c8de:	400b      	ands	r3, r1
 800c8e0:	6053      	str	r3, [r2, #4]
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;

 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68da      	ldr	r2, [r3, #12]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c8f0:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
    {
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	f003 0320 	and.w	r3, r3, #32
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d111      	bne.n	800c924 <HAL_RTC_SetDate+0x12c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
      {
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 f939 	bl	800cb78 <HAL_RTC_WaitForSynchro>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00b      	beq.n	800c924 <HAL_RTC_SetDate+0x12c>
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	22ff      	movs	r2, #255	; 0xff
 800c912:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;

 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2204      	movs	r2, #4
 800c918:	775a      	strb	r2, [r3, #29]
        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);

 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	771a      	strb	r2, [r3, #28]
        return HAL_ERROR;
      }
 800c920:	2301      	movs	r3, #1
 800c922:	e00a      	b.n	800c93a <HAL_RTC_SetDate+0x142>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	22ff      	movs	r2, #255	; 0xff
 800c92a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;

 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2201      	movs	r2, #1
 800c930:	775a      	strb	r2, [r3, #29]
    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);

 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	771a      	strb	r2, [r3, #28]
    return HAL_OK;
  }
 800c938:	2300      	movs	r3, #0
}

 800c93a:	4618      	mov	r0, r3
 800c93c:	371c      	adds	r7, #28
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd90      	pop	{r4, r7, pc}
 800c942:	bf00      	nop
 800c944:	00ffff3f 	.word	0x00ffff3f

0800c948 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
  uint32_t tickstart = 0;
 800c948:	b590      	push	{r4, r7, lr}
 800c94a:	b089      	sub	sp, #36	; 0x24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800c954:	2300      	movs	r3, #0
 800c956:	61bb      	str	r3, [r7, #24]

 800c958:	2300      	movs	r3, #0
 800c95a:	61fb      	str	r3, [r7, #28]
 800c95c:	2300      	movs	r3, #0
 800c95e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);

 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	7f1b      	ldrb	r3, [r3, #28]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d101      	bne.n	800c96c <HAL_RTC_SetAlarm+0x24>
 800c968:	2302      	movs	r3, #2
 800c96a:	e101      	b.n	800cb70 <HAL_RTC_SetAlarm+0x228>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2201      	movs	r2, #1
 800c970:	771a      	strb	r2, [r3, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;

 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2202      	movs	r2, #2
 800c976:	775a      	strb	r2, [r3, #29]
  if(Format == RTC_FORMAT_BIN)
  {
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d137      	bne.n	800c9ee <HAL_RTC_SetAlarm+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
    {
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d102      	bne.n	800c992 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2200      	movs	r2, #0
 800c990:	731a      	strb	r2, [r3, #12]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	4618      	mov	r0, r3
 800c998:	f000 f942 	bl	800cc20 <RTC_ByteToBcd2>
 800c99c:	4603      	mov	r3, r0
 800c99e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	785b      	ldrb	r3, [r3, #1]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 f93b 	bl	800cc20 <RTC_ByteToBcd2>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800c9ae:	431c      	orrs	r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	789b      	ldrb	r3, [r3, #2]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 f933 	bl	800cc20 <RTC_ByteToBcd2>
 800c9ba:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c9bc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	7b1b      	ldrb	r3, [r3, #12]
 800c9c4:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800c9c6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 f925 	bl	800cc20 <RTC_ByteToBcd2>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	061b      	lsls	r3, r3, #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800c9da:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c9e2:	431a      	orrs	r2, r3
  }
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	699b      	ldr	r3, [r3, #24]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	61fb      	str	r3, [r7, #28]
 800c9ec:	e023      	b.n	800ca36 <HAL_RTC_SetAlarm+0xee>
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
    {
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d102      	bne.n	800ca02 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	731a      	strb	r2, [r3, #12]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	041a      	lsls	r2, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	021b      	lsls	r3, r3, #8
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ca0e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ca14:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	7b1b      	ldrb	r3, [r3, #12]
 800ca1a:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ca1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca24:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800ca26:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ca2c:	431a      	orrs	r2, r3
  }
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	699b      	ldr	r3, [r3, #24]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ca32:	4313      	orrs	r3, r2
 800ca34:	61fb      	str	r3, [r7, #28]

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));

 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	617b      	str	r3, [r7, #20]
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	22ca      	movs	r2, #202	; 0xca
 800ca48:	625a      	str	r2, [r3, #36]	; 0x24
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2253      	movs	r2, #83	; 0x53
 800ca50:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
  {
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca5a:	d13f      	bne.n	800cadc <HAL_RTC_SetAlarm+0x194>
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);

 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	689a      	ldr	r2, [r3, #8]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca6a:	609a      	str	r2, [r3, #8]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);

 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	689a      	ldr	r2, [r3, #8]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca7a:	609a      	str	r2, [r3, #8]
    /* Get tick */
    tickstart = HAL_GetTick();

 800ca7c:	f7f8 fc2e 	bl	80052dc <HAL_GetTick>
 800ca80:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
    {
 800ca82:	e013      	b.n	800caac <HAL_RTC_SetAlarm+0x164>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
      {
 800ca84:	f7f8 fc2a 	bl	80052dc <HAL_GetTick>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca92:	d90b      	bls.n	800caac <HAL_RTC_SetAlarm+0x164>
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	22ff      	movs	r2, #255	; 0xff
 800ca9a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;

 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2203      	movs	r2, #3
 800caa0:	775a      	strb	r2, [r3, #29]
        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);

 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	771a      	strb	r2, [r3, #28]
        return HAL_TIMEOUT;
      }
 800caa8:	2303      	movs	r3, #3
 800caaa:	e061      	b.n	800cb70 <HAL_RTC_SetAlarm+0x228>
    {
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0e4      	beq.n	800ca84 <HAL_RTC_SetAlarm+0x13c>
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
    /* Configure the Alarm A Sub Second register */
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	69fa      	ldr	r2, [r7, #28]
 800cac0:	61da      	str	r2, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
    /* Configure the Alarm state: Enable Alarm */
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
  }
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	689a      	ldr	r2, [r3, #8]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cad8:	609a      	str	r2, [r3, #8]
 800cada:	e03e      	b.n	800cb5a <HAL_RTC_SetAlarm+0x212>
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);

 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	689a      	ldr	r2, [r3, #8]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800caea:	609a      	str	r2, [r3, #8]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);

 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	689a      	ldr	r2, [r3, #8]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cafa:	609a      	str	r2, [r3, #8]
    /* Get tick */
    tickstart = HAL_GetTick();

 800cafc:	f7f8 fbee 	bl	80052dc <HAL_GetTick>
 800cb00:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
    {
 800cb02:	e013      	b.n	800cb2c <HAL_RTC_SetAlarm+0x1e4>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
      {
 800cb04:	f7f8 fbea 	bl	80052dc <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb12:	d90b      	bls.n	800cb2c <HAL_RTC_SetAlarm+0x1e4>
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	22ff      	movs	r2, #255	; 0xff
 800cb1a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;

 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2203      	movs	r2, #3
 800cb20:	775a      	strb	r2, [r3, #29]
        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);

 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	771a      	strb	r2, [r3, #28]
        return HAL_TIMEOUT;
      }
 800cb28:	2303      	movs	r3, #3
 800cb2a:	e021      	b.n	800cb70 <HAL_RTC_SetAlarm+0x228>
    {
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	f003 0302 	and.w	r3, r3, #2
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d0e4      	beq.n	800cb04 <HAL_RTC_SetAlarm+0x1bc>
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
    /* Configure the Alarm B Sub Second register */
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	69fa      	ldr	r2, [r7, #28]
 800cb40:	621a      	str	r2, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
    /* Configure the Alarm state: Enable Alarm */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
  }
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	689a      	ldr	r2, [r3, #8]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb58:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	22ff      	movs	r2, #255	; 0xff
 800cb60:	625a      	str	r2, [r3, #36]	; 0x24
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2201      	movs	r2, #1
 800cb66:	775a      	strb	r2, [r3, #29]
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);

 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	771a      	strb	r2, [r3, #28]
  return HAL_OK;
}
 800cb6e:	2300      	movs	r3, #0

 800cb70:	4618      	mov	r0, r3
 800cb72:	3724      	adds	r7, #36	; 0x24
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd90      	pop	{r4, r7, pc}

0800cb78 <HAL_RTC_WaitForSynchro>:
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]

 800cb80:	2300      	movs	r3, #0
 800cb82:	60fb      	str	r3, [r7, #12]
  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;

 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68da      	ldr	r2, [r3, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cb92:	60da      	str	r2, [r3, #12]
    /* Get tick */
    tickstart = HAL_GetTick();

 800cb94:	f7f8 fba2 	bl	80052dc <HAL_GetTick>
 800cb98:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
 800cb9a:	e009      	b.n	800cbb0 <HAL_RTC_WaitForSynchro+0x38>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
    {
 800cb9c:	f7f8 fb9e 	bl	80052dc <HAL_GetTick>
 800cba0:	4602      	mov	r2, r0
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbaa:	d901      	bls.n	800cbb0 <HAL_RTC_WaitForSynchro+0x38>
      return HAL_TIMEOUT;
    }
 800cbac:	2303      	movs	r3, #3
 800cbae:	e007      	b.n	800cbc0 <HAL_RTC_WaitForSynchro+0x48>
  {
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	f003 0320 	and.w	r3, r3, #32
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d0ee      	beq.n	800cb9c <HAL_RTC_WaitForSynchro+0x24>
  }

  return HAL_OK;
}
 800cbbe:	2300      	movs	r3, #0

 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <RTC_EnterInitMode>:
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
  {
    /* Set the Initialization mode */
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	60fb      	str	r3, [r7, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d119      	bne.n	800cc16 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbea:	60da      	str	r2, [r3, #12]
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
      {
 800cbec:	f7f8 fb76 	bl	80052dc <HAL_GetTick>
 800cbf0:	60f8      	str	r0, [r7, #12]
        return HAL_TIMEOUT;
      }
    }
 800cbf2:	e009      	b.n	800cc08 <RTC_EnterInitMode+0x40>
  }

 800cbf4:	f7f8 fb72 	bl	80052dc <HAL_GetTick>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc02:	d901      	bls.n	800cc08 <RTC_EnterInitMode+0x40>
  return HAL_OK;
}
 800cc04:	2303      	movs	r3, #3
 800cc06:	e007      	b.n	800cc18 <RTC_EnterInitMode+0x50>
    }
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d0ee      	beq.n	800cbf4 <RTC_EnterInitMode+0x2c>


/**
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
 800cc16:	2300      	movs	r3, #0
  * @retval Converted byte
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <RTC_ByteToBcd2>:
  uint32_t bcdhigh = 0;

  while(Value >= 10)
  {
    bcdhigh++;
    Value -= 10;
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	71fb      	strb	r3, [r7, #7]
  }
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	60fb      	str	r3, [r7, #12]

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800cc2e:	e005      	b.n	800cc3c <RTC_ByteToBcd2+0x1c>
}

 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3301      	adds	r3, #1
 800cc34:	60fb      	str	r3, [r7, #12]
/**
 800cc36:	79fb      	ldrb	r3, [r7, #7]
 800cc38:	3b0a      	subs	r3, #10
 800cc3a:	71fb      	strb	r3, [r7, #7]
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800cc3c:	79fb      	ldrb	r3, [r7, #7]
 800cc3e:	2b09      	cmp	r3, #9
 800cc40:	d8f6      	bhi.n	800cc30 <RTC_ByteToBcd2+0x10>
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	011b      	lsls	r3, r3, #4
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	b2db      	uxtb	r3, r3
  */
 800cc50:	4618      	mov	r0, r3
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b087      	sub	sp, #28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	7f1b      	ldrb	r3, [r3, #28]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d101      	bne.n	800cc78 <HAL_RTCEx_SetTimeStamp+0x1c>
 800cc74:	2302      	movs	r3, #2
 800cc76:	e03e      	b.n	800ccf6 <HAL_RTCEx_SetTimeStamp+0x9a>
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2202      	movs	r2, #2
 800cc82:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	689a      	ldr	r2, [r3, #8]
 800cc8a:	4b1e      	ldr	r3, [pc, #120]	; (800cd04 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	22ca      	movs	r2, #202	; 0xca
 800cc9e:	625a      	str	r2, [r3, #36]	; 0x24
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2253      	movs	r2, #83	; 0x53
 800cca6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f022 0206 	bic.w	r2, r2, #6
 800ccb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	430a      	orrs	r2, r1
 800ccc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	689a      	ldr	r2, [r3, #8]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccde:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	22ff      	movs	r2, #255	; 0xff
 800cce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2201      	movs	r2, #1
 800ccec:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	fffff7f7 	.word	0xfffff7f7

0800cd08 <HAL_SAI_Init>:
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
  uint32_t tmpregisterGCR = 0;
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits = 0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]
  uint32_t syncen_bits = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	61bb      	str	r3, [r7, #24]

 800cd18:	2300      	movs	r3, #0
 800cd1a:	617b      	str	r3, [r7, #20]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
  {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <HAL_SAI_Init+0x1e>
    return HAL_ERROR;
  }
 800cd22:	2301      	movs	r3, #1
 800cd24:	e156      	b.n	800cfd4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
  {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d106      	bne.n	800cd40 <HAL_SAI_Init+0x38>
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;

 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7f6 f8e2 	bl	8002f04 <HAL_SAI_MspInit>
  }

  hsai->State = HAL_SAI_STATE_BUSY;

 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2202      	movs	r2, #2
 800cd44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);

 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 facf 	bl	800d2ec <SAI_Disable>
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
  {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d00c      	beq.n	800cd70 <HAL_SAI_Init+0x68>
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d80d      	bhi.n	800cd76 <HAL_SAI_Init+0x6e>
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d002      	beq.n	800cd64 <HAL_SAI_Init+0x5c>
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d003      	beq.n	800cd6a <HAL_SAI_Init+0x62>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
  }
 800cd62:	e008      	b.n	800cd76 <HAL_SAI_Init+0x6e>
      break;
 800cd64:	2300      	movs	r3, #0
 800cd66:	61fb      	str	r3, [r7, #28]
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
 800cd68:	e006      	b.n	800cd78 <HAL_SAI_Init+0x70>
      break;
 800cd6a:	2310      	movs	r3, #16
 800cd6c:	61fb      	str	r3, [r7, #28]
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
 800cd6e:	e003      	b.n	800cd78 <HAL_SAI_Init+0x70>
      break;
 800cd70:	2320      	movs	r3, #32
 800cd72:	61fb      	str	r3, [r7, #28]
    default:
 800cd74:	e000      	b.n	800cd78 <HAL_SAI_Init+0x70>
  }
 800cd76:	bf00      	nop

  switch (hsai->Init.Synchro)
  {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d81e      	bhi.n	800cdbe <HAL_SAI_Init+0xb6>
 800cd80:	a201      	add	r2, pc, #4	; (adr r2, 800cd88 <HAL_SAI_Init+0x80>)
 800cd82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd86:	bf00      	nop
 800cd88:	0800cd99 	.word	0x0800cd99
 800cd8c:	0800cd9f 	.word	0x0800cd9f
 800cd90:	0800cda7 	.word	0x0800cda7
 800cd94:	0800cdaf 	.word	0x0800cdaf
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
    }
 800cd98:	2300      	movs	r3, #0
 800cd9a:	617b      	str	r3, [r7, #20]
    break;
    case SAI_SYNCHRONOUS :
 800cd9c:	e010      	b.n	800cdc0 <HAL_SAI_Init+0xb8>
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
    }
 800cd9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cda2:	617b      	str	r3, [r7, #20]
    break;
    case SAI_SYNCHRONOUS_EXT_SAI1 :
 800cda4:	e00c      	b.n	800cdc0 <HAL_SAI_Init+0xb8>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
 800cda6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdaa:	617b      	str	r3, [r7, #20]
    break;
    case SAI_SYNCHRONOUS_EXT_SAI2 :
 800cdac:	e008      	b.n	800cdc0 <HAL_SAI_Init+0xb8>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800cdae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdb2:	617b      	str	r3, [r7, #20]
    }
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	f043 0301 	orr.w	r3, r3, #1
 800cdba:	61fb      	str	r3, [r7, #28]
    break;
    default:
 800cdbc:	e000      	b.n	800cdc0 <HAL_SAI_Init+0xb8>
      break;
  }
 800cdbe:	bf00      	nop

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
  {
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a85      	ldr	r2, [pc, #532]	; (800cfdc <HAL_SAI_Init+0x2d4>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d004      	beq.n	800cdd4 <HAL_SAI_Init+0xcc>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a84      	ldr	r2, [pc, #528]	; (800cfe0 <HAL_SAI_Init+0x2d8>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d103      	bne.n	800cddc <HAL_SAI_Init+0xd4>
    SAI1->GCR = tmpregisterGCR;
  }
 800cdd4:	4a83      	ldr	r2, [pc, #524]	; (800cfe4 <HAL_SAI_Init+0x2dc>)
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	6013      	str	r3, [r2, #0]
 800cdda:	e002      	b.n	800cde2 <HAL_SAI_Init+0xda>
  else
  {
    SAI2->GCR = tmpregisterGCR;
  }
 800cddc:	4a82      	ldr	r2, [pc, #520]	; (800cfe8 <HAL_SAI_Init+0x2e0>)
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	6013      	str	r3, [r2, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
  {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d04c      	beq.n	800ce84 <HAL_SAI_Init+0x17c>
    uint32_t freq = 0;
    uint32_t tmpval;
 800cdea:	2300      	movs	r3, #0
 800cdec:	613b      	str	r3, [r7, #16]

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
    {
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a7a      	ldr	r2, [pc, #488]	; (800cfdc <HAL_SAI_Init+0x2d4>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d004      	beq.n	800ce02 <HAL_SAI_Init+0xfa>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a78      	ldr	r2, [pc, #480]	; (800cfe0 <HAL_SAI_Init+0x2d8>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d104      	bne.n	800ce0c <HAL_SAI_Init+0x104>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
    }
 800ce02:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ce06:	f7ff fa63 	bl	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce0a:	6138      	str	r0, [r7, #16]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a76      	ldr	r2, [pc, #472]	; (800cfec <HAL_SAI_Init+0x2e4>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d004      	beq.n	800ce20 <HAL_SAI_Init+0x118>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a75      	ldr	r2, [pc, #468]	; (800cff0 <HAL_SAI_Init+0x2e8>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d104      	bne.n	800ce2a <HAL_SAI_Init+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
 800ce20:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ce24:	f7ff fa54 	bl	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce28:	6138      	str	r0, [r7, #16]
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
    hsai->Init.Mckdiv = tmpval / 10;
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4413      	add	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	461a      	mov	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	025b      	lsls	r3, r3, #9
 800ce3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce40:	60fb      	str	r3, [r7, #12]

 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	4a6b      	ldr	r2, [pc, #428]	; (800cff4 <HAL_SAI_Init+0x2ec>)
 800ce46:	fba2 2303 	umull	r2, r3, r2, r3
 800ce4a:	08da      	lsrs	r2, r3, #3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	621a      	str	r2, [r3, #32]
    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
    {
 800ce50:	68f9      	ldr	r1, [r7, #12]
 800ce52:	4b68      	ldr	r3, [pc, #416]	; (800cff4 <HAL_SAI_Init+0x2ec>)
 800ce54:	fba3 2301 	umull	r2, r3, r3, r1
 800ce58:	08da      	lsrs	r2, r3, #3
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	1aca      	subs	r2, r1, r3
 800ce64:	2a08      	cmp	r2, #8
 800ce66:	d904      	bls.n	800ce72 <HAL_SAI_Init+0x16a>
      hsai->Init.Mckdiv += 1;
    }
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	1c5a      	adds	r2, r3, #1
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	621a      	str	r2, [r3, #32]

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
    {
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce76:	2b04      	cmp	r3, #4
 800ce78:	d104      	bne.n	800ce84 <HAL_SAI_Init+0x17c>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
    }
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	085a      	lsrs	r2, r3, #1
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	621a      	str	r2, [r3, #32]
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
  {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <HAL_SAI_Init+0x18c>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	d109      	bne.n	800cea8 <HAL_SAI_Init+0x1a0>
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
  }
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d101      	bne.n	800cea0 <HAL_SAI_Init+0x198>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	e001      	b.n	800cea4 <HAL_SAI_Init+0x19c>
 800cea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cea4:	61bb      	str	r3, [r7, #24]
 800cea6:	e008      	b.n	800ceba <HAL_SAI_Init+0x1b2>
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
  }
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d102      	bne.n	800ceb6 <HAL_SAI_Init+0x1ae>
 800ceb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ceb4:	e000      	b.n	800ceb8 <HAL_SAI_Init+0x1b0>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	61bb      	str	r3, [r7, #24]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	6819      	ldr	r1, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	4b4c      	ldr	r3, [pc, #304]	; (800cff8 <HAL_SAI_Init+0x2f0>)
 800cec6:	400b      	ands	r3, r1
 800cec8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6819      	ldr	r1, [r3, #0]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685a      	ldr	r2, [r3, #4]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cede:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee4:	431a      	orrs	r2, r3
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800cef2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	431a      	orrs	r2, r3

 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800cefe:	431a      	orrs	r2, r3

 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a1b      	ldr	r3, [r3, #32]
 800cf04:	051b      	lsls	r3, r3, #20
 800cf06:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	430a      	orrs	r2, r1
 800cf0e:	601a      	str	r2, [r3, #0]
  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6859      	ldr	r1, [r3, #4]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	4b38      	ldr	r3, [pc, #224]	; (800cffc <HAL_SAI_Init+0x2f4>)
 800cf1c:	400b      	ands	r3, r1
 800cf1e:	6053      	str	r3, [r2, #4]

 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6859      	ldr	r1, [r3, #4]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	699a      	ldr	r2, [r3, #24]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2e:	431a      	orrs	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf34:	431a      	orrs	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	430a      	orrs	r2, r1
 800cf3c:	605a      	str	r2, [r3, #4]
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6899      	ldr	r1, [r3, #8]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	4b2d      	ldr	r3, [pc, #180]	; (800d000 <HAL_SAI_Init+0x2f8>)
 800cf4a:	400b      	ands	r3, r1
 800cf4c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
                           hsai->FrameInit.FSOffset |
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	6899      	ldr	r1, [r3, #8]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf58:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSDefinition |
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSOffset |
 800cf5e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSDefinition |
 800cf64:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSPolarity   |
 800cf6a:	431a      	orrs	r2, r3

 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf70:	3b01      	subs	r3, #1
 800cf72:	021b      	lsls	r3, r3, #8
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800cf74:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSOffset |
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	609a      	str	r2, [r3, #8]
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	68d9      	ldr	r1, [r3, #12]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	f24f 0320 	movw	r3, #61472	; 0xf020
 800cf8c:	400b      	ands	r3, r1
 800cf8e:	60d3      	str	r3, [r2, #12]

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	68d9      	ldr	r1, [r3, #12]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf9e:	431a      	orrs	r2, r3

 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfa4:	041b      	lsls	r3, r3, #16
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfac:	3b01      	subs	r3, #1
 800cfae:	021b      	lsls	r3, r3, #8
 800cfb0:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	60da      	str	r2, [r3, #12]
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;

 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;

 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  /* Release Lock */
  __HAL_UNLOCK(hsai);

 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  return HAL_OK;
}
 800cfd2:	2300      	movs	r3, #0

 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3720      	adds	r7, #32
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	40015804 	.word	0x40015804
 800cfe0:	40015824 	.word	0x40015824
 800cfe4:	40015800 	.word	0x40015800
 800cfe8:	40015c00 	.word	0x40015c00
 800cfec:	40015c04 	.word	0x40015c04
 800cff0:	40015c24 	.word	0x40015c24
 800cff4:	cccccccd 	.word	0xcccccccd
 800cff8:	ff05c010 	.word	0xff05c010
 800cffc:	ffff1ff0 	.word	0xffff1ff0
 800d000:	fff88000 	.word	0xfff88000

0800d004 <HAL_SAI_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
  uint32_t tickstart = HAL_GetTick();
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	4613      	mov	r3, r2
 800d010:	80fb      	strh	r3, [r7, #6]

 800d012:	f7f8 f963 	bl	80052dc <HAL_GetTick>
 800d016:	6178      	str	r0, [r7, #20]
  if ((pData == NULL) || (Size == 0))
  {
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d002      	beq.n	800d024 <HAL_SAI_Transmit_DMA+0x20>
 800d01e:	88fb      	ldrh	r3, [r7, #6]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <HAL_SAI_Transmit_DMA+0x24>
    return  HAL_ERROR;
  }
 800d024:	2301      	movs	r3, #1
 800d026:	e093      	b.n	800d150 <HAL_SAI_Transmit_DMA+0x14c>

  if (hsai->State == HAL_SAI_STATE_READY)
  {
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b01      	cmp	r3, #1
 800d032:	f040 808c 	bne.w	800d14e <HAL_SAI_Transmit_DMA+0x14a>
    /* Process Locked */
    __HAL_LOCK(hsai);

 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d101      	bne.n	800d044 <HAL_SAI_Transmit_DMA+0x40>
 800d040:	2302      	movs	r3, #2
 800d042:	e085      	b.n	800d150 <HAL_SAI_Transmit_DMA+0x14c>
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    hsai->pBuffPtr = pData;
    hsai->XferSize = Size;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferCount = Size;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	88fa      	ldrh	r2, [r7, #6]
 800d056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	88fa      	ldrh	r2, [r7, #6]
 800d05e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2212      	movs	r2, #18
 800d06e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;

 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d076:	4a38      	ldr	r2, [pc, #224]	; (800d158 <HAL_SAI_Transmit_DMA+0x154>)
 800d078:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;

 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d07e:	4a37      	ldr	r2, [pc, #220]	; (800d15c <HAL_SAI_Transmit_DMA+0x158>)
 800d080:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;

 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d086:	4a36      	ldr	r2, [pc, #216]	; (800d160 <HAL_SAI_Transmit_DMA+0x15c>)
 800d088:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;

 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d08e:	2200      	movs	r2, #0
 800d090:	651a      	str	r2, [r3, #80]	; 0x50
    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
    {
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d09a:	4619      	mov	r1, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	331c      	adds	r3, #28
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0aa:	f7f9 f841 	bl	8006130 <HAL_DMA_Start_IT>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d005      	beq.n	800d0c0 <HAL_SAI_Transmit_DMA+0xbc>
      __HAL_UNLOCK(hsai);
      return  HAL_ERROR;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    }
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e047      	b.n	800d150 <HAL_SAI_Transmit_DMA+0x14c>

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));

 800d0c0:	2100      	movs	r1, #0
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f000 f8dc 	bl	800d280 <SAI_InterruptFlag>
 800d0c8:	4601      	mov	r1, r0
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	691a      	ldr	r2, [r3, #16]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	430a      	orrs	r2, r1
 800d0d6:	611a      	str	r2, [r3, #16]
    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;

 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d0e6:	601a      	str	r2, [r3, #0]
    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
    {
 800d0e8:	e015      	b.n	800d116 <HAL_SAI_Transmit_DMA+0x112>
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
      {
 800d0ea:	f7f8 f8f7 	bl	80052dc <HAL_GetTick>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0f8:	d90d      	bls.n	800d116 <HAL_SAI_Transmit_DMA+0x112>
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;

 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        /* Process Unlocked */
        __HAL_UNLOCK(hsai);

 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        return HAL_TIMEOUT;
      }
 800d112:	2303      	movs	r3, #3
 800d114:	e01c      	b.n	800d150 <HAL_SAI_Transmit_DMA+0x14c>
    {
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	695b      	ldr	r3, [r3, #20]
 800d11c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d0e2      	beq.n	800d0ea <HAL_SAI_Transmit_DMA+0xe6>
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
    {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d107      	bne.n	800d142 <HAL_SAI_Transmit_DMA+0x13e>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
    }
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d140:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);

 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    return HAL_OK;
  }
 800d14a:	2300      	movs	r3, #0
 800d14c:	e000      	b.n	800d150 <HAL_SAI_Transmit_DMA+0x14c>
  else
  {
    return HAL_BUSY;
  }
 800d14e:	2302      	movs	r3, #2
}

 800d150:	4618      	mov	r0, r3
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	0800d3bd 	.word	0x0800d3bd
 800d15c:	0800d35d 	.word	0x0800d35d
 800d160:	0800d455 	.word	0x0800d455

0800d164 <HAL_SAI_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{

 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	4613      	mov	r3, r2
 800d170:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
  {
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <HAL_SAI_Receive_DMA+0x1a>
 800d178:	88fb      	ldrh	r3, [r7, #6]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <HAL_SAI_Receive_DMA+0x1e>
    return  HAL_ERROR;
  }
 800d17e:	2301      	movs	r3, #1
 800d180:	e074      	b.n	800d26c <HAL_SAI_Receive_DMA+0x108>

  if (hsai->State == HAL_SAI_STATE_READY)
  {
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d16d      	bne.n	800d26a <HAL_SAI_Receive_DMA+0x106>
    /* Process Locked */
    __HAL_LOCK(hsai);

 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d194:	2b01      	cmp	r3, #1
 800d196:	d101      	bne.n	800d19c <HAL_SAI_Receive_DMA+0x38>
 800d198:	2302      	movs	r3, #2
 800d19a:	e067      	b.n	800d26c <HAL_SAI_Receive_DMA+0x108>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    hsai->pBuffPtr = pData;
    hsai->XferSize = Size;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferCount = Size;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	88fa      	ldrh	r2, [r7, #6]
 800d1ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	88fa      	ldrh	r2, [r7, #6]
 800d1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2222      	movs	r2, #34	; 0x22
 800d1c6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;

 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ce:	4a29      	ldr	r2, [pc, #164]	; (800d274 <HAL_SAI_Receive_DMA+0x110>)
 800d1d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;

 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d6:	4a28      	ldr	r2, [pc, #160]	; (800d278 <HAL_SAI_Receive_DMA+0x114>)
 800d1d8:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;

 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1de:	4a27      	ldr	r2, [pc, #156]	; (800d27c <HAL_SAI_Receive_DMA+0x118>)
 800d1e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;

 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
    {
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	331c      	adds	r3, #28
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d202:	f7f8 ff95 	bl	8006130 <HAL_DMA_Start_IT>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <HAL_SAI_Receive_DMA+0xb4>
      __HAL_UNLOCK(hsai);
      return  HAL_ERROR;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    }
 800d214:	2301      	movs	r3, #1
 800d216:	e029      	b.n	800d26c <HAL_SAI_Receive_DMA+0x108>

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));

 800d218:	2100      	movs	r1, #0
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f000 f830 	bl	800d280 <SAI_InterruptFlag>
 800d220:	4601      	mov	r1, r0
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	691a      	ldr	r2, [r3, #16]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	430a      	orrs	r2, r1
 800d22e:	611a      	str	r2, [r3, #16]
    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;

 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d23e:	601a      	str	r2, [r3, #0]
    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
    {
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d107      	bne.n	800d25e <HAL_SAI_Receive_DMA+0xfa>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
    }
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d25c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);

 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2200      	movs	r2, #0
 800d262:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    return HAL_OK;
  }
 800d266:	2300      	movs	r3, #0
 800d268:	e000      	b.n	800d26c <HAL_SAI_Receive_DMA+0x108>
  else
  {
    return HAL_BUSY;
  }
 800d26a:	2302      	movs	r3, #2
}

 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	0800d439 	.word	0x0800d439
 800d278:	0800d3d9 	.word	0x0800d3d9
 800d27c:	0800d455 	.word	0x0800d455

0800d280 <SAI_InterruptFlag>:
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]

 800d28a:	2301      	movs	r3, #1
 800d28c:	60fb      	str	r3, [r7, #12]
  if (mode == SAI_MODE_IT)
  {
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d103      	bne.n	800d29c <SAI_InterruptFlag+0x1c>
    tmpIT |= SAI_IT_FREQ;
  }
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f043 0308 	orr.w	r3, r3, #8
 800d29a:	60fb      	str	r3, [r7, #12]

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a0:	2b08      	cmp	r3, #8
 800d2a2:	d10b      	bne.n	800d2bc <SAI_InterruptFlag+0x3c>
  {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685b      	ldr	r3, [r3, #4]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d2a8:	2b03      	cmp	r3, #3
 800d2aa:	d003      	beq.n	800d2b4 <SAI_InterruptFlag+0x34>
  {
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d103      	bne.n	800d2bc <SAI_InterruptFlag+0x3c>
    tmpIT |= SAI_IT_CNRDY;
  }
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f043 0310 	orr.w	r3, r3, #16
 800d2ba:	60fb      	str	r3, [r7, #12]

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
  {
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	d003      	beq.n	800d2cc <SAI_InterruptFlag+0x4c>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d104      	bne.n	800d2d6 <SAI_InterruptFlag+0x56>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	e003      	b.n	800d2de <SAI_InterruptFlag+0x5e>
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
  }
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f043 0304 	orr.w	r3, r3, #4
 800d2dc:	60fb      	str	r3, [r7, #12]
  return tmpIT;
}
 800d2de:	68fb      	ldr	r3, [r7, #12]

 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2f4:	4b17      	ldr	r3, [pc, #92]	; (800d354 <SAI_Disable+0x68>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a17      	ldr	r2, [pc, #92]	; (800d358 <SAI_Disable+0x6c>)
 800d2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d2fe:	0b1b      	lsrs	r3, r3, #12
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	60fb      	str	r3, [r7, #12]

 800d304:	2300      	movs	r3, #0
 800d306:	72fb      	strb	r3, [r7, #11]
  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);

 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d316:	601a      	str	r2, [r3, #0]
  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
    {
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	1e5a      	subs	r2, r3, #1
 800d31c:	60fa      	str	r2, [r7, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10a      	bne.n	800d338 <SAI_Disable+0x4c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d328:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
 800d332:	2303      	movs	r3, #3
 800d334:	72fb      	strb	r3, [r7, #11]
    }
 800d336:	e006      	b.n	800d346 <SAI_Disable+0x5a>
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);

 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1e8      	bne.n	800d318 <SAI_Disable+0x2c>
  return status;
}
 800d346:	7afb      	ldrb	r3, [r7, #11]

 800d348:	4618      	mov	r0, r3
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	20000008 	.word	0x20000008
 800d358:	95cbec1b 	.word	0x95cbec1b

0800d35c <SAI_DMATxCplt>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]

 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d368:	60fb      	str	r3, [r7, #12]
  if (hdma->Init.Mode != DMA_CIRCULAR)
  {
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	69db      	ldr	r3, [r3, #28]
 800d36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d372:	d01c      	beq.n	800d3ae <SAI_DMATxCplt+0x52>
    hsai->XferCount = 0;

 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);

 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d38a:	601a      	str	r2, [r3, #0]
    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));

 800d38c:	2100      	movs	r1, #0
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f7ff ff76 	bl	800d280 <SAI_InterruptFlag>
 800d394:	4603      	mov	r3, r0
 800d396:	43d9      	mvns	r1, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	691a      	ldr	r2, [r3, #16]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	400a      	ands	r2, r1
 800d3a4:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
  }
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f7f6 fdb0 	bl	8003f14 <HAL_SAI_TxCpltCallback>
}

 800d3b4:	bf00      	nop
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <SAI_DMATxHalfCplt>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]

 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7f6 fdac 	bl	8003f28 <HAL_SAI_TxHalfCpltCallback>
}

 800d3d0:	bf00      	nop
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <SAI_DMARxCplt>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]

 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e4:	60fb      	str	r3, [r7, #12]
  if (hdma->Init.Mode != DMA_CIRCULAR)
  {
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	69db      	ldr	r3, [r3, #28]
 800d3ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3ee:	d01c      	beq.n	800d42a <SAI_DMARxCplt+0x52>
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
    hsai->XferCount = 0;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d3fe:	601a      	str	r2, [r3, #0]

 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2200      	movs	r2, #0
 800d404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));

 800d408:	2100      	movs	r1, #0
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	f7ff ff38 	bl	800d280 <SAI_InterruptFlag>
 800d410:	4603      	mov	r3, r0
 800d412:	43d9      	mvns	r1, r3
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	691a      	ldr	r2, [r3, #16]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	400a      	ands	r2, r1
 800d420:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
  }
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7f3 f964 	bl	80006f8 <HAL_SAI_RxCpltCallback>
}

 800d430:	bf00      	nop
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <SAI_DMARxHalfCplt>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]

 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d444:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f7f3 f966 	bl	8000718 <HAL_SAI_RxHalfCpltCallback>
}

 800d44c:	bf00      	nop
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]

 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d460:	60fb      	str	r3, [r7, #12]
  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;

 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d468:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
  {
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d004      	beq.n	800d486 <SAI_DMAError+0x32>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d482:	2b01      	cmp	r3, #1
 800d484:	d112      	bne.n	800d4ac <SAI_DMAError+0x58>
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d494:	601a      	str	r2, [r3, #0]
    /* Disable SAI peripheral */
    SAI_Disable(hsai);

 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f7ff ff28 	bl	800d2ec <SAI_Disable>
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;

 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    /* Initialize XferCount */
    hsai->XferCount = 0U;
  }
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7f6 fd45 	bl	8003f3c <HAL_SAI_ErrorCallback>
}

 800d4b2:	bf00      	nop
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b082      	sub	sp, #8
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e022      	b.n	800d512 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d105      	bne.n	800d4e4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7f5 f9d8 	bl	8002894 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2203      	movs	r2, #3
 800d4e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f815 	bl	800d51c <HAL_SD_InitCard>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e00a      	b.n	800d512 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d51c:	b5b0      	push	{r4, r5, r7, lr}
 800d51e:	b08e      	sub	sp, #56	; 0x38
 800d520:	af04      	add	r7, sp, #16
 800d522:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d524:	2300      	movs	r3, #0
 800d526:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800d528:	2300      	movs	r3, #0
 800d52a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d52c:	2300      	movs	r3, #0
 800d52e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d530:	2300      	movs	r3, #0
 800d532:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d534:	2300      	movs	r3, #0
 800d536:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800d538:	2376      	movs	r3, #118	; 0x76
 800d53a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681d      	ldr	r5, [r3, #0]
 800d540:	466c      	mov	r4, sp
 800d542:	f107 0314 	add.w	r3, r7, #20
 800d546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d54a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d54e:	f107 0308 	add.w	r3, r7, #8
 800d552:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d554:	4628      	mov	r0, r5
 800d556:	f002 ffef 	bl	8010538 <SDMMC_Init>
 800d55a:	4603      	mov	r3, r0
 800d55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	e056      	b.n	800d61a <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	685a      	ldr	r2, [r3, #4]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d57a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4618      	mov	r0, r3
 800d582:	f003 f812 	bl	80105aa <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d594:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fe0e 	bl	800e1b8 <SD_PowerON>
 800d59c:	6238      	str	r0, [r7, #32]

 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00b      	beq.n	800d5bc <HAL_SD_InitCard+0xa0>
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5b0:	6a3b      	ldr	r3, [r7, #32]
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	639a      	str	r2, [r3, #56]	; 0x38
  {
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e02e      	b.n	800d61a <HAL_SD_InitCard+0xfe>
    hsd->State = HAL_SD_STATE_READY;
    hsd->ErrorCode |= errorstate;
    return HAL_ERROR;
  }
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fd2f 	bl	800e020 <SD_InitCard>
 800d5c2:	6238      	str	r0, [r7, #32]

 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00b      	beq.n	800d5e2 <HAL_SD_InitCard+0xc6>
  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	431a      	orrs	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	639a      	str	r2, [r3, #56]	; 0x38
  {
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e01b      	b.n	800d61a <HAL_SD_InitCard+0xfe>
    hsd->State = HAL_SD_STATE_READY;
    hsd->ErrorCode |= errorstate;
    return HAL_ERROR;
  }
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f003 f870 	bl	80106d0 <SDMMC_CmdBlockLength>
 800d5f0:	6238      	str	r0, [r7, #32]

 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00f      	beq.n	800d618 <HAL_SD_InitCard+0xfc>
  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a09      	ldr	r2, [pc, #36]	; (800d624 <HAL_SD_InitCard+0x108>)
 800d5fe:	639a      	str	r2, [r3, #56]	; 0x38
  {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d604:	6a3b      	ldr	r3, [r7, #32]
 800d606:	431a      	orrs	r2, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Clear all the static flags */
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d614:	2301      	movs	r3, #1
 800d616:	e000      	b.n	800d61a <HAL_SD_InitCard+0xfe>
    hsd->ErrorCode |= errorstate;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
 800d618:	2300      	movs	r3, #0
  }
 800d61a:	4618      	mov	r0, r3
 800d61c:	3728      	adds	r7, #40	; 0x28
 800d61e:	46bd      	mov	sp, r7
 800d620:	bdb0      	pop	{r4, r5, r7, pc}
 800d622:	bf00      	nop
 800d624:	004005ff 	.word	0x004005ff

0800d628 <HAL_SD_ReadBlocks_DMA>:
  *         interrupt event.
  * @param  hsd: Pointer SD handle
  * @param  pData: Pointer to the buffer that will contain the received data
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08c      	sub	sp, #48	; 0x30
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
 800d634:	603b      	str	r3, [r7, #0]
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d107      	bne.n	800d650 <HAL_SD_ReadBlocks_DMA+0x28>
  uint32_t add = BlockAdd;

 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d644:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	639a      	str	r2, [r3, #56]	; 0x38
  if(NULL == pData)
 800d64c:	2301      	movs	r3, #1
 800d64e:	e0c3      	b.n	800d7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
    return HAL_ERROR;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d656:	b2db      	uxtb	r3, r3
 800d658:	2b01      	cmp	r3, #1
 800d65a:	f040 80bc 	bne.w	800d7d6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  }

 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2200      	movs	r2, #0
 800d662:	639a      	str	r2, [r3, #56]	; 0x38
  if(hsd->State == HAL_SD_STATE_READY)
  {
 800d664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	441a      	add	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d66e:	429a      	cmp	r2, r3
 800d670:	d907      	bls.n	800d682 <HAL_SD_ReadBlocks_DMA+0x5a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;

 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d676:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	639a      	str	r2, [r3, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d67e:	2301      	movs	r3, #1
 800d680:	e0aa      	b.n	800d7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
      return HAL_ERROR;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2203      	movs	r2, #3
 800d686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2200      	movs	r2, #0
 800d690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initialize data control register */
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d6a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	4a4e      	ldr	r2, [pc, #312]	; (800d7e0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d6a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ae:	4a4d      	ldr	r2, [pc, #308]	; (800d7e4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d6b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	2200      	movs	r2, #0
 800d6c0:	609a      	str	r2, [r3, #8]

 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d2:	689a      	ldr	r2, [r3, #8]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	601a      	str	r2, [r3, #0]
    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3380      	adds	r3, #128	; 0x80
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	025b      	lsls	r3, r3, #9
 800d6f0:	089b      	lsrs	r3, r3, #2
 800d6f2:	f7f8 fd1d 	bl	8006130 <HAL_DMA_Start_IT>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d017      	beq.n	800d72c <HAL_SD_ReadBlocks_DMA+0x104>

    /* Enable the DMA Channel */
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d70a:	63da      	str	r2, [r3, #60]	; 0x3c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a35      	ldr	r2, [pc, #212]	; (800d7e8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d712:	639a      	str	r2, [r3, #56]	; 0x38
    {
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d718:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2201      	movs	r2, #1
 800d724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d728:	2301      	movs	r3, #1
 800d72a:	e055      	b.n	800d7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    else
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f042 0208 	orr.w	r2, r2, #8
 800d73a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
      /* Enable SD DMA transfer */
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d740:	2b01      	cmp	r3, #1
 800d742:	d002      	beq.n	800d74a <HAL_SD_ReadBlocks_DMA+0x122>
      __HAL_SD_DMA_ENABLE(hsd);

 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	025b      	lsls	r3, r3, #9
 800d748:	62bb      	str	r3, [r7, #40]	; 0x28
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
      {
        add *= 512U;
      }
 800d74a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d74e:	613b      	str	r3, [r7, #16]

 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	025b      	lsls	r3, r3, #9
 800d754:	617b      	str	r3, [r7, #20]
      /* Configure the SD DPSM (Data Path State Machine) */
 800d756:	2390      	movs	r3, #144	; 0x90
 800d758:	61bb      	str	r3, [r7, #24]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d75a:	2302      	movs	r3, #2
 800d75c:	61fb      	str	r3, [r7, #28]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d75e:	2300      	movs	r3, #0
 800d760:	623b      	str	r3, [r7, #32]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d762:	2301      	movs	r3, #1
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f107 0210 	add.w	r2, r7, #16
 800d76e:	4611      	mov	r1, r2
 800d770:	4618      	mov	r0, r3
 800d772:	f002 ff81 	bl	8010678 <SDMMC_ConfigData>
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
      config.DPSM          = SDMMC_DPSM_ENABLE;
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d90a      	bls.n	800d792 <HAL_SD_ReadBlocks_DMA+0x16a>

      /* Read Blocks in DMA mode */
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2282      	movs	r2, #130	; 0x82
 800d780:	631a      	str	r2, [r3, #48]	; 0x30
      if(NumberOfBlocks > 1U)
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d788:	4618      	mov	r0, r3
 800d78a:	f002 ffe5 	bl	8010758 <SDMMC_CmdReadMultiBlock>
 800d78e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d790:	e009      	b.n	800d7a6 <HAL_SD_ReadBlocks_DMA+0x17e>

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
      }
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2281      	movs	r2, #129	; 0x81
 800d796:	631a      	str	r2, [r3, #48]	; 0x30
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f002 ffb8 	bl	8010714 <SDMMC_CmdReadSingleBlock>
 800d7a4:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Read Single Block command */
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d012      	beq.n	800d7d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a0d      	ldr	r2, [pc, #52]	; (800d7e8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d7b2:	639a      	str	r2, [r3, #56]	; 0x38
      {
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38
        /* Clear all the static flags */
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	631a      	str	r2, [r3, #48]	; 0x30
        hsd->ErrorCode |= errorstate;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e002      	b.n	800d7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
        hsd->State = HAL_SD_STATE_READY;
        hsd->Context = SD_CONTEXT_NONE;
        return HAL_ERROR;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e000      	b.n	800d7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
    }
  }
 800d7d6:	2302      	movs	r3, #2
  else
  {
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3730      	adds	r7, #48	; 0x30
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	0800df0b 	.word	0x0800df0b
 800d7e4:	0800df7d 	.word	0x0800df7d
 800d7e8:	004005ff 	.word	0x004005ff

0800d7ec <HAL_SD_WriteBlocks_DMA>:
  *         interrupt event.
  * @param  hsd: Pointer to SD handle
  * @param  pData: Pointer to the buffer that will contain the data to transmit
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08c      	sub	sp, #48	; 0x30
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	603b      	str	r3, [r7, #0]
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d107      	bne.n	800d814 <HAL_SD_WriteBlocks_DMA+0x28>
  uint32_t add = BlockAdd;

 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d808:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	639a      	str	r2, [r3, #56]	; 0x38
  if(NULL == pData)
 800d810:	2301      	movs	r3, #1
 800d812:	e0c6      	b.n	800d9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
    return HAL_ERROR;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	f040 80bf 	bne.w	800d9a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	639a      	str	r2, [r3, #56]	; 0x38
  if(hsd->State == HAL_SD_STATE_READY)
  {
 800d828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	441a      	add	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d832:	429a      	cmp	r2, r3
 800d834:	d907      	bls.n	800d846 <HAL_SD_WriteBlocks_DMA+0x5a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;

 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	639a      	str	r2, [r3, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d842:	2301      	movs	r3, #1
 800d844:	e0ad      	b.n	800d9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
      return HAL_ERROR;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2203      	movs	r2, #3
 800d84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2200      	movs	r2, #0
 800d854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f042 021a 	orr.w	r2, r2, #26
 800d864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d86a:	4a50      	ldr	r2, [pc, #320]	; (800d9ac <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d86c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d872:	4a4f      	ldr	r2, [pc, #316]	; (800d9b0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d874:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d87a:	2200      	movs	r2, #0
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Set the DMA Abort callback */
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d882:	2b01      	cmp	r3, #1
 800d884:	d002      	beq.n	800d88c <HAL_SD_WriteBlocks_DMA+0xa0>
    hsd->hdmatx->XferAbortCallback = NULL;

 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	025b      	lsls	r3, r3, #9
 800d88a:	62bb      	str	r3, [r7, #40]	; 0x28
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
    {
      add *= 512U;
    }
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d90a      	bls.n	800d8a8 <HAL_SD_WriteBlocks_DMA+0xbc>

    /* Write Blocks in Polling mode */
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	22a0      	movs	r2, #160	; 0xa0
 800d896:	631a      	str	r2, [r3, #48]	; 0x30
    if(NumberOfBlocks > 1U)
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f002 ff9e 	bl	80107e0 <SDMMC_CmdWriteMultiBlock>
 800d8a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d8a6:	e009      	b.n	800d8bc <HAL_SD_WriteBlocks_DMA+0xd0>

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
    }
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2290      	movs	r2, #144	; 0x90
 800d8ac:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f002 ff71 	bl	801079c <SDMMC_CmdWriteSingleBlock>
 800d8ba:	62f8      	str	r0, [r7, #44]	; 0x2c

      /* Write Single Block command */
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d012      	beq.n	800d8e8 <HAL_SD_WriteBlocks_DMA+0xfc>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a3b      	ldr	r2, [pc, #236]	; (800d9b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38
    {
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Clear all the static flags */
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	631a      	str	r2, [r3, #48]	; 0x30
      hsd->ErrorCode |= errorstate;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e05c      	b.n	800d9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
      hsd->State = HAL_SD_STATE_READY;
      hsd->Context = SD_CONTEXT_NONE;
      return HAL_ERROR;
    }
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f042 0208 	orr.w	r2, r2, #8
 800d8f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8fc:	2240      	movs	r2, #64	; 0x40
 800d8fe:	609a      	str	r2, [r3, #8]

 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d910:	689a      	ldr	r2, [r3, #8]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	601a      	str	r2, [r3, #0]
    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d920:	68b9      	ldr	r1, [r7, #8]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3380      	adds	r3, #128	; 0x80
 800d928:	461a      	mov	r2, r3
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	025b      	lsls	r3, r3, #9
 800d92e:	089b      	lsrs	r3, r3, #2
 800d930:	f7f8 fbfe 	bl	8006130 <HAL_DMA_Start_IT>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d01a      	beq.n	800d970 <HAL_SD_WriteBlocks_DMA+0x184>

    /* Enable the DMA Channel */
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f022 021a 	bic.w	r2, r2, #26
 800d948:	63da      	str	r2, [r3, #60]	; 0x3c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a19      	ldr	r2, [pc, #100]	; (800d9b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d950:	639a      	str	r2, [r3, #56]	; 0x38
    {
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d956:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2200      	movs	r2, #0
 800d96a:	631a      	str	r2, [r3, #48]	; 0x30
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d96c:	2301      	movs	r3, #1
 800d96e:	e018      	b.n	800d9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
      hsd->State = HAL_SD_STATE_READY;
      hsd->Context = SD_CONTEXT_NONE;
      return HAL_ERROR;
    }
    else
 800d970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d974:	613b      	str	r3, [r7, #16]
    {
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	025b      	lsls	r3, r3, #9
 800d97a:	617b      	str	r3, [r7, #20]
      /* Configure the SD DPSM (Data Path State Machine) */
 800d97c:	2390      	movs	r3, #144	; 0x90
 800d97e:	61bb      	str	r3, [r7, #24]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d980:	2300      	movs	r3, #0
 800d982:	61fb      	str	r3, [r7, #28]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d984:	2300      	movs	r3, #0
 800d986:	623b      	str	r3, [r7, #32]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d988:	2301      	movs	r3, #1
 800d98a:	627b      	str	r3, [r7, #36]	; 0x24
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f107 0210 	add.w	r2, r7, #16
 800d994:	4611      	mov	r1, r2
 800d996:	4618      	mov	r0, r3
 800d998:	f002 fe6e 	bl	8010678 <SDMMC_ConfigData>
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d99c:	2300      	movs	r3, #0
 800d99e:	e000      	b.n	800d9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
      (void)SDMMC_ConfigData(hsd->Instance, &config);

      return HAL_OK;
    }
  }
 800d9a0:	2302      	movs	r3, #2
  else
  {
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3730      	adds	r7, #48	; 0x30
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	0800dee1 	.word	0x0800dee1
 800d9b0:	0800df7d 	.word	0x0800df7d
 800d9b4:	004005ff 	.word	0x004005ff

0800d9b8 <HAL_SD_ErrorCallback>:
}

/**
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <HAL_SD_GetCardCSD>:
  * @brief  Returns information the information of the card which are stored on
  *         the CSD register.
  * @param  hsd: Pointer to SD handle
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
  */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9da:	0f9b      	lsrs	r3, r3, #30
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	701a      	strb	r2, [r3, #0]
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e6:	0e9b      	lsrs	r3, r3, #26
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	f003 030f 	and.w	r3, r3, #15
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	705a      	strb	r2, [r3, #1]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);

 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f8:	0e1b      	lsrs	r3, r3, #24
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	f003 0303 	and.w	r3, r3, #3
 800da00:	b2da      	uxtb	r2, r3
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	709a      	strb	r2, [r3, #2]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);

 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da0a:	0c1b      	lsrs	r3, r3, #16
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	70da      	strb	r2, [r3, #3]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);

 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da16:	0a1b      	lsrs	r3, r3, #8
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	711a      	strb	r2, [r3, #4]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);

 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da22:	b2da      	uxtb	r2, r3
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	715a      	strb	r2, [r3, #5]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);

 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2c:	0d1b      	lsrs	r3, r3, #20
 800da2e:	b29a      	uxth	r2, r3
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	80da      	strh	r2, [r3, #6]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);

 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da38:	0c1b      	lsrs	r3, r3, #16
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	f003 030f 	and.w	r3, r3, #15
 800da40:	b2da      	uxtb	r2, r3
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	721a      	strb	r2, [r3, #8]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);

 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da4a:	0bdb      	lsrs	r3, r3, #15
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	f003 0301 	and.w	r3, r3, #1
 800da52:	b2da      	uxtb	r2, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	725a      	strb	r2, [r3, #9]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);

 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da5c:	0b9b      	lsrs	r3, r3, #14
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	b2da      	uxtb	r2, r3
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	729a      	strb	r2, [r3, #10]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);

 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da6e:	0b5b      	lsrs	r3, r3, #13
 800da70:	b2db      	uxtb	r3, r3
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	b2da      	uxtb	r2, r3
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	72da      	strb	r2, [r3, #11]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);

 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da80:	0b1b      	lsrs	r3, r3, #12
 800da82:	b2db      	uxtb	r3, r3
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	b2da      	uxtb	r2, r3
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	731a      	strb	r2, [r3, #12]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);

 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2200      	movs	r2, #0
 800da92:	735a      	strb	r2, [r3, #13]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);

 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d163      	bne.n	800db64 <HAL_SD_GetCardCSD+0x198>
  pCSD->Reserved2 = 0U; /*!< Reserved */

 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daa0:	009a      	lsls	r2, r3, #2
 800daa2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800daa6:	4013      	ands	r3, r2
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800daac:	0f92      	lsrs	r2, r2, #30
 800daae:	431a      	orrs	r2, r3
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	611a      	str	r2, [r3, #16]
  if(hsd->SdCard.CardType == CARD_SDSC)
  {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab8:	0edb      	lsrs	r3, r3, #27
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	f003 0307 	and.w	r3, r3, #7
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	751a      	strb	r2, [r3, #20]
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));

 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daca:	0e1b      	lsrs	r3, r3, #24
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0307 	and.w	r3, r3, #7
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	755a      	strb	r2, [r3, #21]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);

 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dadc:	0d5b      	lsrs	r3, r3, #21
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	f003 0307 	and.w	r3, r3, #7
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);

 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daee:	0c9b      	lsrs	r3, r3, #18
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	75da      	strb	r2, [r3, #23]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);

 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db00:	0bdb      	lsrs	r3, r3, #15
 800db02:	b2db      	uxtb	r3, r3
 800db04:	f003 0307 	and.w	r3, r3, #7
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	761a      	strb	r2, [r3, #24]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);

 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	691b      	ldr	r3, [r3, #16]
 800db12:	1c5a      	adds	r2, r3, #1
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	655a      	str	r2, [r3, #84]	; 0x54
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	7e1b      	ldrb	r3, [r3, #24]
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	f003 0307 	and.w	r3, r3, #7
 800db22:	3302      	adds	r3, #2
 800db24:	2201      	movs	r2, #1
 800db26:	fa02 f303 	lsl.w	r3, r2, r3
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800db2e:	fb02 f203 	mul.w	r2, r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	655a      	str	r2, [r3, #84]	; 0x54

 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	7a1b      	ldrb	r3, [r3, #8]
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	f003 030f 	and.w	r3, r3, #15
 800db40:	2201      	movs	r2, #1
 800db42:	409a      	lsls	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800db50:	0a52      	lsrs	r2, r2, #9
 800db52:	fb02 f203 	mul.w	r2, r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db60:	661a      	str	r2, [r3, #96]	; 0x60
 800db62:	e031      	b.n	800dbc8 <HAL_SD_GetCardCSD+0x1fc>

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d11d      	bne.n	800dba8 <HAL_SD_GetCardCSD+0x1dc>
    hsd->SdCard.LogBlockSize = 512U;
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db70:	041b      	lsls	r3, r3, #16
 800db72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db7a:	0c1b      	lsrs	r3, r3, #16
 800db7c:	431a      	orrs	r2, r3
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	611a      	str	r2, [r3, #16]
  {
    /* Byte 7 */
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	691b      	ldr	r3, [r3, #16]
 800db86:	3301      	adds	r3, #1
 800db88:	029a      	lsls	r2, r3, #10
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	655a      	str	r2, [r3, #84]	; 0x54
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	65da      	str	r2, [r3, #92]	; 0x5c

 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	661a      	str	r2, [r3, #96]	; 0x60
 800dba6:	e00f      	b.n	800dbc8 <HAL_SD_GetCardCSD+0x1fc>
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
    hsd->SdCard.BlockSize = 512U;
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
  }
  else
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a58      	ldr	r2, [pc, #352]	; (800dd10 <HAL_SD_GetCardCSD+0x344>)
 800dbae:	639a      	str	r2, [r3, #56]	; 0x38
  {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	639a      	str	r2, [r3, #56]	; 0x38
    /* Clear all the static flags */
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e09d      	b.n	800dd04 <HAL_SD_GetCardCSD+0x338>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbcc:	0b9b      	lsrs	r3, r3, #14
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	f003 0301 	and.w	r3, r3, #1
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	765a      	strb	r2, [r3, #25]
  }

 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbde:	09db      	lsrs	r3, r3, #7
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	769a      	strb	r2, [r3, #26]
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);

 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	76da      	strb	r2, [r3, #27]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);

 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc00:	0fdb      	lsrs	r3, r3, #31
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	771a      	strb	r2, [r3, #28]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);

 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc0c:	0f5b      	lsrs	r3, r3, #29
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	f003 0303 	and.w	r3, r3, #3
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	775a      	strb	r2, [r3, #29]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);

 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc1e:	0e9b      	lsrs	r3, r3, #26
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	f003 0307 	and.w	r3, r3, #7
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	779a      	strb	r2, [r3, #30]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);

 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc30:	0d9b      	lsrs	r3, r3, #22
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	f003 030f 	and.w	r3, r3, #15
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	77da      	strb	r2, [r3, #31]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);

 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc42:	0d5b      	lsrs	r3, r3, #21
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);

 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);

 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc5e:	0c1b      	lsrs	r3, r3, #16
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	b2da      	uxtb	r2, r3
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  pCSD->Reserved3 = 0;

 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc72:	0bdb      	lsrs	r3, r3, #15
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	f003 0301 	and.w	r3, r3, #1
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);

 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc86:	0b9b      	lsrs	r3, r3, #14
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	f003 0301 	and.w	r3, r3, #1
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);

 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc9a:	0b5b      	lsrs	r3, r3, #13
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	f003 0301 	and.w	r3, r3, #1
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);

 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcae:	0b1b      	lsrs	r3, r3, #12
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	f003 0301 	and.w	r3, r3, #1
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);

 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcc2:	0a9b      	lsrs	r3, r3, #10
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	f003 0303 	and.w	r3, r3, #3
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);

 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcd6:	0a1b      	lsrs	r3, r3, #8
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	f003 0303 	and.w	r3, r3, #3
 800dcde:	b2da      	uxtb	r2, r3
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);

 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcea:	085b      	lsrs	r3, r3, #1
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);

 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);

 800dd02:	2300      	movs	r3, #0
  pCSD->Reserved4 = 1;
 800dd04:	4618      	mov	r0, r3
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	004005ff 	.word	0x004005ff

0800dd14 <HAL_SD_GetCardInfo>:
/**
  * @brief  Gets the SD card info.
  * @param  hsd: Pointer to SD handle
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  */
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	601a      	str	r2, [r3, #0]
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	605a      	str	r2, [r3, #4]
{
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	609a      	str	r2, [r3, #8]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	60da      	str	r2, [r3, #12]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	611a      	str	r2, [r3, #16]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	615a      	str	r2, [r3, #20]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	619a      	str	r2, [r3, #24]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	61da      	str	r2, [r3, #28]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd5e:	2300      	movs	r3, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd60:	4618      	mov	r0, r3
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <HAL_SD_ConfigWideBusOperation>:
  * @param  WideMode: Specifies the SD card wide bus mode
  *          This parameter can be one of the following values:
  *            @arg SDMMC_BUS_WIDE_8B: 8-bit data transfer
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
 800dd6c:	b5b0      	push	{r4, r5, r7, lr}
 800dd6e:	b08e      	sub	sp, #56	; 0x38
 800dd70:	af04      	add	r7, sp, #16
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd76:	2300      	movs	r3, #0
 800dd78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2203      	movs	r2, #3
 800dd80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change State */
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd88:	2b03      	cmp	r3, #3
 800dd8a:	d02e      	beq.n	800ddea <HAL_SD_ConfigWideBusOperation+0x7e>
  hsd->State = HAL_SD_STATE_BUSY;

 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd92:	d106      	bne.n	800dda2 <HAL_SD_ConfigWideBusOperation+0x36>
  if(hsd->SdCard.CardType != CARD_SECURED)
  {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	639a      	str	r2, [r3, #56]	; 0x38
 800dda0:	e029      	b.n	800ddf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
    {
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dda8:	d10a      	bne.n	800ddc0 <HAL_SD_ConfigWideBusOperation+0x54>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 faba 	bl	800e324 <SD_WideBus_Enable>
 800ddb0:	6238      	str	r0, [r7, #32]
    else if(WideMode == SDMMC_BUS_WIDE_4B)
    {
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	639a      	str	r2, [r3, #56]	; 0x38
 800ddbe:	e01a      	b.n	800ddf6 <HAL_SD_ConfigWideBusOperation+0x8a>
      errorstate = SD_WideBus_Enable(hsd);

 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d10a      	bne.n	800dddc <HAL_SD_ConfigWideBusOperation+0x70>
      hsd->ErrorCode |= errorstate;
    }
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 faf7 	bl	800e3ba <SD_WideBus_Disable>
 800ddcc:	6238      	str	r0, [r7, #32]
    else if(WideMode == SDMMC_BUS_WIDE_1B)
    {
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddd2:	6a3b      	ldr	r3, [r7, #32]
 800ddd4:	431a      	orrs	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	639a      	str	r2, [r3, #56]	; 0x38
 800ddda:	e00c      	b.n	800ddf6 <HAL_SD_ConfigWideBusOperation+0x8a>
      errorstate = SD_WideBus_Disable(hsd);

      hsd->ErrorCode |= errorstate;
    }
    else
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	639a      	str	r2, [r3, #56]	; 0x38
 800dde8:	e005      	b.n	800ddf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
    }
  }
  else
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00b      	beq.n	800de16 <HAL_SD_ConfigWideBusOperation+0xaa>
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a26      	ldr	r2, [pc, #152]	; (800de9c <HAL_SD_ConfigWideBusOperation+0x130>)
 800de04:	639a      	str	r2, [r3, #56]	; 0x38
  {
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2201      	movs	r2, #1
 800de0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Clear all the static flags */
 800de0e:	2301      	movs	r3, #1
 800de10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de14:	e01f      	b.n	800de56 <HAL_SD_ConfigWideBusOperation+0xea>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
    hsd->State = HAL_SD_STATE_READY;
    status = HAL_ERROR;
  }
  else
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	60bb      	str	r3, [r7, #8]
  {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	60fb      	str	r3, [r7, #12]
    /* Configure the SDMMC peripheral */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	613b      	str	r3, [r7, #16]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	617b      	str	r3, [r7, #20]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	695b      	ldr	r3, [r3, #20]
 800de30:	61bb      	str	r3, [r7, #24]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	61fb      	str	r3, [r7, #28]
    Init.BusWide             = WideMode;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681d      	ldr	r5, [r3, #0]
 800de3c:	466c      	mov	r4, sp
 800de3e:	f107 0314 	add.w	r3, r7, #20
 800de42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de4a:	f107 0308 	add.w	r3, r7, #8
 800de4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de50:	4628      	mov	r0, r5
 800de52:	f002 fb71 	bl	8010538 <SDMMC_Init>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
    Init.ClockDiv            = hsd->Init.ClockDiv;
    (void)SDMMC_Init(hsd->Instance, Init);
  }
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de5e:	4618      	mov	r0, r3
 800de60:	f002 fc36 	bl	80106d0 <SDMMC_CmdBlockLength>
 800de64:	6238      	str	r0, [r7, #32]

 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00c      	beq.n	800de86 <HAL_SD_ConfigWideBusOperation+0x11a>
  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
  if(errorstate != HAL_SD_ERROR_NONE)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a0a      	ldr	r2, [pc, #40]	; (800de9c <HAL_SD_ConfigWideBusOperation+0x130>)
 800de72:	639a      	str	r2, [r3, #56]	; 0x38
  {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de78:	6a3b      	ldr	r3, [r7, #32]
 800de7a:	431a      	orrs	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Clear all the static flags */
 800de80:	2301      	movs	r3, #1
 800de82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
    hsd->ErrorCode |= errorstate;
    status = HAL_ERROR;
  }
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2201      	movs	r2, #1
 800de8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change State */
 800de8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  hsd->State = HAL_SD_STATE_READY;
 800de92:	4618      	mov	r0, r3
 800de94:	3728      	adds	r7, #40	; 0x28
 800de96:	46bd      	mov	sp, r7
 800de98:	bdb0      	pop	{r4, r5, r7, pc}
 800de9a:	bf00      	nop
 800de9c:	004005ff 	.word	0x004005ff

0800dea0 <HAL_SD_GetCardState>:
}

/**
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dea8:	2300      	movs	r3, #0
 800deaa:	60fb      	str	r3, [r7, #12]
  uint32_t cardstate;
  uint32_t errorstate;
 800deac:	f107 030c 	add.w	r3, r7, #12
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fa0e 	bl	800e2d4 <SD_SendStatus>
 800deb8:	6178      	str	r0, [r7, #20]
  uint32_t resp1 = 0;
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <HAL_SD_GetCardState+0x2c>

  errorstate = SD_SendStatus(hsd, &resp1);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	431a      	orrs	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	639a      	str	r2, [r3, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= errorstate;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	0a5b      	lsrs	r3, r3, #9
 800ded0:	f003 030f 	and.w	r3, r3, #15
 800ded4:	613b      	str	r3, [r7, #16]
  }

 800ded6:	693b      	ldr	r3, [r7, #16]
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <SD_DMATransmitCplt>:
  */

/**
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  */
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deec:	60fb      	str	r3, [r7, #12]
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800defc:	63da      	str	r2, [r3, #60]	; 0x3c

 800defe:	bf00      	nop
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <SD_DMAReceiveCplt>:
}

/**
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b084      	sub	sp, #16
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
  */
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df16:	60fb      	str	r3, [r7, #12]
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  uint32_t errorstate;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1c:	2b82      	cmp	r3, #130	; 0x82
 800df1e:	d111      	bne.n	800df44 <SD_DMAReceiveCplt+0x3a>

  /* Send stop command in multiblock write */
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4618      	mov	r0, r3
 800df26:	f002 fc7d 	bl	8010824 <SDMMC_CmdStopTransfer>
 800df2a:	60b8      	str	r0, [r7, #8]
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d008      	beq.n	800df44 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	431a      	orrs	r2, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      hsd->ErrorCode |= errorstate;
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f7ff fd3a 	bl	800d9b8 <HAL_SD_ErrorCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }

 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f022 0208 	bic.w	r2, r2, #8
 800df52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f240 523a 	movw	r2, #1338	; 0x53a
 800df5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear all the static flags */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2201      	movs	r2, #1
 800df62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	631a      	str	r2, [r3, #48]	; 0x30

  hsd->State = HAL_SD_STATE_READY;
  hsd->Context = SD_CONTEXT_NONE;

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
 800df6c:	68f8      	ldr	r0, [r7, #12]
 800df6e:	f004 f829 	bl	8011fc4 <HAL_SD_RxCpltCallback>
  hsd->RxCpltCallback(hsd);
#else
 800df72:	bf00      	nop
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
	...

0800df7c <SD_DMAError>:
}

/**
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  */
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df88:	617b      	str	r3, [r7, #20]
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7f8 fb4c 	bl	8006628 <HAL_DMA_GetError>
 800df90:	4603      	mov	r3, r0
 800df92:	2b02      	cmp	r3, #2
 800df94:	d03e      	beq.n	800e014 <SD_DMAError+0x98>

  /* if DMA error is FIFO error ignore it */
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df9c:	613b      	str	r3, [r7, #16]
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa4:	60fb      	str	r3, [r7, #12]
  {
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d002      	beq.n	800dfb2 <SD_DMAError+0x36>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d12d      	bne.n	800e00e <SD_DMAError+0x92>
    RxErrorCode = hsd->hdmarx->ErrorCode;
    TxErrorCode = hsd->hdmatx->ErrorCode;  
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a19      	ldr	r2, [pc, #100]	; (800e01c <SD_DMAError+0xa0>)
 800dfb8:	639a      	str	r2, [r3, #56]	; 0x38
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dfc8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	639a      	str	r2, [r3, #56]	; 0x38
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
 800dfd6:	6978      	ldr	r0, [r7, #20]
 800dfd8:	f7ff ff62 	bl	800dea0 <HAL_SD_GetCardState>
 800dfdc:	60b8      	str	r0, [r7, #8]

 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2b06      	cmp	r3, #6
 800dfe2:	d002      	beq.n	800dfea <SD_DMAError+0x6e>
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	2b05      	cmp	r3, #5
 800dfe8:	d10a      	bne.n	800e000 <SD_DMAError+0x84>
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
      CardState = HAL_SD_GetCardState(hsd);
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f002 fc18 	bl	8010824 <SDMMC_CmdStopTransfer>
 800dff4:	4602      	mov	r2, r0
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	431a      	orrs	r2, r3
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	639a      	str	r2, [r3, #56]	; 0x38
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	2201      	movs	r2, #1
 800e004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	2200      	movs	r2, #0
 800e00c:	631a      	str	r2, [r3, #48]	; 0x30

      hsd->State= HAL_SD_STATE_READY;
      hsd->Context = SD_CONTEXT_NONE;
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
 800e00e:	6978      	ldr	r0, [r7, #20]
 800e010:	f7ff fcd2 	bl	800d9b8 <HAL_SD_ErrorCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e014:	bf00      	nop
 800e016:	3718      	adds	r7, #24
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	004005ff 	.word	0x004005ff

0800e020 <SD_InitCard>:
}

/**
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
 800e020:	b5b0      	push	{r4, r5, r7, lr}
 800e022:	b094      	sub	sp, #80	; 0x50
 800e024:	af04      	add	r7, sp, #16
 800e026:	6078      	str	r0, [r7, #4]
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e028:	2301      	movs	r3, #1
 800e02a:	81fb      	strh	r3, [r7, #14]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4618      	mov	r0, r3
 800e032:	f002 fac9 	bl	80105c8 <SDMMC_GetPowerState>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d102      	bne.n	800e042 <SD_InitCard+0x22>

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e03c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e040:	e0b6      	b.n	800e1b0 <SD_InitCard+0x190>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e046:	2b03      	cmp	r3, #3
 800e048:	d02f      	beq.n	800e0aa <SD_InitCard+0x8a>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4618      	mov	r0, r3
 800e050:	f002 fcf3 	bl	8010a3a <SDMMC_CmdSendCID>
 800e054:	63f8      	str	r0, [r7, #60]	; 0x3c
  {
 800e056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <SD_InitCard+0x40>
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05e:	e0a7      	b.n	800e1b0 <SD_InitCard+0x190>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
    }
    else
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2100      	movs	r1, #0
 800e066:	4618      	mov	r0, r3
 800e068:	f002 faf3 	bl	8010652 <SDMMC_GetResponse>
 800e06c:	4602      	mov	r2, r0
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	675a      	str	r2, [r3, #116]	; 0x74
    {
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2104      	movs	r1, #4
 800e078:	4618      	mov	r0, r3
 800e07a:	f002 faea 	bl	8010652 <SDMMC_GetResponse>
 800e07e:	4602      	mov	r2, r0
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get Card identification number data */
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2108      	movs	r1, #8
 800e08a:	4618      	mov	r0, r3
 800e08c:	f002 fae1 	bl	8010652 <SDMMC_GetResponse>
 800e090:	4602      	mov	r2, r0
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	210c      	movs	r1, #12
 800e09c:	4618      	mov	r0, r3
 800e09e:	f002 fad8 	bl	8010652 <SDMMC_GetResponse>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
    }
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d00d      	beq.n	800e0ce <SD_InitCard+0xae>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
  {
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f107 020e 	add.w	r2, r7, #14
 800e0ba:	4611      	mov	r1, r2
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f002 fcf9 	bl	8010ab4 <SDMMC_CmdSetRelAdd>
 800e0c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    /* Send CMD3 SET_REL_ADDR with argument 0 */
 800e0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <SD_InitCard+0xae>
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0cc:	e070      	b.n	800e1b0 <SD_InitCard+0x190>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0d2:	2b03      	cmp	r3, #3
 800e0d4:	d036      	beq.n	800e144 <SD_InitCard+0x124>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e0d6:	89fb      	ldrh	r3, [r7, #14]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	651a      	str	r2, [r3, #80]	; 0x50
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0e6:	041b      	lsls	r3, r3, #16
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	f002 fcc3 	bl	8010a76 <SDMMC_CmdSendCSD>
 800e0f0:	63f8      	str	r0, [r7, #60]	; 0x3c

 800e0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <SD_InitCard+0xdc>
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fa:	e059      	b.n	800e1b0 <SD_InitCard+0x190>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
    }
    else
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2100      	movs	r1, #0
 800e102:	4618      	mov	r0, r3
 800e104:	f002 faa5 	bl	8010652 <SDMMC_GetResponse>
 800e108:	4602      	mov	r2, r0
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	665a      	str	r2, [r3, #100]	; 0x64
    {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2104      	movs	r1, #4
 800e114:	4618      	mov	r0, r3
 800e116:	f002 fa9c 	bl	8010652 <SDMMC_GetResponse>
 800e11a:	4602      	mov	r2, r0
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Get Card Specific Data */
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2108      	movs	r1, #8
 800e126:	4618      	mov	r0, r3
 800e128:	f002 fa93 	bl	8010652 <SDMMC_GetResponse>
 800e12c:	4602      	mov	r2, r0
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	210c      	movs	r1, #12
 800e138:	4618      	mov	r0, r3
 800e13a:	f002 fa8a 	bl	8010652 <SDMMC_GetResponse>
 800e13e:	4602      	mov	r2, r0
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
    }
  }
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2104      	movs	r1, #4
 800e14a:	4618      	mov	r0, r3
 800e14c:	f002 fa81 	bl	8010652 <SDMMC_GetResponse>
 800e150:	4603      	mov	r3, r0
 800e152:	0d1a      	lsrs	r2, r3, #20
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e158:	f107 0310 	add.w	r3, r7, #16
 800e15c:	4619      	mov	r1, r3
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7ff fc34 	bl	800d9cc <HAL_SD_GetCardCSD>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <SD_InitCard+0x150>

  /* Get CSD parameters */
 800e16a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e16e:	e01f      	b.n	800e1b0 <SD_InitCard+0x190>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
  }
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6819      	ldr	r1, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e178:	041b      	lsls	r3, r3, #16
 800e17a:	461a      	mov	r2, r3
 800e17c:	f04f 0300 	mov.w	r3, #0
 800e180:	4608      	mov	r0, r1
 800e182:	f002 fb71 	bl	8010868 <SDMMC_CmdSelDesel>
 800e186:	63f8      	str	r0, [r7, #60]	; 0x3c

 800e188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <SD_InitCard+0x172>
  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e190:	e00e      	b.n	800e1b0 <SD_InitCard+0x190>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    return errorstate;
  }
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681d      	ldr	r5, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	466c      	mov	r4, sp
 800e19a:	f103 0210 	add.w	r2, r3, #16
 800e19e:	ca07      	ldmia	r2, {r0, r1, r2}
 800e1a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	f002 f9c5 	bl	8010538 <SDMMC_Init>

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800e1ae:	2300      	movs	r3, #0

 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3740      	adds	r7, #64	; 0x40
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bdb0      	pop	{r4, r5, r7, pc}

0800e1b8 <SD_PowerON>:
/**
  * @brief  Enquires cards about their operating voltage and configures clock
  *         controls and stores SD information that will be needed in future
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b086      	sub	sp, #24
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  */
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	60bb      	str	r3, [r7, #8]
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	617b      	str	r3, [r7, #20]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	613b      	str	r3, [r7, #16]
{
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f002 fb6c 	bl	80108ae <SDMMC_CmdGoIdleState>
 800e1d6:	60f8      	str	r0, [r7, #12]

 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <SD_PowerON+0x2a>
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	e072      	b.n	800e2c8 <SD_PowerON+0x110>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    return errorstate;
  }
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f002 fb7f 	bl	80108ea <SDMMC_CmdOperCond>
 800e1ec:	60f8      	str	r0, [r7, #12]

 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00d      	beq.n	800e210 <SD_PowerON+0x58>
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	649a      	str	r2, [r3, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
  {
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f002 fb55 	bl	80108ae <SDMMC_CmdGoIdleState>
 800e204:	60f8      	str	r0, [r7, #12]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d004      	beq.n	800e216 <SD_PowerON+0x5e>
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	e05b      	b.n	800e2c8 <SD_PowerON+0x110>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
    }

  }
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	649a      	str	r2, [r3, #72]	; 0x48
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d137      	bne.n	800e28e <SD_PowerON+0xd6>
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2100      	movs	r1, #0
 800e224:	4618      	mov	r0, r3
 800e226:	f002 fb7f 	bl	8010928 <SDMMC_CmdAppCommand>
 800e22a:	60f8      	str	r0, [r7, #12]
  {
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d02d      	beq.n	800e28e <SD_PowerON+0xd6>
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e236:	e047      	b.n	800e2c8 <SD_PowerON+0x110>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }
  }
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2100      	movs	r1, #0
 800e23e:	4618      	mov	r0, r3
 800e240:	f002 fb72 	bl	8010928 <SDMMC_CmdAppCommand>
 800e244:	60f8      	str	r0, [r7, #12]
  {
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <SD_PowerON+0x98>
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	e03b      	b.n	800e2c8 <SD_PowerON+0x110>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
    }
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	491e      	ldr	r1, [pc, #120]	; (800e2d0 <SD_PowerON+0x118>)
 800e256:	4618      	mov	r0, r3
 800e258:	f002 fb88 	bl	801096c <SDMMC_CmdAppOperCommand>
 800e25c:	60f8      	str	r0, [r7, #12]

 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <SD_PowerON+0xb2>
    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e268:	e02e      	b.n	800e2c8 <SD_PowerON+0x110>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2100      	movs	r1, #0
 800e270:	4618      	mov	r0, r3
 800e272:	f002 f9ee 	bl	8010652 <SDMMC_GetResponse>
 800e276:	6178      	str	r0, [r7, #20]

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	0fdb      	lsrs	r3, r3, #31
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d101      	bne.n	800e284 <SD_PowerON+0xcc>
 800e280:	2301      	movs	r3, #1
 800e282:	e000      	b.n	800e286 <SD_PowerON+0xce>
 800e284:	2300      	movs	r3, #0
 800e286:	613b      	str	r3, [r7, #16]

    /* Get operating voltage*/
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	3301      	adds	r3, #1
 800e28c:	60bb      	str	r3, [r7, #8]
  }
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e294:	4293      	cmp	r3, r2
 800e296:	d802      	bhi.n	800e29e <SD_PowerON+0xe6>
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d0cc      	beq.n	800e238 <SD_PowerON+0x80>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);

    count++;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d902      	bls.n	800e2ae <SD_PowerON+0xf6>
  }

 800e2a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2ac:	e00c      	b.n	800e2c8 <SD_PowerON+0x110>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d003      	beq.n	800e2c0 <SD_PowerON+0x108>
  }

 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	645a      	str	r2, [r3, #68]	; 0x44
 800e2be:	e002      	b.n	800e2c6 <SD_PowerON+0x10e>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
  }
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
  }
 800e2c6:	2300      	movs	r3, #0

 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	c1100000 	.word	0xc1100000

0800e2d4 <SD_SendStatus>:
/**
  * @brief  Returns the current card's status.
  * @param  hsd: Pointer to SD handle
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d102      	bne.n	800e2ea <SD_SendStatus+0x16>
  uint32_t errorstate;

 800e2e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e2e8:	e018      	b.n	800e31c <SD_SendStatus+0x48>
  if(pCardStatus == NULL)
  {
    return HAL_SD_ERROR_PARAM;
  }
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f2:	041b      	lsls	r3, r3, #16
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f002 fbfd 	bl	8010af6 <SDMMC_CmdSendStatus>
 800e2fc:	60f8      	str	r0, [r7, #12]

 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d001      	beq.n	800e308 <SD_SendStatus+0x34>
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	e009      	b.n	800e31c <SD_SendStatus+0x48>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    return errorstate;
  }
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2100      	movs	r1, #0
 800e30e:	4618      	mov	r0, r3
 800e310:	f002 f99f 	bl	8010652 <SDMMC_GetResponse>
 800e314:	4602      	mov	r2, r0
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	601a      	str	r2, [r3, #0]

  /* Get SD card status */
 800e31a:	2300      	movs	r3, #0
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e31c:	4618      	mov	r0, r3
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <SD_WideBus_Enable>:
}

/**
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  */
 800e32c:	2300      	movs	r3, #0
 800e32e:	60fb      	str	r3, [r7, #12]
 800e330:	2300      	movs	r3, #0
 800e332:	613b      	str	r3, [r7, #16]
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
  uint32_t scr[2U] = {0U, 0U};
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2100      	movs	r1, #0
 800e33a:	4618      	mov	r0, r3
 800e33c:	f002 f989 	bl	8010652 <SDMMC_GetResponse>
 800e340:	4603      	mov	r3, r0
 800e342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e34a:	d102      	bne.n	800e352 <SD_WideBus_Enable+0x2e>
  uint32_t errorstate;

 800e34c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e350:	e02f      	b.n	800e3b2 <SD_WideBus_Enable+0x8e>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }
 800e352:	f107 030c 	add.w	r3, r7, #12
 800e356:	4619      	mov	r1, r3
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 f879 	bl	800e450 <SD_FindSCR>
 800e35e:	6178      	str	r0, [r7, #20]

 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d001      	beq.n	800e36a <SD_WideBus_Enable+0x46>
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	e023      	b.n	800e3b2 <SD_WideBus_Enable+0x8e>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    return errorstate;
  }
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d01c      	beq.n	800e3ae <SD_WideBus_Enable+0x8a>

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e37c:	041b      	lsls	r3, r3, #16
 800e37e:	4619      	mov	r1, r3
 800e380:	4610      	mov	r0, r2
 800e382:	f002 fad1 	bl	8010928 <SDMMC_CmdAppCommand>
 800e386:	6178      	str	r0, [r7, #20]
  {
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d001      	beq.n	800e392 <SD_WideBus_Enable+0x6e>
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	e00f      	b.n	800e3b2 <SD_WideBus_Enable+0x8e>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
    }
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2102      	movs	r1, #2
 800e398:	4618      	mov	r0, r3
 800e39a:	f002 fb0b 	bl	80109b4 <SDMMC_CmdBusWidth>
 800e39e:	6178      	str	r0, [r7, #20]

 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d001      	beq.n	800e3aa <SD_WideBus_Enable+0x86>
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	e003      	b.n	800e3b2 <SD_WideBus_Enable+0x8e>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	e001      	b.n	800e3b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
  }
 800e3ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  else
  {
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3718      	adds	r7, #24
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <SD_WideBus_Disable>:
}

/**
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b086      	sub	sp, #24
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
  */
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60fb      	str	r3, [r7, #12]
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	613b      	str	r3, [r7, #16]
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
  uint32_t scr[2U] = {0U, 0U};
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f002 f93e 	bl	8010652 <SDMMC_GetResponse>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3e0:	d102      	bne.n	800e3e8 <SD_WideBus_Disable+0x2e>
  uint32_t errorstate;

 800e3e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3e6:	e02f      	b.n	800e448 <SD_WideBus_Disable+0x8e>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }
 800e3e8:	f107 030c 	add.w	r3, r7, #12
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f82e 	bl	800e450 <SD_FindSCR>
 800e3f4:	6178      	str	r0, [r7, #20]

 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <SD_WideBus_Disable+0x46>
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	e023      	b.n	800e448 <SD_WideBus_Disable+0x8e>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    return errorstate;
  }
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e406:	2b00      	cmp	r3, #0
 800e408:	d01c      	beq.n	800e444 <SD_WideBus_Disable+0x8a>

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e412:	041b      	lsls	r3, r3, #16
 800e414:	4619      	mov	r1, r3
 800e416:	4610      	mov	r0, r2
 800e418:	f002 fa86 	bl	8010928 <SDMMC_CmdAppCommand>
 800e41c:	6178      	str	r0, [r7, #20]
  {
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d001      	beq.n	800e428 <SD_WideBus_Disable+0x6e>
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	e00f      	b.n	800e448 <SD_WideBus_Disable+0x8e>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
    }
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2100      	movs	r1, #0
 800e42e:	4618      	mov	r0, r3
 800e430:	f002 fac0 	bl	80109b4 <SDMMC_CmdBusWidth>
 800e434:	6178      	str	r0, [r7, #20]

 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <SD_WideBus_Disable+0x86>
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	e003      	b.n	800e448 <SD_WideBus_Disable+0x8e>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
 800e440:	2300      	movs	r3, #0
 800e442:	e001      	b.n	800e448 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
  }
 800e444:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  else
  {
 800e448:	4618      	mov	r0, r3
 800e44a:	3718      	adds	r7, #24
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <SD_FindSCR>:

/**
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
 800e450:	b590      	push	{r4, r7, lr}
 800e452:	b08f      	sub	sp, #60	; 0x3c
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e45a:	f7f6 ff3f 	bl	80052dc <HAL_GetTick>
 800e45e:	6338      	str	r0, [r7, #48]	; 0x30
  SDMMC_DataInitTypeDef config;
 800e460:	2300      	movs	r3, #0
 800e462:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t errorstate;
 800e464:	2300      	movs	r3, #0
 800e466:	60bb      	str	r3, [r7, #8]
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = HAL_GetTick();
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
  uint32_t *scr = pSCR;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2108      	movs	r1, #8
 800e476:	4618      	mov	r0, r3
 800e478:	f002 f92a 	bl	80106d0 <SDMMC_CmdBlockLength>
 800e47c:	62b8      	str	r0, [r7, #40]	; 0x28

 800e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e480:	2b00      	cmp	r3, #0
 800e482:	d001      	beq.n	800e488 <SD_FindSCR+0x38>
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	e0b2      	b.n	800e5ee <SD_FindSCR+0x19e>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    return errorstate;
  }
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e490:	041b      	lsls	r3, r3, #16
 800e492:	4619      	mov	r1, r3
 800e494:	4610      	mov	r0, r2
 800e496:	f002 fa47 	bl	8010928 <SDMMC_CmdAppCommand>
 800e49a:	62b8      	str	r0, [r7, #40]	; 0x28

 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <SD_FindSCR+0x56>
  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a4:	e0a3      	b.n	800e5ee <SD_FindSCR+0x19e>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    return errorstate;
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4aa:	613b      	str	r3, [r7, #16]
  }
 800e4ac:	2308      	movs	r3, #8
 800e4ae:	617b      	str	r3, [r7, #20]

 800e4b0:	2330      	movs	r3, #48	; 0x30
 800e4b2:	61bb      	str	r3, [r7, #24]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	61fb      	str	r3, [r7, #28]
  config.DataLength    = 8U;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	623b      	str	r3, [r7, #32]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	627b      	str	r3, [r7, #36]	; 0x24
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f107 0210 	add.w	r2, r7, #16
 800e4c8:	4611      	mov	r1, r2
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f002 f8d4 	bl	8010678 <SDMMC_ConfigData>
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f002 fa8f 	bl	80109f8 <SDMMC_CmdSendSCR>
 800e4da:	62b8      	str	r0, [r7, #40]	; 0x28

 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d02a      	beq.n	800e538 <SD_FindSCR+0xe8>
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	e083      	b.n	800e5ee <SD_FindSCR+0x19e>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    return errorstate;
  }

 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00f      	beq.n	800e514 <SD_FindSCR+0xc4>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6819      	ldr	r1, [r3, #0]
 800e4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	f107 0208 	add.w	r2, r7, #8
 800e500:	18d4      	adds	r4, r2, r3
 800e502:	4608      	mov	r0, r1
 800e504:	f002 f844 	bl	8010590 <SDMMC_ReadFIFO>
 800e508:	4603      	mov	r3, r0
 800e50a:	6023      	str	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50e:	3301      	adds	r3, #1
 800e510:	637b      	str	r3, [r7, #52]	; 0x34
 800e512:	e006      	b.n	800e522 <SD_FindSCR+0xd2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e51a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d012      	beq.n	800e548 <SD_FindSCR+0xf8>
      index++;
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
    {
      break;
 800e522:	f7f6 fedb 	bl	80052dc <HAL_GetTick>
 800e526:	4602      	mov	r2, r0
 800e528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e530:	d102      	bne.n	800e538 <SD_FindSCR+0xe8>
    }

 800e532:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e536:	e05a      	b.n	800e5ee <SD_FindSCR+0x19e>
    return errorstate;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e53e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e542:	2b00      	cmp	r3, #0
 800e544:	d0cf      	beq.n	800e4e6 <SD_FindSCR+0x96>
 800e546:	e000      	b.n	800e54a <SD_FindSCR+0xfa>
    }
 800e548:	bf00      	nop
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e550:	f003 0308 	and.w	r3, r3, #8
 800e554:	2b00      	cmp	r3, #0
 800e556:	d005      	beq.n	800e564 <SD_FindSCR+0x114>
  }

 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2208      	movs	r2, #8
 800e55e:	639a      	str	r2, [r3, #56]	; 0x38
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
  {
 800e560:	2308      	movs	r3, #8
 800e562:	e044      	b.n	800e5ee <SD_FindSCR+0x19e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e56a:	f003 0302 	and.w	r3, r3, #2
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d005      	beq.n	800e57e <SD_FindSCR+0x12e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2202      	movs	r2, #2
 800e578:	639a      	str	r2, [r3, #56]	; 0x38
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
  {
 800e57a:	2302      	movs	r3, #2
 800e57c:	e037      	b.n	800e5ee <SD_FindSCR+0x19e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);

 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e584:	f003 0320 	and.w	r3, r3, #32
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d005      	beq.n	800e598 <SD_FindSCR+0x148>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2220      	movs	r2, #32
 800e592:	639a      	str	r2, [r3, #56]	; 0x38
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
 800e594:	2320      	movs	r3, #32
 800e596:	e02a      	b.n	800e5ee <SD_FindSCR+0x19e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);

    return HAL_SD_ERROR_RX_OVERRUN;
  }
  else
  {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e5a0:	639a      	str	r2, [r3, #56]	; 0x38
    /* No error flag set */
    /* Clear all the static flags */
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	061a      	lsls	r2, r3, #24
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	021b      	lsls	r3, r3, #8
 800e5aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5ae:	431a      	orrs	r2, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	0a1b      	lsrs	r3, r3, #8
 800e5b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    /* Clear all the static flags */
 800e5b8:	431a      	orrs	r2, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	0e1b      	lsrs	r3, r3, #24
 800e5be:	431a      	orrs	r2, r3
    /* Clear all the static flags */
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	601a      	str	r2, [r3, #0]

 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	3304      	adds	r3, #4
 800e5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	061a      	lsls	r2, r3, #24
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	021b      	lsls	r3, r3, #8
 800e5d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	0a1b      	lsrs	r3, r3, #8
 800e5dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e5e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	0e1b      	lsrs	r3, r3, #24
 800e5e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	601a      	str	r2, [r3, #0]
    scr++;
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

 800e5ec:	2300      	movs	r3, #0
  }
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	373c      	adds	r7, #60	; 0x3c
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd90      	pop	{r4, r7, pc}

0800e5f6 <HAL_SDRAM_Init>:
  * @{
  */

/**
  * @brief  Performs the SDRAM device initialization sequence.
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b082      	sub	sp, #8
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d101      	bne.n	800e60a <HAL_SDRAM_Init+0x14>
  * @retval HAL status
  */
 800e606:	2301      	movs	r3, #1
 800e608:	e025      	b.n	800e656 <HAL_SDRAM_Init+0x60>
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	d106      	bne.n	800e624 <HAL_SDRAM_Init+0x2e>
  if (hsdram == NULL)
  {
    return HAL_ERROR;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    {
      hsdram->MspInitCallback = HAL_SDRAM_MspInit;
    }
    hsdram->RefreshErrorCallback = HAL_SDRAM_RefreshErrorCallback;
    hsdram->DmaXferCpltCallback = HAL_SDRAM_DMA_XferCpltCallback;
    hsdram->DmaXferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7f4 fc66 	bl	8002ef0 <HAL_SDRAM_MspInit>

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2202      	movs	r2, #2
 800e628:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3304      	adds	r3, #4
 800e634:	4619      	mov	r1, r3
 800e636:	4610      	mov	r0, r2
 800e638:	f001 fe54 	bl	80102e4 <FMC_SDRAM_Init>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6818      	ldr	r0, [r3, #0]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	461a      	mov	r2, r3
 800e646:	6839      	ldr	r1, [r7, #0]
 800e648:	f001 febe 	bl	80103c8 <FMC_SDRAM_Timing_Init>

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM timing Interface */
 800e654:	2300      	movs	r3, #0
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e656:	4618      	mov	r0, r3
 800e658:	3708      	adds	r7, #8
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <HAL_SDRAM_SendCommand>:
      case HAL_SDRAM_DMA_XFER_CPLT_CB_ID :
        hsdram->DmaXferCpltCallback = pCallback;
        break;
      case HAL_SDRAM_DMA_XFER_ERR_CB_ID :
        hsdram->DmaXferErrorCallback = pCallback;
        break;
 800e65e:	b580      	push	{r7, lr}
 800e660:	b084      	sub	sp, #16
 800e662:	af00      	add	r7, sp, #0
 800e664:	60f8      	str	r0, [r7, #12]
 800e666:	60b9      	str	r1, [r7, #8]
 800e668:	607a      	str	r2, [r7, #4]
      default :
        /* update return status */
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e670:	b2db      	uxtb	r3, r3
 800e672:	2b02      	cmp	r3, #2
 800e674:	d101      	bne.n	800e67a <HAL_SDRAM_SendCommand+0x1c>
        status =  HAL_ERROR;
        break;
 800e676:	2302      	movs	r3, #2
 800e678:	e018      	b.n	800e6ac <HAL_SDRAM_SendCommand+0x4e>
    }
  }
  else
  {
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2202      	movs	r2, #2
 800e67e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    /* update return status */
    status =  HAL_ERROR;
  }
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	68b9      	ldr	r1, [r7, #8]
 800e68a:	4618      	mov	r0, r3
 800e68c:	f001 ff1c 	bl	80104c8 <FMC_SDRAM_SendCommand>

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b02      	cmp	r3, #2
 800e696:	d104      	bne.n	800e6a2 <HAL_SDRAM_SendCommand+0x44>
  return status;
}
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2205      	movs	r2, #5
 800e69c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e6a0:	e003      	b.n	800e6aa <HAL_SDRAM_SendCommand+0x4c>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

/**
  * @}
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  */

/** @defgroup SDRAM_Exported_Functions_Group3 Control functions
 800e6aa:	2300      	movs	r3, #0
  *  @brief   management functions
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <HAL_SDRAM_ProgramRefreshRate>:
  ==============================================================================
  [..]
    This subsection provides a set of functions allowing to control dynamically
    the SDRAM interface.

@endverbatim
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  * @{
  */
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	d101      	bne.n	800e6ce <HAL_SDRAM_ProgramRefreshRate+0x1a>

/**
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	e00e      	b.n	800e6ec <HAL_SDRAM_ProgramRefreshRate+0x38>
  * @brief  Enables dynamically SDRAM write protection.
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2202      	movs	r2, #2
 800e6d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  */
HAL_StatusTypeDef HAL_SDRAM_WriteProtection_Enable(SDRAM_HandleTypeDef *hsdram)
{
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	6839      	ldr	r1, [r7, #0]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f001 ff17 	bl	8010510 <FMC_SDRAM_ProgramRefreshRate>
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
  {
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    return HAL_BUSY;
  }
 800e6ea:	2300      	movs	r3, #0
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d101      	bne.n	800e706 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800e702:	2301      	movs	r3, #1
 800e704:	e04c      	b.n	800e7a0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d106      	bne.n	800e720 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7f4 f91c 	bl	8002958 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2202      	movs	r2, #2
 800e724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f022 0203 	bic.w	r2, r2, #3
 800e736:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	4b19      	ldr	r3, [pc, #100]	; (800e7a8 <HAL_SPDIFRX_Init+0xb4>)
 800e744:	4013      	ands	r3, r2
 800e746:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800e750:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800e756:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800e75c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800e762:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800e768:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800e76e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800e774:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800e77a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800e780:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	4313      	orrs	r3, r2
 800e786:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	fff88407 	.word	0xfff88407

0800e7ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e049      	b.n	800e852 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7f4 f902 	bl	80029dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2202      	movs	r2, #2
 800e7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	f000 fc22 	bl	800f034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
	...

0800e85c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d001      	beq.n	800e874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	e054      	b.n	800e91e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2202      	movs	r2, #2
 800e878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68da      	ldr	r2, [r3, #12]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f042 0201 	orr.w	r2, r2, #1
 800e88a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a26      	ldr	r2, [pc, #152]	; (800e92c <HAL_TIM_Base_Start_IT+0xd0>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d022      	beq.n	800e8dc <HAL_TIM_Base_Start_IT+0x80>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e89e:	d01d      	beq.n	800e8dc <HAL_TIM_Base_Start_IT+0x80>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a22      	ldr	r2, [pc, #136]	; (800e930 <HAL_TIM_Base_Start_IT+0xd4>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d018      	beq.n	800e8dc <HAL_TIM_Base_Start_IT+0x80>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a21      	ldr	r2, [pc, #132]	; (800e934 <HAL_TIM_Base_Start_IT+0xd8>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d013      	beq.n	800e8dc <HAL_TIM_Base_Start_IT+0x80>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a1f      	ldr	r2, [pc, #124]	; (800e938 <HAL_TIM_Base_Start_IT+0xdc>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d00e      	beq.n	800e8dc <HAL_TIM_Base_Start_IT+0x80>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4a1e      	ldr	r2, [pc, #120]	; (800e93c <HAL_TIM_Base_Start_IT+0xe0>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d009      	beq.n	800e8dc <HAL_TIM_Base_Start_IT+0x80>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a1c      	ldr	r2, [pc, #112]	; (800e940 <HAL_TIM_Base_Start_IT+0xe4>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d004      	beq.n	800e8dc <HAL_TIM_Base_Start_IT+0x80>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4a1b      	ldr	r2, [pc, #108]	; (800e944 <HAL_TIM_Base_Start_IT+0xe8>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d115      	bne.n	800e908 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	689a      	ldr	r2, [r3, #8]
 800e8e2:	4b19      	ldr	r3, [pc, #100]	; (800e948 <HAL_TIM_Base_Start_IT+0xec>)
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b06      	cmp	r3, #6
 800e8ec:	d015      	beq.n	800e91a <HAL_TIM_Base_Start_IT+0xbe>
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8f4:	d011      	beq.n	800e91a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f042 0201 	orr.w	r2, r2, #1
 800e904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e906:	e008      	b.n	800e91a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f042 0201 	orr.w	r2, r2, #1
 800e916:	601a      	str	r2, [r3, #0]
 800e918:	e000      	b.n	800e91c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e91a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3714      	adds	r7, #20
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	40010000 	.word	0x40010000
 800e930:	40000400 	.word	0x40000400
 800e934:	40000800 	.word	0x40000800
 800e938:	40000c00 	.word	0x40000c00
 800e93c:	40010400 	.word	0x40010400
 800e940:	40014000 	.word	0x40014000
 800e944:	40001800 	.word	0x40001800
 800e948:	00010007 	.word	0x00010007

0800e94c <HAL_TIM_PWM_Init>:
/** @defgroup TIM_Exported_Functions_Group3 TIM PWM functions
  *  @brief    TIM PWM functions
  *
@verbatim
  ==============================================================================
                          ##### TIM PWM functions #####
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  ==============================================================================
  [..]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d101      	bne.n	800e95e <HAL_TIM_PWM_Init+0x12>
    This section provides functions allowing to:
    (+) Initialize and configure the TIM PWM.
 800e95a:	2301      	movs	r3, #1
 800e95c:	e049      	b.n	800e9f2 <HAL_TIM_PWM_Init+0xa6>
    (+) Start the TIM PWM and enable interrupt.
    (+) Stop the TIM PWM and disable interrupt.
    (+) Start the TIM PWM and enable DMA transfer.
    (+) Stop the TIM PWM and disable DMA transfer.

@endverbatim
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e964:	b2db      	uxtb	r3, r3
 800e966:	2b00      	cmp	r3, #0
 800e968:	d106      	bne.n	800e978 <HAL_TIM_PWM_Init+0x2c>
  * @{
  */
/**
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7f4 f8a0 	bl	8002ab8 <HAL_TIM_PWM_MspInit>
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2202      	movs	r2, #2
 800e97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	3304      	adds	r3, #4
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f000 fb52 	bl	800f034 <TIM_Base_SetConfig>

  if (htim->State == HAL_TIM_STATE_RESET)
  {
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;

 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2201      	movs	r2, #1
 800e99c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);

 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (htim->PWM_MspInitCallback == NULL)
    {
 800e9f0:	2300      	movs	r3, #0
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <HAL_TIM_IRQHandler>:
}

/**
  * @brief  Stops the TIM Encoder Interface in DMA mode.
  * @param  htim TIM Encoder Interface handle
  * @param  Channel TIM Channels to be enabled
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b082      	sub	sp, #8
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	f003 0302 	and.w	r3, r3, #2
 800ea0c:	2b02      	cmp	r3, #2
 800ea0e:	d122      	bne.n	800ea56 <HAL_TIM_IRQHandler+0x5c>
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	f003 0302 	and.w	r3, r3, #2
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	d11b      	bne.n	800ea56 <HAL_TIM_IRQHandler+0x5c>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f06f 0202 	mvn.w	r2, #2
 800ea26:	611a      	str	r2, [r3, #16]
{
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	771a      	strb	r2, [r3, #28]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	699b      	ldr	r3, [r3, #24]
 800ea34:	f003 0303 	and.w	r3, r3, #3
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <HAL_TIM_IRQHandler+0x4a>
  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fadb 	bl	800eff8 <HAL_TIM_IC_CaptureCallback>
 800ea42:	e005      	b.n	800ea50 <HAL_TIM_IRQHandler+0x56>
  }
  else if (Channel == TIM_CHANNEL_2)
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);

    /* Disable the capture compare DMA Request 2 */
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 facd 	bl	800efe4 <HAL_TIM_OC_DelayElapsedCallback>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 fade 	bl	800f00c <HAL_TIM_PWM_PulseFinishedCallback>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
  }
  else
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	771a      	strb	r2, [r3, #28]
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);

    /* Disable the capture compare DMA Request 1 and 2 */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	f003 0304 	and.w	r3, r3, #4
 800ea60:	2b04      	cmp	r3, #4
 800ea62:	d122      	bne.n	800eaaa <HAL_TIM_IRQHandler+0xb0>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	f003 0304 	and.w	r3, r3, #4
 800ea6e:	2b04      	cmp	r3, #4
 800ea70:	d11b      	bne.n	800eaaa <HAL_TIM_IRQHandler+0xb0>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f06f 0204 	mvn.w	r2, #4
 800ea7a:	611a      	str	r2, [r3, #16]
  }
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2202      	movs	r2, #2
 800ea80:	771a      	strb	r2, [r3, #28]

  /* Disable the Peripheral */
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d003      	beq.n	800ea98 <HAL_TIM_IRQHandler+0x9e>
  __HAL_TIM_DISABLE(htim);

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
  {
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 fab1 	bl	800eff8 <HAL_TIM_IC_CaptureCallback>
 800ea96:	e005      	b.n	800eaa4 <HAL_TIM_IRQHandler+0xaa>
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
  }
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 faa3 	bl	800efe4 <HAL_TIM_OC_DelayElapsedCallback>

 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 fab4 	bl	800f00c <HAL_TIM_PWM_PulseFinishedCallback>
  /* Return function status */
  return HAL_OK;
}
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	771a      	strb	r2, [r3, #28]

/**
  * @}
  */
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	f003 0308 	and.w	r3, r3, #8
 800eab4:	2b08      	cmp	r3, #8
 800eab6:	d122      	bne.n	800eafe <HAL_TIM_IRQHandler+0x104>
/** @defgroup TIM_Exported_Functions_Group7 TIM IRQ handler management
  *  @brief    TIM IRQ handler management
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	f003 0308 	and.w	r3, r3, #8
 800eac2:	2b08      	cmp	r3, #8
 800eac4:	d11b      	bne.n	800eafe <HAL_TIM_IRQHandler+0x104>
  *
@verbatim
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f06f 0208 	mvn.w	r2, #8
 800eace:	611a      	str	r2, [r3, #16]
  ==============================================================================
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2204      	movs	r2, #4
 800ead4:	771a      	strb	r2, [r3, #28]
                        ##### IRQ handler management #####
  ==============================================================================
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	69db      	ldr	r3, [r3, #28]
 800eadc:	f003 0303 	and.w	r3, r3, #3
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d003      	beq.n	800eaec <HAL_TIM_IRQHandler+0xf2>
  [..]
    This section provides Timer IRQ handler function.

@endverbatim
  * @{
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 fa87 	bl	800eff8 <HAL_TIM_IC_CaptureCallback>
 800eaea:	e005      	b.n	800eaf8 <HAL_TIM_IRQHandler+0xfe>
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 fa79 	bl	800efe4 <HAL_TIM_OC_DelayElapsedCallback>
  {
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fa8a 	bl	800f00c <HAL_TIM_PWM_PulseFinishedCallback>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
      {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	771a      	strb	r2, [r3, #28]
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	691b      	ldr	r3, [r3, #16]
 800eb04:	f003 0310 	and.w	r3, r3, #16
 800eb08:	2b10      	cmp	r3, #16
 800eb0a:	d122      	bne.n	800eb52 <HAL_TIM_IRQHandler+0x158>
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
        {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	f003 0310 	and.w	r3, r3, #16
 800eb16:	2b10      	cmp	r3, #16
 800eb18:	d11b      	bne.n	800eb52 <HAL_TIM_IRQHandler+0x158>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f06f 0210 	mvn.w	r2, #16
 800eb22:	611a      	str	r2, [r3, #16]
#else
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2208      	movs	r2, #8
 800eb28:	771a      	strb	r2, [r3, #28]
          HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	69db      	ldr	r3, [r3, #28]
 800eb30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d003      	beq.n	800eb40 <HAL_TIM_IRQHandler+0x146>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 fa5d 	bl	800eff8 <HAL_TIM_IC_CaptureCallback>
 800eb3e:	e005      	b.n	800eb4c <HAL_TIM_IRQHandler+0x152>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 fa4f 	bl	800efe4 <HAL_TIM_OC_DelayElapsedCallback>
  }
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 fa60 	bl	800f00c <HAL_TIM_PWM_PulseFinishedCallback>
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	771a      	strb	r2, [r3, #28]
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	f003 0301 	and.w	r3, r3, #1
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d10e      	bne.n	800eb7e <HAL_TIM_IRQHandler+0x184>
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d107      	bne.n	800eb7e <HAL_TIM_IRQHandler+0x184>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f06f 0201 	mvn.w	r2, #1
 800eb76:	611a      	str	r2, [r3, #16]
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7f3 fa89 	bl	8002090 <HAL_TIM_PeriodElapsedCallback>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	691b      	ldr	r3, [r3, #16]
 800eb84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb88:	2b80      	cmp	r3, #128	; 0x80
 800eb8a:	d10e      	bne.n	800ebaa <HAL_TIM_IRQHandler+0x1b0>
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb96:	2b80      	cmp	r3, #128	; 0x80
 800eb98:	d107      	bne.n	800ebaa <HAL_TIM_IRQHandler+0x1b0>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eba2:	611a      	str	r2, [r3, #16]
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 fef3 	bl	800f990 <HAL_TIMEx_BreakCallback>
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebb8:	d10e      	bne.n	800ebd8 <HAL_TIM_IRQHandler+0x1de>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebc4:	2b80      	cmp	r3, #128	; 0x80
 800ebc6:	d107      	bne.n	800ebd8 <HAL_TIM_IRQHandler+0x1de>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ebd0:	611a      	str	r2, [r3, #16]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 fee6 	bl	800f9a4 <HAL_TIMEx_Break2Callback>
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebe2:	2b40      	cmp	r3, #64	; 0x40
 800ebe4:	d10e      	bne.n	800ec04 <HAL_TIM_IRQHandler+0x20a>
      /* Output compare event */
      else
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebf0:	2b40      	cmp	r3, #64	; 0x40
 800ebf2:	d107      	bne.n	800ec04 <HAL_TIM_IRQHandler+0x20a>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ebfc:	611a      	str	r2, [r3, #16]
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 fa0e 	bl	800f020 <HAL_TIM_TriggerCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	691b      	ldr	r3, [r3, #16]
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b20      	cmp	r3, #32
 800ec10:	d10e      	bne.n	800ec30 <HAL_TIM_IRQHandler+0x236>
  }
  /* Capture compare 4 event */
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	f003 0320 	and.w	r3, r3, #32
 800ec1c:	2b20      	cmp	r3, #32
 800ec1e:	d107      	bne.n	800ec30 <HAL_TIM_IRQHandler+0x236>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f06f 0220 	mvn.w	r2, #32
 800ec28:	611a      	str	r2, [r3, #16]
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 fea6 	bl	800f97c <HAL_TIMEx_CommutCallback>
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800ec30:	bf00      	nop
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]

  if (Channel == TIM_CHANNEL_1)
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
                      sConfig->ICPolarity,
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d101      	bne.n	800ec52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ec4e:	2302      	movs	r3, #2
 800ec50:	e0fd      	b.n	800ee4e <HAL_TIM_PWM_ConfigChannel+0x216>
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2b14      	cmp	r3, #20
 800ec5e:	f200 80f0 	bhi.w	800ee42 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ec62:	a201      	add	r2, pc, #4	; (adr r2, 800ec68 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ec64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec68:	0800ecbd 	.word	0x0800ecbd
 800ec6c:	0800ee43 	.word	0x0800ee43
 800ec70:	0800ee43 	.word	0x0800ee43
 800ec74:	0800ee43 	.word	0x0800ee43
 800ec78:	0800ecfd 	.word	0x0800ecfd
 800ec7c:	0800ee43 	.word	0x0800ee43
 800ec80:	0800ee43 	.word	0x0800ee43
 800ec84:	0800ee43 	.word	0x0800ee43
 800ec88:	0800ed3f 	.word	0x0800ed3f
 800ec8c:	0800ee43 	.word	0x0800ee43
 800ec90:	0800ee43 	.word	0x0800ee43
 800ec94:	0800ee43 	.word	0x0800ee43
 800ec98:	0800ed7f 	.word	0x0800ed7f
 800ec9c:	0800ee43 	.word	0x0800ee43
 800eca0:	0800ee43 	.word	0x0800ee43
 800eca4:	0800ee43 	.word	0x0800ee43
 800eca8:	0800edc1 	.word	0x0800edc1
 800ecac:	0800ee43 	.word	0x0800ee43
 800ecb0:	0800ee43 	.word	0x0800ee43
 800ecb4:	0800ee43 	.word	0x0800ee43
 800ecb8:	0800ee01 	.word	0x0800ee01
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
  }
  else if (Channel == TIM_CHANNEL_2)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68b9      	ldr	r1, [r7, #8]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f000 fa56 	bl	800f174 <TIM_OC1_SetConfig>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	699a      	ldr	r2, [r3, #24]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f042 0208 	orr.w	r2, r2, #8
 800ecd6:	619a      	str	r2, [r3, #24]

    TIM_TI2_SetConfig(htim->Instance,
                      sConfig->ICPolarity,
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	699a      	ldr	r2, [r3, #24]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f022 0204 	bic.w	r2, r2, #4
 800ece6:	619a      	str	r2, [r3, #24]
                      sConfig->ICSelection,
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	6999      	ldr	r1, [r3, #24]
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	691a      	ldr	r2, [r3, #16]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	430a      	orrs	r2, r1
 800ecf8:	619a      	str	r2, [r3, #24]
                      sConfig->ICFilter);
 800ecfa:	e0a3      	b.n	800ee44 <HAL_TIM_PWM_ConfigChannel+0x20c>

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
  }
  else if (Channel == TIM_CHANNEL_3)
  {
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68b9      	ldr	r1, [r7, #8]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 faa8 	bl	800f258 <TIM_OC2_SetConfig>
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	699a      	ldr	r2, [r3, #24]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed16:	619a      	str	r2, [r3, #24]
    TIM_TI3_SetConfig(htim->Instance,
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	699a      	ldr	r2, [r3, #24]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed26:	619a      	str	r2, [r3, #24]
                      sConfig->ICFilter);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6999      	ldr	r1, [r3, #24]
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	021a      	lsls	r2, r3, #8
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	430a      	orrs	r2, r1
 800ed3a:	619a      	str	r2, [r3, #24]

 800ed3c:	e082      	b.n	800ee44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
  }
  else if (Channel == TIM_CHANNEL_4)
  {
    /* TI4 Configuration */
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	68b9      	ldr	r1, [r7, #8]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f000 faff 	bl	800f348 <TIM_OC3_SetConfig>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	69da      	ldr	r2, [r3, #28]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f042 0208 	orr.w	r2, r2, #8
 800ed58:	61da      	str	r2, [r3, #28]
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	69da      	ldr	r2, [r3, #28]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f022 0204 	bic.w	r2, r2, #4
 800ed68:	61da      	str	r2, [r3, #28]

 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	69d9      	ldr	r1, [r3, #28]
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	691a      	ldr	r2, [r3, #16]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	430a      	orrs	r2, r1
 800ed7a:	61da      	str	r2, [r3, #28]
    /* Reset the IC4PSC Bits */
 800ed7c:	e062      	b.n	800ee44 <HAL_TIM_PWM_ConfigChannel+0x20c>
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
  }
  else
  {
    status = HAL_ERROR;
  }
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	68b9      	ldr	r1, [r7, #8]
 800ed84:	4618      	mov	r0, r3
 800ed86:	f000 fb55 	bl	800f434 <TIM_OC4_SetConfig>

  __HAL_UNLOCK(htim);

 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	69da      	ldr	r2, [r3, #28]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed98:	61da      	str	r2, [r3, #28]
  return status;
}

 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	69da      	ldr	r2, [r3, #28]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eda8:	61da      	str	r2, [r3, #28]
/**
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	69d9      	ldr	r1, [r3, #28]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	691b      	ldr	r3, [r3, #16]
 800edb4:	021a      	lsls	r2, r3, #8
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	430a      	orrs	r2, r1
 800edbc:	61da      	str	r2, [r3, #28]
  * @brief  Initializes the TIM PWM  channels according to the specified
 800edbe:	e041      	b.n	800ee44 <HAL_TIM_PWM_ConfigChannel+0x20c>
  * @param  Channel TIM Channels to be configured
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	68b9      	ldr	r1, [r7, #8]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f000 fb8c 	bl	800f4e4 <TIM_OC5_SetConfig>
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f042 0208 	orr.w	r2, r2, #8
 800edda:	655a      	str	r2, [r3, #84]	; 0x54
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f022 0204 	bic.w	r2, r2, #4
 800edea:	655a      	str	r2, [r3, #84]	; 0x54
                                            uint32_t Channel)
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	691a      	ldr	r2, [r3, #16]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	430a      	orrs	r2, r1
 800edfc:	655a      	str	r2, [r3, #84]	; 0x54
{
 800edfe:	e021      	b.n	800ee44 <HAL_TIM_PWM_ConfigChannel+0x20c>
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68b9      	ldr	r1, [r7, #8]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fbbe 	bl	800f588 <TIM_OC6_SetConfig>
  __HAL_LOCK(htim);

  switch (Channel)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee1a:	655a      	str	r2, [r3, #84]	; 0x54
  {
    case TIM_CHANNEL_1:
    {
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee2a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Check the parameters */
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	021a      	lsls	r2, r3, #8
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	655a      	str	r2, [r3, #84]	; 0x54
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ee40:	e000      	b.n	800ee44 <HAL_TIM_PWM_ConfigChannel+0x20c>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);

 800ee42:	bf00      	nop
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;

 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ee4c:	2300      	movs	r3, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop

0800ee58 <HAL_TIM_ConfigClockSource>:
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]

  htim->State = HAL_TIM_STATE_BUSY;

  switch (sClearInputConfig->ClearInputSource)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d101      	bne.n	800ee70 <HAL_TIM_ConfigClockSource+0x18>
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	e0b3      	b.n	800efd8 <HAL_TIM_ConfigClockSource+0x180>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  {
    case TIM_CLEARINPUTSOURCE_NONE:
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
      break;
    }

 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	60fb      	str	r3, [r7, #12]
    case TIM_CLEARINPUTSOURCE_ETR:
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	4b55      	ldr	r3, [pc, #340]	; (800efe0 <HAL_TIM_ConfigClockSource+0x188>)
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	60fb      	str	r3, [r7, #12]
    {
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee96:	60fb      	str	r3, [r7, #12]
      /* Check the parameters */
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	68fa      	ldr	r2, [r7, #12]
 800ee9e:	609a      	str	r2, [r3, #8]
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eea8:	d03e      	beq.n	800ef28 <HAL_TIM_ConfigClockSource+0xd0>
 800eeaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eeae:	f200 8087 	bhi.w	800efc0 <HAL_TIM_ConfigClockSource+0x168>
 800eeb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eeb6:	f000 8085 	beq.w	800efc4 <HAL_TIM_ConfigClockSource+0x16c>
 800eeba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eebe:	d87f      	bhi.n	800efc0 <HAL_TIM_ConfigClockSource+0x168>
 800eec0:	2b70      	cmp	r3, #112	; 0x70
 800eec2:	d01a      	beq.n	800eefa <HAL_TIM_ConfigClockSource+0xa2>
 800eec4:	2b70      	cmp	r3, #112	; 0x70
 800eec6:	d87b      	bhi.n	800efc0 <HAL_TIM_ConfigClockSource+0x168>
 800eec8:	2b60      	cmp	r3, #96	; 0x60
 800eeca:	d050      	beq.n	800ef6e <HAL_TIM_ConfigClockSource+0x116>
 800eecc:	2b60      	cmp	r3, #96	; 0x60
 800eece:	d877      	bhi.n	800efc0 <HAL_TIM_ConfigClockSource+0x168>
 800eed0:	2b50      	cmp	r3, #80	; 0x50
 800eed2:	d03c      	beq.n	800ef4e <HAL_TIM_ConfigClockSource+0xf6>
 800eed4:	2b50      	cmp	r3, #80	; 0x50
 800eed6:	d873      	bhi.n	800efc0 <HAL_TIM_ConfigClockSource+0x168>
 800eed8:	2b40      	cmp	r3, #64	; 0x40
 800eeda:	d058      	beq.n	800ef8e <HAL_TIM_ConfigClockSource+0x136>
 800eedc:	2b40      	cmp	r3, #64	; 0x40
 800eede:	d86f      	bhi.n	800efc0 <HAL_TIM_ConfigClockSource+0x168>
 800eee0:	2b30      	cmp	r3, #48	; 0x30
 800eee2:	d064      	beq.n	800efae <HAL_TIM_ConfigClockSource+0x156>
 800eee4:	2b30      	cmp	r3, #48	; 0x30
 800eee6:	d86b      	bhi.n	800efc0 <HAL_TIM_ConfigClockSource+0x168>
 800eee8:	2b20      	cmp	r3, #32
 800eeea:	d060      	beq.n	800efae <HAL_TIM_ConfigClockSource+0x156>
 800eeec:	2b20      	cmp	r3, #32
 800eeee:	d867      	bhi.n	800efc0 <HAL_TIM_ConfigClockSource+0x168>
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d05c      	beq.n	800efae <HAL_TIM_ConfigClockSource+0x156>
 800eef4:	2b10      	cmp	r3, #16
 800eef6:	d05a      	beq.n	800efae <HAL_TIM_ConfigClockSource+0x156>
        }
        break;
      }
      default:
        break;
    }
 800eef8:	e062      	b.n	800efc0 <HAL_TIM_ConfigClockSource+0x168>
      status = HAL_ERROR;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6818      	ldr	r0, [r3, #0]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	6899      	ldr	r1, [r3, #8]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	685a      	ldr	r2, [r3, #4]
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	f000 fc0b 	bl	800f724 <TIM_ETR_SetConfig>
    switch (Channel)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	60fb      	str	r3, [r7, #12]
    {
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ef1c:	60fb      	str	r3, [r7, #12]
      {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	609a      	str	r2, [r3, #8]
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800ef26:	e04e      	b.n	800efc6 <HAL_TIM_ConfigClockSource+0x16e>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6818      	ldr	r0, [r3, #0]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	6899      	ldr	r1, [r3, #8]
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	685a      	ldr	r2, [r3, #4]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	f000 fbf4 	bl	800f724 <TIM_ETR_SetConfig>
        else
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	689a      	ldr	r2, [r3, #8]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef4a:	609a      	str	r2, [r3, #8]
        {
 800ef4c:	e03b      	b.n	800efc6 <HAL_TIM_ConfigClockSource+0x16e>
        }
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6818      	ldr	r0, [r3, #0]
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	6859      	ldr	r1, [r3, #4]
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	f000 fb68 	bl	800f630 <TIM_TI1_ConfigInputStage>
          /* Disable the OCREF clear feature for Channel 3 */
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2150      	movs	r1, #80	; 0x50
 800ef66:	4618      	mov	r0, r3
 800ef68:	f000 fbc1 	bl	800f6ee <TIM_ITRx_SetConfig>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800ef6c:	e02b      	b.n	800efc6 <HAL_TIM_ConfigClockSource+0x16e>
        {
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	6859      	ldr	r1, [r3, #4]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	f000 fb87 	bl	800f68e <TIM_TI2_ConfigInputStage>
        }
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2160      	movs	r1, #96	; 0x60
 800ef86:	4618      	mov	r0, r3
 800ef88:	f000 fbb1 	bl	800f6ee <TIM_ITRx_SetConfig>
        break;
 800ef8c:	e01b      	b.n	800efc6 <HAL_TIM_ConfigClockSource+0x16e>
          CLEAR_BIT(htim->Instance->CCMR3, TIM_CCMR3_OC5CE);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6818      	ldr	r0, [r3, #0]
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	6859      	ldr	r1, [r3, #4]
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	f000 fb48 	bl	800f630 <TIM_TI1_ConfigInputStage>
      }
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2140      	movs	r1, #64	; 0x40
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fba1 	bl	800f6ee <TIM_ITRx_SetConfig>
      case TIM_CHANNEL_6:
 800efac:	e00b      	b.n	800efc6 <HAL_TIM_ConfigClockSource+0x16e>
        }
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4619      	mov	r1, r3
 800efb8:	4610      	mov	r0, r2
 800efba:	f000 fb98 	bl	800f6ee <TIM_ITRx_SetConfig>
        break;
 800efbe:	e002      	b.n	800efc6 <HAL_TIM_ConfigClockSource+0x16e>
    }
 800efc0:	bf00      	nop
 800efc2:	e000      	b.n	800efc6 <HAL_TIM_ConfigClockSource+0x16e>
      {
 800efc4:	bf00      	nop
  }

 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2201      	movs	r2, #1
 800efca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;

 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  __HAL_UNLOCK(htim);

 800efd6:	2300      	movs	r3, #0
  return status;
 800efd8:	4618      	mov	r0, r3
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	fffeff88 	.word	0xfffeff88

0800efe4 <HAL_TIM_OC_DelayElapsedCallback>:
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  htim->State = HAL_TIM_STATE_BUSY;

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
  {
    htim->State = HAL_TIM_STATE_READY;
    __HAL_UNLOCK(htim);
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <HAL_TIM_IC_CaptureCallback>:

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 800f000:	bf00      	nop
 800f002:	370c      	adds	r7, #12
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <HAL_TIM_PWM_PulseFinishedCallback>:
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
      tmpreg =  htim->Instance->CCR1;

      break;
    }
    case TIM_CHANNEL_2:
    {
 800f014:	bf00      	nop
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <HAL_TIM_TriggerCallback>:
      break;
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;

      break;
    }
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <TIM_Base_SetConfig>:
  else
  {
    /* nothing to do */
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	60fb      	str	r3, [r7, #12]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a40      	ldr	r2, [pc, #256]	; (800f148 <TIM_Base_SetConfig+0x114>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d013      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f052:	d00f      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a3d      	ldr	r2, [pc, #244]	; (800f14c <TIM_Base_SetConfig+0x118>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d00b      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a3c      	ldr	r2, [pc, #240]	; (800f150 <TIM_Base_SetConfig+0x11c>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d007      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a3b      	ldr	r2, [pc, #236]	; (800f154 <TIM_Base_SetConfig+0x120>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d003      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a3a      	ldr	r2, [pc, #232]	; (800f158 <TIM_Base_SetConfig+0x124>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d108      	bne.n	800f086 <TIM_Base_SetConfig+0x52>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
}

 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f07a:	60fb      	str	r3, [r7, #12]
/**
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	4313      	orrs	r3, r2
 800f084:	60fb      	str	r3, [r7, #12]
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a2f      	ldr	r2, [pc, #188]	; (800f148 <TIM_Base_SetConfig+0x114>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d02b      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f094:	d027      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a2c      	ldr	r2, [pc, #176]	; (800f14c <TIM_Base_SetConfig+0x118>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d023      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4a2b      	ldr	r2, [pc, #172]	; (800f150 <TIM_Base_SetConfig+0x11c>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d01f      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a2a      	ldr	r2, [pc, #168]	; (800f154 <TIM_Base_SetConfig+0x120>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d01b      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4a29      	ldr	r2, [pc, #164]	; (800f158 <TIM_Base_SetConfig+0x124>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d017      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a28      	ldr	r2, [pc, #160]	; (800f15c <TIM_Base_SetConfig+0x128>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d013      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a27      	ldr	r2, [pc, #156]	; (800f160 <TIM_Base_SetConfig+0x12c>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d00f      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a26      	ldr	r2, [pc, #152]	; (800f164 <TIM_Base_SetConfig+0x130>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00b      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a25      	ldr	r2, [pc, #148]	; (800f168 <TIM_Base_SetConfig+0x134>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d007      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a24      	ldr	r2, [pc, #144]	; (800f16c <TIM_Base_SetConfig+0x138>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d003      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a23      	ldr	r2, [pc, #140]	; (800f170 <TIM_Base_SetConfig+0x13c>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d108      	bne.n	800f0f8 <TIM_Base_SetConfig+0xc4>
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0ec:	60fb      	str	r3, [r7, #12]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	695b      	ldr	r3, [r3, #20]
 800f102:	4313      	orrs	r3, r2
 800f104:	60fb      	str	r3, [r7, #12]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	601a      	str	r2, [r3, #0]
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	689a      	ldr	r2, [r3, #8]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	62da      	str	r2, [r3, #44]	; 0x2c
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	629a      	str	r2, [r3, #40]	; 0x28
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a0a      	ldr	r2, [pc, #40]	; (800f148 <TIM_Base_SetConfig+0x114>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d003      	beq.n	800f12c <TIM_Base_SetConfig+0xf8>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4a0c      	ldr	r2, [pc, #48]	; (800f158 <TIM_Base_SetConfig+0x124>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d103      	bne.n	800f134 <TIM_Base_SetConfig+0x100>

    if (hdma->Init.Mode == DMA_NORMAL)
    {
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	691a      	ldr	r2, [r3, #16]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	631a      	str	r2, [r3, #48]	; 0x30
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2201      	movs	r2, #1
 800f138:	615a      	str	r2, [r3, #20]
  {
 800f13a:	bf00      	nop
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	40010000 	.word	0x40010000
 800f14c:	40000400 	.word	0x40000400
 800f150:	40000800 	.word	0x40000800
 800f154:	40000c00 	.word	0x40000c00
 800f158:	40010400 	.word	0x40010400
 800f15c:	40014000 	.word	0x40014000
 800f160:	40014400 	.word	0x40014400
 800f164:	40014800 	.word	0x40014800
 800f168:	40001800 	.word	0x40001800
 800f16c:	40001c00 	.word	0x40001c00
 800f170:	40002000 	.word	0x40002000

0800f174 <TIM_OC1_SetConfig>:
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f174:	b480      	push	{r7}
 800f176:	b087      	sub	sp, #28
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;

    if (hdma->Init.Mode == DMA_NORMAL)
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	f023 0201 	bic.w	r2, r3, #1
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	621a      	str	r2, [r3, #32]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
    }
  }
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a1b      	ldr	r3, [r3, #32]
 800f18e:	617b      	str	r3, [r7, #20]
  else
  {
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	613b      	str	r3, [r7, #16]
    /* nothing to do */
  }

 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	699b      	ldr	r3, [r3, #24]
 800f19a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	4b2b      	ldr	r3, [pc, #172]	; (800f24c <TIM_OC1_SetConfig+0xd8>)
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	60fb      	str	r3, [r7, #12]
  HAL_TIM_IC_CaptureCallback(htim);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f023 0303 	bic.w	r3, r3, #3
 800f1aa:	60fb      	str	r3, [r7, #12]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	60fb      	str	r3, [r7, #12]
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
}

 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	f023 0302 	bic.w	r3, r3, #2
 800f1bc:	617b      	str	r3, [r7, #20]
/**
  * @brief  TIM DMA Capture half complete callback.
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	617b      	str	r3, [r7, #20]
  * @param  hdma pointer to DMA handle.
  * @retval None
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a21      	ldr	r2, [pc, #132]	; (800f250 <TIM_OC1_SetConfig+0xdc>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d003      	beq.n	800f1d8 <TIM_OC1_SetConfig+0x64>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a20      	ldr	r2, [pc, #128]	; (800f254 <TIM_OC1_SetConfig+0xe0>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d10c      	bne.n	800f1f2 <TIM_OC1_SetConfig+0x7e>
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	f023 0308 	bic.w	r3, r3, #8
 800f1de:	617b      	str	r3, [r7, #20]
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	697a      	ldr	r2, [r7, #20]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	617b      	str	r3, [r7, #20]
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	f023 0304 	bic.w	r3, r3, #4
 800f1f0:	617b      	str	r3, [r7, #20]
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
  }
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a16      	ldr	r2, [pc, #88]	; (800f250 <TIM_OC1_SetConfig+0xdc>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d003      	beq.n	800f202 <TIM_OC1_SetConfig+0x8e>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a15      	ldr	r2, [pc, #84]	; (800f254 <TIM_OC1_SetConfig+0xe0>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d111      	bne.n	800f226 <TIM_OC1_SetConfig+0xb2>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f208:	613b      	str	r3, [r7, #16]
  }
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f210:	613b      	str	r3, [r7, #16]
  else
  {
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	695b      	ldr	r3, [r3, #20]
 800f216:	693a      	ldr	r2, [r7, #16]
 800f218:	4313      	orrs	r3, r2
 800f21a:	613b      	str	r3, [r7, #16]
    /* nothing to do */
  }
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	699b      	ldr	r3, [r3, #24]
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	4313      	orrs	r3, r2
 800f224:	613b      	str	r3, [r7, #16]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	693a      	ldr	r2, [r7, #16]
 800f22a:	605a      	str	r2, [r3, #4]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	619a      	str	r2, [r3, #24]
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
}

 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	685a      	ldr	r2, [r3, #4]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	635a      	str	r2, [r3, #52]	; 0x34
/**
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	697a      	ldr	r2, [r7, #20]
 800f23e:	621a      	str	r2, [r3, #32]
  * @retval None
 800f240:	bf00      	nop
 800f242:	371c      	adds	r7, #28
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	fffeff8f 	.word	0xfffeff8f
 800f250:	40010000 	.word	0x40010000
 800f254:	40010400 	.word	0x40010400

0800f258 <TIM_OC2_SetConfig>:
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
  {
    htim->State = HAL_TIM_STATE_READY;
  }
 800f258:	b480      	push	{r7}
 800f25a:	b087      	sub	sp, #28
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6a1b      	ldr	r3, [r3, #32]
 800f266:	f023 0210 	bic.w	r2, r3, #16
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	621a      	str	r2, [r3, #32]
}

/**
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	617b      	str	r3, [r7, #20]
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	613b      	str	r3, [r7, #16]
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	699b      	ldr	r3, [r3, #24]
 800f27e:	60fb      	str	r3, [r7, #12]
{
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	4b2e      	ldr	r3, [pc, #184]	; (800f33c <TIM_OC2_SetConfig+0xe4>)
 800f284:	4013      	ands	r3, r2
 800f286:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f28e:	60fb      	str	r3, [r7, #12]
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	021b      	lsls	r3, r3, #8
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	4313      	orrs	r3, r2
 800f29a:	60fb      	str	r3, [r7, #12]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}

 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	f023 0320 	bic.w	r3, r3, #32
 800f2a2:	617b      	str	r3, [r7, #20]
/**
  * @brief  TIM DMA Trigger callback.
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	011b      	lsls	r3, r3, #4
 800f2aa:	697a      	ldr	r2, [r7, #20]
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	617b      	str	r3, [r7, #20]
  * @param  hdma pointer to DMA handle.
  * @retval None
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	4a23      	ldr	r2, [pc, #140]	; (800f340 <TIM_OC2_SetConfig+0xe8>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d003      	beq.n	800f2c0 <TIM_OC2_SetConfig+0x68>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4a22      	ldr	r2, [pc, #136]	; (800f344 <TIM_OC2_SetConfig+0xec>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d10d      	bne.n	800f2dc <TIM_OC2_SetConfig+0x84>
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2c6:	617b      	str	r3, [r7, #20]
  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
  {
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	011b      	lsls	r3, r3, #4
 800f2ce:	697a      	ldr	r2, [r7, #20]
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	617b      	str	r3, [r7, #20]
    htim->State = HAL_TIM_STATE_READY;
  }
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2da:	617b      	str	r3, [r7, #20]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4a18      	ldr	r2, [pc, #96]	; (800f340 <TIM_OC2_SetConfig+0xe8>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d003      	beq.n	800f2ec <TIM_OC2_SetConfig+0x94>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4a17      	ldr	r2, [pc, #92]	; (800f344 <TIM_OC2_SetConfig+0xec>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d113      	bne.n	800f314 <TIM_OC2_SetConfig+0xbc>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}

/**
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2f2:	613b      	str	r3, [r7, #16]
  * @retval None
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2fa:	613b      	str	r3, [r7, #16]
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	695b      	ldr	r3, [r3, #20]
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	693a      	ldr	r2, [r7, #16]
 800f304:	4313      	orrs	r3, r2
 800f306:	613b      	str	r3, [r7, #16]
{
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	699b      	ldr	r3, [r3, #24]
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	693a      	ldr	r2, [r7, #16]
 800f310:	4313      	orrs	r3, r2
 800f312:	613b      	str	r3, [r7, #16]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	693a      	ldr	r2, [r7, #16]
 800f318:	605a      	str	r2, [r3, #4]
  HAL_TIM_TriggerHalfCpltCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	619a      	str	r2, [r3, #24]

/**
  * @brief  Time Base configuration
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	639a      	str	r2, [r3, #56]	; 0x38
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	697a      	ldr	r2, [r7, #20]
 800f32c:	621a      	str	r2, [r3, #32]
  */
 800f32e:	bf00      	nop
 800f330:	371c      	adds	r7, #28
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	feff8fff 	.word	0xfeff8fff
 800f340:	40010000 	.word	0x40010000
 800f344:	40010400 	.word	0x40010400

0800f348 <TIM_OC3_SetConfig>:
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
 800f348:	b480      	push	{r7}
 800f34a:	b087      	sub	sp, #28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6a1b      	ldr	r3, [r3, #32]
 800f356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	621a      	str	r2, [r3, #32]
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6a1b      	ldr	r3, [r3, #32]
 800f362:	617b      	str	r3, [r7, #20]
  }

 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	613b      	str	r3, [r7, #16]
  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	69db      	ldr	r3, [r3, #28]
 800f36e:	60fb      	str	r3, [r7, #12]
  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	4b2d      	ldr	r3, [pc, #180]	; (800f428 <TIM_OC3_SetConfig+0xe0>)
 800f374:	4013      	ands	r3, r2
 800f376:	60fb      	str	r3, [r7, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f023 0303 	bic.w	r3, r3, #3
 800f37e:	60fb      	str	r3, [r7, #12]

  /* Set the Prescaler value */
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	4313      	orrs	r3, r2
 800f388:	60fb      	str	r3, [r7, #12]
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f390:	617b      	str	r3, [r7, #20]
  {
    /* Set the Repetition Counter value */
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	021b      	lsls	r3, r3, #8
 800f398:	697a      	ldr	r2, [r7, #20]
 800f39a:	4313      	orrs	r3, r2
 800f39c:	617b      	str	r3, [r7, #20]
    TIMx->RCR = Structure->RepetitionCounter;
  }
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a22      	ldr	r2, [pc, #136]	; (800f42c <TIM_OC3_SetConfig+0xe4>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d003      	beq.n	800f3ae <TIM_OC3_SetConfig+0x66>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a21      	ldr	r2, [pc, #132]	; (800f430 <TIM_OC3_SetConfig+0xe8>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d10d      	bne.n	800f3ca <TIM_OC3_SetConfig+0x82>

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
}
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3b4:	617b      	str	r3, [r7, #20]

/**
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	021b      	lsls	r3, r3, #8
 800f3bc:	697a      	ldr	r2, [r7, #20]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	617b      	str	r3, [r7, #20]
  * @brief  Timer Output Compare 1 configuration
  * @param  TIMx to select the TIM peripheral
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3c8:	617b      	str	r3, [r7, #20]
  * @param  OC_Config The output configuration structure
  * @retval None
  */
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4a17      	ldr	r2, [pc, #92]	; (800f42c <TIM_OC3_SetConfig+0xe4>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d003      	beq.n	800f3da <TIM_OC3_SetConfig+0x92>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4a16      	ldr	r2, [pc, #88]	; (800f430 <TIM_OC3_SetConfig+0xe8>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d113      	bne.n	800f402 <TIM_OC3_SetConfig+0xba>
{
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3e0:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	695b      	ldr	r3, [r3, #20]
 800f3ee:	011b      	lsls	r3, r3, #4
 800f3f0:	693a      	ldr	r2, [r7, #16]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	613b      	str	r3, [r7, #16]
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	011b      	lsls	r3, r3, #4
 800f3fc:	693a      	ldr	r2, [r7, #16]
 800f3fe:	4313      	orrs	r3, r2
 800f400:	613b      	str	r3, [r7, #16]
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	693a      	ldr	r2, [r7, #16]
 800f406:	605a      	str	r2, [r3, #4]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	61da      	str	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	685a      	ldr	r2, [r3, #4]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	697a      	ldr	r2, [r7, #20]
 800f41a:	621a      	str	r2, [r3, #32]
  /* Set the Output Compare Polarity */
 800f41c:	bf00      	nop
 800f41e:	371c      	adds	r7, #28
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	fffeff8f 	.word	0xfffeff8f
 800f42c:	40010000 	.word	0x40010000
 800f430:	40010400 	.word	0x40010400

0800f434 <TIM_OC4_SetConfig>:
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f434:	b480      	push	{r7}
 800f436:	b087      	sub	sp, #28
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a1b      	ldr	r3, [r3, #32]
 800f442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Check parameters */
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a1b      	ldr	r3, [r3, #32]
 800f44e:	613b      	str	r3, [r7, #16]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	617b      	str	r3, [r7, #20]

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	60fb      	str	r3, [r7, #12]
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	4b1e      	ldr	r3, [pc, #120]	; (800f4d8 <TIM_OC4_SetConfig+0xa4>)
 800f460:	4013      	ands	r3, r2
 800f462:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f46a:	60fb      	str	r3, [r7, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
  }

 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	021b      	lsls	r3, r3, #8
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	4313      	orrs	r3, r2
 800f476:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f47e:	613b      	str	r3, [r7, #16]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	031b      	lsls	r3, r3, #12
 800f486:	693a      	ldr	r2, [r7, #16]
 800f488:	4313      	orrs	r3, r2
 800f48a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare Register value */
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a13      	ldr	r2, [pc, #76]	; (800f4dc <TIM_OC4_SetConfig+0xa8>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d003      	beq.n	800f49c <TIM_OC4_SetConfig+0x68>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a12      	ldr	r2, [pc, #72]	; (800f4e0 <TIM_OC4_SetConfig+0xac>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d109      	bne.n	800f4b0 <TIM_OC4_SetConfig+0x7c>
  TIMx->CCR1 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}

 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4a2:	617b      	str	r3, [r7, #20]
/**
  * @brief  Timer Output Compare 2 configuration
  * @param  TIMx to select the TIM peripheral
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	695b      	ldr	r3, [r3, #20]
 800f4a8:	019b      	lsls	r3, r3, #6
 800f4aa:	697a      	ldr	r2, [r7, #20]
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	617b      	str	r3, [r7, #20]
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	605a      	str	r2, [r3, #4]
{
  uint32_t tmpccmrx;
  uint32_t tmpccer;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	61da      	str	r2, [r3, #28]
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	685a      	ldr	r2, [r3, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	641a      	str	r2, [r3, #64]	; 0x40
  TIMx->CCER &= ~TIM_CCER_CC2E;

  /* Get the TIMx CCER register value */
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	693a      	ldr	r2, [r7, #16]
 800f4c8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800f4ca:	bf00      	nop
 800f4cc:	371c      	adds	r7, #28
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	feff8fff 	.word	0xfeff8fff
 800f4dc:	40010000 	.word	0x40010000
 800f4e0:	40010400 	.word	0x40010400

0800f4e4 <TIM_OC5_SetConfig>:
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

 800f4e4:	b480      	push	{r7}
 800f4e6:	b087      	sub	sp, #28
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6a1b      	ldr	r3, [r3, #32]
 800f4f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	621a      	str	r2, [r3, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6a1b      	ldr	r3, [r3, #32]
 800f4fe:	613b      	str	r3, [r7, #16]
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	617b      	str	r3, [r7, #20]

    /* Reset the Output N Polarity level */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f50a:	60fb      	str	r3, [r7, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f50c:	68fa      	ldr	r2, [r7, #12]
 800f50e:	4b1b      	ldr	r3, [pc, #108]	; (800f57c <TIM_OC5_SetConfig+0x98>)
 800f510:	4013      	ands	r3, r2
 800f512:	60fb      	str	r3, [r7, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	60fb      	str	r3, [r7, #12]

  }

 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f524:	613b      	str	r3, [r7, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
  {
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	689b      	ldr	r3, [r3, #8]
 800f52a:	041b      	lsls	r3, r3, #16
 800f52c:	693a      	ldr	r2, [r7, #16]
 800f52e:	4313      	orrs	r3, r2
 800f530:	613b      	str	r3, [r7, #16]
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4a12      	ldr	r2, [pc, #72]	; (800f580 <TIM_OC5_SetConfig+0x9c>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d003      	beq.n	800f542 <TIM_OC5_SetConfig+0x5e>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a11      	ldr	r2, [pc, #68]	; (800f584 <TIM_OC5_SetConfig+0xa0>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d109      	bne.n	800f556 <TIM_OC5_SetConfig+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f548:	617b      	str	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	695b      	ldr	r3, [r3, #20]
 800f54e:	021b      	lsls	r3, r3, #8
 800f550:	697a      	ldr	r2, [r7, #20]
 800f552:	4313      	orrs	r3, r2
 800f554:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	697a      	ldr	r2, [r7, #20]
 800f55a:	605a      	str	r2, [r3, #4]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }

 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	655a      	str	r2, [r3, #84]	; 0x54
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	685a      	ldr	r2, [r3, #4]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	659a      	str	r2, [r3, #88]	; 0x58
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	693a      	ldr	r2, [r7, #16]
 800f56e:	621a      	str	r2, [r3, #32]
  /* Set the Capture Compare Register value */
 800f570:	bf00      	nop
 800f572:	371c      	adds	r7, #28
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr
 800f57c:	fffeff8f 	.word	0xfffeff8f
 800f580:	40010000 	.word	0x40010000
 800f584:	40010400 	.word	0x40010400

0800f588 <TIM_OC6_SetConfig>:
}

/**
  * @brief  Timer Output Compare 3 configuration
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
 800f588:	b480      	push	{r7}
 800f58a:	b087      	sub	sp, #28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
  uint32_t tmpccmrx;
  uint32_t tmpccer;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6a1b      	ldr	r3, [r3, #32]
 800f596:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	621a      	str	r2, [r3, #32]
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6a1b      	ldr	r3, [r3, #32]
 800f5a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC3E;

 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ae:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	4b1c      	ldr	r3, [pc, #112]	; (800f624 <TIM_OC6_SetConfig+0x9c>)
 800f5b4:	4013      	ands	r3, r2
 800f5b6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	021b      	lsls	r3, r3, #8
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f5ca:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	051b      	lsls	r3, r3, #20
 800f5d2:	693a      	ldr	r2, [r7, #16]
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	613b      	str	r3, [r7, #16]
  tmpccmrx |= OC_Config->OCMode;

 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a13      	ldr	r2, [pc, #76]	; (800f628 <TIM_OC6_SetConfig+0xa0>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d003      	beq.n	800f5e8 <TIM_OC6_SetConfig+0x60>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a12      	ldr	r2, [pc, #72]	; (800f62c <TIM_OC6_SetConfig+0xa4>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d109      	bne.n	800f5fc <TIM_OC6_SetConfig+0x74>
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f5ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (OC_Config->OCPolarity << 8U);

 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	695b      	ldr	r3, [r3, #20]
 800f5f4:	029b      	lsls	r3, r3, #10
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	617b      	str	r3, [r7, #20]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	605a      	str	r2, [r3, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	655a      	str	r2, [r3, #84]	; 0x54
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	685a      	ldr	r2, [r3, #4]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	621a      	str	r2, [r3, #32]
  {
 800f616:	bf00      	nop
 800f618:	371c      	adds	r7, #28
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	feff8fff 	.word	0xfeff8fff
 800f628:	40010000 	.word	0x40010000
 800f62c:	40010400 	.word	0x40010400

0800f630 <TIM_TI1_ConfigInputStage>:
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
 800f630:	b480      	push	{r7}
 800f632:	b087      	sub	sp, #28
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
  TIMx->CCR6 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6a1b      	ldr	r3, [r3, #32]
 800f640:	617b      	str	r3, [r7, #20]

 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	6a1b      	ldr	r3, [r3, #32]
 800f646:	f023 0201 	bic.w	r2, r3, #1
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	621a      	str	r2, [r3, #32]
/**
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	699b      	ldr	r3, [r3, #24]
 800f652:	613b      	str	r3, [r7, #16]
  * @brief  Slave Timer configuration function
  * @param  htim TIM handle
  * @param  sSlaveConfig Slave timer configuration
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f65a:	613b      	str	r3, [r7, #16]
  * @retval None
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	011b      	lsls	r3, r3, #4
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	4313      	orrs	r3, r2
 800f664:	613b      	str	r3, [r7, #16]
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f023 030a 	bic.w	r3, r3, #10
 800f66c:	617b      	str	r3, [r7, #20]
{
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	4313      	orrs	r3, r2
 800f674:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	619a      	str	r2, [r3, #24]
  uint32_t tmpccer;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	697a      	ldr	r2, [r7, #20]
 800f680:	621a      	str	r2, [r3, #32]

 800f682:	bf00      	nop
 800f684:	371c      	adds	r7, #28
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <TIM_TI2_ConfigInputStage>:
      break;
    }

    case TIM_TS_TI1FP1:
    {
      /* Check the parameters */
 800f68e:	b480      	push	{r7}
 800f690:	b087      	sub	sp, #28
 800f692:	af00      	add	r7, sp, #0
 800f694:	60f8      	str	r0, [r7, #12]
 800f696:	60b9      	str	r1, [r7, #8]
 800f698:	607a      	str	r2, [r7, #4]
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6a1b      	ldr	r3, [r3, #32]
 800f69e:	f023 0210 	bic.w	r2, r3, #16
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	621a      	str	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	699b      	ldr	r3, [r3, #24]
 800f6aa:	617b      	str	r3, [r7, #20]
                               sSlaveConfig->TriggerPolarity,
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6a1b      	ldr	r3, [r3, #32]
 800f6b0:	613b      	str	r3, [r7, #16]
                               sSlaveConfig->TriggerFilter);
      break;
    }
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f6b8:	617b      	str	r3, [r7, #20]

 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	031b      	lsls	r3, r3, #12
 800f6be:	697a      	ldr	r2, [r7, #20]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	617b      	str	r3, [r7, #20]
    case TIM_TS_TI2FP2:
    {
      /* Check the parameters */
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f6ca:	613b      	str	r3, [r7, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	011b      	lsls	r3, r3, #4
 800f6d0:	693a      	ldr	r2, [r7, #16]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	613b      	str	r3, [r7, #16]
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	697a      	ldr	r2, [r7, #20]
 800f6da:	619a      	str	r2, [r3, #24]
      /* Configure TI2 Filter and Polarity */
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	693a      	ldr	r2, [r7, #16]
 800f6e0:	621a      	str	r2, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f6e2:	bf00      	nop
 800f6e4:	371c      	adds	r7, #28
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <TIM_ITRx_SetConfig>:
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  TIMx->CCER = tmpccer;
}

/**
 800f6ee:	b480      	push	{r7}
 800f6f0:	b085      	sub	sp, #20
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
 800f6f6:	6039      	str	r1, [r7, #0]
  * @brief  Configure the TI2 as Input.
  * @param  TIMx to select the TIM peripheral
  * @param  TIM_ICPolarity The Input Polarity.
  *          This parameter can be one of the following values:
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	60fb      	str	r3, [r7, #12]
  *            @arg TIM_ICPOLARITY_RISING
  *            @arg TIM_ICPOLARITY_FALLING
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f704:	60fb      	str	r3, [r7, #12]
  *            @arg TIM_ICPOLARITY_BOTHEDGE
  * @param  TIM_ICSelection specifies the input to be used.
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	4313      	orrs	r3, r2
 800f70c:	f043 0307 	orr.w	r3, r3, #7
 800f710:	60fb      	str	r3, [r7, #12]
  *          This parameter can be one of the following values:
  *            @arg TIM_ICSELECTION_DIRECTTI: TIM Input 2 is selected to be connected to IC2.
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	68fa      	ldr	r2, [r7, #12]
 800f716:	609a      	str	r2, [r3, #8]
  *            @arg TIM_ICSELECTION_INDIRECTTI: TIM Input 2 is selected to be connected to IC1.
 800f718:	bf00      	nop
 800f71a:	3714      	adds	r7, #20
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <TIM_ETR_SetConfig>:
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
 800f724:	b480      	push	{r7}
 800f726:	b087      	sub	sp, #28
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
 800f730:	603b      	str	r3, [r7, #0]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);

 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	617b      	str	r3, [r7, #20]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f73e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	021a      	lsls	r2, r3, #8
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	431a      	orrs	r2, r3
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	4313      	orrs	r3, r2
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	4313      	orrs	r3, r2
 800f750:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));

  /* Write to TIMx CCMR1 and CCER registers */
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	697a      	ldr	r2, [r7, #20]
 800f756:	609a      	str	r2, [r3, #8]
  TIMx->CCMR1 = tmpccmr1 ;
 800f758:	bf00      	nop
 800f75a:	371c      	adds	r7, #28
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <HAL_TIMEx_MasterConfigSynchronization>:
  *          This parameter can be one of the following values:
  *            @arg TIM_TS_ITR0: Internal trigger 0 selected
  *            @arg TIM_TS_ITR1: Internal trigger 1 selected
  *            @arg TIM_TS_ITR2: Internal trigger 2 selected
  *            @arg TIM_TS_ITR3: Internal trigger 3 selected
  *            @arg TIM_TS_NONE: No trigger is needed
 800f764:	b480      	push	{r7}
 800f766:	b085      	sub	sp, #20
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                  uint32_t  CommutationSource)
{
  /* Check the parameters */
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f774:	2b01      	cmp	r3, #1
 800f776:	d101      	bne.n	800f77c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f778:	2302      	movs	r3, #2
 800f77a:	e06d      	b.n	800f858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2201      	movs	r2, #1
 800f780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2202      	movs	r2, #2
 800f788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	60fb      	str	r3, [r7, #12]
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
  {
    /* Select the Input trigger */
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	60bb      	str	r3, [r7, #8]
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
    htim->Instance->SMCR |= InputTrigger;
  }
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a30      	ldr	r2, [pc, #192]	; (800f864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d004      	beq.n	800f7b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4a2f      	ldr	r2, [pc, #188]	; (800f868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d108      	bne.n	800f7c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
  htim->Instance->CR2 |= CommutationSource;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Enable the Commutation DMA Request */
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	60fb      	str	r3, [r7, #12]
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
  /* Set the DMA error callback */
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7c8:	60fb      	str	r3, [r7, #12]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;

 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	60fb      	str	r3, [r7, #12]
  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);

 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	605a      	str	r2, [r3, #4]
  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a20      	ldr	r2, [pc, #128]	; (800f864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d022      	beq.n	800f82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7ee:	d01d      	beq.n	800f82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4a1d      	ldr	r2, [pc, #116]	; (800f86c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d018      	beq.n	800f82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a1c      	ldr	r2, [pc, #112]	; (800f870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d013      	beq.n	800f82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a1a      	ldr	r2, [pc, #104]	; (800f874 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d00e      	beq.n	800f82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4a15      	ldr	r2, [pc, #84]	; (800f868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d009      	beq.n	800f82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a16      	ldr	r2, [pc, #88]	; (800f878 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d004      	beq.n	800f82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4a15      	ldr	r2, [pc, #84]	; (800f87c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d10c      	bne.n	800f846 <HAL_TIMEx_MasterConfigSynchronization+0xe2>

  __HAL_UNLOCK(htim);

 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f832:	60bb      	str	r3, [r7, #8]
  return HAL_OK;
}
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	68ba      	ldr	r2, [r7, #8]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	60bb      	str	r3, [r7, #8]

/**
  * @brief  Configures the TIM in master mode.
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	68ba      	ldr	r2, [r7, #8]
 800f844:	609a      	str	r2, [r3, #8]
  * @param  htim TIM handle.
  * @param  sMasterConfig pointer to a TIM_MasterConfigTypeDef structure that
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  * @retval HAL status
  */
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
 800f856:	2300      	movs	r3, #0
{
 800f858:	4618      	mov	r0, r3
 800f85a:	3714      	adds	r7, #20
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr
 800f864:	40010000 	.word	0x40010000
 800f868:	40010400 	.word	0x40010400
 800f86c:	40000400 	.word	0x40000400
 800f870:	40000800 	.word	0x40000800
 800f874:	40000c00 	.word	0x40000c00
 800f878:	40014000 	.word	0x40014000
 800f87c:	40001800 	.word	0x40001800

0800f880 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  tmpcr2 = htim->Instance->CR2;

 800f88a:	2300      	movs	r3, #0
 800f88c:	60fb      	str	r3, [r7, #12]

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f894:	2b01      	cmp	r3, #1
 800f896:	d101      	bne.n	800f89c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f898:	2302      	movs	r3, #2
 800f89a:	e065      	b.n	800f968 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	60fb      	str	r3, [r7, #12]
  /* Update TIMx CR2 */
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	689b      	ldr	r3, [r3, #8]
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	60fb      	str	r3, [r7, #12]
  htim->Instance->CR2 = tmpcr2;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	60fb      	str	r3, [r7, #12]

 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	691b      	ldr	r3, [r3, #16]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	60fb      	str	r3, [r7, #12]
  {
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	695b      	ldr	r3, [r3, #20]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	60fb      	str	r3, [r7, #12]
    /* Reset the MSM Bit */
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f902:	4313      	orrs	r3, r2
 800f904:	60fb      	str	r3, [r7, #12]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	699b      	ldr	r3, [r3, #24]
 800f910:	041b      	lsls	r3, r3, #16
 800f912:	4313      	orrs	r3, r2
 800f914:	60fb      	str	r3, [r7, #12]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a16      	ldr	r2, [pc, #88]	; (800f974 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d004      	beq.n	800f92a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a14      	ldr	r2, [pc, #80]	; (800f978 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d115      	bne.n	800f956 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f934:	051b      	lsls	r3, r3, #20
 800f936:	4313      	orrs	r3, r2
 800f938:	60fb      	str	r3, [r7, #12]
  __HAL_UNLOCK(htim);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	69db      	ldr	r3, [r3, #28]
 800f944:	4313      	orrs	r3, r2
 800f946:	60fb      	str	r3, [r7, #12]

 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	4313      	orrs	r3, r2
 800f954:	60fb      	str	r3, [r7, #12]
  return HAL_OK;
}

/**
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Configures the Break feature, dead time, Lock level, OSSI/OSSR State
  *         and the AOE(automatic output enable).
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  * @param  htim TIM handle
  * @param  sBreakDeadTimeConfig pointer to a TIM_ConfigBreakDeadConfigTypeDef structure that
 800f966:	2300      	movs	r3, #0
  *         contains the BDTR Register configuration  information for the TIM peripheral.
 800f968:	4618      	mov	r0, r3
 800f96a:	3714      	adds	r7, #20
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr
 800f974:	40010000 	.word	0x40010000
 800f978:	40010400 	.word	0x40010400

0800f97c <HAL_TIMEx_CommutCallback>:
  __HAL_UNLOCK(htim);

  return HAL_OK;
}

/**
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  * @param  htim TIM handle.
  * @param  Channels specifies the reference signal(s) the OC5REF is combined with.
  *         This parameter can be any combination of the following values:
  *         TIM_GROUPCH5_NONE: No effect of OC5REF on OC1REFC, OC2REFC and OC3REFC
  *         TIM_GROUPCH5_OC1REFC: OC1REFC is the logical AND of OC1REFC and OC5REF
  *         TIM_GROUPCH5_OC2REFC: OC2REFC is the logical AND of OC2REFC and OC5REF
 800f984:	bf00      	nop
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <HAL_TIMEx_BreakCallback>:

  /* Set GC5Cx bit fields */
  htim->Instance->CCR5 |= Channels;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  __HAL_UNLOCK(htim);

  return HAL_OK;
}

/**
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <HAL_TIMEx_Break2Callback>:

/** @defgroup TIMEx_Exported_Functions_Group6 Extended Callbacks functions
  * @brief    Extended Callbacks functions
  *
@verbatim
  ==============================================================================
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  ==============================================================================
  [..]
    This section provides Extended TIM callback functions:
    (+) Timer Commutation callback
    (+) Timer Break callback

 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d101      	bne.n	800f9ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	e040      	b.n	800fa4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d106      	bne.n	800f9e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7f3 f95a 	bl	8002c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2224      	movs	r2, #36	; 0x24
 800f9e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f022 0201 	bic.w	r2, r2, #1
 800f9f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 f8c0 	bl	800fb7c <UART_SetConfig>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d101      	bne.n	800fa06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fa02:	2301      	movs	r3, #1
 800fa04:	e022      	b.n	800fa4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d002      	beq.n	800fa14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 fb16 	bl	8010040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	689a      	ldr	r2, [r3, #8]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f042 0201 	orr.w	r2, r2, #1
 800fa42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 fb9d 	bl	8010184 <UART_CheckIdleState>
 800fa4a:	4603      	mov	r3, r0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08a      	sub	sp, #40	; 0x28
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	603b      	str	r3, [r7, #0]
 800fa60:	4613      	mov	r3, r2
 800fa62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa68:	2b20      	cmp	r3, #32
 800fa6a:	f040 8081 	bne.w	800fb70 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <HAL_UART_Transmit+0x26>
 800fa74:	88fb      	ldrh	r3, [r7, #6]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d101      	bne.n	800fa7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	e079      	b.n	800fb72 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d101      	bne.n	800fa8c <HAL_UART_Transmit+0x38>
 800fa88:	2302      	movs	r3, #2
 800fa8a:	e072      	b.n	800fb72 <HAL_UART_Transmit+0x11e>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2200      	movs	r2, #0
 800fa98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	2221      	movs	r2, #33	; 0x21
 800faa0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800faa2:	f7f5 fc1b 	bl	80052dc <HAL_GetTick>
 800faa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	88fa      	ldrh	r2, [r7, #6]
 800faac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	88fa      	ldrh	r2, [r7, #6]
 800fab4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fac0:	d108      	bne.n	800fad4 <HAL_UART_Transmit+0x80>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	691b      	ldr	r3, [r3, #16]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d104      	bne.n	800fad4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800faca:	2300      	movs	r3, #0
 800facc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	61bb      	str	r3, [r7, #24]
 800fad2:	e003      	b.n	800fadc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fad8:	2300      	movs	r3, #0
 800fada:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2200      	movs	r2, #0
 800fae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800fae4:	e02c      	b.n	800fb40 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	2200      	movs	r2, #0
 800faee:	2180      	movs	r1, #128	; 0x80
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f000 fb7a 	bl	80101ea <UART_WaitOnFlagUntilTimeout>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800fafc:	2303      	movs	r3, #3
 800fafe:	e038      	b.n	800fb72 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d10b      	bne.n	800fb1e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	881b      	ldrh	r3, [r3, #0]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fb14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	3302      	adds	r3, #2
 800fb1a:	61bb      	str	r3, [r7, #24]
 800fb1c:	e007      	b.n	800fb2e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	781a      	ldrb	r2, [r3, #0]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	3b01      	subs	r3, #1
 800fb38:	b29a      	uxth	r2, r3
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1cc      	bne.n	800fae6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	2200      	movs	r2, #0
 800fb54:	2140      	movs	r1, #64	; 0x40
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f000 fb47 	bl	80101ea <UART_WaitOnFlagUntilTimeout>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800fb62:	2303      	movs	r3, #3
 800fb64:	e005      	b.n	800fb72 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2220      	movs	r2, #32
 800fb6a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	e000      	b.n	800fb72 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800fb70:	2302      	movs	r3, #2
  }
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3720      	adds	r7, #32
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
	...

0800fb7c <UART_SetConfig>:
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b088      	sub	sp, #32
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]

}
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

/**
 800fb84:	2300      	movs	r3, #0
 800fb86:	77bb      	strb	r3, [r7, #30]
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));

  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	689a      	ldr	r2, [r3, #8]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	431a      	orrs	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	431a      	orrs	r2, r3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	69db      	ldr	r3, [r3, #28]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	4ba7      	ldr	r3, [pc, #668]	; (800fe44 <UART_SetConfig+0x2c8>)
 800fba8:	4013      	ands	r3, r2
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	6812      	ldr	r2, [r2, #0]
 800fbae:	6979      	ldr	r1, [r7, #20]
 800fbb0:	430b      	orrs	r3, r1
 800fbb2:	6013      	str	r3, [r2, #0]
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
  *  the UART Word Length, Parity, Mode and oversampling:
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	68da      	ldr	r2, [r3, #12]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	430a      	orrs	r2, r1
 800fbc8:	605a      	str	r2, [r3, #4]
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	699b      	ldr	r3, [r3, #24]
 800fbce:	617b      	str	r3, [r7, #20]
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a1b      	ldr	r3, [r3, #32]
 800fbd4:	697a      	ldr	r2, [r7, #20]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	689b      	ldr	r3, [r3, #8]
 800fbe0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	430a      	orrs	r2, r1
 800fbec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a95      	ldr	r2, [pc, #596]	; (800fe48 <UART_SetConfig+0x2cc>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d120      	bne.n	800fc3a <UART_SetConfig+0xbe>
 800fbf8:	4b94      	ldr	r3, [pc, #592]	; (800fe4c <UART_SetConfig+0x2d0>)
 800fbfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbfe:	f003 0303 	and.w	r3, r3, #3
 800fc02:	2b03      	cmp	r3, #3
 800fc04:	d816      	bhi.n	800fc34 <UART_SetConfig+0xb8>
 800fc06:	a201      	add	r2, pc, #4	; (adr r2, 800fc0c <UART_SetConfig+0x90>)
 800fc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc0c:	0800fc1d 	.word	0x0800fc1d
 800fc10:	0800fc29 	.word	0x0800fc29
 800fc14:	0800fc23 	.word	0x0800fc23
 800fc18:	0800fc2f 	.word	0x0800fc2f
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	77fb      	strb	r3, [r7, #31]
 800fc20:	e14f      	b.n	800fec2 <UART_SetConfig+0x346>
 800fc22:	2302      	movs	r3, #2
 800fc24:	77fb      	strb	r3, [r7, #31]
 800fc26:	e14c      	b.n	800fec2 <UART_SetConfig+0x346>
 800fc28:	2304      	movs	r3, #4
 800fc2a:	77fb      	strb	r3, [r7, #31]
 800fc2c:	e149      	b.n	800fec2 <UART_SetConfig+0x346>
 800fc2e:	2308      	movs	r3, #8
 800fc30:	77fb      	strb	r3, [r7, #31]
 800fc32:	e146      	b.n	800fec2 <UART_SetConfig+0x346>
 800fc34:	2310      	movs	r3, #16
 800fc36:	77fb      	strb	r3, [r7, #31]
 800fc38:	e143      	b.n	800fec2 <UART_SetConfig+0x346>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4a84      	ldr	r2, [pc, #528]	; (800fe50 <UART_SetConfig+0x2d4>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d132      	bne.n	800fcaa <UART_SetConfig+0x12e>
 800fc44:	4b81      	ldr	r3, [pc, #516]	; (800fe4c <UART_SetConfig+0x2d0>)
 800fc46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc4a:	f003 030c 	and.w	r3, r3, #12
 800fc4e:	2b0c      	cmp	r3, #12
 800fc50:	d828      	bhi.n	800fca4 <UART_SetConfig+0x128>
 800fc52:	a201      	add	r2, pc, #4	; (adr r2, 800fc58 <UART_SetConfig+0xdc>)
 800fc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc58:	0800fc8d 	.word	0x0800fc8d
 800fc5c:	0800fca5 	.word	0x0800fca5
 800fc60:	0800fca5 	.word	0x0800fca5
 800fc64:	0800fca5 	.word	0x0800fca5
 800fc68:	0800fc99 	.word	0x0800fc99
 800fc6c:	0800fca5 	.word	0x0800fca5
 800fc70:	0800fca5 	.word	0x0800fca5
 800fc74:	0800fca5 	.word	0x0800fca5
 800fc78:	0800fc93 	.word	0x0800fc93
 800fc7c:	0800fca5 	.word	0x0800fca5
 800fc80:	0800fca5 	.word	0x0800fca5
 800fc84:	0800fca5 	.word	0x0800fca5
 800fc88:	0800fc9f 	.word	0x0800fc9f
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	77fb      	strb	r3, [r7, #31]
 800fc90:	e117      	b.n	800fec2 <UART_SetConfig+0x346>
 800fc92:	2302      	movs	r3, #2
 800fc94:	77fb      	strb	r3, [r7, #31]
 800fc96:	e114      	b.n	800fec2 <UART_SetConfig+0x346>
 800fc98:	2304      	movs	r3, #4
 800fc9a:	77fb      	strb	r3, [r7, #31]
 800fc9c:	e111      	b.n	800fec2 <UART_SetConfig+0x346>
 800fc9e:	2308      	movs	r3, #8
 800fca0:	77fb      	strb	r3, [r7, #31]
 800fca2:	e10e      	b.n	800fec2 <UART_SetConfig+0x346>
 800fca4:	2310      	movs	r3, #16
 800fca6:	77fb      	strb	r3, [r7, #31]
 800fca8:	e10b      	b.n	800fec2 <UART_SetConfig+0x346>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a69      	ldr	r2, [pc, #420]	; (800fe54 <UART_SetConfig+0x2d8>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d120      	bne.n	800fcf6 <UART_SetConfig+0x17a>
 800fcb4:	4b65      	ldr	r3, [pc, #404]	; (800fe4c <UART_SetConfig+0x2d0>)
 800fcb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fcbe:	2b30      	cmp	r3, #48	; 0x30
 800fcc0:	d013      	beq.n	800fcea <UART_SetConfig+0x16e>
 800fcc2:	2b30      	cmp	r3, #48	; 0x30
 800fcc4:	d814      	bhi.n	800fcf0 <UART_SetConfig+0x174>
 800fcc6:	2b20      	cmp	r3, #32
 800fcc8:	d009      	beq.n	800fcde <UART_SetConfig+0x162>
 800fcca:	2b20      	cmp	r3, #32
 800fccc:	d810      	bhi.n	800fcf0 <UART_SetConfig+0x174>
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d002      	beq.n	800fcd8 <UART_SetConfig+0x15c>
 800fcd2:	2b10      	cmp	r3, #16
 800fcd4:	d006      	beq.n	800fce4 <UART_SetConfig+0x168>
 800fcd6:	e00b      	b.n	800fcf0 <UART_SetConfig+0x174>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	77fb      	strb	r3, [r7, #31]
 800fcdc:	e0f1      	b.n	800fec2 <UART_SetConfig+0x346>
 800fcde:	2302      	movs	r3, #2
 800fce0:	77fb      	strb	r3, [r7, #31]
 800fce2:	e0ee      	b.n	800fec2 <UART_SetConfig+0x346>
 800fce4:	2304      	movs	r3, #4
 800fce6:	77fb      	strb	r3, [r7, #31]
 800fce8:	e0eb      	b.n	800fec2 <UART_SetConfig+0x346>
 800fcea:	2308      	movs	r3, #8
 800fcec:	77fb      	strb	r3, [r7, #31]
 800fcee:	e0e8      	b.n	800fec2 <UART_SetConfig+0x346>
 800fcf0:	2310      	movs	r3, #16
 800fcf2:	77fb      	strb	r3, [r7, #31]
 800fcf4:	e0e5      	b.n	800fec2 <UART_SetConfig+0x346>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4a57      	ldr	r2, [pc, #348]	; (800fe58 <UART_SetConfig+0x2dc>)
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d120      	bne.n	800fd42 <UART_SetConfig+0x1c6>
 800fd00:	4b52      	ldr	r3, [pc, #328]	; (800fe4c <UART_SetConfig+0x2d0>)
 800fd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fd0a:	2bc0      	cmp	r3, #192	; 0xc0
 800fd0c:	d013      	beq.n	800fd36 <UART_SetConfig+0x1ba>
 800fd0e:	2bc0      	cmp	r3, #192	; 0xc0
 800fd10:	d814      	bhi.n	800fd3c <UART_SetConfig+0x1c0>
 800fd12:	2b80      	cmp	r3, #128	; 0x80
 800fd14:	d009      	beq.n	800fd2a <UART_SetConfig+0x1ae>
 800fd16:	2b80      	cmp	r3, #128	; 0x80
 800fd18:	d810      	bhi.n	800fd3c <UART_SetConfig+0x1c0>
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d002      	beq.n	800fd24 <UART_SetConfig+0x1a8>
 800fd1e:	2b40      	cmp	r3, #64	; 0x40
 800fd20:	d006      	beq.n	800fd30 <UART_SetConfig+0x1b4>
 800fd22:	e00b      	b.n	800fd3c <UART_SetConfig+0x1c0>
 800fd24:	2300      	movs	r3, #0
 800fd26:	77fb      	strb	r3, [r7, #31]
 800fd28:	e0cb      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd2a:	2302      	movs	r3, #2
 800fd2c:	77fb      	strb	r3, [r7, #31]
 800fd2e:	e0c8      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd30:	2304      	movs	r3, #4
 800fd32:	77fb      	strb	r3, [r7, #31]
 800fd34:	e0c5      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd36:	2308      	movs	r3, #8
 800fd38:	77fb      	strb	r3, [r7, #31]
 800fd3a:	e0c2      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd3c:	2310      	movs	r3, #16
 800fd3e:	77fb      	strb	r3, [r7, #31]
 800fd40:	e0bf      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a45      	ldr	r2, [pc, #276]	; (800fe5c <UART_SetConfig+0x2e0>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d125      	bne.n	800fd98 <UART_SetConfig+0x21c>
 800fd4c:	4b3f      	ldr	r3, [pc, #252]	; (800fe4c <UART_SetConfig+0x2d0>)
 800fd4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd5a:	d017      	beq.n	800fd8c <UART_SetConfig+0x210>
 800fd5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd60:	d817      	bhi.n	800fd92 <UART_SetConfig+0x216>
 800fd62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd66:	d00b      	beq.n	800fd80 <UART_SetConfig+0x204>
 800fd68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd6c:	d811      	bhi.n	800fd92 <UART_SetConfig+0x216>
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d003      	beq.n	800fd7a <UART_SetConfig+0x1fe>
 800fd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd76:	d006      	beq.n	800fd86 <UART_SetConfig+0x20a>
 800fd78:	e00b      	b.n	800fd92 <UART_SetConfig+0x216>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	77fb      	strb	r3, [r7, #31]
 800fd7e:	e0a0      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd80:	2302      	movs	r3, #2
 800fd82:	77fb      	strb	r3, [r7, #31]
 800fd84:	e09d      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd86:	2304      	movs	r3, #4
 800fd88:	77fb      	strb	r3, [r7, #31]
 800fd8a:	e09a      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd8c:	2308      	movs	r3, #8
 800fd8e:	77fb      	strb	r3, [r7, #31]
 800fd90:	e097      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd92:	2310      	movs	r3, #16
 800fd94:	77fb      	strb	r3, [r7, #31]
 800fd96:	e094      	b.n	800fec2 <UART_SetConfig+0x346>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a30      	ldr	r2, [pc, #192]	; (800fe60 <UART_SetConfig+0x2e4>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d125      	bne.n	800fdee <UART_SetConfig+0x272>
 800fda2:	4b2a      	ldr	r3, [pc, #168]	; (800fe4c <UART_SetConfig+0x2d0>)
 800fda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fda8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fdac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdb0:	d017      	beq.n	800fde2 <UART_SetConfig+0x266>
 800fdb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdb6:	d817      	bhi.n	800fde8 <UART_SetConfig+0x26c>
 800fdb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdbc:	d00b      	beq.n	800fdd6 <UART_SetConfig+0x25a>
 800fdbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdc2:	d811      	bhi.n	800fde8 <UART_SetConfig+0x26c>
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d003      	beq.n	800fdd0 <UART_SetConfig+0x254>
 800fdc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdcc:	d006      	beq.n	800fddc <UART_SetConfig+0x260>
 800fdce:	e00b      	b.n	800fde8 <UART_SetConfig+0x26c>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	77fb      	strb	r3, [r7, #31]
 800fdd4:	e075      	b.n	800fec2 <UART_SetConfig+0x346>
 800fdd6:	2302      	movs	r3, #2
 800fdd8:	77fb      	strb	r3, [r7, #31]
 800fdda:	e072      	b.n	800fec2 <UART_SetConfig+0x346>
 800fddc:	2304      	movs	r3, #4
 800fdde:	77fb      	strb	r3, [r7, #31]
 800fde0:	e06f      	b.n	800fec2 <UART_SetConfig+0x346>
 800fde2:	2308      	movs	r3, #8
 800fde4:	77fb      	strb	r3, [r7, #31]
 800fde6:	e06c      	b.n	800fec2 <UART_SetConfig+0x346>
 800fde8:	2310      	movs	r3, #16
 800fdea:	77fb      	strb	r3, [r7, #31]
 800fdec:	e069      	b.n	800fec2 <UART_SetConfig+0x346>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a1c      	ldr	r2, [pc, #112]	; (800fe64 <UART_SetConfig+0x2e8>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d137      	bne.n	800fe68 <UART_SetConfig+0x2ec>
 800fdf8:	4b14      	ldr	r3, [pc, #80]	; (800fe4c <UART_SetConfig+0x2d0>)
 800fdfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fe02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe06:	d017      	beq.n	800fe38 <UART_SetConfig+0x2bc>
 800fe08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe0c:	d817      	bhi.n	800fe3e <UART_SetConfig+0x2c2>
 800fe0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe12:	d00b      	beq.n	800fe2c <UART_SetConfig+0x2b0>
 800fe14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe18:	d811      	bhi.n	800fe3e <UART_SetConfig+0x2c2>
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d003      	beq.n	800fe26 <UART_SetConfig+0x2aa>
 800fe1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe22:	d006      	beq.n	800fe32 <UART_SetConfig+0x2b6>
 800fe24:	e00b      	b.n	800fe3e <UART_SetConfig+0x2c2>
 800fe26:	2300      	movs	r3, #0
 800fe28:	77fb      	strb	r3, [r7, #31]
 800fe2a:	e04a      	b.n	800fec2 <UART_SetConfig+0x346>
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	77fb      	strb	r3, [r7, #31]
 800fe30:	e047      	b.n	800fec2 <UART_SetConfig+0x346>
 800fe32:	2304      	movs	r3, #4
 800fe34:	77fb      	strb	r3, [r7, #31]
 800fe36:	e044      	b.n	800fec2 <UART_SetConfig+0x346>
 800fe38:	2308      	movs	r3, #8
 800fe3a:	77fb      	strb	r3, [r7, #31]
 800fe3c:	e041      	b.n	800fec2 <UART_SetConfig+0x346>
 800fe3e:	2310      	movs	r3, #16
 800fe40:	77fb      	strb	r3, [r7, #31]
 800fe42:	e03e      	b.n	800fec2 <UART_SetConfig+0x346>
 800fe44:	efff69f3 	.word	0xefff69f3
 800fe48:	40011000 	.word	0x40011000
 800fe4c:	40023800 	.word	0x40023800
 800fe50:	40004400 	.word	0x40004400
 800fe54:	40004800 	.word	0x40004800
 800fe58:	40004c00 	.word	0x40004c00
 800fe5c:	40005000 	.word	0x40005000
 800fe60:	40011400 	.word	0x40011400
 800fe64:	40007800 	.word	0x40007800
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	4a71      	ldr	r2, [pc, #452]	; (8010034 <UART_SetConfig+0x4b8>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d125      	bne.n	800febe <UART_SetConfig+0x342>
 800fe72:	4b71      	ldr	r3, [pc, #452]	; (8010038 <UART_SetConfig+0x4bc>)
 800fe74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fe7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fe80:	d017      	beq.n	800feb2 <UART_SetConfig+0x336>
 800fe82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fe86:	d817      	bhi.n	800feb8 <UART_SetConfig+0x33c>
 800fe88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe8c:	d00b      	beq.n	800fea6 <UART_SetConfig+0x32a>
 800fe8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe92:	d811      	bhi.n	800feb8 <UART_SetConfig+0x33c>
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d003      	beq.n	800fea0 <UART_SetConfig+0x324>
 800fe98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe9c:	d006      	beq.n	800feac <UART_SetConfig+0x330>
 800fe9e:	e00b      	b.n	800feb8 <UART_SetConfig+0x33c>
 800fea0:	2300      	movs	r3, #0
 800fea2:	77fb      	strb	r3, [r7, #31]
 800fea4:	e00d      	b.n	800fec2 <UART_SetConfig+0x346>
 800fea6:	2302      	movs	r3, #2
 800fea8:	77fb      	strb	r3, [r7, #31]
 800feaa:	e00a      	b.n	800fec2 <UART_SetConfig+0x346>
 800feac:	2304      	movs	r3, #4
 800feae:	77fb      	strb	r3, [r7, #31]
 800feb0:	e007      	b.n	800fec2 <UART_SetConfig+0x346>
 800feb2:	2308      	movs	r3, #8
 800feb4:	77fb      	strb	r3, [r7, #31]
 800feb6:	e004      	b.n	800fec2 <UART_SetConfig+0x346>
 800feb8:	2310      	movs	r3, #16
 800feba:	77fb      	strb	r3, [r7, #31]
 800febc:	e001      	b.n	800fec2 <UART_SetConfig+0x346>
 800febe:	2310      	movs	r3, #16
 800fec0:	77fb      	strb	r3, [r7, #31]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	69db      	ldr	r3, [r3, #28]
 800fec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800feca:	d15b      	bne.n	800ff84 <UART_SetConfig+0x408>
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fecc:	7ffb      	ldrb	r3, [r7, #31]
 800fece:	2b08      	cmp	r3, #8
 800fed0:	d827      	bhi.n	800ff22 <UART_SetConfig+0x3a6>
 800fed2:	a201      	add	r2, pc, #4	; (adr r2, 800fed8 <UART_SetConfig+0x35c>)
 800fed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed8:	0800fefd 	.word	0x0800fefd
 800fedc:	0800ff05 	.word	0x0800ff05
 800fee0:	0800ff0d 	.word	0x0800ff0d
 800fee4:	0800ff23 	.word	0x0800ff23
 800fee8:	0800ff13 	.word	0x0800ff13
 800feec:	0800ff23 	.word	0x0800ff23
 800fef0:	0800ff23 	.word	0x0800ff23
 800fef4:	0800ff23 	.word	0x0800ff23
 800fef8:	0800ff1b 	.word	0x0800ff1b

  tmpreg |= huart->Init.OneBitSampling;
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fefc:	f7fb fd9e 	bl	800ba3c <HAL_RCC_GetPCLK1Freq>
 800ff00:	61b8      	str	r0, [r7, #24]

 800ff02:	e013      	b.n	800ff2c <UART_SetConfig+0x3b0>

  /*-------------------------- USART BRR Configuration -----------------------*/
 800ff04:	f7fb fdae 	bl	800ba64 <HAL_RCC_GetPCLK2Freq>
 800ff08:	61b8      	str	r0, [r7, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff0a:	e00f      	b.n	800ff2c <UART_SetConfig+0x3b0>

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff0c:	4b4b      	ldr	r3, [pc, #300]	; (801003c <UART_SetConfig+0x4c0>)
 800ff0e:	61bb      	str	r3, [r7, #24]
  {
 800ff10:	e00c      	b.n	800ff2c <UART_SetConfig+0x3b0>
    switch (clocksource)
    {
 800ff12:	f7fb fcd1 	bl	800b8b8 <HAL_RCC_GetSysClockFreq>
 800ff16:	61b8      	str	r0, [r7, #24]
      case UART_CLOCKSOURCE_PCLK1:
 800ff18:	e008      	b.n	800ff2c <UART_SetConfig+0x3b0>
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 800ff1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff1e:	61bb      	str	r3, [r7, #24]
      case UART_CLOCKSOURCE_PCLK2:
 800ff20:	e004      	b.n	800ff2c <UART_SetConfig+0x3b0>
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
 800ff22:	2300      	movs	r3, #0
 800ff24:	61bb      	str	r3, [r7, #24]
      case UART_CLOCKSOURCE_HSI:
 800ff26:	2301      	movs	r3, #1
 800ff28:	77bb      	strb	r3, [r7, #30]
        pclk = (uint32_t) HSI_VALUE;
 800ff2a:	bf00      	nop
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d074      	beq.n	801001c <UART_SetConfig+0x4a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	005a      	lsls	r2, r3, #1
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	085b      	lsrs	r3, r3, #1
 800ff3c:	441a      	add	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	613b      	str	r3, [r7, #16]
        break;
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	2b0f      	cmp	r3, #15
 800ff4e:	d916      	bls.n	800ff7e <UART_SetConfig+0x402>
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff56:	d212      	bcs.n	800ff7e <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	f023 030f 	bic.w	r3, r3, #15
 800ff60:	81fb      	strh	r3, [r7, #14]
        ret = HAL_ERROR;
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	085b      	lsrs	r3, r3, #1
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	f003 0307 	and.w	r3, r3, #7
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	89fb      	ldrh	r3, [r7, #14]
 800ff70:	4313      	orrs	r3, r2
 800ff72:	81fb      	strh	r3, [r7, #14]
        break;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	89fa      	ldrh	r2, [r7, #14]
 800ff7a:	60da      	str	r2, [r3, #12]
 800ff7c:	e04e      	b.n	801001c <UART_SetConfig+0x4a0>
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff7e:	2301      	movs	r3, #1
 800ff80:	77bb      	strb	r3, [r7, #30]
 800ff82:	e04b      	b.n	801001c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff84:	7ffb      	ldrb	r3, [r7, #31]
 800ff86:	2b08      	cmp	r3, #8
 800ff88:	d827      	bhi.n	800ffda <UART_SetConfig+0x45e>
 800ff8a:	a201      	add	r2, pc, #4	; (adr r2, 800ff90 <UART_SetConfig+0x414>)
 800ff8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff90:	0800ffb5 	.word	0x0800ffb5
 800ff94:	0800ffbd 	.word	0x0800ffbd
 800ff98:	0800ffc5 	.word	0x0800ffc5
 800ff9c:	0800ffdb 	.word	0x0800ffdb
 800ffa0:	0800ffcb 	.word	0x0800ffcb
 800ffa4:	0800ffdb 	.word	0x0800ffdb
 800ffa8:	0800ffdb 	.word	0x0800ffdb
 800ffac:	0800ffdb 	.word	0x0800ffdb
 800ffb0:	0800ffd3 	.word	0x0800ffd3
        huart->Instance->BRR = brrtemp;
      }
      else
 800ffb4:	f7fb fd42 	bl	800ba3c <HAL_RCC_GetPCLK1Freq>
 800ffb8:	61b8      	str	r0, [r7, #24]
      {
 800ffba:	e013      	b.n	800ffe4 <UART_SetConfig+0x468>
        ret = HAL_ERROR;
      }
 800ffbc:	f7fb fd52 	bl	800ba64 <HAL_RCC_GetPCLK2Freq>
 800ffc0:	61b8      	str	r0, [r7, #24]
    }
 800ffc2:	e00f      	b.n	800ffe4 <UART_SetConfig+0x468>
  }
  else
 800ffc4:	4b1d      	ldr	r3, [pc, #116]	; (801003c <UART_SetConfig+0x4c0>)
 800ffc6:	61bb      	str	r3, [r7, #24]
  {
 800ffc8:	e00c      	b.n	800ffe4 <UART_SetConfig+0x468>
    switch (clocksource)
    {
 800ffca:	f7fb fc75 	bl	800b8b8 <HAL_RCC_GetSysClockFreq>
 800ffce:	61b8      	str	r0, [r7, #24]
      case UART_CLOCKSOURCE_PCLK1:
 800ffd0:	e008      	b.n	800ffe4 <UART_SetConfig+0x468>
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 800ffd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffd6:	61bb      	str	r3, [r7, #24]
      case UART_CLOCKSOURCE_PCLK2:
 800ffd8:	e004      	b.n	800ffe4 <UART_SetConfig+0x468>
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	61bb      	str	r3, [r7, #24]
      case UART_CLOCKSOURCE_HSI:
 800ffde:	2301      	movs	r3, #1
 800ffe0:	77bb      	strb	r3, [r7, #30]
        pclk = (uint32_t) HSI_VALUE;
 800ffe2:	bf00      	nop
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d018      	beq.n	801001c <UART_SetConfig+0x4a0>
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	085a      	lsrs	r2, r3, #1
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	441a      	add	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	613b      	str	r3, [r7, #16]
        break;
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	2b0f      	cmp	r3, #15
 8010004:	d908      	bls.n	8010018 <UART_SetConfig+0x49c>
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801000c:	d204      	bcs.n	8010018 <UART_SetConfig+0x49c>
      default:
        pclk = 0U;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	60da      	str	r2, [r3, #12]
 8010016:	e001      	b.n	801001c <UART_SetConfig+0x4a0>
        ret = HAL_ERROR;
        break;
    }

 8010018:	2301      	movs	r3, #1
 801001a:	77bb      	strb	r3, [r7, #30]
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2200      	movs	r2, #0
 8010020:	665a      	str	r2, [r3, #100]	; 0x64
      }
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	669a      	str	r2, [r3, #104]	; 0x68
      else
      {
 8010028:	7fbb      	ldrb	r3, [r7, #30]
        ret = HAL_ERROR;
 801002a:	4618      	mov	r0, r3
 801002c:	3720      	adds	r7, #32
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	40007c00 	.word	0x40007c00
 8010038:	40023800 	.word	0x40023800
 801003c:	00f42400 	.word	0x00f42400

08010040 <UART_AdvFeatureConfig>:
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
  huart->TxISR = NULL;
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]

  return ret;
}

/**
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004c:	f003 0301 	and.w	r3, r3, #1
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00a      	beq.n	801006a <UART_AdvFeatureConfig+0x2a>
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	430a      	orrs	r2, r1
 8010068:	605a      	str	r2, [r3, #4]
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006e:	f003 0302 	and.w	r3, r3, #2
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00a      	beq.n	801008c <UART_AdvFeatureConfig+0x4c>
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	430a      	orrs	r2, r1
 801008a:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010090:	f003 0304 	and.w	r3, r3, #4
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00a      	beq.n	80100ae <UART_AdvFeatureConfig+0x6e>
  }

  /* if required, configure RX pin active level inversion */
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	430a      	orrs	r2, r1
 80100ac:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b2:	f003 0308 	and.w	r3, r3, #8
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d00a      	beq.n	80100d0 <UART_AdvFeatureConfig+0x90>
  }

  /* if required, configure data inversion */
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	430a      	orrs	r2, r1
 80100ce:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d4:	f003 0310 	and.w	r3, r3, #16
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00a      	beq.n	80100f2 <UART_AdvFeatureConfig+0xb2>
  }

  /* if required, configure RX/TX pins swap */
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	430a      	orrs	r2, r1
 80100f0:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f6:	f003 0320 	and.w	r3, r3, #32
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00a      	beq.n	8010114 <UART_AdvFeatureConfig+0xd4>
  }

  /* if required, configure RX overrun detection disabling */
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	430a      	orrs	r2, r1
 8010112:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801011c:	2b00      	cmp	r3, #0
 801011e:	d01a      	beq.n	8010156 <UART_AdvFeatureConfig+0x116>
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	430a      	orrs	r2, r1
 8010134:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801013a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801013e:	d10a      	bne.n	8010156 <UART_AdvFeatureConfig+0x116>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
  }

 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	430a      	orrs	r2, r1
 8010154:	605a      	str	r2, [r3, #4]
  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801015a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00a      	beq.n	8010178 <UART_AdvFeatureConfig+0x138>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	430a      	orrs	r2, r1
 8010176:	605a      	str	r2, [r3, #4]
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <UART_CheckIdleState>:
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8010184:	b580      	push	{r7, lr}
 8010186:	b086      	sub	sp, #24
 8010188:	af02      	add	r7, sp, #8
 801018a:	6078      	str	r0, [r7, #4]
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
  }
}

 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/**
  * @brief Check the UART Idle State.
  * @param huart UART handle.
 8010194:	f7f5 f8a2 	bl	80052dc <HAL_GetTick>
 8010198:	60f8      	str	r0, [r7, #12]
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f003 0308 	and.w	r3, r3, #8
 80101a4:	2b08      	cmp	r3, #8
 80101a6:	d10e      	bne.n	80101c6 <UART_CheckIdleState+0x42>
{
  uint32_t tickstart;

 80101a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80101ac:	9300      	str	r3, [sp, #0]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2200      	movs	r2, #0
 80101b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f817 	bl	80101ea <UART_WaitOnFlagUntilTimeout>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d001      	beq.n	80101c6 <UART_CheckIdleState+0x42>
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

 80101c2:	2303      	movs	r3, #3
 80101c4:	e00d      	b.n	80101e2 <UART_CheckIdleState+0x5e>
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2220      	movs	r2, #32
 80101ca:	679a      	str	r2, [r3, #120]	; 0x78
    /* Wait until REACK flag is set */
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2220      	movs	r2, #32
 80101d0:	67da      	str	r2, [r3, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2200      	movs	r2, #0
 80101d6:	661a      	str	r2, [r3, #96]	; 0x60
    {
      /* Timeout occurred */
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      return HAL_TIMEOUT;
    }
 80101e0:	2300      	movs	r3, #0
  }
 80101e2:	4618      	mov	r0, r3
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <UART_WaitOnFlagUntilTimeout>:
  __HAL_UNLOCK(huart);

  return HAL_OK;
}

/**
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b084      	sub	sp, #16
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	60f8      	str	r0, [r7, #12]
 80101f2:	60b9      	str	r1, [r7, #8]
 80101f4:	603b      	str	r3, [r7, #0]
 80101f6:	4613      	mov	r3, r2
 80101f8:	71fb      	strb	r3, [r7, #7]
  * @brief  This function handles UART Communication Timeout. It waits
  *                  until a flag is no longer in the specified status.
 80101fa:	e05e      	b.n	80102ba <UART_WaitOnFlagUntilTimeout+0xd0>
  * @param huart     UART handle.
  * @param Flag      Specifies the UART flag to check
  * @param Status    The actual Flag status (SET or RESET)
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010202:	d05a      	beq.n	80102ba <UART_WaitOnFlagUntilTimeout+0xd0>
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
 8010204:	f7f5 f86a 	bl	80052dc <HAL_GetTick>
 8010208:	4602      	mov	r2, r0
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	1ad3      	subs	r3, r2, r3
 801020e:	69ba      	ldr	r2, [r7, #24]
 8010210:	429a      	cmp	r2, r3
 8010212:	d302      	bcc.n	801021a <UART_WaitOnFlagUntilTimeout+0x30>
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d11b      	bne.n	8010252 <UART_WaitOnFlagUntilTimeout+0x68>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010228:	601a      	str	r2, [r3, #0]
{
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	689a      	ldr	r2, [r3, #8]
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f022 0201 	bic.w	r2, r2, #1
 8010238:	609a      	str	r2, [r3, #8]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2220      	movs	r2, #32
 801023e:	679a      	str	r2, [r3, #120]	; 0x78
  {
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2220      	movs	r2, #32
 8010244:	67da      	str	r2, [r3, #124]	; 0x7c
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2200      	movs	r2, #0
 801024a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801024e:	2303      	movs	r3, #3
 8010250:	e043      	b.n	80102da <UART_WaitOnFlagUntilTimeout+0xf0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f003 0304 	and.w	r3, r3, #4
 801025c:	2b00      	cmp	r3, #0
 801025e:	d02c      	beq.n	80102ba <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	69db      	ldr	r3, [r3, #28]
 8010266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801026a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801026e:	d124      	bne.n	80102ba <UART_WaitOnFlagUntilTimeout+0xd0>

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010278:	621a      	str	r2, [r3, #32]

        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010288:	601a      	str	r2, [r3, #0]
      }
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	689a      	ldr	r2, [r3, #8]
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f022 0201 	bic.w	r2, r2, #1
 8010298:	609a      	str	r2, [r3, #8]

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2220      	movs	r2, #32
 801029e:	679a      	str	r2, [r3, #120]	; 0x78
      {
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2220      	movs	r2, #32
 80102a4:	67da      	str	r2, [r3, #124]	; 0x7c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2220      	movs	r2, #32
 80102aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
 80102b6:	2303      	movs	r3, #3
 80102b8:	e00f      	b.n	80102da <UART_WaitOnFlagUntilTimeout+0xf0>
  *                  until a flag is no longer in the specified status.
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	69da      	ldr	r2, [r3, #28]
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	4013      	ands	r3, r2
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	bf0c      	ite	eq
 80102ca:	2301      	moveq	r3, #1
 80102cc:	2300      	movne	r3, #0
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	461a      	mov	r2, r3
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d091      	beq.n	80101fc <UART_WaitOnFlagUntilTimeout+0x12>
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 80102d8:	2300      	movs	r3, #0
          huart->RxState = HAL_UART_STATE_READY;
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
	...

080102e4 <FMC_SDRAM_Init>:
  */



/** @defgroup FMC_LL_SDRAM
  * @brief    SDRAM Controller functions
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  *
 80102ee:	2300      	movs	r3, #0
 80102f0:	60fb      	str	r3, [r7, #12]
  @verbatim
 80102f2:	2300      	movs	r3, #0
 80102f4:	60bb      	str	r3, [r7, #8]
    (+) FMC SDRAM bank enable/disable write operation using the functions
        FMC_SDRAM_WriteOperation_Enable()/FMC_SDRAM_WriteOperation_Disable()
    (+) FMC SDRAM bank send command using the function FMC_SDRAM_SendCommand()

@endverbatim
  * @{
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d027      	beq.n	801034e <FMC_SDRAM_Init+0x6a>
  */

 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	60fb      	str	r3, [r7, #12]
/** @addtogroup FMC_LL_SDRAM_Private_Functions_Group1
  *  @brief    Initialization and Configuration functions
  *
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	4b2f      	ldr	r3, [pc, #188]	; (80103c4 <FMC_SDRAM_Init+0xe0>)
 8010308:	4013      	ands	r3, r2
 801030a:	60fb      	str	r3, [r7, #12]
@verbatim
  ==============================================================================
              ##### Initialization and de_initialization functions #####
  ==============================================================================
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	685a      	ldr	r2, [r3, #4]
  [..]
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	689b      	ldr	r3, [r3, #8]
  ==============================================================================
 8010314:	431a      	orrs	r2, r3
    This section provides functions allowing to:
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	68db      	ldr	r3, [r3, #12]
  [..]
 801031a:	431a      	orrs	r2, r3
    (+) Initialize and configure the FMC SDRAM interface
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	691b      	ldr	r3, [r3, #16]
    This section provides functions allowing to:
 8010320:	431a      	orrs	r2, r3
    (+) De-initialize the FMC SDRAM interface
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	695b      	ldr	r3, [r3, #20]
    (+) Initialize and configure the FMC SDRAM interface
 8010326:	431a      	orrs	r2, r3
    (+) Configure the FMC clock and associated GPIOs
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	699b      	ldr	r3, [r3, #24]
    (+) De-initialize the FMC SDRAM interface
 801032c:	431a      	orrs	r2, r3

 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	69db      	ldr	r3, [r3, #28]
    (+) Configure the FMC clock and associated GPIOs
 8010332:	431a      	orrs	r2, r3
@endverbatim
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	6a1b      	ldr	r3, [r3, #32]

 8010338:	431a      	orrs	r2, r3
  * @{
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
@endverbatim
 801033e:	4313      	orrs	r3, r2
  ==============================================================================
 8010340:	68fa      	ldr	r2, [r7, #12]
 8010342:	4313      	orrs	r3, r2
 8010344:	60fb      	str	r3, [r7, #12]
  */

 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	601a      	str	r2, [r3, #0]
 801034c:	e032      	b.n	80103b4 <FMC_SDRAM_Init+0xd0>
/**
  * @brief  Initializes the FMC_SDRAM device according to the specified
  *         control parameters in the FMC_SDRAM_InitTypeDef
  * @param  Device Pointer to SDRAM device instance
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	60fb      	str	r3, [r7, #12]
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801035a:	60fb      	str	r3, [r7, #12]
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	69da      	ldr	r2, [r3, #28]
  /* Check the parameters */
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	6a1b      	ldr	r3, [r3, #32]
{
 8010364:	431a      	orrs	r2, r3
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Check the parameters */
 801036a:	4313      	orrs	r3, r2
{
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	4313      	orrs	r3, r2
 8010370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 8010378:	68ba      	ldr	r2, [r7, #8]
 801037a:	4b12      	ldr	r3, [pc, #72]	; (80103c4 <FMC_SDRAM_Init+0xe0>)
 801037c:	4013      	ands	r3, r2
 801037e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	685a      	ldr	r2, [r3, #4]
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 8010388:	431a      	orrs	r2, r3

 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));
 801038e:	431a      	orrs	r2, r3
  /* Set SDRAM bank configuration parameters */
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	691b      	ldr	r3, [r3, #16]

 8010394:	431a      	orrs	r2, r3
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	695b      	ldr	r3, [r3, #20]
  /* Set SDRAM bank configuration parameters */
 801039a:	431a      	orrs	r2, r3
  {
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	699b      	ldr	r3, [r3, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80103a0:	4313      	orrs	r3, r2
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	4313      	orrs	r3, r2
 80103a6:	60bb      	str	r3, [r7, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
               SDCR_CLEAR_MASK,
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	601a      	str	r2, [r3, #0]
               (Init->ColumnBitsNumber   |
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	605a      	str	r2, [r3, #4]
                Init->RowBitsNumber      |
                Init->MemoryDataWidth    |
                Init->InternalBankNumber |
 80103b4:	2300      	movs	r3, #0
                Init->CASLatency         |
 80103b6:	4618      	mov	r0, r3
 80103b8:	3714      	adds	r7, #20
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr
 80103c2:	bf00      	nop
 80103c4:	ffff8000 	.word	0xffff8000

080103c8 <FMC_SDRAM_Timing_Init>:
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
               FMC_SDCR1_SDCLK           |
               FMC_SDCR1_RBURST          |
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
 80103c8:	b480      	push	{r7}
 80103ca:	b087      	sub	sp, #28
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
                Init->ReadBurst          |
 80103d4:	2300      	movs	r3, #0
 80103d6:	617b      	str	r3, [r7, #20]
                Init->ReadPipeDelay));
 80103d8:	2300      	movs	r3, #0
 80103da:	613b      	str	r3, [r7, #16]
                Init->WriteProtection));
  }

  return HAL_OK;
}

 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d02e      	beq.n	8010440 <FMC_SDRAM_Timing_Init+0x78>

/**
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	617b      	str	r3, [r7, #20]
  * @brief  Initializes the FMC_SDRAM device timing according to the specified
  *         parameters in the FMC_SDRAM_TimingTypeDef
  * @param  Device Pointer to SDRAM device instance
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80103ee:	617b      	str	r3, [r7, #20]
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	1e5a      	subs	r2, r3, #1
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	3b01      	subs	r3, #1
 80103fc:	011b      	lsls	r3, r3, #4
  */
 80103fe:	431a      	orrs	r2, r3
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	3b01      	subs	r3, #1
 8010406:	021b      	lsls	r3, r3, #8
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
 8010408:	431a      	orrs	r2, r3
{
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	3b01      	subs	r3, #1
 8010410:	031b      	lsls	r3, r3, #12
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
 8010412:	431a      	orrs	r2, r3
  /* Check the parameters */
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	3b01      	subs	r3, #1
 801041a:	041b      	lsls	r3, r3, #16
{
 801041c:	431a      	orrs	r2, r3
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	695b      	ldr	r3, [r3, #20]
 8010422:	3b01      	subs	r3, #1
 8010424:	051b      	lsls	r3, r3, #20
  /* Check the parameters */
 8010426:	431a      	orrs	r2, r3
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	3b01      	subs	r3, #1
 801042e:	061b      	lsls	r3, r3, #24
  */
 8010430:	4313      	orrs	r3, r2
 8010432:	697a      	ldr	r2, [r7, #20]
 8010434:	4313      	orrs	r3, r2
 8010436:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	697a      	ldr	r2, [r7, #20]
 801043c:	609a      	str	r2, [r3, #8]
 801043e:	e039      	b.n	80104b4 <FMC_SDRAM_Timing_Init+0xec>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

 8010446:	697a      	ldr	r2, [r7, #20]
 8010448:	4b1e      	ldr	r3, [pc, #120]	; (80104c4 <FMC_SDRAM_Timing_Init+0xfc>)
 801044a:	4013      	ands	r3, r2
 801044c:	617b      	str	r3, [r7, #20]
  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	3b01      	subs	r3, #1
 8010454:	031a      	lsls	r2, r3, #12
  {
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	695b      	ldr	r3, [r3, #20]
 801045a:	3b01      	subs	r3, #1
 801045c:	051b      	lsls	r3, r3, #20
  if (Bank == FMC_SDRAM_BANK1)
 801045e:	4313      	orrs	r3, r2
 8010460:	697a      	ldr	r2, [r7, #20]
 8010462:	4313      	orrs	r3, r2
 8010464:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
               SDTR_CLEAR_MASK,
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	68db      	ldr	r3, [r3, #12]
 801046a:	613b      	str	r3, [r7, #16]
               (((Timing->LoadToActiveDelay) - 1U)                                      |
                (((Timing->ExitSelfRefreshDelay) - 1U) << FMC_SDTR1_TXSR_Pos) |
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010472:	613b      	str	r3, [r7, #16]
                (((Timing->RowCycleDelay) - 1U)        << FMC_SDTR1_TRC_Pos)  |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	1e5a      	subs	r2, r3, #1
  }
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	3b01      	subs	r3, #1
 8010480:	011b      	lsls	r3, r3, #4
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
 8010482:	431a      	orrs	r2, r3
  else /* FMC_Bank2_SDRAM */
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	3b01      	subs	r3, #1
 801048a:	021b      	lsls	r3, r3, #8
  }
 801048c:	431a      	orrs	r2, r3
  {
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	3b01      	subs	r3, #1
 8010494:	041b      	lsls	r3, r3, #16
  else /* FMC_Bank2_SDRAM */
 8010496:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	699b      	ldr	r3, [r3, #24]
 801049c:	3b01      	subs	r3, #1
 801049e:	061b      	lsls	r3, r3, #24
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
 80104a0:	4313      	orrs	r3, r2
 80104a2:	693a      	ldr	r2, [r7, #16]
 80104a4:	4313      	orrs	r3, r2
 80104a6:	613b      	str	r3, [r7, #16]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	697a      	ldr	r2, [r7, #20]
 80104ac:	609a      	str	r2, [r3, #8]
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	693a      	ldr	r2, [r7, #16]
 80104b2:	60da      	str	r2, [r3, #12]
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80104b4:	2300      	movs	r3, #0
               SDTR_CLEAR_MASK,
 80104b6:	4618      	mov	r0, r3
 80104b8:	371c      	adds	r7, #28
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	ff0f0fff 	.word	0xff0f0fff

080104c8 <FMC_SDRAM_SendCommand>:
  CLEAR_BIT(Device->SDCR[Bank], FMC_SDRAM_WRITE_PROTECTION_ENABLE);

  return HAL_OK;
}

/**
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	607a      	str	r2, [r7, #4]
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	691a      	ldr	r2, [r3, #16]
 80104d8:	4b0c      	ldr	r3, [pc, #48]	; (801050c <FMC_SDRAM_SendCommand+0x44>)
 80104da:	4013      	ands	r3, r2
 80104dc:	68ba      	ldr	r2, [r7, #8]
 80104de:	6811      	ldr	r1, [r2, #0]
 80104e0:	68ba      	ldr	r2, [r7, #8]
 80104e2:	6852      	ldr	r2, [r2, #4]
 80104e4:	4311      	orrs	r1, r2
 80104e6:	68ba      	ldr	r2, [r7, #8]
 80104e8:	6892      	ldr	r2, [r2, #8]
 80104ea:	3a01      	subs	r2, #1
 80104ec:	0152      	lsls	r2, r2, #5
 80104ee:	4311      	orrs	r1, r2
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	68d2      	ldr	r2, [r2, #12]
 80104f4:	0252      	lsls	r2, r2, #9
 80104f6:	430a      	orrs	r2, r1
 80104f8:	431a      	orrs	r2, r3
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	611a      	str	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 80104fe:	2300      	movs	r3, #0
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 8010500:	4618      	mov	r0, r3
 8010502:	3714      	adds	r7, #20
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	ffc00000 	.word	0xffc00000

08010510 <FMC_SDRAM_ProgramRefreshRate>:
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  return HAL_OK;
}

/**
  * @brief  Program the SDRAM Memory Refresh rate.
  * @param  Device Pointer to SDRAM device instance
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	695a      	ldr	r2, [r3, #20]
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	005b      	lsls	r3, r3, #1
 8010522:	431a      	orrs	r2, r3
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	615a      	str	r2, [r3, #20]
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
 8010528:	2300      	movs	r3, #0
  */
 801052a:	4618      	mov	r0, r3
 801052c:	370c      	adds	r7, #12
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr
	...

08010538 <SDMMC_Init>:
{
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 8010538:	b084      	sub	sp, #16
 801053a:	b480      	push	{r7}
 801053c:	b085      	sub	sp, #20
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
 8010542:	f107 001c 	add.w	r0, r7, #28
 8010546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 801054a:	2300      	movs	r3, #0
 801054c:	60fb      	str	r3, [r7, #12]
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
             Init.HardwareFlowControl |\
             Init.ClockDiv
 801054e:	69fa      	ldr	r2, [r7, #28]
             ); 
 8010550:	6a3b      	ldr	r3, [r7, #32]
             Init.ClockDiv
 8010552:	431a      	orrs	r2, r3
  
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             ); 
 8010556:	431a      	orrs	r2, r3
  /* Write to SDMMC CLKCR */
 8010558:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
 801055a:	431a      	orrs	r2, r3
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* Write to SDMMC CLKCR */
 801055e:	431a      	orrs	r2, r3

 8010560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010562:	4313      	orrs	r3, r2
             Init.ClockDiv
 8010564:	68fa      	ldr	r2, [r7, #12]
 8010566:	4313      	orrs	r3, r2
 8010568:	60fb      	str	r3, [r7, #12]
  return HAL_OK;
}


 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	685a      	ldr	r2, [r3, #4]
 801056e:	4b07      	ldr	r3, [pc, #28]	; (801058c <SDMMC_Init+0x54>)
 8010570:	4013      	ands	r3, r2
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	431a      	orrs	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	605a      	str	r2, [r3, #4]
/**
  * @}
 801057a:	2300      	movs	r3, #0
  */
 801057c:	4618      	mov	r0, r3
 801057e:	3714      	adds	r7, #20
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	b004      	add	sp, #16
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	ffff8100 	.word	0xffff8100

08010590 <SDMMC_ReadFIFO>:
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
}

/**
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  * @brief  Write data (word) to Tx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  * @param  pWriteData: pointer to data to write
 801059e:	4618      	mov	r0, r3
 80105a0:	370c      	adds	r7, #12
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <SDMMC_PowerState_ON>:
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b082      	sub	sp, #8
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]

/**
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2203      	movs	r2, #3
 80105b6:	601a      	str	r2, [r3, #0]
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
 80105b8:	2002      	movs	r0, #2
 80105ba:	f7f4 fe9b 	bl	80052f4 <HAL_Delay>
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 80105be:	2300      	movs	r3, #0
  /* Set power state to OFF */
 80105c0:	4618      	mov	r0, r3
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <SDMMC_GetPowerState>:
/**
  * @brief  Configure the SDMMC command path according to the specified parameters in
  *         SDMMC_CmdInitTypeDef structure and send the command 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  * @retval HAL status
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f003 0303 	and.w	r3, r3, #3
  */
 80105d8:	4618      	mov	r0, r3
 80105da:	370c      	adds	r7, #12
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  SDMMCx->ARG = Command->Argument;
 80105ee:	2300      	movs	r3, #0
 80105f0:	60fb      	str	r3, [r7, #12]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
}
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	685a      	ldr	r2, [r3, #4]

 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	689b      	ldr	r3, [r3, #8]
}
 8010602:	431a      	orrs	r2, r3
/**
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	68db      	ldr	r3, [r3, #12]

 8010608:	431a      	orrs	r2, r3
  * @brief  Return the command index of last command for which response received
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	691b      	ldr	r3, [r3, #16]
/**
 801060e:	4313      	orrs	r3, r2
}
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	4313      	orrs	r3, r2
 8010614:	60fb      	str	r3, [r7, #12]
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	68da      	ldr	r2, [r3, #12]
 801061a:	4b06      	ldr	r3, [pc, #24]	; (8010634 <SDMMC_SendCommand+0x50>)
 801061c:	4013      	ands	r3, r2
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	431a      	orrs	r2, r3
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	60da      	str	r2, [r3, #12]
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010626:	2300      	movs	r3, #0
  return (uint8_t)(SDMMCx->RESPCMD);
 8010628:	4618      	mov	r0, r3
 801062a:	3714      	adds	r7, #20
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr
 8010634:	fffff000 	.word	0xfffff000

08010638 <SDMMC_GetCommandResponse>:

/**
  * @brief  Return the response received from the card for the last command
  * @param  SDMMCx: Pointer to SDMMC register base    
  * @param  Response: Specifies the SDMMC response register. 
  *          This parameter can be one of the following values:
 8010638:	b480      	push	{r7}
 801063a:	b083      	sub	sp, #12
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  *            @arg SDMMC_RESP1: Response Register 1
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	691b      	ldr	r3, [r3, #16]
 8010644:	b2db      	uxtb	r3, r3
  *            @arg SDMMC_RESP2: Response Register 2
 8010646:	4618      	mov	r0, r3
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <SDMMC_GetResponse>:
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
  
  return (*(__IO uint32_t *) tmp);
 8010652:	b480      	push	{r7}
 8010654:	b085      	sub	sp, #20
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]

/**
  * @brief  Configure the SDMMC data path according to the specified 
  *         parameters in the SDMMC_DataInitTypeDef.
  * @param  SDMMCx: Pointer to SDMMC register base  
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	3314      	adds	r3, #20
 8010660:	461a      	mov	r2, r3
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	4413      	add	r3, r2
 8010666:	60fb      	str	r3, [r7, #12]
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
  */
 801066c:	4618      	mov	r0, r3
 801066e:	3714      	adds	r7, #20
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

 8010678:	b480      	push	{r7}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  /* Set the SDMMC Data TimeOut value */
 8010682:	2300      	movs	r3, #0
 8010684:	60fb      	str	r3, [r7, #12]

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	629a      	str	r2, [r3, #40]	; 0x28

  return HAL_OK;

 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	689a      	ldr	r2, [r3, #8]
}
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	68db      	ldr	r3, [r3, #12]

 801069e:	431a      	orrs	r2, r3

 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	691b      	ldr	r3, [r3, #16]
}
 80106a4:	431a      	orrs	r2, r3
/**
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	695b      	ldr	r3, [r3, #20]

 80106aa:	4313      	orrs	r3, r2

 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	60fb      	str	r3, [r7, #12]
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Number of remaining data bytes to be transferred
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	431a      	orrs	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	62da      	str	r2, [r3, #44]	; 0x2c
  */
uint32_t SDMMC_GetDataCounter(SDMMC_TypeDef *SDMMCx)
 80106c2:	2300      	movs	r3, #0
{
  return (SDMMCx->DCOUNT);
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <SDMMC_CmdBlockLength>:
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);

 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	60bb      	str	r3, [r7, #8]
  return errorstate;
 80106de:	2310      	movs	r3, #16
 80106e0:	60fb      	str	r3, [r7, #12]
}
 80106e2:	2340      	movs	r3, #64	; 0x40
 80106e4:	613b      	str	r3, [r7, #16]

 80106e6:	2300      	movs	r3, #0
 80106e8:	617b      	str	r3, [r7, #20]
/**
 80106ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ee:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Read Single Block command and check the response
 80106f0:	f107 0308 	add.w	r3, r7, #8
 80106f4:	4619      	mov	r1, r3
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7ff ff74 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 80106fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010700:	2110      	movs	r1, #16
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 fa46 	bl	8010b94 <SDMMC_GetCmdResp1>
 8010708:	61f8      	str	r0, [r7, #28]
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801070a:	69fb      	ldr	r3, [r7, #28]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 801070c:	4618      	mov	r0, r3
 801070e:	3720      	adds	r7, #32
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <SDMMC_CmdReadSingleBlock>:
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010714:	b580      	push	{r7, lr}
 8010716:	b088      	sub	sp, #32
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);

 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	60bb      	str	r3, [r7, #8]
  return errorstate;
 8010722:	2311      	movs	r3, #17
 8010724:	60fb      	str	r3, [r7, #12]
}
 8010726:	2340      	movs	r3, #64	; 0x40
 8010728:	613b      	str	r3, [r7, #16]

 801072a:	2300      	movs	r3, #0
 801072c:	617b      	str	r3, [r7, #20]
/**
 801072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010732:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Read Multi Block command and check the response
 8010734:	f107 0308 	add.w	r3, r7, #8
 8010738:	4619      	mov	r1, r3
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff ff52 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 8010740:	f241 3288 	movw	r2, #5000	; 0x1388
 8010744:	2111      	movs	r1, #17
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f000 fa24 	bl	8010b94 <SDMMC_GetCmdResp1>
 801074c:	61f8      	str	r0, [r7, #28]
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801074e:	69fb      	ldr	r3, [r7, #28]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 8010750:	4618      	mov	r0, r3
 8010752:	3720      	adds	r7, #32
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <SDMMC_CmdReadMultiBlock>:
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);

 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	60bb      	str	r3, [r7, #8]
  return errorstate;
 8010766:	2312      	movs	r3, #18
 8010768:	60fb      	str	r3, [r7, #12]
}
 801076a:	2340      	movs	r3, #64	; 0x40
 801076c:	613b      	str	r3, [r7, #16]

 801076e:	2300      	movs	r3, #0
 8010770:	617b      	str	r3, [r7, #20]
/**
 8010772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010776:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Write Single Block command and check the response
 8010778:	f107 0308 	add.w	r3, r7, #8
 801077c:	4619      	mov	r1, r3
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f7ff ff30 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 8010784:	f241 3288 	movw	r2, #5000	; 0x1388
 8010788:	2112      	movs	r1, #18
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 fa02 	bl	8010b94 <SDMMC_GetCmdResp1>
 8010790:	61f8      	str	r0, [r7, #28]
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010792:	69fb      	ldr	r3, [r7, #28]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 8010794:	4618      	mov	r0, r3
 8010796:	3720      	adds	r7, #32
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <SDMMC_CmdWriteSingleBlock>:
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801079c:	b580      	push	{r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);

 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	60bb      	str	r3, [r7, #8]
  return errorstate;
 80107aa:	2318      	movs	r3, #24
 80107ac:	60fb      	str	r3, [r7, #12]
}
 80107ae:	2340      	movs	r3, #64	; 0x40
 80107b0:	613b      	str	r3, [r7, #16]

 80107b2:	2300      	movs	r3, #0
 80107b4:	617b      	str	r3, [r7, #20]
/**
 80107b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107ba:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Write Multi Block command and check the response
 80107bc:	f107 0308 	add.w	r3, r7, #8
 80107c0:	4619      	mov	r1, r3
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7ff ff0e 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 80107c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80107cc:	2118      	movs	r1, #24
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f9e0 	bl	8010b94 <SDMMC_GetCmdResp1>
 80107d4:	61f8      	str	r0, [r7, #28]
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80107d6:	69fb      	ldr	r3, [r7, #28]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 80107d8:	4618      	mov	r0, r3
 80107da:	3720      	adds	r7, #32
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <SDMMC_CmdWriteMultiBlock>:
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);

 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	60bb      	str	r3, [r7, #8]
  return errorstate;
 80107ee:	2319      	movs	r3, #25
 80107f0:	60fb      	str	r3, [r7, #12]
}
 80107f2:	2340      	movs	r3, #64	; 0x40
 80107f4:	613b      	str	r3, [r7, #16]

 80107f6:	2300      	movs	r3, #0
 80107f8:	617b      	str	r3, [r7, #20]
/**
 80107fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107fe:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Start Address Erase command for SD and check the response
 8010800:	f107 0308 	add.w	r3, r7, #8
 8010804:	4619      	mov	r1, r3
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7ff feec 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 801080c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010810:	2119      	movs	r1, #25
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f9be 	bl	8010b94 <SDMMC_GetCmdResp1>
 8010818:	61f8      	str	r0, [r7, #28]
uint32_t SDMMC_CmdSDEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd)
{
 801081a:	69fb      	ldr	r3, [r7, #28]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 801081c:	4618      	mov	r0, r3
 801081e:	3720      	adds	r7, #32
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <SDMMC_CmdStopTransfer>:
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010824:	b580      	push	{r7, lr}
 8010826:	b088      	sub	sp, #32
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);

 801082c:	2300      	movs	r3, #0
 801082e:	60bb      	str	r3, [r7, #8]
  return errorstate;
 8010830:	230c      	movs	r3, #12
 8010832:	60fb      	str	r3, [r7, #12]
}
 8010834:	2340      	movs	r3, #64	; 0x40
 8010836:	613b      	str	r3, [r7, #16]

 8010838:	2300      	movs	r3, #0
 801083a:	617b      	str	r3, [r7, #20]
/**
 801083c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010840:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Select Deselect command and check the response.
 8010842:	f107 0308 	add.w	r3, r7, #8
 8010846:	4619      	mov	r1, r3
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7ff fecb 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
 801084e:	4a05      	ldr	r2, [pc, #20]	; (8010864 <SDMMC_CmdStopTransfer+0x40>)
 8010850:	210c      	movs	r1, #12
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f99e 	bl	8010b94 <SDMMC_GetCmdResp1>
 8010858:	61f8      	str	r0, [r7, #28]
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
 801085a:	69fb      	ldr	r3, [r7, #28]
{
 801085c:	4618      	mov	r0, r3
 801085e:	3720      	adds	r7, #32
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	05f5e100 	.word	0x05f5e100

08010868 <SDMMC_CmdSelDesel>:
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010868:	b580      	push	{r7, lr}
 801086a:	b08a      	sub	sp, #40	; 0x28
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	e9c7 2300 	strd	r2, r3, [r7]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);

 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	613b      	str	r3, [r7, #16]
  return errorstate;
 8010878:	2307      	movs	r3, #7
 801087a:	617b      	str	r3, [r7, #20]
}
 801087c:	2340      	movs	r3, #64	; 0x40
 801087e:	61bb      	str	r3, [r7, #24]

 8010880:	2300      	movs	r3, #0
 8010882:	61fb      	str	r3, [r7, #28]
/**
 8010884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010888:	623b      	str	r3, [r7, #32]
  * @brief  Send the Go Idle State command and check the response.
 801088a:	f107 0310 	add.w	r3, r7, #16
 801088e:	4619      	mov	r1, r3
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f7ff fea7 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 8010896:	f241 3288 	movw	r2, #5000	; 0x1388
 801089a:	2107      	movs	r1, #7
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f000 f979 	bl	8010b94 <SDMMC_GetCmdResp1>
 80108a2:	6278      	str	r0, [r7, #36]	; 0x24
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80108a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 80108a6:	4618      	mov	r0, r3
 80108a8:	3728      	adds	r7, #40	; 0x28
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <SDMMC_CmdGoIdleState>:
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b088      	sub	sp, #32
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);

 80108b6:	2300      	movs	r3, #0
 80108b8:	60bb      	str	r3, [r7, #8]
  return errorstate;
 80108ba:	2300      	movs	r3, #0
 80108bc:	60fb      	str	r3, [r7, #12]
}
 80108be:	2300      	movs	r3, #0
 80108c0:	613b      	str	r3, [r7, #16]

 80108c2:	2300      	movs	r3, #0
 80108c4:	617b      	str	r3, [r7, #20]
/**
 80108c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108ca:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Operating Condition command and check the response.
 80108cc:	f107 0308 	add.w	r3, r7, #8
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff fe86 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 f92f 	bl	8010b3c <SDMMC_GetCmdError>
 80108de:	61f8      	str	r0, [r7, #28]
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80108e0:	69fb      	ldr	r3, [r7, #28]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 80108e2:	4618      	mov	r0, r3
 80108e4:	3720      	adds	r7, #32
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <SDMMC_CmdOperCond>:
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b088      	sub	sp, #32
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);

 80108f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80108f6:	60bb      	str	r3, [r7, #8]
  return errorstate;
 80108f8:	2308      	movs	r3, #8
 80108fa:	60fb      	str	r3, [r7, #12]
}
 80108fc:	2340      	movs	r3, #64	; 0x40
 80108fe:	613b      	str	r3, [r7, #16]

 8010900:	2300      	movs	r3, #0
 8010902:	617b      	str	r3, [r7, #20]
/**
 8010904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010908:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Application command to verify that that the next command 
 801090a:	f107 0308 	add.w	r3, r7, #8
 801090e:	4619      	mov	r1, r3
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff fe67 	bl	80105e4 <SDMMC_SendCommand>
  *         is an application specific com-mand rather than a standard command
  *         and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fb26 	bl	8010f68 <SDMMC_GetCmdResp7>
 801091c:	61f8      	str	r0, [r7, #28]
  * @param  Argument: Command Argument 
  * @retval HAL status
 801091e:	69fb      	ldr	r3, [r7, #28]
  */
 8010920:	4618      	mov	r0, r3
 8010922:	3720      	adds	r7, #32
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <SDMMC_CmdAppCommand>:
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010928:	b580      	push	{r7, lr}
 801092a:	b088      	sub	sp, #32
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	60bb      	str	r3, [r7, #8]
     or SD card 1.x */
 8010936:	2337      	movs	r3, #55	; 0x37
 8010938:	60fb      	str	r3, [r7, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801093a:	2340      	movs	r3, #64	; 0x40
 801093c:	613b      	str	r3, [r7, #16]

 801093e:	2300      	movs	r3, #0
 8010940:	617b      	str	r3, [r7, #20]
  return errorstate;
 8010942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010946:	61bb      	str	r3, [r7, #24]
}
 8010948:	f107 0308 	add.w	r3, r7, #8
 801094c:	4619      	mov	r1, r3
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f7ff fe48 	bl	80105e4 <SDMMC_SendCommand>

/**
  * @brief  Send the command asking the accessed card to send its operating 
  *         condition register (OCR)
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
 8010954:	f241 3288 	movw	r2, #5000	; 0x1388
 8010958:	2137      	movs	r1, #55	; 0x37
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 f91a 	bl	8010b94 <SDMMC_GetCmdResp1>
 8010960:	61f8      	str	r0, [r7, #28]
  * @retval HAL status
  */
 8010962:	69fb      	ldr	r3, [r7, #28]
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
 8010964:	4618      	mov	r0, r3
 8010966:	3720      	adds	r7, #32
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801096c:	b580      	push	{r7, lr}
 801096e:	b088      	sub	sp, #32
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);

 8010976:	683a      	ldr	r2, [r7, #0]
 8010978:	4b0d      	ldr	r3, [pc, #52]	; (80109b0 <SDMMC_CmdAppOperCommand+0x44>)
 801097a:	4313      	orrs	r3, r2
 801097c:	60bb      	str	r3, [r7, #8]
  return errorstate;
 801097e:	2329      	movs	r3, #41	; 0x29
 8010980:	60fb      	str	r3, [r7, #12]
}
 8010982:	2340      	movs	r3, #64	; 0x40
 8010984:	613b      	str	r3, [r7, #16]

 8010986:	2300      	movs	r3, #0
 8010988:	617b      	str	r3, [r7, #20]
/**
 801098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801098e:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Bus Width command and check the response.
 8010990:	f107 0308 	add.w	r3, r7, #8
 8010994:	4619      	mov	r1, r3
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7ff fe24 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 fa2f 	bl	8010e00 <SDMMC_GetCmdResp3>
 80109a2:	61f8      	str	r0, [r7, #28]
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
 80109a4:	69fb      	ldr	r3, [r7, #28]
{
 80109a6:	4618      	mov	r0, r3
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	80100000 	.word	0x80100000

080109b4 <SDMMC_CmdBusWidth>:
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b088      	sub	sp, #32
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);

 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	60bb      	str	r3, [r7, #8]
  return errorstate;
 80109c2:	2306      	movs	r3, #6
 80109c4:	60fb      	str	r3, [r7, #12]
}
 80109c6:	2340      	movs	r3, #64	; 0x40
 80109c8:	613b      	str	r3, [r7, #16]

 80109ca:	2300      	movs	r3, #0
 80109cc:	617b      	str	r3, [r7, #20]
/**
 80109ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109d2:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Send SCR command and check the response.
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff fe02 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 80109e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80109e4:	2106      	movs	r1, #6
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 f8d4 	bl	8010b94 <SDMMC_GetCmdResp1>
 80109ec:	61f8      	str	r0, [r7, #28]
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80109ee:	69fb      	ldr	r3, [r7, #28]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 80109f0:	4618      	mov	r0, r3
 80109f2:	3720      	adds	r7, #32
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <SDMMC_CmdSendSCR>:
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b088      	sub	sp, #32
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);

 8010a00:	2300      	movs	r3, #0
 8010a02:	60bb      	str	r3, [r7, #8]
  return errorstate;
 8010a04:	2333      	movs	r3, #51	; 0x33
 8010a06:	60fb      	str	r3, [r7, #12]
}
 8010a08:	2340      	movs	r3, #64	; 0x40
 8010a0a:	613b      	str	r3, [r7, #16]

 8010a0c:	2300      	movs	r3, #0
 8010a0e:	617b      	str	r3, [r7, #20]
/**
 8010a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a14:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Send CID command and check the response.
 8010a16:	f107 0308 	add.w	r3, r7, #8
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff fde1 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
 8010a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a26:	2133      	movs	r1, #51	; 0x33
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 f8b3 	bl	8010b94 <SDMMC_GetCmdResp1>
 8010a2e:	61f8      	str	r0, [r7, #28]
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010a30:	69fb      	ldr	r3, [r7, #28]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 8010a32:	4618      	mov	r0, r3
 8010a34:	3720      	adds	r7, #32
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}

08010a3a <SDMMC_CmdSendCID>:
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b088      	sub	sp, #32
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);

 8010a42:	2300      	movs	r3, #0
 8010a44:	60bb      	str	r3, [r7, #8]
  return errorstate;
 8010a46:	2302      	movs	r3, #2
 8010a48:	60fb      	str	r3, [r7, #12]
}
 8010a4a:	23c0      	movs	r3, #192	; 0xc0
 8010a4c:	613b      	str	r3, [r7, #16]

 8010a4e:	2300      	movs	r3, #0
 8010a50:	617b      	str	r3, [r7, #20]
/**
 8010a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a56:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Send CSD command and check the response.
 8010a58:	f107 0308 	add.w	r3, r7, #8
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f7ff fdc0 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f000 f983 	bl	8010d70 <SDMMC_GetCmdResp2>
 8010a6a:	61f8      	str	r0, [r7, #28]
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
 8010a6c:	69fb      	ldr	r3, [r7, #28]
{
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3720      	adds	r7, #32
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <SDMMC_CmdSendCSD>:
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b088      	sub	sp, #32
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	6039      	str	r1, [r7, #0]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);

 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	60bb      	str	r3, [r7, #8]
  return errorstate;
 8010a84:	2309      	movs	r3, #9
 8010a86:	60fb      	str	r3, [r7, #12]
}
 8010a88:	23c0      	movs	r3, #192	; 0xc0
 8010a8a:	613b      	str	r3, [r7, #16]

 8010a8c:	2300      	movs	r3, #0
 8010a8e:	617b      	str	r3, [r7, #20]
/**
 8010a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a94:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Send CSD command and check the response.
 8010a96:	f107 0308 	add.w	r3, r7, #8
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f7ff fda1 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 f964 	bl	8010d70 <SDMMC_GetCmdResp2>
 8010aa8:	61f8      	str	r0, [r7, #28]
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
 8010aaa:	69fb      	ldr	r3, [r7, #28]
{
 8010aac:	4618      	mov	r0, r3
 8010aae:	3720      	adds	r7, #32
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <SDMMC_CmdSetRelAdd>:
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b088      	sub	sp, #32
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);

 8010abe:	2300      	movs	r3, #0
 8010ac0:	60bb      	str	r3, [r7, #8]
  return errorstate;
 8010ac2:	2303      	movs	r3, #3
 8010ac4:	60fb      	str	r3, [r7, #12]
}
 8010ac6:	2340      	movs	r3, #64	; 0x40
 8010ac8:	613b      	str	r3, [r7, #16]

 8010aca:	2300      	movs	r3, #0
 8010acc:	617b      	str	r3, [r7, #20]
/**
 8010ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ad2:	61bb      	str	r3, [r7, #24]
  * @brief  Send the Set Relative Address command to MMC card (not SD card).
 8010ad4:	f107 0308 	add.w	r3, r7, #8
 8010ad8:	4619      	mov	r1, r3
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f7ff fd82 	bl	80105e4 <SDMMC_SendCommand>
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
 8010ae0:	683a      	ldr	r2, [r7, #0]
 8010ae2:	2103      	movs	r1, #3
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 f9c9 	bl	8010e7c <SDMMC_GetCmdResp6>
 8010aea:	61f8      	str	r0, [r7, #28]
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
 8010aec:	69fb      	ldr	r3, [r7, #28]
{
 8010aee:	4618      	mov	r0, r3
 8010af0:	3720      	adds	r7, #32
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <SDMMC_CmdSendStatus>:
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b088      	sub	sp, #32
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
 8010afe:	6039      	str	r1, [r7, #0]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	60bb      	str	r3, [r7, #8]

 8010b04:	230d      	movs	r3, #13
 8010b06:	60fb      	str	r3, [r7, #12]
  return errorstate;
 8010b08:	2340      	movs	r3, #64	; 0x40
 8010b0a:	613b      	str	r3, [r7, #16]
}
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	617b      	str	r3, [r7, #20]

 8010b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b14:	61bb      	str	r3, [r7, #24]
/**
 8010b16:	f107 0308 	add.w	r3, r7, #8
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f7ff fd61 	bl	80105e4 <SDMMC_SendCommand>
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
 8010b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b26:	210d      	movs	r1, #13
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 f833 	bl	8010b94 <SDMMC_GetCmdResp1>
 8010b2e:	61f8      	str	r0, [r7, #28]
  * @retval HAL status
  */
 8010b30:	69fb      	ldr	r3, [r7, #28]
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
 8010b32:	4618      	mov	r0, r3
 8010b34:	3720      	adds	r7, #32
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
	...

08010b3c <SDMMC_GetCmdError>:
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);

  return errorstate;
}

 8010b3c:	b480      	push	{r7}
 8010b3e:	b085      	sub	sp, #20
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
/**
  * @brief  Send the Send EXT_CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
 8010b44:	4b11      	ldr	r3, [pc, #68]	; (8010b8c <SDMMC_GetCmdError+0x50>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	4a11      	ldr	r2, [pc, #68]	; (8010b90 <SDMMC_GetCmdError+0x54>)
 8010b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8010b4e:	0a5b      	lsrs	r3, r3, #9
 8010b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b54:	fb02 f303 	mul.w	r3, r2, r3
 8010b58:	60fb      	str	r3, [r7, #12]
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	1e5a      	subs	r2, r3, #1
 8010b5e:	60fa      	str	r2, [r7, #12]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d102      	bne.n	8010b6a <SDMMC_GetCmdError+0x2e>
{
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
 8010b64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b68:	e009      	b.n	8010b7e <SDMMC_GetCmdError+0x42>
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d0f1      	beq.n	8010b5a <SDMMC_GetCmdError+0x1e>
  sdmmc_cmdinit.Argument         = Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	22c5      	movs	r2, #197	; 0xc5
 8010b7a:	639a      	str	r2, [r3, #56]	; 0x38
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b7c:	2300      	movs	r3, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	20000008 	.word	0x20000008
 8010b90:	10624dd3 	.word	0x10624dd3

08010b94 <SDMMC_GetCmdResp1>:

  return errorstate;
}

/**
  * @}
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b088      	sub	sp, #32
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	60f8      	str	r0, [r7, #12]
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	607a      	str	r2, [r7, #4]
 8010ba0:	72fb      	strb	r3, [r7, #11]
  */

/** @defgroup HAL_SDMMC_LL_Group5 Responses management functions
 *  @brief   Responses functions
 *
@verbatim
 8010ba2:	4b70      	ldr	r3, [pc, #448]	; (8010d64 <SDMMC_GetCmdResp1+0x1d0>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	4a70      	ldr	r2, [pc, #448]	; (8010d68 <SDMMC_GetCmdResp1+0x1d4>)
 8010ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8010bac:	0a5a      	lsrs	r2, r3, #9
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	fb02 f303 	mul.w	r3, r2, r3
 8010bb4:	61fb      	str	r3, [r7, #28]
 ===============================================================================
                   ##### Responses management functions #####
 ===============================================================================
    [..]
 8010bb6:	69fb      	ldr	r3, [r7, #28]
 8010bb8:	1e5a      	subs	r2, r3, #1
 8010bba:	61fa      	str	r2, [r7, #28]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d102      	bne.n	8010bc6 <SDMMC_GetCmdResp1+0x32>
    This subsection provides a set of functions allowing to manage the needed responses.

 8010bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bc4:	e0c9      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
@endverbatim
  * @{
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bca:	61bb      	str	r3, [r7, #24]
  */
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	f003 0345 	and.w	r3, r3, #69	; 0x45
/**
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d0ef      	beq.n	8010bb6 <SDMMC_GetCmdResp1+0x22>
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  */
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d1ea      	bne.n	8010bb6 <SDMMC_GetCmdResp1+0x22>
  * @brief  Checks for error conditions for R1 response.
  * @param  SDMMCx Pointer to SDMMC register base
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be4:	f003 0304 	and.w	r3, r3, #4
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d004      	beq.n	8010bf6 <SDMMC_GetCmdResp1+0x62>
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2204      	movs	r2, #4
 8010bf0:	639a      	str	r2, [r3, #56]	; 0x38
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
 8010bf2:	2304      	movs	r3, #4
 8010bf4:	e0b1      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
{
  uint32_t response_r1;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfa:	f003 0301 	and.w	r3, r3, #1
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d004      	beq.n	8010c0c <SDMMC_GetCmdResp1+0x78>
  uint32_t sta_reg;
  
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2201      	movs	r2, #1
 8010c06:	639a      	str	r2, [r3, #56]	; 0x38
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e0a6      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  do
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	22c5      	movs	r2, #197	; 0xc5
 8010c10:	639a      	str	r2, [r3, #56]	; 0x38
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f7ff fd10 	bl	8010638 <SDMMC_GetCommandResponse>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	7afb      	ldrb	r3, [r7, #11]
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d001      	beq.n	8010c26 <SDMMC_GetCmdResp1+0x92>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c22:	2301      	movs	r3, #1
 8010c24:	e099      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c26:	2100      	movs	r1, #0
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7ff fd12 	bl	8010652 <SDMMC_GetResponse>
 8010c2e:	6178      	str	r0, [r7, #20]
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c30:	697a      	ldr	r2, [r7, #20]
 8010c32:	4b4e      	ldr	r3, [pc, #312]	; (8010d6c <SDMMC_GetCmdResp1+0x1d8>)
 8010c34:	4013      	ands	r3, r2
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <SDMMC_GetCmdResp1+0xaa>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	e08d      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	da02      	bge.n	8010c4a <SDMMC_GetCmdResp1+0xb6>
  }
  else
 8010c44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010c48:	e087      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d001      	beq.n	8010c58 <SDMMC_GetCmdResp1+0xc4>
  }
  
 8010c54:	2340      	movs	r3, #64	; 0x40
 8010c56:	e080      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <SDMMC_GetCmdResp1+0xd2>
  
  /* Check response received is of desired command */
 8010c62:	2380      	movs	r3, #128	; 0x80
 8010c64:	e079      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
  {
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d002      	beq.n	8010c76 <SDMMC_GetCmdResp1+0xe2>
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
 8010c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c74:	e071      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  
  /* We have received response, retrieve it for analysis  */
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <SDMMC_GetCmdResp1+0xf2>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
 8010c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c84:	e069      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
  {
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d002      	beq.n	8010c96 <SDMMC_GetCmdResp1+0x102>
    return SDMMC_ERROR_NONE;
  }
 8010c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c94:	e061      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
  {
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d002      	beq.n	8010ca6 <SDMMC_GetCmdResp1+0x112>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
 8010ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ca4:	e059      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
  {
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <SDMMC_GetCmdResp1+0x122>
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
 8010cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cb4:	e051      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
  {
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d002      	beq.n	8010cc6 <SDMMC_GetCmdResp1+0x132>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
 8010cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010cc4:	e049      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
  {
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d002      	beq.n	8010cd6 <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
 8010cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010cd4:	e041      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
  {
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <SDMMC_GetCmdResp1+0x152>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
 8010ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ce4:	e039      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
  {
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d002      	beq.n	8010cf6 <SDMMC_GetCmdResp1+0x162>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
 8010cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010cf4:	e031      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
  {
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <SDMMC_GetCmdResp1+0x172>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
 8010d00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010d04:	e029      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
  {
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <SDMMC_GetCmdResp1+0x182>
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
 8010d10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010d14:	e021      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
  {
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <SDMMC_GetCmdResp1+0x192>
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
 8010d20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010d24:	e019      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
  {
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <SDMMC_GetCmdResp1+0x1a2>
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
 8010d30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010d34:	e011      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
  {
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d002      	beq.n	8010d46 <SDMMC_GetCmdResp1+0x1b2>
    return SDMMC_ERROR_CC_ERR;
  }
 8010d40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010d44:	e009      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
  {
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	f003 0308 	and.w	r3, r3, #8
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d002      	beq.n	8010d56 <SDMMC_GetCmdResp1+0x1c2>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
 8010d50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010d54:	e001      	b.n	8010d5a <SDMMC_GetCmdResp1+0x1c6>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
 8010d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
  {
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3720      	adds	r7, #32
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	20000008 	.word	0x20000008
 8010d68:	10624dd3 	.word	0x10624dd3
 8010d6c:	fdffe008 	.word	0xfdffe008

08010d70 <SDMMC_GetCmdResp2>:
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
  {
 8010d70:	b480      	push	{r7}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
  {
 8010d78:	4b1f      	ldr	r3, [pc, #124]	; (8010df8 <SDMMC_GetCmdResp2+0x88>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a1f      	ldr	r2, [pc, #124]	; (8010dfc <SDMMC_GetCmdResp2+0x8c>)
 8010d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8010d82:	0a5b      	lsrs	r3, r3, #9
 8010d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d88:	fb02 f303 	mul.w	r3, r2, r3
 8010d8c:	60fb      	str	r3, [r7, #12]
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	1e5a      	subs	r2, r3, #1
 8010d92:	60fa      	str	r2, [r7, #12]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d102      	bne.n	8010d9e <SDMMC_GetCmdResp2+0x2e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
 8010d98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d9c:	e026      	b.n	8010dec <SDMMC_GetCmdResp2+0x7c>
  else
  {
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010da2:	60bb      	str	r3, [r7, #8]
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	f003 0345 	and.w	r3, r3, #69	; 0x45
  }
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d0ef      	beq.n	8010d8e <SDMMC_GetCmdResp2+0x1e>
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d1ea      	bne.n	8010d8e <SDMMC_GetCmdResp2+0x1e>
}

 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dbc:	f003 0304 	and.w	r3, r3, #4
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d004      	beq.n	8010dce <SDMMC_GetCmdResp2+0x5e>
/**
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2204      	movs	r2, #4
 8010dc8:	639a      	str	r2, [r3, #56]	; 0x38
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
 8010dca:	2304      	movs	r3, #4
 8010dcc:	e00e      	b.n	8010dec <SDMMC_GetCmdResp2+0x7c>
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dd2:	f003 0301 	and.w	r3, r3, #1
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d004      	beq.n	8010de4 <SDMMC_GetCmdResp2+0x74>
{
  uint32_t sta_reg;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	639a      	str	r2, [r3, #56]	; 0x38
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
 8010de0:	2301      	movs	r3, #1
 8010de2:	e003      	b.n	8010dec <SDMMC_GetCmdResp2+0x7c>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
  
  do
  {
    if (count-- == 0U)
    {
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	22c5      	movs	r2, #197	; 0xc5
 8010de8:	639a      	str	r2, [r3, #56]	; 0x38
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8010dea:	2300      	movs	r3, #0
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010dec:	4618      	mov	r0, r3
 8010dee:	3714      	adds	r7, #20
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr
 8010df8:	20000008 	.word	0x20000008
 8010dfc:	10624dd3 	.word	0x10624dd3

08010e00 <SDMMC_GetCmdResp3>:
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
 8010e00:	b480      	push	{r7}
 8010e02:	b085      	sub	sp, #20
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
    
 8010e08:	4b1a      	ldr	r3, [pc, #104]	; (8010e74 <SDMMC_GetCmdResp3+0x74>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a1a      	ldr	r2, [pc, #104]	; (8010e78 <SDMMC_GetCmdResp3+0x78>)
 8010e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e12:	0a5b      	lsrs	r3, r3, #9
 8010e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e18:	fb02 f303 	mul.w	r3, r2, r3
 8010e1c:	60fb      	str	r3, [r7, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  else
  {
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	1e5a      	subs	r2, r3, #1
 8010e22:	60fa      	str	r2, [r7, #12]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d102      	bne.n	8010e2e <SDMMC_GetCmdResp3+0x2e>
    /* No error flag set */
    /* Clear all the static flags */
 8010e28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e2c:	e01b      	b.n	8010e66 <SDMMC_GetCmdResp3+0x66>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e32:	60bb      	str	r3, [r7, #8]

 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	f003 0345 	and.w	r3, r3, #69	; 0x45
  return SDMMC_ERROR_NONE;
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0ef      	beq.n	8010e1e <SDMMC_GetCmdResp3+0x1e>
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800

 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d1ea      	bne.n	8010e1e <SDMMC_GetCmdResp3+0x1e>
}

 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4c:	f003 0304 	and.w	r3, r3, #4
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d004      	beq.n	8010e5e <SDMMC_GetCmdResp3+0x5e>
/**
  * @brief  Checks for error conditions for R3 (OCR) response.
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2204      	movs	r2, #4
 8010e58:	639a      	str	r2, [r3, #56]	; 0x38
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
 8010e5a:	2304      	movs	r3, #4
 8010e5c:	e003      	b.n	8010e66 <SDMMC_GetCmdResp3+0x66>
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	22c5      	movs	r2, #197	; 0xc5
 8010e62:	639a      	str	r2, [r3, #56]	; 0x38
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
  
 8010e64:	2300      	movs	r3, #0
  do
 8010e66:	4618      	mov	r0, r3
 8010e68:	3714      	adds	r7, #20
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	20000008 	.word	0x20000008
 8010e78:	10624dd3 	.word	0x10624dd3

08010e7c <SDMMC_GetCmdResp6>:
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
  {
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b088      	sub	sp, #32
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	460b      	mov	r3, r1
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	72fb      	strb	r3, [r7, #11]
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
 8010e8a:	4b35      	ldr	r3, [pc, #212]	; (8010f60 <SDMMC_GetCmdResp6+0xe4>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	4a35      	ldr	r2, [pc, #212]	; (8010f64 <SDMMC_GetCmdResp6+0xe8>)
 8010e90:	fba2 2303 	umull	r2, r3, r2, r3
 8010e94:	0a5b      	lsrs	r3, r3, #9
 8010e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e9a:	fb02 f303 	mul.w	r3, r2, r3
 8010e9e:	61fb      	str	r3, [r7, #28]
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }
  
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	1e5a      	subs	r2, r3, #1
 8010ea4:	61fa      	str	r2, [r7, #28]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d102      	bne.n	8010eb0 <SDMMC_GetCmdResp6+0x34>
  return SDMMC_ERROR_NONE;
}
 8010eaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010eae:	e052      	b.n	8010f56 <SDMMC_GetCmdResp6+0xda>

/**
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eb4:	61bb      	str	r3, [r7, #24]
  * @brief  Checks for error conditions for R6 (RCA) response.
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	f003 0345 	and.w	r3, r3, #69	; 0x45
  * @param  SDMMCx Pointer to SDMMC register base
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d0ef      	beq.n	8010ea0 <SDMMC_GetCmdResp6+0x24>
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  * @brief  Checks for error conditions for R6 (RCA) response.
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1ea      	bne.n	8010ea0 <SDMMC_GetCmdResp6+0x24>
  * @param  SD_CMD: The sent command index
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ece:	f003 0304 	and.w	r3, r3, #4
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d004      	beq.n	8010ee0 <SDMMC_GetCmdResp6+0x64>
  *         address RCA   
  * @retval SD Card error state
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2204      	movs	r2, #4
 8010eda:	639a      	str	r2, [r3, #56]	; 0x38
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
 8010edc:	2304      	movs	r3, #4
 8010ede:	e03a      	b.n	8010f56 <SDMMC_GetCmdResp6+0xda>
{
  uint32_t response_r1;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ee4:	f003 0301 	and.w	r3, r3, #1
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d004      	beq.n	8010ef6 <SDMMC_GetCmdResp6+0x7a>
  uint32_t sta_reg;

 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	639a      	str	r2, [r3, #56]	; 0x38
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e02f      	b.n	8010f56 <SDMMC_GetCmdResp6+0xda>
  do
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	f7ff fb9e 	bl	8010638 <SDMMC_GetCommandResponse>
 8010efc:	4603      	mov	r3, r0
 8010efe:	461a      	mov	r2, r3
 8010f00:	7afb      	ldrb	r3, [r7, #11]
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d001      	beq.n	8010f0a <SDMMC_GetCmdResp6+0x8e>
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f06:	2301      	movs	r3, #1
 8010f08:	e025      	b.n	8010f56 <SDMMC_GetCmdResp6+0xda>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
  {
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	22c5      	movs	r2, #197	; 0xc5
 8010f0e:	639a      	str	r2, [r3, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f10:	2100      	movs	r1, #0
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	f7ff fb9d 	bl	8010652 <SDMMC_GetResponse>
 8010f18:	6178      	str	r0, [r7, #20]
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d106      	bne.n	8010f32 <SDMMC_GetCmdResp6+0xb6>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	0c1b      	lsrs	r3, r3, #16
 8010f28:	b29a      	uxth	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	e011      	b.n	8010f56 <SDMMC_GetCmdResp6+0xda>
  }
  else
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d002      	beq.n	8010f42 <SDMMC_GetCmdResp6+0xc6>
  {
    /* Nothing to do */
 8010f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f40:	e009      	b.n	8010f56 <SDMMC_GetCmdResp6+0xda>
  }
  
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d002      	beq.n	8010f52 <SDMMC_GetCmdResp6+0xd6>
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f50:	e001      	b.n	8010f56 <SDMMC_GetCmdResp6+0xda>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
 8010f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f56:	4618      	mov	r0, r3
 8010f58:	3720      	adds	r7, #32
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	20000008 	.word	0x20000008
 8010f64:	10624dd3 	.word	0x10624dd3

08010f68 <SDMMC_GetCmdResp7>:
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
    
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
  {
 8010f70:	4b22      	ldr	r3, [pc, #136]	; (8010ffc <SDMMC_GetCmdResp7+0x94>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4a22      	ldr	r2, [pc, #136]	; (8011000 <SDMMC_GetCmdResp7+0x98>)
 8010f76:	fba2 2303 	umull	r2, r3, r2, r3
 8010f7a:	0a5b      	lsrs	r3, r3, #9
 8010f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f80:	fb02 f303 	mul.w	r3, r2, r3
 8010f84:	60fb      	str	r3, [r7, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
  {
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	1e5a      	subs	r2, r3, #1
 8010f8a:	60fa      	str	r2, [r7, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d102      	bne.n	8010f96 <SDMMC_GetCmdResp7+0x2e>
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
 8010f90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f94:	e02c      	b.n	8010ff0 <SDMMC_GetCmdResp7+0x88>
  else
  {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f9a:	60bb      	str	r3, [r7, #8]
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
  }
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d0ef      	beq.n	8010f86 <SDMMC_GetCmdResp7+0x1e>
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d1ea      	bne.n	8010f86 <SDMMC_GetCmdResp7+0x1e>
}

 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb4:	f003 0304 	and.w	r3, r3, #4
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d004      	beq.n	8010fc6 <SDMMC_GetCmdResp7+0x5e>
/**
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2204      	movs	r2, #4
 8010fc0:	639a      	str	r2, [r3, #56]	; 0x38
  * @retval SD Card error state
  */
 8010fc2:	2304      	movs	r3, #4
 8010fc4:	e014      	b.n	8010ff0 <SDMMC_GetCmdResp7+0x88>
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d004      	beq.n	8010fdc <SDMMC_GetCmdResp7+0x74>
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	639a      	str	r2, [r3, #56]	; 0x38
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
  
 8010fd8:	2301      	movs	r3, #1
 8010fda:	e009      	b.n	8010ff0 <SDMMC_GetCmdResp7+0x88>
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d002      	beq.n	8010fee <SDMMC_GetCmdResp7+0x86>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
    
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2240      	movs	r2, #64	; 0x40
 8010fec:	639a      	str	r2, [r3, #56]	; 0x38
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
  {
    /* Card is SD V2.0 compliant */
 8010fee:	2300      	movs	r3, #0
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3714      	adds	r7, #20
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr
 8010ffc:	20000008 	.word	0x20000008
 8011000:	10624dd3 	.word	0x10624dd3

08011004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011004:	b084      	sub	sp, #16
 8011006:	b580      	push	{r7, lr}
 8011008:	b084      	sub	sp, #16
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
 801100e:	f107 001c 	add.w	r0, r7, #28
 8011012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011018:	2b01      	cmp	r3, #1
 801101a:	d120      	bne.n	801105e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	68da      	ldr	r2, [r3, #12]
 801102c:	4b20      	ldr	r3, [pc, #128]	; (80110b0 <USB_CoreInit+0xac>)
 801102e:	4013      	ands	r3, r2
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011042:	2b01      	cmp	r3, #1
 8011044:	d105      	bne.n	8011052 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 f942 	bl	80112dc <USB_CoreReset>
 8011058:	4603      	mov	r3, r0
 801105a:	73fb      	strb	r3, [r7, #15]
 801105c:	e010      	b.n	8011080 <USB_CoreInit+0x7c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
  }
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	68db      	ldr	r3, [r3, #12]
 8011062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 f936 	bl	80112dc <USB_CoreReset>
 8011070:	4603      	mov	r3, r0
 8011072:	73fb      	strb	r3, [r7, #15]
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;

 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);

 8011080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011082:	2b01      	cmp	r3, #1
 8011084:	d10b      	bne.n	801109e <USB_CoreInit+0x9a>
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	f043 0206 	orr.w	r2, r3, #6
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	609a      	str	r2, [r3, #8]
  }
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	f043 0220 	orr.w	r2, r3, #32
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	609a      	str	r2, [r3, #8]

  if (cfg.dma_enable == 1U)
  {
 801109e:	7bfb      	ldrb	r3, [r7, #15]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80110a0:	4618      	mov	r0, r3
 80110a2:	3710      	adds	r7, #16
 80110a4:	46bd      	mov	sp, r7
 80110a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110aa:	b004      	add	sp, #16
 80110ac:	4770      	bx	lr
 80110ae:	bf00      	nop
 80110b0:	ffbdffbf 	.word	0xffbdffbf

080110b4 <USB_EnableGlobalInt>:
  return HAL_OK;
}

/**
  * @brief  USB_EnableGlobalInt
  *         Enables the controller's Global Int in the AHB Config reg
 80110b4:	b480      	push	{r7}
 80110b6:	b083      	sub	sp, #12
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  * @param  USBx  Selected device
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	689b      	ldr	r3, [r3, #8]
 80110c0:	f043 0201 	orr.w	r2, r3, #1
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	609a      	str	r2, [r3, #8]
  * @retval HAL status
 80110c8:	2300      	movs	r3, #0
  */
 80110ca:	4618      	mov	r0, r3
 80110cc:	370c      	adds	r7, #12
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr

080110d6 <USB_DisableGlobalInt>:
  return HAL_OK;
}

/**
  * @brief  USB_DisableGlobalInt
  *         Disable the controller's Global Int in the AHB Config reg
 80110d6:	b480      	push	{r7}
 80110d8:	b083      	sub	sp, #12
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
  * @param  USBx  Selected device
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	689b      	ldr	r3, [r3, #8]
 80110e2:	f023 0201 	bic.w	r2, r3, #1
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	609a      	str	r2, [r3, #8]
  * @retval HAL status
 80110ea:	2300      	movs	r3, #0
  */
 80110ec:	4618      	mov	r0, r3
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <USB_SetCurrentMode>:
/**
  * @brief  USB_SetCurrentMode Set functional mode
  * @param  USBx  Selected device
  * @param  mode  current core mode
  *          This parameter can be one of these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	460b      	mov	r3, r1
 8011102:	70fb      	strb	r3, [r7, #3]
  *            @arg USB_HOST_MODE Host mode
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	60da      	str	r2, [r3, #12]
  * @retval HAL status
  */
 8011110:	78fb      	ldrb	r3, [r7, #3]
 8011112:	2b01      	cmp	r3, #1
 8011114:	d106      	bne.n	8011124 <USB_SetCurrentMode+0x2c>
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	60da      	str	r2, [r3, #12]
 8011122:	e00b      	b.n	801113c <USB_SetCurrentMode+0x44>
  uint32_t ms = 0U;

 8011124:	78fb      	ldrb	r3, [r7, #3]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d106      	bne.n	8011138 <USB_SetCurrentMode+0x40>
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);

 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	68db      	ldr	r3, [r3, #12]
 801112e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	60da      	str	r2, [r3, #12]
 8011136:	e001      	b.n	801113c <USB_SetCurrentMode+0x44>
  if (mode == USB_HOST_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;

 8011138:	2301      	movs	r3, #1
 801113a:	e003      	b.n	8011144 <USB_SetCurrentMode+0x4c>
    do
    {
 801113c:	2032      	movs	r0, #50	; 0x32
 801113e:	f7f4 f8d9 	bl	80052f4 <HAL_Delay>
      HAL_Delay(1U);
      ms++;
 8011142:	2300      	movs	r3, #0
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011144:	4618      	mov	r0, r3
 8011146:	3708      	adds	r7, #8
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <USB_FlushTxFifo>:
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
 801114c:	b480      	push	{r7}
 801114e:	b085      	sub	sp, #20
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	6039      	str	r1, [r7, #0]
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;
 8011156:	2300      	movs	r3, #0
 8011158:	60fb      	str	r3, [r7, #12]

  if (cfg.Sof_enable != 0U)
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	019b      	lsls	r3, r3, #6
 801115e:	f043 0220 	orr.w	r2, r3, #32
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	611a      	str	r2, [r3, #16]
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
  }

 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3301      	adds	r3, #1
 801116a:	60fb      	str	r3, [r7, #12]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	4a09      	ldr	r2, [pc, #36]	; (8011194 <USB_FlushTxFifo+0x48>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d901      	bls.n	8011178 <USB_FlushTxFifo+0x2c>
  if (cfg.vbus_sensing_enable == 1U)
  {
 8011174:	2303      	movs	r3, #3
 8011176:	e006      	b.n	8011186 <USB_FlushTxFifo+0x3a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
  }
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	691b      	ldr	r3, [r3, #16]
 801117c:	f003 0320 	and.w	r3, r3, #32
 8011180:	2b20      	cmp	r3, #32
 8011182:	d0f0      	beq.n	8011166 <USB_FlushTxFifo+0x1a>

  return ret;
 8011184:	2300      	movs	r3, #0
}
 8011186:	4618      	mov	r0, r3
 8011188:	3714      	adds	r7, #20
 801118a:	46bd      	mov	sp, r7
 801118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011190:	4770      	bx	lr
 8011192:	bf00      	nop
 8011194:	00030d40 	.word	0x00030d40

08011198 <USB_FlushRxFifo>:
  * @brief  USB_FlushTxFifo Flush a Tx FIFO
  * @param  USBx  Selected device
  * @param  num  FIFO number
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
 8011198:	b480      	push	{r7}
 801119a:	b085      	sub	sp, #20
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  */
 80111a0:	2300      	movs	r3, #0
 80111a2:	60fb      	str	r3, [r7, #12]
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2210      	movs	r2, #16
 80111a8:	611a      	str	r2, [r3, #16]
  __IO uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	3301      	adds	r3, #1
 80111ae:	60fb      	str	r3, [r7, #12]
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	4a09      	ldr	r2, [pc, #36]	; (80111d8 <USB_FlushRxFifo+0x40>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d901      	bls.n	80111bc <USB_FlushRxFifo+0x24>
  {
    if (++count > 200000U)
 80111b8:	2303      	movs	r3, #3
 80111ba:	e006      	b.n	80111ca <USB_FlushRxFifo+0x32>
    {
      return HAL_TIMEOUT;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	691b      	ldr	r3, [r3, #16]
 80111c0:	f003 0310 	and.w	r3, r3, #16
 80111c4:	2b10      	cmp	r3, #16
 80111c6:	d0f0      	beq.n	80111aa <USB_FlushRxFifo+0x12>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80111c8:	2300      	movs	r3, #0

 80111ca:	4618      	mov	r0, r3
 80111cc:	3714      	adds	r7, #20
 80111ce:	46bd      	mov	sp, r7
 80111d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d4:	4770      	bx	lr
 80111d6:	bf00      	nop
 80111d8:	00030d40 	.word	0x00030d40

080111dc <USB_WritePacket>:
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
      }
    }
 80111dc:	b480      	push	{r7}
 80111de:	b089      	sub	sp, #36	; 0x24
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	60f8      	str	r0, [r7, #12]
 80111e4:	60b9      	str	r1, [r7, #8]
 80111e6:	4611      	mov	r1, r2
 80111e8:	461a      	mov	r2, r3
 80111ea:	460b      	mov	r3, r1
 80111ec:	71fb      	strb	r3, [r7, #7]
 80111ee:	4613      	mov	r3, r2
 80111f0:	80bb      	strh	r3, [r7, #4]
  }
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	617b      	str	r3, [r7, #20]
  else /* OUT endpoint */
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	61fb      	str	r3, [r7, #28]
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
 80111fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d11a      	bne.n	8011238 <USB_WritePacket+0x5c>
    * xfersize = N * maxpacket
    */
 8011202:	88bb      	ldrh	r3, [r7, #4]
 8011204:	3303      	adds	r3, #3
 8011206:	089b      	lsrs	r3, r3, #2
 8011208:	613b      	str	r3, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801120a:	2300      	movs	r3, #0
 801120c:	61bb      	str	r3, [r7, #24]
 801120e:	e00f      	b.n	8011230 <USB_WritePacket+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);

 8011210:	79fb      	ldrb	r3, [r7, #7]
 8011212:	031a      	lsls	r2, r3, #12
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	4413      	add	r3, r2
 8011218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801121c:	461a      	mov	r2, r3
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	6013      	str	r3, [r2, #0]
    if (ep->xfer_len > 0U)
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	3304      	adds	r3, #4
 8011228:	61fb      	str	r3, [r7, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801122a:	69bb      	ldr	r3, [r7, #24]
 801122c:	3301      	adds	r3, #1
 801122e:	61bb      	str	r3, [r7, #24]
 8011230:	69ba      	ldr	r2, [r7, #24]
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	429a      	cmp	r2, r3
 8011236:	d3eb      	bcc.n	8011210 <USB_WritePacket+0x34>
    {
      ep->xfer_len = ep->maxpacket;
    }

 8011238:	2300      	movs	r3, #0
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801123a:	4618      	mov	r0, r3
 801123c:	3724      	adds	r7, #36	; 0x24
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr

08011246 <USB_ReadPacket>:
      if ((uint32_t)ep->xfer_buff != 0U)
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
      }
    }

 8011246:	b480      	push	{r7}
 8011248:	b089      	sub	sp, #36	; 0x24
 801124a:	af00      	add	r7, sp, #0
 801124c:	60f8      	str	r0, [r7, #12]
 801124e:	60b9      	str	r1, [r7, #8]
 8011250:	4613      	mov	r3, r2
 8011252:	80fb      	strh	r3, [r7, #6]
    /* EP enable */
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	617b      	str	r3, [r7, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	61fb      	str	r3, [r7, #28]
  }

 801125c:	88fb      	ldrh	r3, [r7, #6]
 801125e:	3303      	adds	r3, #3
 8011260:	089b      	lsrs	r3, r3, #2
 8011262:	613b      	str	r3, [r7, #16]
  return HAL_OK;
}
 8011264:	2300      	movs	r3, #0
 8011266:	61bb      	str	r3, [r7, #24]
 8011268:	e00b      	b.n	8011282 <USB_ReadPacket+0x3c>

/**
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	601a      	str	r2, [r3, #0]
  * @brief  USB_WritePacket : Writes a packet into the Tx FIFO associated
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	3304      	adds	r3, #4
 801127a:	61fb      	str	r3, [r7, #28]
}
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	3301      	adds	r3, #1
 8011280:	61bb      	str	r3, [r7, #24]
 8011282:	69ba      	ldr	r2, [r7, #24]
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	429a      	cmp	r2, r3
 8011288:	d3ef      	bcc.n	801126a <USB_ReadPacket+0x24>
  *         with the EP/channel
  * @param  USBx  Selected device
  * @param  src   pointer to source buffer
 801128a:	69fb      	ldr	r3, [r7, #28]
  * @param  ch_ep_num  endpoint or host channel number
 801128c:	4618      	mov	r0, r3
 801128e:	3724      	adds	r7, #36	; 0x24
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <USB_ReadInterrupts>:
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
  USBx_DEVICE->DOEPMSK  = 0U;
  USBx_DEVICE->DAINTMSK = 0U;

  /* Flush the FIFO */
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  ret = USB_FlushRxFifo(USBx);
  if (ret != HAL_OK)
  {
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	695b      	ldr	r3, [r3, #20]
 80112a4:	60fb      	str	r3, [r7, #12]
    return ret;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	699b      	ldr	r3, [r3, #24]
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	4013      	ands	r3, r2
 80112ae:	60fb      	str	r3, [r7, #12]
  }

 80112b0:	68fb      	ldr	r3, [r7, #12]
  ret = USB_FlushTxFifo(USBx,  0x10U);
 80112b2:	4618      	mov	r0, r3
 80112b4:	3714      	adds	r7, #20
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr

080112be <USB_GetMode>:

  return ((tmpreg & 0xffff0000U) >> 16);
}

/**
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 80112be:	b480      	push	{r7}
 80112c0:	b083      	sub	sp, #12
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
  * @param  USBx  Selected device
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	695b      	ldr	r3, [r3, #20]
 80112ca:	f003 0301 	and.w	r3, r3, #1
  * @retval HAL status
 80112ce:	4618      	mov	r0, r3
 80112d0:	370c      	adds	r7, #12
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr
	...

080112dc <USB_CoreReset>:
  */
void  USB_ClearInterrupts(USB_OTG_GlobalTypeDef *USBx, uint32_t interrupt)
{
  USBx->GINTSTS |= interrupt;
}

 80112dc:	b480      	push	{r7}
 80112de:	b085      	sub	sp, #20
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
/**
 80112e4:	2300      	movs	r3, #0
 80112e6:	60fb      	str	r3, [r7, #12]
  * @brief  Returns USB core mode
  * @param  USBx  Selected device
  * @retval return core mode : Host or Device
  *          This parameter can be one of these values:
  *           0 : Host
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	3301      	adds	r3, #1
 80112ec:	60fb      	str	r3, [r7, #12]
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	4a13      	ldr	r2, [pc, #76]	; (8011340 <USB_CoreReset+0x64>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d901      	bls.n	80112fa <USB_CoreReset+0x1e>
  *           1 : Device
  */
 80112f6:	2303      	movs	r3, #3
 80112f8:	e01b      	b.n	8011332 <USB_CoreReset+0x56>
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	691b      	ldr	r3, [r3, #16]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	daf2      	bge.n	80112e8 <USB_CoreReset+0xc>
  return ((USBx->GINTSTS) & 0x1U);
}

 8011302:	2300      	movs	r3, #0
 8011304:	60fb      	str	r3, [r7, #12]
/**
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	f043 0201 	orr.w	r2, r3, #1
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	611a      	str	r2, [r3, #16]
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	3301      	adds	r3, #1
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	4a09      	ldr	r2, [pc, #36]	; (8011340 <USB_CoreReset+0x64>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d901      	bls.n	8011324 <USB_CoreReset+0x48>
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011320:	2303      	movs	r3, #3
 8011322:	e006      	b.n	8011332 <USB_CoreReset+0x56>
  uint32_t USBx_BASE = (uint32_t)USBx;

 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	691b      	ldr	r3, [r3, #16]
 8011328:	f003 0301 	and.w	r3, r3, #1
 801132c:	2b01      	cmp	r3, #1
 801132e:	d0f0      	beq.n	8011312 <USB_CoreReset+0x36>
  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011330:	2300      	movs	r3, #0

 8011332:	4618      	mov	r0, r3
 8011334:	3714      	adds	r7, #20
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr
 801133e:	bf00      	nop
 8011340:	00030d40 	.word	0x00030d40

08011344 <USB_HostInit>:

  return HAL_OK;
}

#ifdef USBPHYC
/**
 8011344:	b084      	sub	sp, #16
 8011346:	b580      	push	{r7, lr}
 8011348:	b084      	sub	sp, #16
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
 801134e:	f107 001c 	add.w	r0, r7, #28
 8011352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  * @brief  Enables control of a High Speed USB PHY
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	60bb      	str	r3, [r7, #8]
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011360:	461a      	mov	r2, r3
 8011362:	2300      	movs	r3, #0
 8011364:	6013      	str	r3, [r2, #0]
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
  UNUSED(USBx);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801136a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	639a      	str	r2, [r3, #56]	; 0x38
  __IO uint32_t count = 0U;

 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801137a:	2b00      	cmp	r3, #0
 801137c:	d018      	beq.n	80113b0 <USB_HostInit+0x6c>
  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 801137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011380:	2b01      	cmp	r3, #1
 8011382:	d10a      	bne.n	801139a <USB_HostInit+0x56>

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	68ba      	ldr	r2, [r7, #8]
 801138e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011392:	f043 0304 	orr.w	r3, r3, #4
 8011396:	6013      	str	r3, [r2, #0]
 8011398:	e014      	b.n	80113c4 <USB_HostInit+0x80>
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
    }
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	68ba      	ldr	r2, [r7, #8]
 80113a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113a8:	f023 0304 	bic.w	r3, r3, #4
 80113ac:	6013      	str	r3, [r2, #0]
 80113ae:	e009      	b.n	80113c4 <USB_HostInit+0x80>
  }

  /* Controls PHY frequency operation selection */
  if (HSE_VALUE == 12000000U) /* HSE = 12MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x0U << 1);
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	68ba      	ldr	r2, [r7, #8]
 80113ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113be:	f023 0304 	bic.w	r3, r3, #4
 80113c2:	6013      	str	r3, [r2, #0]
  }
  else if (HSE_VALUE == 12500000U) /* HSE = 12.5MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x2U << 1);
 80113c4:	2110      	movs	r1, #16
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7ff fec0 	bl	801114c <USB_FlushTxFifo>
  }
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f7ff fee3 	bl	8011198 <USB_FlushRxFifo>
  else if (HSE_VALUE == 16000000U) /* HSE = 16MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x3U << 1);
 80113d2:	2300      	movs	r3, #0
 80113d4:	60fb      	str	r3, [r7, #12]
 80113d6:	e015      	b.n	8011404 <USB_HostInit+0xc0>
  }
  else if (HSE_VALUE == 24000000U) /* HSE = 24MHz */
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	015a      	lsls	r2, r3, #5
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	4413      	add	r3, r2
 80113e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80113e4:	461a      	mov	r2, r3
 80113e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113ea:	6093      	str	r3, [r2, #8]
  {
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	015a      	lsls	r2, r3, #5
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	4413      	add	r3, r2
 80113f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80113f8:	461a      	mov	r2, r3
 80113fa:	2300      	movs	r3, #0
 80113fc:	60d3      	str	r3, [r2, #12]
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x3U << 1);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	3301      	adds	r3, #1
 8011402:	60fb      	str	r3, [r7, #12]
 8011404:	6a3b      	ldr	r3, [r7, #32]
 8011406:	68fa      	ldr	r2, [r7, #12]
 8011408:	429a      	cmp	r2, r3
 801140a:	d3e5      	bcc.n	80113d8 <USB_HostInit+0x94>
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
 801140c:	2101      	movs	r1, #1
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 f8ac 	bl	801156c <USB_DriveVbus>
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
  }
 8011414:	20c8      	movs	r0, #200	; 0xc8
 8011416:	f7f3 ff6d 	bl	80052f4 <HAL_Delay>
  else if (HSE_VALUE == 32000000U) /* HSE = 32MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x7U << 1);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2200      	movs	r2, #0
 801141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011426:	615a      	str	r2, [r3, #20]
    /* ... */
  }
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00b      	beq.n	801144c <USB_HostInit+0x108>

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f44f 7200 	mov.w	r2, #512	; 0x200
 801143a:	625a      	str	r2, [r3, #36]	; 0x24

 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	4a14      	ldr	r2, [pc, #80]	; (8011490 <USB_HostInit+0x14c>)
 8011440:	629a      	str	r2, [r3, #40]	; 0x28
  /* Enable PLL internal PHY */
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4a13      	ldr	r2, [pc, #76]	; (8011494 <USB_HostInit+0x150>)
 8011446:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 801144a:	e009      	b.n	8011460 <USB_HostInit+0x11c>
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2280      	movs	r2, #128	; 0x80
 8011450:	625a      	str	r2, [r3, #36]	; 0x24

 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4a10      	ldr	r2, [pc, #64]	; (8011498 <USB_HostInit+0x154>)
 8011456:	629a      	str	r2, [r3, #40]	; 0x28
  return HAL_OK;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	4a10      	ldr	r2, [pc, #64]	; (801149c <USB_HostInit+0x158>)
 801145c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}

#endif /* USBPHYC */
/**
 8011460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011462:	2b00      	cmp	r3, #0
 8011464:	d105      	bne.n	8011472 <USB_HostInit+0x12e>
  * @brief  USB_HostInit : Initializes the USB OTG controller registers
  *         for Host mode
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	699b      	ldr	r3, [r3, #24]
 801146a:	f043 0210 	orr.w	r2, r3, #16
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	619a      	str	r2, [r3, #24]
  * @param  USBx  Selected device
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	699a      	ldr	r2, [r3, #24]
 8011476:	4b0a      	ldr	r3, [pc, #40]	; (80114a0 <USB_HostInit+0x15c>)
 8011478:	4313      	orrs	r3, r2
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	6193      	str	r3, [r2, #24]
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 801147e:	2300      	movs	r3, #0
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011480:	4618      	mov	r0, r3
 8011482:	3710      	adds	r7, #16
 8011484:	46bd      	mov	sp, r7
 8011486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801148a:	b004      	add	sp, #16
 801148c:	4770      	bx	lr
 801148e:	bf00      	nop
 8011490:	01000200 	.word	0x01000200
 8011494:	00e00300 	.word	0x00e00300
 8011498:	00600080 	.word	0x00600080
 801149c:	004000e0 	.word	0x004000e0
 80114a0:	a3200008 	.word	0xa3200008

080114a4 <USB_InitFSLSPClkSel>:

  if ((USBx->CID & (0x1U << 8)) != 0U)
  {
    if (cfg.speed == USBH_FSLS_SPEED)
    {
      /* Force Device Enumeration to FS/LS mode only */
 80114a4:	b480      	push	{r7}
 80114a6:	b085      	sub	sp, #20
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	460b      	mov	r3, r1
 80114ae:	70fb      	strb	r3, [r7, #3]
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	60fb      	str	r3, [r7, #12]
    }
    else
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	68fa      	ldr	r2, [r7, #12]
 80114be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80114c2:	f023 0303 	bic.w	r3, r3, #3
 80114c6:	6013      	str	r3, [r2, #0]
    {
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	78fb      	ldrb	r3, [r7, #3]
 80114d2:	f003 0303 	and.w	r3, r3, #3
 80114d6:	68f9      	ldr	r1, [r7, #12]
 80114d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80114dc:	4313      	orrs	r3, r2
 80114de:	600b      	str	r3, [r1, #0]
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80114e0:	78fb      	ldrb	r3, [r7, #3]
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	d107      	bne.n	80114f6 <USB_InitFSLSPClkSel+0x52>
    }
  }
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114ec:	461a      	mov	r2, r3
 80114ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80114f2:	6053      	str	r3, [r2, #4]
 80114f4:	e009      	b.n	801150a <USB_InitFSLSPClkSel+0x66>
  else
  {
 80114f6:	78fb      	ldrb	r3, [r7, #3]
 80114f8:	2b02      	cmp	r3, #2
 80114fa:	d106      	bne.n	801150a <USB_InitFSLSPClkSel+0x66>
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011502:	461a      	mov	r2, r3
 8011504:	f241 7370 	movw	r3, #6000	; 0x1770
 8011508:	6053      	str	r3, [r2, #4]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
  {
    ret = HAL_ERROR;
  }
 801150a:	2300      	movs	r3, #0

 801150c:	4618      	mov	r0, r3
 801150e:	3714      	adds	r7, #20
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <USB_ResetPort>:

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  }
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	60fb      	str	r3, [r7, #12]

  /* Disable all interrupts. */
 8011524:	2300      	movs	r3, #0
 8011526:	60bb      	str	r3, [r7, #8]
  USBx->GINTMSK = 0U;

 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	60bb      	str	r3, [r7, #8]
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011538:	60bb      	str	r3, [r7, #8]

  if ((USBx->CID & (0x1U << 8)) != 0U)
  {
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	68fa      	ldr	r2, [r7, #12]
 801153e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011546:	6013      	str	r3, [r2, #0]
    /* set Rx FIFO size */
 8011548:	2064      	movs	r0, #100	; 0x64
 801154a:	f7f3 fed3 	bl	80052f4 <HAL_Delay>
    USBx->GRXFSIZ  = 0x200U;
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	68fa      	ldr	r2, [r7, #12]
 8011552:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801155a:	6013      	str	r3, [r2, #0]
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 801155c:	200a      	movs	r0, #10
 801155e:	f7f3 fec9 	bl	80052f4 <HAL_Delay>
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
 8011562:	2300      	movs	r3, #0
  else
 8011564:	4618      	mov	r0, r3
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <USB_DriveVbus>:
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801156c:	b480      	push	{r7}
 801156e:	b085      	sub	sp, #20
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	460b      	mov	r3, r1
 8011576:	70fb      	strb	r3, [r7, #3]
  }
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	60fb      	str	r3, [r7, #12]

 801157c:	2300      	movs	r3, #0
 801157e:	60bb      	str	r3, [r7, #8]
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	60bb      	str	r3, [r7, #8]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011590:	60bb      	str	r3, [r7, #8]

  return ret;
}
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011598:	2b00      	cmp	r3, #0
 801159a:	d109      	bne.n	80115b0 <USB_DriveVbus+0x44>
 801159c:	78fb      	ldrb	r3, [r7, #3]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d106      	bne.n	80115b0 <USB_DriveVbus+0x44>

/**
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	68fa      	ldr	r2, [r7, #12]
 80115a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80115aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80115ae:	6013      	str	r3, [r2, #0]
  * @brief  USB_InitFSLSPClkSel : Initializes the FSLSPClkSel field of the
  *         HCFG register on the PHY type and set the right frame interval
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80115b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115ba:	d109      	bne.n	80115d0 <USB_DriveVbus+0x64>
 80115bc:	78fb      	ldrb	r3, [r7, #3]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d106      	bne.n	80115d0 <USB_DriveVbus+0x64>
  * @param  USBx  Selected device
  * @param  freq  clock frequency
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80115ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115ce:	6013      	str	r3, [r2, #0]
  *          This parameter can be one of these values:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
 80115d0:	2300      	movs	r3, #0
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
 80115d2:	4618      	mov	r0, r3
 80115d4:	3714      	adds	r7, #20
 80115d6:	46bd      	mov	sp, r7
 80115d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115dc:	4770      	bx	lr

080115de <USB_GetHostSpeed>:
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
  {
    USBx_HOST->HFIR = 48000U;
 80115de:	b480      	push	{r7}
 80115e0:	b085      	sub	sp, #20
 80115e2:	af00      	add	r7, sp, #0
 80115e4:	6078      	str	r0, [r7, #4]
  }
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	60fb      	str	r3, [r7, #12]
  else if (freq == HCFG_6_MHZ)
 80115ea:	2300      	movs	r3, #0
 80115ec:	60bb      	str	r3, [r7, #8]
  {
    USBx_HOST->HFIR = 6000U;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	60bb      	str	r3, [r7, #8]
  }
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	0c5b      	lsrs	r3, r3, #17
 80115fc:	f003 0303 	and.w	r3, r3, #3
  else
 8011600:	4618      	mov	r0, r3
 8011602:	3714      	adds	r7, #20
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <USB_GetCurrentFrame>:
  }

  return HAL_OK;
}

/**
 801160c:	b480      	push	{r7}
 801160e:	b085      	sub	sp, #20
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  * @brief  USB_OTG_ResetPort : Reset Host Port
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	60fb      	str	r3, [r7, #12]
  * @param  USBx  Selected device
  * @retval HAL status
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801161e:	689b      	ldr	r3, [r3, #8]
 8011620:	b29b      	uxth	r3, r3
  * @note (1)The application must wait at least 10 ms
 8011622:	4618      	mov	r0, r3
 8011624:	3714      	adds	r7, #20
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
	...

08011630 <USB_HC_Init>:
  * @param  state  VBUS state
  *          This parameter can be one of these values:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
 8011630:	b580      	push	{r7, lr}
 8011632:	b088      	sub	sp, #32
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	4608      	mov	r0, r1
 801163a:	4611      	mov	r1, r2
 801163c:	461a      	mov	r2, r3
 801163e:	4603      	mov	r3, r0
 8011640:	70fb      	strb	r3, [r7, #3]
 8011642:	460b      	mov	r3, r1
 8011644:	70bb      	strb	r3, [r7, #2]
 8011646:	4613      	mov	r3, r2
 8011648:	707b      	strb	r3, [r7, #1]
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
 801164a:	2300      	movs	r3, #0
 801164c:	77fb      	strb	r3, [r7, #31]
{
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;

  hprt0 = USBx_HPRT0;

 8011652:	78fb      	ldrb	r3, [r7, #3]
 8011654:	015a      	lsls	r2, r3, #5
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	4413      	add	r3, r2
 801165a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801165e:	461a      	mov	r2, r3
 8011660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011664:	6093      	str	r3, [r2, #8]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

 8011666:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801166a:	2b03      	cmp	r3, #3
 801166c:	d87e      	bhi.n	801176c <USB_HC_Init+0x13c>
 801166e:	a201      	add	r2, pc, #4	; (adr r2, 8011674 <USB_HC_Init+0x44>)
 8011670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011674:	08011685 	.word	0x08011685
 8011678:	0801172f 	.word	0x0801172f
 801167c:	08011685 	.word	0x08011685
 8011680:	080116f1 	.word	0x080116f1
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
 8011684:	78fb      	ldrb	r3, [r7, #3]
 8011686:	015a      	lsls	r2, r3, #5
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	4413      	add	r3, r2
 801168c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011690:	461a      	mov	r2, r3
 8011692:	f240 439d 	movw	r3, #1181	; 0x49d
 8011696:	60d3      	str	r3, [r2, #12]
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
  }
  return HAL_OK;
}

 8011698:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801169c:	2b00      	cmp	r3, #0
 801169e:	da10      	bge.n	80116c2 <USB_HC_Init+0x92>
/**
  * @brief  Return Host Core speed
 80116a0:	78fb      	ldrb	r3, [r7, #3]
 80116a2:	015a      	lsls	r2, r3, #5
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	4413      	add	r3, r2
 80116a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	78fa      	ldrb	r2, [r7, #3]
 80116b0:	0151      	lsls	r1, r2, #5
 80116b2:	693a      	ldr	r2, [r7, #16]
 80116b4:	440a      	add	r2, r1
 80116b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80116ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116be:	60d3      	str	r3, [r2, #12]
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116c0:	e057      	b.n	8011772 <USB_HC_Init+0x142>
  *            @arg HCD_SPEED_HIGH: High speed mode
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d051      	beq.n	8011772 <USB_HC_Init+0x142>
  *            @arg HCD_SPEED_LOW: Low speed mode
 80116ce:	78fb      	ldrb	r3, [r7, #3]
 80116d0:	015a      	lsls	r2, r3, #5
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	4413      	add	r3, r2
 80116d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	78fa      	ldrb	r2, [r7, #3]
 80116de:	0151      	lsls	r1, r2, #5
 80116e0:	693a      	ldr	r2, [r7, #16]
 80116e2:	440a      	add	r2, r1
 80116e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80116e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80116ec:	60d3      	str	r3, [r2, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116ee:	e040      	b.n	8011772 <USB_HC_Init+0x142>
  __IO uint32_t hprt0 = 0U;

  hprt0 = USBx_HPRT0;
 80116f0:	78fb      	ldrb	r3, [r7, #3]
 80116f2:	015a      	lsls	r2, r3, #5
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	4413      	add	r3, r2
 80116f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80116fc:	461a      	mov	r2, r3
 80116fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8011702:	60d3      	str	r3, [r2, #12]

/**
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
 8011704:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011708:	2b00      	cmp	r3, #0
 801170a:	da34      	bge.n	8011776 <USB_HC_Init+0x146>
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 801170c:	78fb      	ldrb	r3, [r7, #3]
 801170e:	015a      	lsls	r2, r3, #5
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	4413      	add	r3, r2
 8011714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	78fa      	ldrb	r2, [r7, #3]
 801171c:	0151      	lsls	r1, r2, #5
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	440a      	add	r2, r1
 8011722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801172a:	60d3      	str	r3, [r2, #12]
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801172c:	e023      	b.n	8011776 <USB_HC_Init+0x146>
}

/**
 801172e:	78fb      	ldrb	r3, [r7, #3]
 8011730:	015a      	lsls	r2, r3, #5
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	4413      	add	r3, r2
 8011736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801173a:	461a      	mov	r2, r3
 801173c:	f240 2325 	movw	r3, #549	; 0x225
 8011740:	60d3      	str	r3, [r2, #12]
  * @brief  Initialize a host channel
  * @param  USBx  Selected device
  * @param  ch_num  Channel number
  *         This parameter can be a value from 1 to 15
  * @param  epnum  Endpoint number
 8011742:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011746:	2b00      	cmp	r3, #0
 8011748:	da17      	bge.n	801177a <USB_HC_Init+0x14a>
  *          This parameter can be a value from 1 to 15
  * @param  dev_address  Current device address
 801174a:	78fb      	ldrb	r3, [r7, #3]
 801174c:	015a      	lsls	r2, r3, #5
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	4413      	add	r3, r2
 8011752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	78fa      	ldrb	r2, [r7, #3]
 801175a:	0151      	lsls	r1, r2, #5
 801175c:	693a      	ldr	r2, [r7, #16]
 801175e:	440a      	add	r2, r1
 8011760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011764:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8011768:	60d3      	str	r3, [r2, #12]
  *          This parameter can be a value from 0 to 255
  * @param  speed  Current device speed
 801176a:	e006      	b.n	801177a <USB_HC_Init+0x14a>
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
 801176c:	2301      	movs	r3, #1
 801176e:	77fb      	strb	r3, [r7, #31]
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
 8011770:	e004      	b.n	801177c <USB_HC_Init+0x14c>
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011772:	bf00      	nop
 8011774:	e002      	b.n	801177c <USB_HC_Init+0x14c>
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011776:	bf00      	nop
 8011778:	e000      	b.n	801177c <USB_HC_Init+0x14c>
  * @param  speed  Current device speed
 801177a:	bf00      	nop
  * @param  ep_type  Endpoint Type
  *          This parameter can be one of these values:
  *            @arg EP_TYPE_CTRL: Control type
  *            @arg EP_TYPE_ISOC: Isochronous type
 801177c:	693b      	ldr	r3, [r7, #16]
 801177e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011782:	699a      	ldr	r2, [r3, #24]
 8011784:	78fb      	ldrb	r3, [r7, #3]
 8011786:	f003 030f 	and.w	r3, r3, #15
 801178a:	2101      	movs	r1, #1
 801178c:	fa01 f303 	lsl.w	r3, r1, r3
 8011790:	6939      	ldr	r1, [r7, #16]
 8011792:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011796:	4313      	orrs	r3, r2
 8011798:	618b      	str	r3, [r1, #24]
  *            @arg EP_TYPE_BULK: Bulk type
  *            @arg EP_TYPE_INTR: Interrupt type
  * @param  mps  Max Packet Size
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	619a      	str	r2, [r3, #24]
  *          This parameter can be a value from 0 to 32K
  * @retval HAL state
  */
 80117a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	da03      	bge.n	80117b6 <USB_HC_Init+0x186>
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
 80117ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117b2:	61bb      	str	r3, [r7, #24]
 80117b4:	e001      	b.n	80117ba <USB_HC_Init+0x18a>
                              uint8_t ep_type, uint16_t mps)
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117b6:	2300      	movs	r3, #0
 80117b8:	61bb      	str	r3, [r7, #24]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f7ff ff0f 	bl	80115de <USB_GetHostSpeed>
 80117c0:	60f8      	str	r0, [r7, #12]

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80117c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80117c6:	2b02      	cmp	r3, #2
 80117c8:	d106      	bne.n	80117d8 <USB_HC_Init+0x1a8>
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2b02      	cmp	r3, #2
 80117ce:	d003      	beq.n	80117d8 <USB_HC_Init+0x1a8>

  /* Enable channel interrupts required for this transfer. */
 80117d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80117d4:	617b      	str	r3, [r7, #20]
 80117d6:	e001      	b.n	80117dc <USB_HC_Init+0x1ac>
  switch (ep_type)
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
 80117d8:	2300      	movs	r3, #0
 80117da:	617b      	str	r3, [r7, #20]
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
                                            USB_OTG_HCINTMSK_STALLM |
                                            USB_OTG_HCINTMSK_TXERRM |
 80117dc:	787b      	ldrb	r3, [r7, #1]
 80117de:	059b      	lsls	r3, r3, #22
 80117e0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                            USB_OTG_HCINTMSK_DTERRM |
 80117e4:	78bb      	ldrb	r3, [r7, #2]
 80117e6:	02db      	lsls	r3, r3, #11
 80117e8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
                                            USB_OTG_HCINTMSK_TXERRM |
 80117ec:	431a      	orrs	r2, r3
                                            USB_OTG_HCINTMSK_AHBERR |
 80117ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80117f2:	049b      	lsls	r3, r3, #18
 80117f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                            USB_OTG_HCINTMSK_DTERRM |
 80117f8:	431a      	orrs	r2, r3
                                            USB_OTG_HCINTMSK_NAKM;
 80117fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80117fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                            USB_OTG_HCINTMSK_AHBERR |
 8011800:	431a      	orrs	r2, r3
                                            USB_OTG_HCINTMSK_NAKM;
 8011802:	69bb      	ldr	r3, [r7, #24]
 8011804:	431a      	orrs	r2, r3
                                            USB_OTG_HCINTMSK_TXERRM |
 8011806:	78fb      	ldrb	r3, [r7, #3]
 8011808:	0159      	lsls	r1, r3, #5
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	440b      	add	r3, r1
 801180e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011812:	4619      	mov	r1, r3
                                            USB_OTG_HCINTMSK_NAKM;
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	4313      	orrs	r3, r2
                                            USB_OTG_HCINTMSK_TXERRM |
 8011818:	600b      	str	r3, [r1, #0]

      if ((epnum & 0x80U) == 0x80U)
 801181a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801181e:	2b03      	cmp	r3, #3
 8011820:	d10f      	bne.n	8011842 <USB_HC_Init+0x212>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011822:	78fb      	ldrb	r3, [r7, #3]
 8011824:	015a      	lsls	r2, r3, #5
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	4413      	add	r3, r2
 801182a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	78fa      	ldrb	r2, [r7, #3]
 8011832:	0151      	lsls	r1, r2, #5
 8011834:	693a      	ldr	r2, [r7, #16]
 8011836:	440a      	add	r2, r1
 8011838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801183c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011840:	6013      	str	r3, [r2, #0]
      }
      else
      {
 8011842:	7ffb      	ldrb	r3, [r7, #31]
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8011844:	4618      	mov	r0, r3
 8011846:	3720      	adds	r7, #32
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <USB_HC_StartXfer>:
    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
                                            USB_OTG_HCINTMSK_STALLM |
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
 801184c:	b580      	push	{r7, lr}
 801184e:	b08c      	sub	sp, #48	; 0x30
 8011850:	af02      	add	r7, sp, #8
 8011852:	60f8      	str	r0, [r7, #12]
 8011854:	60b9      	str	r1, [r7, #8]
 8011856:	4613      	mov	r3, r2
 8011858:	71fb      	strb	r3, [r7, #7]
                                            USB_OTG_HCINTMSK_AHBERR |
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	623b      	str	r3, [r7, #32]
                                            USB_OTG_HCINTMSK_FRMORM;
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	785b      	ldrb	r3, [r3, #1]
 8011862:	61fb      	str	r3, [r7, #28]

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
 8011864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011868:	837b      	strh	r3, [r7, #26]

      break;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011872:	2b00      	cmp	r3, #0
 8011874:	d02d      	beq.n	80118d2 <USB_HC_StartXfer+0x86>
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	791b      	ldrb	r3, [r3, #4]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d129      	bne.n	80118d2 <USB_HC_StartXfer+0x86>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801187e:	79fb      	ldrb	r3, [r7, #7]
 8011880:	2b01      	cmp	r3, #1
 8011882:	d117      	bne.n	80118b4 <USB_HC_StartXfer+0x68>
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	79db      	ldrb	r3, [r3, #7]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d003      	beq.n	8011894 <USB_HC_StartXfer+0x48>
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	79db      	ldrb	r3, [r3, #7]
 8011890:	2b02      	cmp	r3, #2
 8011892:	d10f      	bne.n	80118b4 <USB_HC_StartXfer+0x68>
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	015a      	lsls	r2, r3, #5
 8011898:	6a3b      	ldr	r3, [r7, #32]
 801189a:	4413      	add	r3, r2
 801189c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80118a0:	68db      	ldr	r3, [r3, #12]
 80118a2:	69fa      	ldr	r2, [r7, #28]
 80118a4:	0151      	lsls	r1, r2, #5
 80118a6:	6a3a      	ldr	r2, [r7, #32]
 80118a8:	440a      	add	r2, r1
 80118aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80118ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80118b4:	79fb      	ldrb	r3, [r7, #7]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d10b      	bne.n	80118d2 <USB_HC_StartXfer+0x86>
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	795b      	ldrb	r3, [r3, #5]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d107      	bne.n	80118d2 <USB_HC_StartXfer+0x86>
      }
      break;
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	785b      	ldrb	r3, [r3, #1]
 80118c6:	4619      	mov	r1, r3
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f000 fa2f 	bl	8011d2c <USB_DoPing>

 80118ce:	2300      	movs	r3, #0
 80118d0:	e0f8      	b.n	8011ac4 <USB_HC_StartXfer+0x278>
    default:
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	695b      	ldr	r3, [r3, #20]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d018      	beq.n	801190c <USB_HC_StartXfer+0xc0>
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;

 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	68ba      	ldr	r2, [r7, #8]
 80118e0:	8912      	ldrh	r2, [r2, #8]
 80118e2:	4413      	add	r3, r2
 80118e4:	3b01      	subs	r3, #1
 80118e6:	68ba      	ldr	r2, [r7, #8]
 80118e8:	8912      	ldrh	r2, [r2, #8]
 80118ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80118ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80118f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118f2:	8b7b      	ldrh	r3, [r7, #26]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d90b      	bls.n	8011910 <USB_HC_StartXfer+0xc4>

  /* Make sure host channel interrupts are enabled. */
 80118f8:	8b7b      	ldrh	r3, [r7, #26]
 80118fa:	84fb      	strh	r3, [r7, #38]	; 0x26
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80118fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118fe:	68ba      	ldr	r2, [r7, #8]
 8011900:	8912      	ldrh	r2, [r2, #8]
 8011902:	fb02 f203 	mul.w	r2, r2, r3
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	611a      	str	r2, [r3, #16]
 801190a:	e001      	b.n	8011910 <USB_HC_StartXfer+0xc4>

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 801190c:	2301      	movs	r3, #1
 801190e:	84fb      	strh	r3, [r7, #38]	; 0x26
  else
  {
    HCcharEpDir = 0U;
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	78db      	ldrb	r3, [r3, #3]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d007      	beq.n	8011928 <USB_HC_StartXfer+0xdc>

  /* LS device plugged to HUB */
 8011918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801191a:	68ba      	ldr	r2, [r7, #8]
 801191c:	8912      	ldrh	r2, [r2, #8]
 801191e:	fb02 f203 	mul.w	r2, r2, r3
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	611a      	str	r2, [r3, #16]
 8011926:	e003      	b.n	8011930 <USB_HC_StartXfer+0xe4>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	695a      	ldr	r2, [r3, #20]
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	611a      	str	r2, [r3, #16]
  else
  {
    HCcharLowSpeed = 0U;
  }
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	691b      	ldr	r3, [r3, #16]
 8011934:	f3c3 0212 	ubfx	r2, r3, #0, #19

 8011938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801193a:	04d9      	lsls	r1, r3, #19
 801193c:	4b63      	ldr	r3, [pc, #396]	; (8011acc <USB_HC_StartXfer+0x280>)
 801193e:	400b      	ands	r3, r1
  }
 8011940:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011942:	68bb      	ldr	r3, [r7, #8]
 8011944:	7a9b      	ldrb	r3, [r3, #10]
 8011946:	075b      	lsls	r3, r3, #29
 8011948:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  }
 801194c:	69f9      	ldr	r1, [r7, #28]
 801194e:	0148      	lsls	r0, r1, #5
 8011950:	6a39      	ldr	r1, [r7, #32]
 8011952:	4401      	add	r1, r0
 8011954:	f501 61a0 	add.w	r1, r1, #1280	; 0x500

 8011958:	4313      	orrs	r3, r2
  }
 801195a:	610b      	str	r3, [r1, #16]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801195c:	79fb      	ldrb	r3, [r7, #7]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d009      	beq.n	8011976 <USB_HC_StartXfer+0x12a>
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;

  if (ep_type == EP_TYPE_INTR)
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	68d9      	ldr	r1, [r3, #12]
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	015a      	lsls	r2, r3, #5
 801196a:	6a3b      	ldr	r3, [r7, #32]
 801196c:	4413      	add	r3, r2
 801196e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011972:	460a      	mov	r2, r1
 8011974:	615a      	str	r2, [r3, #20]
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801197c:	689b      	ldr	r3, [r3, #8]
 801197e:	f003 0301 	and.w	r3, r3, #1
 8011982:	2b00      	cmp	r3, #0
 8011984:	bf0c      	ite	eq
 8011986:	2301      	moveq	r3, #1
 8011988:	2300      	movne	r3, #0
 801198a:	b2db      	uxtb	r3, r3
 801198c:	767b      	strb	r3, [r7, #25]

 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	015a      	lsls	r2, r3, #5
 8011992:	6a3b      	ldr	r3, [r7, #32]
 8011994:	4413      	add	r3, r2
 8011996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	69fa      	ldr	r2, [r7, #28]
 801199e:	0151      	lsls	r1, r2, #5
 80119a0:	6a3a      	ldr	r2, [r7, #32]
 80119a2:	440a      	add	r2, r1
 80119a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80119a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80119ac:	6013      	str	r3, [r2, #0]
  return ret;
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	015a      	lsls	r2, r3, #5
 80119b2:	6a3b      	ldr	r3, [r7, #32]
 80119b4:	4413      	add	r3, r2
 80119b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	7e7b      	ldrb	r3, [r7, #25]
 80119be:	075b      	lsls	r3, r3, #29
 80119c0:	69f9      	ldr	r1, [r7, #28]
 80119c2:	0148      	lsls	r0, r1, #5
 80119c4:	6a39      	ldr	r1, [r7, #32]
 80119c6:	4401      	add	r1, r0
 80119c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80119cc:	4313      	orrs	r3, r2
 80119ce:	600b      	str	r3, [r1, #0]
}

/**
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	015a      	lsls	r2, r3, #5
 80119d4:	6a3b      	ldr	r3, [r7, #32]
 80119d6:	4413      	add	r3, r2
 80119d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	613b      	str	r3, [r7, #16]
  * @brief  Start a transfer over a host channel
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80119e6:	613b      	str	r3, [r7, #16]
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @param  dma USB dma enabled or disabled
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	78db      	ldrb	r3, [r3, #3]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d004      	beq.n	80119fa <USB_HC_StartXfer+0x1ae>
  *          This parameter can be one of these values:
  *           0 : DMA feature not used
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119f6:	613b      	str	r3, [r7, #16]
 80119f8:	e003      	b.n	8011a02 <USB_HC_StartXfer+0x1b6>
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011a00:	613b      	str	r3, [r7, #16]
{
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011a08:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	015a      	lsls	r2, r3, #5
 8011a0e:	6a3b      	ldr	r3, [r7, #32]
 8011a10:	4413      	add	r3, r2
 8011a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a16:	461a      	mov	r2, r3
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	6013      	str	r3, [r2, #0]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
 8011a1c:	79fb      	ldrb	r3, [r7, #7]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <USB_HC_StartXfer+0x1da>
  uint16_t len_words;
  uint16_t num_packets;
 8011a22:	2300      	movs	r3, #0
 8011a24:	e04e      	b.n	8011ac4 <USB_HC_StartXfer+0x278>
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	78db      	ldrb	r3, [r3, #3]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d149      	bne.n	8011ac2 <USB_HC_StartXfer+0x276>
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	695b      	ldr	r3, [r3, #20]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d045      	beq.n	8011ac2 <USB_HC_StartXfer+0x276>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	79db      	ldrb	r3, [r3, #7]
 8011a3a:	2b03      	cmp	r3, #3
 8011a3c:	d830      	bhi.n	8011aa0 <USB_HC_StartXfer+0x254>
 8011a3e:	a201      	add	r2, pc, #4	; (adr r2, 8011a44 <USB_HC_StartXfer+0x1f8>)
 8011a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a44:	08011a55 	.word	0x08011a55
 8011a48:	08011a79 	.word	0x08011a79
 8011a4c:	08011a55 	.word	0x08011a55
 8011a50:	08011a79 	.word	0x08011a79
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	695b      	ldr	r3, [r3, #20]
 8011a58:	3303      	adds	r3, #3
 8011a5a:	089b      	lsrs	r3, r3, #2
 8011a5c:	82fb      	strh	r3, [r7, #22]

    if ((dma == 0U) && (hc->do_ping == 1U))
    {
 8011a5e:	8afa      	ldrh	r2, [r7, #22]
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d91c      	bls.n	8011aa4 <USB_HC_StartXfer+0x258>
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	f043 0220 	orr.w	r2, r3, #32
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	619a      	str	r2, [r3, #24]

  }
 8011a76:	e015      	b.n	8011aa4 <USB_HC_StartXfer+0x258>

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	695b      	ldr	r3, [r3, #20]
 8011a7c:	3303      	adds	r3, #3
 8011a7e:	089b      	lsrs	r3, r3, #2
 8011a80:	82fb      	strh	r3, [r7, #22]

    if (num_packets > max_hc_pkt_count)
 8011a82:	8afa      	ldrh	r2, [r7, #22]
 8011a84:	6a3b      	ldr	r3, [r7, #32]
 8011a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d90a      	bls.n	8011aa8 <USB_HC_StartXfer+0x25c>
    {
      num_packets = max_hc_pkt_count;
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	699b      	ldr	r3, [r3, #24]
 8011a96:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	619a      	str	r2, [r3, #24]
    }
  }
 8011a9e:	e003      	b.n	8011aa8 <USB_HC_StartXfer+0x25c>
  else
  {
    num_packets = 1U;
 8011aa0:	bf00      	nop
 8011aa2:	e002      	b.n	8011aaa <USB_HC_StartXfer+0x25e>
  }
 8011aa4:	bf00      	nop
 8011aa6:	e000      	b.n	8011aaa <USB_HC_StartXfer+0x25e>
  }
 8011aa8:	bf00      	nop
  }

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	68d9      	ldr	r1, [r3, #12]
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	785a      	ldrb	r2, [r3, #1]
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	695b      	ldr	r3, [r3, #20]
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	2000      	movs	r0, #0
 8011aba:	9000      	str	r0, [sp, #0]
 8011abc:	68f8      	ldr	r0, [r7, #12]
 8011abe:	f7ff fb8d 	bl	80111dc <USB_WritePacket>
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8011ac2:	2300      	movs	r3, #0
  {
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3728      	adds	r7, #40	; 0x28
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	1ff80000 	.word	0x1ff80000

08011ad0 <USB_HC_ReadInterrupt>:
  else
  {
    hc->XferSize = hc->xfer_len;
  }

  /* Initialize the HCTSIZn register */
 8011ad0:	b480      	push	{r7}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	60fb      	str	r3, [r7, #12]
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ae2:	695b      	ldr	r3, [r3, #20]
 8011ae4:	b29b      	uxth	r3, r3

 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3714      	adds	r7, #20
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr

08011af2 <USB_HC_Halt>:
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;

 8011af2:	b480      	push	{r7}
 8011af4:	b089      	sub	sp, #36	; 0x24
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]
 8011afa:	460b      	mov	r3, r1
 8011afc:	70fb      	strb	r3, [r7, #3]
  /* Set host channel enable */
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	61bb      	str	r3, [r7, #24]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011b02:	78fb      	ldrb	r3, [r7, #3]
 8011b04:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011b06:	2300      	movs	r3, #0
 8011b08:	61fb      	str	r3, [r7, #28]

 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	015a      	lsls	r2, r3, #5
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	4413      	add	r3, r2
 8011b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	0c9b      	lsrs	r3, r3, #18
 8011b1a:	f003 0303 	and.w	r3, r3, #3
 8011b1e:	613b      	str	r3, [r7, #16]
  /* make sure to set the correct ep direction */
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	015a      	lsls	r2, r3, #5
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	4413      	add	r3, r2
 8011b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	0fdb      	lsrs	r3, r3, #31
 8011b30:	f003 0301 	and.w	r3, r3, #1
 8011b34:	60fb      	str	r3, [r7, #12]
  if (hc->ep_is_in != 0U)
  {
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	689b      	ldr	r3, [r3, #8]
 8011b3a:	f003 0320 	and.w	r3, r3, #32
 8011b3e:	2b20      	cmp	r3, #32
 8011b40:	d104      	bne.n	8011b4c <USB_HC_Halt+0x5a>
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d101      	bne.n	8011b4c <USB_HC_Halt+0x5a>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
  }
  else
 8011b48:	2300      	movs	r3, #0
 8011b4a:	e0e8      	b.n	8011d1e <USB_HC_Halt+0x22c>
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d002      	beq.n	8011b58 <USB_HC_Halt+0x66>
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	2b02      	cmp	r3, #2
 8011b56:	d173      	bne.n	8011c40 <USB_HC_Halt+0x14e>
  USBx_HC(ch_num)->HCCHAR = tmpreg;

 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	015a      	lsls	r2, r3, #5
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	4413      	add	r3, r2
 8011b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	697a      	ldr	r2, [r7, #20]
 8011b68:	0151      	lsls	r1, r2, #5
 8011b6a:	69ba      	ldr	r2, [r7, #24]
 8011b6c:	440a      	add	r2, r1
 8011b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b76:	6013      	str	r3, [r2, #0]
  if (dma != 0U) /* dma mode */
  {
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	689b      	ldr	r3, [r3, #8]
 8011b7c:	f003 0320 	and.w	r3, r3, #32
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f040 80cb 	bne.w	8011d1c <USB_HC_Halt+0x22a>
    return HAL_OK;
  }
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d143      	bne.n	8011c1a <USB_HC_Halt+0x128>

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	015a      	lsls	r2, r3, #5
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	4413      	add	r3, r2
 8011b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	697a      	ldr	r2, [r7, #20]
 8011ba2:	0151      	lsls	r1, r2, #5
 8011ba4:	69ba      	ldr	r2, [r7, #24]
 8011ba6:	440a      	add	r2, r1
 8011ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011bb0:	6013      	str	r3, [r2, #0]
  {
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	015a      	lsls	r2, r3, #5
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	4413      	add	r3, r2
 8011bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	697a      	ldr	r2, [r7, #20]
 8011bc2:	0151      	lsls	r1, r2, #5
 8011bc4:	69ba      	ldr	r2, [r7, #24]
 8011bc6:	440a      	add	r2, r1
 8011bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011bd0:	6013      	str	r3, [r2, #0]
    switch (hc->ep_type)
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	015a      	lsls	r2, r3, #5
 8011bd6:	69bb      	ldr	r3, [r7, #24]
 8011bd8:	4413      	add	r3, r2
 8011bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	697a      	ldr	r2, [r7, #20]
 8011be2:	0151      	lsls	r1, r2, #5
 8011be4:	69ba      	ldr	r2, [r7, #24]
 8011be6:	440a      	add	r2, r1
 8011be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011bec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011bf0:	6013      	str	r3, [r2, #0]
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	61fb      	str	r3, [r7, #28]
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011bfe:	d81d      	bhi.n	8011c3c <USB_HC_Halt+0x14a>
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);

 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	015a      	lsls	r2, r3, #5
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	4413      	add	r3, r2
 8011c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c16:	d0ec      	beq.n	8011bf2 <USB_HC_Halt+0x100>
  {
 8011c18:	e080      	b.n	8011d1c <USB_HC_Halt+0x22a>
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
        {
          /* need to process data in nptxfempty interrupt */
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	015a      	lsls	r2, r3, #5
 8011c1e:	69bb      	ldr	r3, [r7, #24]
 8011c20:	4413      	add	r3, r2
 8011c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	697a      	ldr	r2, [r7, #20]
 8011c2a:	0151      	lsls	r1, r2, #5
 8011c2c:	69ba      	ldr	r2, [r7, #24]
 8011c2e:	440a      	add	r2, r1
 8011c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011c38:	6013      	str	r3, [r2, #0]
  {
 8011c3a:	e06f      	b.n	8011d1c <USB_HC_Halt+0x22a>

 8011c3c:	bf00      	nop
  {
 8011c3e:	e06d      	b.n	8011d1c <USB_HC_Halt+0x22a>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
        }
        break;

      /* Periodic transfer */
      case EP_TYPE_INTR:
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	015a      	lsls	r2, r3, #5
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	4413      	add	r3, r2
 8011c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	697a      	ldr	r2, [r7, #20]
 8011c50:	0151      	lsls	r1, r2, #5
 8011c52:	69ba      	ldr	r2, [r7, #24]
 8011c54:	440a      	add	r2, r1
 8011c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c5e:	6013      	str	r3, [r2, #0]
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011c60:	69bb      	ldr	r3, [r7, #24]
 8011c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011c66:	691b      	ldr	r3, [r3, #16]
 8011c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d143      	bne.n	8011cf8 <USB_HC_Halt+0x206>
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	015a      	lsls	r2, r3, #5
 8011c74:	69bb      	ldr	r3, [r7, #24]
 8011c76:	4413      	add	r3, r2
 8011c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	697a      	ldr	r2, [r7, #20]
 8011c80:	0151      	lsls	r1, r2, #5
 8011c82:	69ba      	ldr	r2, [r7, #24]
 8011c84:	440a      	add	r2, r1
 8011c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c8e:	6013      	str	r3, [r2, #0]
        {
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	015a      	lsls	r2, r3, #5
 8011c94:	69bb      	ldr	r3, [r7, #24]
 8011c96:	4413      	add	r3, r2
 8011c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	697a      	ldr	r2, [r7, #20]
 8011ca0:	0151      	lsls	r1, r2, #5
 8011ca2:	69ba      	ldr	r2, [r7, #24]
 8011ca4:	440a      	add	r2, r1
 8011ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011cae:	6013      	str	r3, [r2, #0]
          /* need to process data in ptxfempty interrupt */
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	015a      	lsls	r2, r3, #5
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	697a      	ldr	r2, [r7, #20]
 8011cc0:	0151      	lsls	r1, r2, #5
 8011cc2:	69ba      	ldr	r2, [r7, #24]
 8011cc4:	440a      	add	r2, r1
 8011cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011cce:	6013      	str	r3, [r2, #0]
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
        }
        break;
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	61fb      	str	r3, [r7, #28]
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011cdc:	d81d      	bhi.n	8011d1a <USB_HC_Halt+0x228>

      default:
        break;
    }
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	015a      	lsls	r2, r3, #5
 8011ce2:	69bb      	ldr	r3, [r7, #24]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011cf4:	d0ec      	beq.n	8011cd0 <USB_HC_Halt+0x1de>
 8011cf6:	e011      	b.n	8011d1c <USB_HC_Halt+0x22a>

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
  }
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	015a      	lsls	r2, r3, #5
 8011cfc:	69bb      	ldr	r3, [r7, #24]
 8011cfe:	4413      	add	r3, r2
 8011d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	0151      	lsls	r1, r2, #5
 8011d0a:	69ba      	ldr	r2, [r7, #24]
 8011d0c:	440a      	add	r2, r1
 8011d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011d16:	6013      	str	r3, [r2, #0]
 8011d18:	e000      	b.n	8011d1c <USB_HC_Halt+0x22a>
      default:
 8011d1a:	bf00      	nop

  return HAL_OK;
}

 8011d1c:	2300      	movs	r3, #0
/**
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3724      	adds	r7, #36	; 0x24
 8011d22:	46bd      	mov	sp, r7
 8011d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d28:	4770      	bx	lr
	...

08011d2c <USB_DoPing>:
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
}
 8011d2c:	b480      	push	{r7}
 8011d2e:	b087      	sub	sp, #28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	460b      	mov	r3, r1
 8011d36:	70fb      	strb	r3, [r7, #3]

 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	617b      	str	r3, [r7, #20]
/**
 8011d3c:	78fb      	ldrb	r3, [r7, #3]
 8011d3e:	613b      	str	r3, [r7, #16]
  * @brief  Halt a host channel
 8011d40:	2301      	movs	r3, #1
 8011d42:	60fb      	str	r3, [r7, #12]
  * @param  USBx  Selected device
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	04da      	lsls	r2, r3, #19
 8011d48:	4b15      	ldr	r3, [pc, #84]	; (8011da0 <USB_DoPing+0x74>)
 8011d4a:	4013      	ands	r3, r2
 8011d4c:	693a      	ldr	r2, [r7, #16]
 8011d4e:	0151      	lsls	r1, r2, #5
 8011d50:	697a      	ldr	r2, [r7, #20]
 8011d52:	440a      	add	r2, r1
 8011d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011d5c:	6113      	str	r3, [r2, #16]
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	015a      	lsls	r2, r3, #5
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	4413      	add	r3, r2
 8011d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	60bb      	str	r3, [r7, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d74:	60bb      	str	r3, [r7, #8]
  uint32_t hcnum = (uint32_t)hc_num;
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011d7c:	60bb      	str	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	015a      	lsls	r2, r3, #5
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	4413      	add	r3, r2
 8011d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	6013      	str	r3, [r2, #0]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011d90:	2300      	movs	r3, #0

 8011d92:	4618      	mov	r0, r3
 8011d94:	371c      	adds	r7, #28
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	1ff80000 	.word	0x1ff80000

08011da4 <USB_StopHost>:
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b086      	sub	sp, #24
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  {
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	60fb      	str	r3, [r7, #12]
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011db0:	2300      	movs	r3, #0
 8011db2:	617b      	str	r3, [r7, #20]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f7ff f98e 	bl	80110d6 <USB_DisableGlobalInt>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011dba:	2110      	movs	r1, #16
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f7ff f9c5 	bl	801114c <USB_FlushTxFifo>
        do
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff f9e8 	bl	8011198 <USB_FlushRxFifo>
        {
          if (++count > 1000U)
          {
 8011dc8:	2300      	movs	r3, #0
 8011dca:	613b      	str	r3, [r7, #16]
 8011dcc:	e01f      	b.n	8011e0e <USB_StopHost+0x6a>
            break;
          }
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	015a      	lsls	r2, r3, #5
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	60bb      	str	r3, [r7, #8]
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011de4:	60bb      	str	r3, [r7, #8]
      }
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011dec:	60bb      	str	r3, [r7, #8]
      else
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011df4:	60bb      	str	r3, [r7, #8]
      {
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	015a      	lsls	r2, r3, #5
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e02:	461a      	mov	r2, r3
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	6013      	str	r3, [r2, #0]
          {
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	613b      	str	r3, [r7, #16]
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	2b0f      	cmp	r3, #15
 8011e12:	d9dc      	bls.n	8011dce <USB_StopHost+0x2a>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
      }
    }
  }
 8011e14:	2300      	movs	r3, #0
 8011e16:	613b      	str	r3, [r7, #16]
 8011e18:	e034      	b.n	8011e84 <USB_StopHost+0xe0>
  else
  {
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	015a      	lsls	r2, r3, #5
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	4413      	add	r3, r2
 8011e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	60bb      	str	r3, [r7, #8]
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e30:	60bb      	str	r3, [r7, #8]

 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011e38:	60bb      	str	r3, [r7, #8]
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011e40:	60bb      	str	r3, [r7, #8]
    {
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	015a      	lsls	r2, r3, #5
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	4413      	add	r3, r2
 8011e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e4e:	461a      	mov	r2, r3
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
      do
      {
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	3301      	adds	r3, #1
 8011e58:	617b      	str	r3, [r7, #20]
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011e60:	d80c      	bhi.n	8011e7c <USB_StopHost+0xd8>
        if (++count > 1000U)
        {
          break;
        }
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	015a      	lsls	r2, r3, #5
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	4413      	add	r3, r2
 8011e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e78:	d0ec      	beq.n	8011e54 <USB_StopHost+0xb0>
 8011e7a:	e000      	b.n	8011e7e <USB_StopHost+0xda>
        {
 8011e7c:	bf00      	nop
  }
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	3301      	adds	r3, #1
 8011e82:	613b      	str	r3, [r7, #16]
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	2b0f      	cmp	r3, #15
 8011e88:	d9c7      	bls.n	8011e1a <USB_StopHost+0x76>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
    }
    else
    {
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e90:	461a      	mov	r2, r3
 8011e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e96:	6153      	str	r3, [r2, #20]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e9e:	615a      	str	r2, [r3, #20]
    }
  }
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f7ff f907 	bl	80110b4 <USB_EnableGlobalInt>

  return HAL_OK;
 8011ea6:	2300      	movs	r3, #0
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3718      	adds	r7, #24
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011eb4:	4904      	ldr	r1, [pc, #16]	; (8011ec8 <MX_FATFS_Init+0x18>)
 8011eb6:	4805      	ldr	r0, [pc, #20]	; (8011ecc <MX_FATFS_Init+0x1c>)
 8011eb8:	f002 fbf0 	bl	801469c <FATFS_LinkDriver>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	4b03      	ldr	r3, [pc, #12]	; (8011ed0 <MX_FATFS_Init+0x20>)
 8011ec2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011ec4:	bf00      	nop
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	2004b464 	.word	0x2004b464
 8011ecc:	0801c7ec 	.word	0x0801c7ec
 8011ed0:	2004b460 	.word	0x2004b460

08011ed4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011ede:	f000 f87b 	bl	8011fd8 <BSP_SD_IsDetected>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d001      	beq.n	8011eec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011ee8:	2302      	movs	r3, #2
 8011eea:	e012      	b.n	8011f12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011eec:	480b      	ldr	r0, [pc, #44]	; (8011f1c <BSP_SD_Init+0x48>)
 8011eee:	f7fb fae4 	bl	800d4ba <HAL_SD_Init>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d109      	bne.n	8011f10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011f00:	4806      	ldr	r0, [pc, #24]	; (8011f1c <BSP_SD_Init+0x48>)
 8011f02:	f7fb ff33 	bl	800dd6c <HAL_SD_ConfigWideBusOperation>
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d001      	beq.n	8011f10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011f10:	79fb      	ldrb	r3, [r7, #7]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	2000b284 	.word	0x2000b284

08011f20 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b086      	sub	sp, #24
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	60f8      	str	r0, [r7, #12]
 8011f28:	60b9      	str	r1, [r7, #8]
 8011f2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	68ba      	ldr	r2, [r7, #8]
 8011f34:	68f9      	ldr	r1, [r7, #12]
 8011f36:	4806      	ldr	r0, [pc, #24]	; (8011f50 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011f38:	f7fb fb76 	bl	800d628 <HAL_SD_ReadBlocks_DMA>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d001      	beq.n	8011f46 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011f42:	2301      	movs	r3, #1
 8011f44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3718      	adds	r7, #24
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	2000b284 	.word	0x2000b284

08011f54 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b086      	sub	sp, #24
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011f60:	2300      	movs	r3, #0
 8011f62:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	68f9      	ldr	r1, [r7, #12]
 8011f6a:	4806      	ldr	r0, [pc, #24]	; (8011f84 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011f6c:	f7fb fc3e 	bl	800d7ec <HAL_SD_WriteBlocks_DMA>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d001      	beq.n	8011f7a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011f76:	2301      	movs	r3, #1
 8011f78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3718      	adds	r7, #24
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	2000b284 	.word	0x2000b284

08011f88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011f8c:	4805      	ldr	r0, [pc, #20]	; (8011fa4 <BSP_SD_GetCardState+0x1c>)
 8011f8e:	f7fb ff87 	bl	800dea0 <HAL_SD_GetCardState>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b04      	cmp	r3, #4
 8011f96:	bf14      	ite	ne
 8011f98:	2301      	movne	r3, #1
 8011f9a:	2300      	moveq	r3, #0
 8011f9c:	b2db      	uxtb	r3, r3
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	2000b284 	.word	0x2000b284

08011fa8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011fb0:	6879      	ldr	r1, [r7, #4]
 8011fb2:	4803      	ldr	r0, [pc, #12]	; (8011fc0 <BSP_SD_GetCardInfo+0x18>)
 8011fb4:	f7fb feae 	bl	800dd14 <HAL_SD_GetCardInfo>
}
 8011fb8:	bf00      	nop
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	2000b284 	.word	0x2000b284

08011fc4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011fcc:	f000 f9b2 	bl	8012334 <BSP_SD_ReadCpltCallback>
}
 8011fd0:	bf00      	nop
 8011fd2:	3708      	adds	r7, #8
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011fe2:	f000 f80b 	bl	8011ffc <BSP_PlatformIsDetected>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d101      	bne.n	8011ff0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011fec:	2300      	movs	r3, #0
 8011fee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011ff0:	79fb      	ldrb	r3, [r7, #7]
 8011ff2:	b2db      	uxtb	r3, r3
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3708      	adds	r7, #8
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012002:	2301      	movs	r3, #1
 8012004:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801200a:	4806      	ldr	r0, [pc, #24]	; (8012024 <BSP_PlatformIsDetected+0x28>)
 801200c:	f7f5 fa4c 	bl	80074a8 <HAL_GPIO_ReadPin>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d001      	beq.n	801201a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012016:	2300      	movs	r3, #0
 8012018:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801201a:	79fb      	ldrb	r3, [r7, #7]
}
 801201c:	4618      	mov	r0, r3
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	40020800 	.word	0x40020800

08012028 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8012030:	f002 fb80 	bl	8014734 <osKernelSysTick>
 8012034:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8012036:	e006      	b.n	8012046 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012038:	f7ff ffa6 	bl	8011f88 <BSP_SD_GetCardState>
 801203c:	4603      	mov	r3, r0
 801203e:	2b00      	cmp	r3, #0
 8012040:	d101      	bne.n	8012046 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012042:	2300      	movs	r3, #0
 8012044:	e009      	b.n	801205a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8012046:	f002 fb75 	bl	8014734 <osKernelSysTick>
 801204a:	4602      	mov	r2, r0
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	1ad3      	subs	r3, r2, r3
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	429a      	cmp	r2, r3
 8012054:	d8f0      	bhi.n	8012038 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801205a:	4618      	mov	r0, r3
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
	...

08012064 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	4603      	mov	r3, r0
 801206c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801206e:	4b0b      	ldr	r3, [pc, #44]	; (801209c <SD_CheckStatus+0x38>)
 8012070:	2201      	movs	r2, #1
 8012072:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012074:	f7ff ff88 	bl	8011f88 <BSP_SD_GetCardState>
 8012078:	4603      	mov	r3, r0
 801207a:	2b00      	cmp	r3, #0
 801207c:	d107      	bne.n	801208e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801207e:	4b07      	ldr	r3, [pc, #28]	; (801209c <SD_CheckStatus+0x38>)
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	f023 0301 	bic.w	r3, r3, #1
 8012088:	b2da      	uxtb	r2, r3
 801208a:	4b04      	ldr	r3, [pc, #16]	; (801209c <SD_CheckStatus+0x38>)
 801208c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801208e:	4b03      	ldr	r3, [pc, #12]	; (801209c <SD_CheckStatus+0x38>)
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	b2db      	uxtb	r3, r3
}
 8012094:	4618      	mov	r0, r3
 8012096:	3708      	adds	r7, #8
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	20000029 	.word	0x20000029

080120a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80120a0:	b590      	push	{r4, r7, lr}
 80120a2:	b087      	sub	sp, #28
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	4603      	mov	r3, r0
 80120a8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80120aa:	4b20      	ldr	r3, [pc, #128]	; (801212c <SD_initialize+0x8c>)
 80120ac:	2201      	movs	r2, #1
 80120ae:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80120b0:	f002 fb34 	bl	801471c <osKernelRunning>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d030      	beq.n	801211c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80120ba:	f7ff ff0b 	bl	8011ed4 <BSP_SD_Init>
 80120be:	4603      	mov	r3, r0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d107      	bne.n	80120d4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80120c4:	79fb      	ldrb	r3, [r7, #7]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7ff ffcc 	bl	8012064 <SD_CheckStatus>
 80120cc:	4603      	mov	r3, r0
 80120ce:	461a      	mov	r2, r3
 80120d0:	4b16      	ldr	r3, [pc, #88]	; (801212c <SD_initialize+0x8c>)
 80120d2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80120d4:	4b15      	ldr	r3, [pc, #84]	; (801212c <SD_initialize+0x8c>)
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	b2db      	uxtb	r3, r3
 80120da:	2b01      	cmp	r3, #1
 80120dc:	d01e      	beq.n	801211c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80120de:	4b14      	ldr	r3, [pc, #80]	; (8012130 <SD_initialize+0x90>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d10e      	bne.n	8012104 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80120e6:	4b13      	ldr	r3, [pc, #76]	; (8012134 <SD_initialize+0x94>)
 80120e8:	f107 0408 	add.w	r4, r7, #8
 80120ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80120ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80120f2:	f107 0308 	add.w	r3, r7, #8
 80120f6:	2100      	movs	r1, #0
 80120f8:	4618      	mov	r0, r3
 80120fa:	f002 fc23 	bl	8014944 <osMessageCreate>
 80120fe:	4603      	mov	r3, r0
 8012100:	4a0b      	ldr	r2, [pc, #44]	; (8012130 <SD_initialize+0x90>)
 8012102:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8012104:	4b0a      	ldr	r3, [pc, #40]	; (8012130 <SD_initialize+0x90>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d107      	bne.n	801211c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 801210c:	4b07      	ldr	r3, [pc, #28]	; (801212c <SD_initialize+0x8c>)
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	b2db      	uxtb	r3, r3
 8012112:	f043 0301 	orr.w	r3, r3, #1
 8012116:	b2da      	uxtb	r2, r3
 8012118:	4b04      	ldr	r3, [pc, #16]	; (801212c <SD_initialize+0x8c>)
 801211a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801211c:	4b03      	ldr	r3, [pc, #12]	; (801212c <SD_initialize+0x8c>)
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	b2db      	uxtb	r3, r3
}
 8012122:	4618      	mov	r0, r3
 8012124:	371c      	adds	r7, #28
 8012126:	46bd      	mov	sp, r7
 8012128:	bd90      	pop	{r4, r7, pc}
 801212a:	bf00      	nop
 801212c:	20000029 	.word	0x20000029
 8012130:	2000036c 	.word	0x2000036c
 8012134:	0801a0e0 	.word	0x0801a0e0

08012138 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	4603      	mov	r3, r0
 8012140:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012142:	79fb      	ldrb	r3, [r7, #7]
 8012144:	4618      	mov	r0, r3
 8012146:	f7ff ff8d 	bl	8012064 <SD_CheckStatus>
 801214a:	4603      	mov	r3, r0
}
 801214c:	4618      	mov	r0, r3
 801214e:	3708      	adds	r7, #8
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b08a      	sub	sp, #40	; 0x28
 8012158:	af00      	add	r7, sp, #0
 801215a:	60b9      	str	r1, [r7, #8]
 801215c:	607a      	str	r2, [r7, #4]
 801215e:	603b      	str	r3, [r7, #0]
 8012160:	4603      	mov	r3, r0
 8012162:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
 8012164:	2301      	movs	r3, #1
 8012166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t alignedAddr;
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

 801216a:	f247 5030 	movw	r0, #30000	; 0x7530
 801216e:	f7ff ff5b 	bl	8012028 <SD_CheckStatusWithTimeout>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	da02      	bge.n	801217e <SD_read+0x2a>
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
  {
 8012178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801217c:	e032      	b.n	80121e4 <SD_read+0x90>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
 801217e:	683a      	ldr	r2, [r7, #0]
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	68b8      	ldr	r0, [r7, #8]
 8012184:	f7ff fecc 	bl	8011f20 <BSP_SD_ReadBlocks_DMA>
 8012188:	4603      	mov	r3, r0
 801218a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);

 801218e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012192:	2b00      	cmp	r3, #0
 8012194:	d124      	bne.n	80121e0 <SD_read+0x8c>
    if (ret == MSD_OK) {
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
 8012196:	4b15      	ldr	r3, [pc, #84]	; (80121ec <SD_read+0x98>)
 8012198:	6819      	ldr	r1, [r3, #0]
 801219a:	f107 0314 	add.w	r3, r7, #20
 801219e:	f247 5230 	movw	r2, #30000	; 0x7530
 80121a2:	4618      	mov	r0, r3
 80121a4:	f002 fc36 	bl	8014a14 <osMessageGet>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);

 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	2b10      	cmp	r3, #16
 80121ac:	d118      	bne.n	80121e0 <SD_read+0x8c>
    if (event.status == osEventMessage)
    {
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	d115      	bne.n	80121e0 <SD_read+0x8c>
      if (event.value.v == READ_CPLT_MSG)
      {
 80121b4:	f002 fabe 	bl	8014734 <osKernelSysTick>
 80121b8:	6238      	str	r0, [r7, #32]
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
 80121ba:	e008      	b.n	80121ce <SD_read+0x7a>
          {
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
 80121bc:	f7ff fee4 	bl	8011f88 <BSP_SD_GetCardState>
 80121c0:	4603      	mov	r3, r0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d103      	bne.n	80121ce <SD_read+0x7a>
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
              {
 80121c6:	2300      	movs	r3, #0
 80121c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
 80121cc:	e008      	b.n	80121e0 <SD_read+0x8c>
        /* block until SDIO IP is ready or a timeout occur */
 80121ce:	f002 fab1 	bl	8014734 <osKernelSysTick>
 80121d2:	4602      	mov	r2, r0
 80121d4:	6a3b      	ldr	r3, [r7, #32]
 80121d6:	1ad3      	subs	r3, r2, r3
 80121d8:	f247 522f 	movw	r2, #29999	; 0x752f
 80121dc:	4293      	cmp	r3, r2
 80121de:	d9ed      	bls.n	80121bc <SD_read+0x68>
      }

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
 80121e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  return res;
 80121e4:	4618      	mov	r0, r3
 80121e6:	3728      	adds	r7, #40	; 0x28
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	2000036c 	.word	0x2000036c

080121f0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b08a      	sub	sp, #40	; 0x28
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60b9      	str	r1, [r7, #8]
 80121f8:	607a      	str	r2, [r7, #4]
 80121fa:	603b      	str	r3, [r7, #0]
 80121fc:	4603      	mov	r3, r0
 80121fe:	73fb      	strb	r3, [r7, #15]
{
 8012200:	2301      	movs	r3, #1
 8012202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif

  /*
  * ensure the SDCard is ready for a new operation
  */

 8012206:	f247 5030 	movw	r0, #30000	; 0x7530
 801220a:	f7ff ff0d 	bl	8012028 <SD_CheckStatusWithTimeout>
 801220e:	4603      	mov	r3, r0
 8012210:	2b00      	cmp	r3, #0
 8012212:	da02      	bge.n	801221a <SD_write+0x2a>
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
  {
 8012214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012218:	e02e      	b.n	8012278 <SD_write+0x88>
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	6879      	ldr	r1, [r7, #4]
 801221e:	68b8      	ldr	r0, [r7, #8]
 8012220:	f7ff fe98 	bl	8011f54 <BSP_SD_WriteBlocks_DMA>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	d124      	bne.n	8012274 <SD_write+0x84>
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
 801222a:	4b15      	ldr	r3, [pc, #84]	; (8012280 <SD_write+0x90>)
 801222c:	6819      	ldr	r1, [r3, #0]
 801222e:	f107 0314 	add.w	r3, r7, #20
 8012232:	f247 5230 	movw	r2, #30000	; 0x7530
 8012236:	4618      	mov	r0, r3
 8012238:	f002 fbec 	bl	8014a14 <osMessageGet>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);

 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	2b10      	cmp	r3, #16
 8012240:	d118      	bne.n	8012274 <SD_write+0x84>
    if (event.status == osEventMessage)
    {
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	2b02      	cmp	r3, #2
 8012246:	d115      	bne.n	8012274 <SD_write+0x84>
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
 8012248:	f002 fa74 	bl	8014734 <osKernelSysTick>
 801224c:	6238      	str	r0, [r7, #32]
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
 801224e:	e008      	b.n	8012262 <SD_write+0x72>
#else
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
 8012250:	f7ff fe9a 	bl	8011f88 <BSP_SD_GetCardState>
 8012254:	4603      	mov	r3, r0
 8012256:	2b00      	cmp	r3, #0
 8012258:	d103      	bne.n	8012262 <SD_write+0x72>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
          {
 801225a:	2300      	movs	r3, #0
 801225c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            res = RES_OK;
 8012260:	e008      	b.n	8012274 <SD_write+0x84>
        /* block until SDIO IP is ready or a timeout occur */
 8012262:	f002 fa67 	bl	8014734 <osKernelSysTick>
 8012266:	4602      	mov	r2, r0
 8012268:	6a3b      	ldr	r3, [r7, #32]
 801226a:	1ad3      	subs	r3, r2, r3
 801226c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012270:	4293      	cmp	r3, r2
 8012272:	d9ed      	bls.n	8012250 <SD_write+0x60>
        res = RES_OK;
    }

  }
#endif

 8012274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  return res;
 8012278:	4618      	mov	r0, r3
 801227a:	3728      	adds	r7, #40	; 0x28
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	2000036c 	.word	0x2000036c

08012284 <SD_ioctl>:
  * @param  cmd: Control code
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
 8012284:	b580      	push	{r7, lr}
 8012286:	b08c      	sub	sp, #48	; 0x30
 8012288:	af00      	add	r7, sp, #0
 801228a:	4603      	mov	r3, r0
 801228c:	603a      	str	r2, [r7, #0]
 801228e:	71fb      	strb	r3, [r7, #7]
 8012290:	460b      	mov	r3, r1
 8012292:	71bb      	strb	r3, [r7, #6]
{
 8012294:	2301      	movs	r3, #1
 8012296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

 801229a:	4b25      	ldr	r3, [pc, #148]	; (8012330 <SD_ioctl+0xac>)
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	f003 0301 	and.w	r3, r3, #1
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d001      	beq.n	80122ac <SD_ioctl+0x28>
 80122a8:	2303      	movs	r3, #3
 80122aa:	e03c      	b.n	8012326 <SD_ioctl+0xa2>
  if (Stat & STA_NOINIT) return RES_NOTRDY;

 80122ac:	79bb      	ldrb	r3, [r7, #6]
 80122ae:	2b03      	cmp	r3, #3
 80122b0:	d834      	bhi.n	801231c <SD_ioctl+0x98>
 80122b2:	a201      	add	r2, pc, #4	; (adr r2, 80122b8 <SD_ioctl+0x34>)
 80122b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122b8:	080122c9 	.word	0x080122c9
 80122bc:	080122d1 	.word	0x080122d1
 80122c0:	080122e9 	.word	0x080122e9
 80122c4:	08012303 	.word	0x08012303
  switch (cmd)
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
 80122c8:	2300      	movs	r3, #0
 80122ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    res = RES_OK;
 80122ce:	e028      	b.n	8012322 <SD_ioctl+0x9e>
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
 80122d0:	f107 030c 	add.w	r3, r7, #12
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7ff fe67 	bl	8011fa8 <BSP_SD_GetCardInfo>
    BSP_SD_GetCardInfo(&CardInfo);
 80122da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	601a      	str	r2, [r3, #0]
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80122e0:	2300      	movs	r3, #0
 80122e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    res = RES_OK;
 80122e6:	e01c      	b.n	8012322 <SD_ioctl+0x9e>
    break;

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
 80122e8:	f107 030c 	add.w	r3, r7, #12
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7ff fe5b 	bl	8011fa8 <BSP_SD_GetCardInfo>
    BSP_SD_GetCardInfo(&CardInfo);
 80122f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	801a      	strh	r2, [r3, #0]
    *(WORD*)buff = CardInfo.LogBlockSize;
 80122fa:	2300      	movs	r3, #0
 80122fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    res = RES_OK;
 8012300:	e00f      	b.n	8012322 <SD_ioctl+0x9e>
    break;

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
 8012302:	f107 030c 	add.w	r3, r7, #12
 8012306:	4618      	mov	r0, r3
 8012308:	f7ff fe4e 	bl	8011fa8 <BSP_SD_GetCardInfo>
    BSP_SD_GetCardInfo(&CardInfo);
 801230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230e:	0a5a      	lsrs	r2, r3, #9
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	601a      	str	r2, [r3, #0]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012314:	2300      	movs	r3, #0
 8012316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    res = RES_OK;
 801231a:	e002      	b.n	8012322 <SD_ioctl+0x9e>
    break;

  default:
 801231c:	2304      	movs	r3, #4
 801231e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    res = RES_PARERR;
  }

 8012322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  return res;
 8012326:	4618      	mov	r0, r3
 8012328:	3730      	adds	r7, #48	; 0x30
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	20000029 	.word	0x20000029

08012334 <BSP_SD_ReadCpltCallback>:
/**
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
 8012334:	b580      	push	{r7, lr}
 8012336:	af00      	add	r7, sp, #0
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
 8012338:	4b04      	ldr	r3, [pc, #16]	; (801234c <BSP_SD_ReadCpltCallback+0x18>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2200      	movs	r2, #0
 801233e:	2101      	movs	r1, #1
 8012340:	4618      	mov	r0, r3
 8012342:	f002 fb27 	bl	8014994 <osMessagePut>
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
 8012346:	bf00      	nop
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	2000036c 	.word	0x2000036c

08012350 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8012350:	b480      	push	{r7}
 8012352:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8012354:	bf00      	nop
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr

0801235e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801235e:	b590      	push	{r4, r7, lr}
 8012360:	b089      	sub	sp, #36	; 0x24
 8012362:	af04      	add	r7, sp, #16
 8012364:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8012366:	2301      	movs	r3, #1
 8012368:	2202      	movs	r2, #2
 801236a:	2102      	movs	r1, #2
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 fcb9 	bl	8012ce4 <USBH_FindInterface>
 8012372:	4603      	mov	r3, r0
 8012374:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012376:	7bfb      	ldrb	r3, [r7, #15]
 8012378:	2bff      	cmp	r3, #255	; 0xff
 801237a:	d002      	beq.n	8012382 <USBH_CDC_InterfaceInit+0x24>
 801237c:	7bfb      	ldrb	r3, [r7, #15]
 801237e:	2b01      	cmp	r3, #1
 8012380:	d901      	bls.n	8012386 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012382:	2302      	movs	r3, #2
 8012384:	e13d      	b.n	8012602 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8012386:	7bfb      	ldrb	r3, [r7, #15]
 8012388:	4619      	mov	r1, r3
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 fc8e 	bl	8012cac <USBH_SelectInterface>
 8012390:	4603      	mov	r3, r0
 8012392:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8012394:	7bbb      	ldrb	r3, [r7, #14]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d001      	beq.n	801239e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801239a:	2302      	movs	r3, #2
 801239c:	e131      	b.n	8012602 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80123a4:	2050      	movs	r0, #80	; 0x50
 80123a6:	f006 fbd1 	bl	8018b4c <malloc>
 80123aa:	4603      	mov	r3, r0
 80123ac:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80123b4:	69db      	ldr	r3, [r3, #28]
 80123b6:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d101      	bne.n	80123c2 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80123be:	2302      	movs	r3, #2
 80123c0:	e11f      	b.n	8012602 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80123c2:	2250      	movs	r2, #80	; 0x50
 80123c4:	2100      	movs	r1, #0
 80123c6:	68b8      	ldr	r0, [r7, #8]
 80123c8:	f006 fbde 	bl	8018b88 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80123cc:	7bfb      	ldrb	r3, [r7, #15]
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	211a      	movs	r1, #26
 80123d2:	fb01 f303 	mul.w	r3, r1, r3
 80123d6:	4413      	add	r3, r2
 80123d8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	b25b      	sxtb	r3, r3
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	da15      	bge.n	8012410 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80123e4:	7bfb      	ldrb	r3, [r7, #15]
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	211a      	movs	r1, #26
 80123ea:	fb01 f303 	mul.w	r3, r1, r3
 80123ee:	4413      	add	r3, r2
 80123f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80123f4:	781a      	ldrb	r2, [r3, #0]
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80123fa:	7bfb      	ldrb	r3, [r7, #15]
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	211a      	movs	r1, #26
 8012400:	fb01 f303 	mul.w	r3, r1, r3
 8012404:	4413      	add	r3, r2
 8012406:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801240a:	881a      	ldrh	r2, [r3, #0]
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	785b      	ldrb	r3, [r3, #1]
 8012414:	4619      	mov	r1, r3
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f002 f891 	bl	801453e <USBH_AllocPipe>
 801241c:	4603      	mov	r3, r0
 801241e:	461a      	mov	r2, r3
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	7819      	ldrb	r1, [r3, #0]
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	7858      	ldrb	r0, [r3, #1]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012438:	68ba      	ldr	r2, [r7, #8]
 801243a:	8952      	ldrh	r2, [r2, #10]
 801243c:	9202      	str	r2, [sp, #8]
 801243e:	2203      	movs	r2, #3
 8012440:	9201      	str	r2, [sp, #4]
 8012442:	9300      	str	r3, [sp, #0]
 8012444:	4623      	mov	r3, r4
 8012446:	4602      	mov	r2, r0
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f002 f849 	bl	80144e0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	2200      	movs	r2, #0
 8012454:	4619      	mov	r1, r3
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f005 f9d8 	bl	801780c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801245c:	2300      	movs	r3, #0
 801245e:	2200      	movs	r2, #0
 8012460:	210a      	movs	r1, #10
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f000 fc3e 	bl	8012ce4 <USBH_FindInterface>
 8012468:	4603      	mov	r3, r0
 801246a:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801246c:	7bfb      	ldrb	r3, [r7, #15]
 801246e:	2bff      	cmp	r3, #255	; 0xff
 8012470:	d002      	beq.n	8012478 <USBH_CDC_InterfaceInit+0x11a>
 8012472:	7bfb      	ldrb	r3, [r7, #15]
 8012474:	2b01      	cmp	r3, #1
 8012476:	d901      	bls.n	801247c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012478:	2302      	movs	r3, #2
 801247a:	e0c2      	b.n	8012602 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801247c:	7bfb      	ldrb	r3, [r7, #15]
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	211a      	movs	r1, #26
 8012482:	fb01 f303 	mul.w	r3, r1, r3
 8012486:	4413      	add	r3, r2
 8012488:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	b25b      	sxtb	r3, r3
 8012490:	2b00      	cmp	r3, #0
 8012492:	da16      	bge.n	80124c2 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012494:	7bfb      	ldrb	r3, [r7, #15]
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	211a      	movs	r1, #26
 801249a:	fb01 f303 	mul.w	r3, r1, r3
 801249e:	4413      	add	r3, r2
 80124a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80124a4:	781a      	ldrb	r2, [r3, #0]
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80124aa:	7bfb      	ldrb	r3, [r7, #15]
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	211a      	movs	r1, #26
 80124b0:	fb01 f303 	mul.w	r3, r1, r3
 80124b4:	4413      	add	r3, r2
 80124b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80124ba:	881a      	ldrh	r2, [r3, #0]
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	835a      	strh	r2, [r3, #26]
 80124c0:	e015      	b.n	80124ee <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80124c2:	7bfb      	ldrb	r3, [r7, #15]
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	211a      	movs	r1, #26
 80124c8:	fb01 f303 	mul.w	r3, r1, r3
 80124cc:	4413      	add	r3, r2
 80124ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80124d2:	781a      	ldrb	r2, [r3, #0]
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80124d8:	7bfb      	ldrb	r3, [r7, #15]
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	211a      	movs	r1, #26
 80124de:	fb01 f303 	mul.w	r3, r1, r3
 80124e2:	4413      	add	r3, r2
 80124e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80124e8:	881a      	ldrh	r2, [r3, #0]
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80124ee:	7bfb      	ldrb	r3, [r7, #15]
 80124f0:	687a      	ldr	r2, [r7, #4]
 80124f2:	211a      	movs	r1, #26
 80124f4:	fb01 f303 	mul.w	r3, r1, r3
 80124f8:	4413      	add	r3, r2
 80124fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	b25b      	sxtb	r3, r3
 8012502:	2b00      	cmp	r3, #0
 8012504:	da16      	bge.n	8012534 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012506:	7bfb      	ldrb	r3, [r7, #15]
 8012508:	687a      	ldr	r2, [r7, #4]
 801250a:	211a      	movs	r1, #26
 801250c:	fb01 f303 	mul.w	r3, r1, r3
 8012510:	4413      	add	r3, r2
 8012512:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012516:	781a      	ldrb	r2, [r3, #0]
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801251c:	7bfb      	ldrb	r3, [r7, #15]
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	211a      	movs	r1, #26
 8012522:	fb01 f303 	mul.w	r3, r1, r3
 8012526:	4413      	add	r3, r2
 8012528:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801252c:	881a      	ldrh	r2, [r3, #0]
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	835a      	strh	r2, [r3, #26]
 8012532:	e015      	b.n	8012560 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012534:	7bfb      	ldrb	r3, [r7, #15]
 8012536:	687a      	ldr	r2, [r7, #4]
 8012538:	211a      	movs	r1, #26
 801253a:	fb01 f303 	mul.w	r3, r1, r3
 801253e:	4413      	add	r3, r2
 8012540:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012544:	781a      	ldrb	r2, [r3, #0]
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801254a:	7bfb      	ldrb	r3, [r7, #15]
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	211a      	movs	r1, #26
 8012550:	fb01 f303 	mul.w	r3, r1, r3
 8012554:	4413      	add	r3, r2
 8012556:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801255a:	881a      	ldrh	r2, [r3, #0]
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	7b9b      	ldrb	r3, [r3, #14]
 8012564:	4619      	mov	r1, r3
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f001 ffe9 	bl	801453e <USBH_AllocPipe>
 801256c:	4603      	mov	r3, r0
 801256e:	461a      	mov	r2, r3
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	7bdb      	ldrb	r3, [r3, #15]
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f001 ffdf 	bl	801453e <USBH_AllocPipe>
 8012580:	4603      	mov	r3, r0
 8012582:	461a      	mov	r2, r3
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	7b59      	ldrb	r1, [r3, #13]
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	7b98      	ldrb	r0, [r3, #14]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801259c:	68ba      	ldr	r2, [r7, #8]
 801259e:	8b12      	ldrh	r2, [r2, #24]
 80125a0:	9202      	str	r2, [sp, #8]
 80125a2:	2202      	movs	r2, #2
 80125a4:	9201      	str	r2, [sp, #4]
 80125a6:	9300      	str	r3, [sp, #0]
 80125a8:	4623      	mov	r3, r4
 80125aa:	4602      	mov	r2, r0
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f001 ff97 	bl	80144e0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	7b19      	ldrb	r1, [r3, #12]
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	7bd8      	ldrb	r0, [r3, #15]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80125c6:	68ba      	ldr	r2, [r7, #8]
 80125c8:	8b52      	ldrh	r2, [r2, #26]
 80125ca:	9202      	str	r2, [sp, #8]
 80125cc:	2202      	movs	r2, #2
 80125ce:	9201      	str	r2, [sp, #4]
 80125d0:	9300      	str	r3, [sp, #0]
 80125d2:	4623      	mov	r3, r4
 80125d4:	4602      	mov	r2, r0
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f001 ff82 	bl	80144e0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	2200      	movs	r2, #0
 80125e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	7b5b      	ldrb	r3, [r3, #13]
 80125e8:	2200      	movs	r2, #0
 80125ea:	4619      	mov	r1, r3
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f005 f90d 	bl	801780c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	7b1b      	ldrb	r3, [r3, #12]
 80125f6:	2200      	movs	r2, #0
 80125f8:	4619      	mov	r1, r3
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f005 f906 	bl	801780c <USBH_LL_SetToggle>

  return USBH_OK;
 8012600:	2300      	movs	r3, #0
}
 8012602:	4618      	mov	r0, r3
 8012604:	3714      	adds	r7, #20
 8012606:	46bd      	mov	sp, r7
 8012608:	bd90      	pop	{r4, r7, pc}

0801260a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801260a:	b580      	push	{r7, lr}
 801260c:	b084      	sub	sp, #16
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012618:	69db      	ldr	r3, [r3, #28]
 801261a:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00e      	beq.n	8012642 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	4619      	mov	r1, r3
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f001 ff77 	bl	801451e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	4619      	mov	r1, r3
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f001 ffa2 	bl	8014580 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	2200      	movs	r2, #0
 8012640:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	7b1b      	ldrb	r3, [r3, #12]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d00e      	beq.n	8012668 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	7b1b      	ldrb	r3, [r3, #12]
 801264e:	4619      	mov	r1, r3
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f001 ff64 	bl	801451e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	7b1b      	ldrb	r3, [r3, #12]
 801265a:	4619      	mov	r1, r3
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f001 ff8f 	bl	8014580 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2200      	movs	r2, #0
 8012666:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	7b5b      	ldrb	r3, [r3, #13]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00e      	beq.n	801268e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	7b5b      	ldrb	r3, [r3, #13]
 8012674:	4619      	mov	r1, r3
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f001 ff51 	bl	801451e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	7b5b      	ldrb	r3, [r3, #13]
 8012680:	4619      	mov	r1, r3
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f001 ff7c 	bl	8014580 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	2200      	movs	r2, #0
 801268c:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012694:	69db      	ldr	r3, [r3, #28]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00b      	beq.n	80126b2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126a0:	69db      	ldr	r3, [r3, #28]
 80126a2:	4618      	mov	r0, r3
 80126a4:	f006 fa5a 	bl	8018b5c <free>
    phost->pActiveClass->pData = 0U;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126ae:	2200      	movs	r2, #0
 80126b0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80126b2:	2300      	movs	r3, #0
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3710      	adds	r7, #16
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126ca:	69db      	ldr	r3, [r3, #28]
 80126cc:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	3340      	adds	r3, #64	; 0x40
 80126d2:	4619      	mov	r1, r3
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 f8b2 	bl	801283e <GetLineCoding>
 80126da:	4603      	mov	r3, r0
 80126dc:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80126de:	7afb      	ldrb	r3, [r7, #11]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d105      	bne.n	80126f0 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80126ea:	2102      	movs	r1, #2
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80126f0:	7afb      	ldrb	r3, [r7, #11]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3710      	adds	r7, #16
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
	...

080126fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012704:	2301      	movs	r3, #1
 8012706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8012708:	2300      	movs	r3, #0
 801270a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012712:	69db      	ldr	r3, [r3, #28]
 8012714:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801271c:	2b04      	cmp	r3, #4
 801271e:	d877      	bhi.n	8012810 <USBH_CDC_Process+0x114>
 8012720:	a201      	add	r2, pc, #4	; (adr r2, 8012728 <USBH_CDC_Process+0x2c>)
 8012722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012726:	bf00      	nop
 8012728:	0801273d 	.word	0x0801273d
 801272c:	08012743 	.word	0x08012743
 8012730:	08012773 	.word	0x08012773
 8012734:	080127e7 	.word	0x080127e7
 8012738:	080127f5 	.word	0x080127f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 801273c:	2300      	movs	r3, #0
 801273e:	73fb      	strb	r3, [r7, #15]
      break;
 8012740:	e06d      	b.n	801281e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012746:	4619      	mov	r1, r3
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f000 f897 	bl	801287c <SetLineCoding>
 801274e:	4603      	mov	r3, r0
 8012750:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012752:	7bbb      	ldrb	r3, [r7, #14]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d104      	bne.n	8012762 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	2202      	movs	r2, #2
 801275c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012760:	e058      	b.n	8012814 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8012762:	7bbb      	ldrb	r3, [r7, #14]
 8012764:	2b01      	cmp	r3, #1
 8012766:	d055      	beq.n	8012814 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	2204      	movs	r2, #4
 801276c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8012770:	e050      	b.n	8012814 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	3340      	adds	r3, #64	; 0x40
 8012776:	4619      	mov	r1, r3
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f000 f860 	bl	801283e <GetLineCoding>
 801277e:	4603      	mov	r3, r0
 8012780:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012782:	7bbb      	ldrb	r3, [r7, #14]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d126      	bne.n	80127d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	2200      	movs	r2, #0
 801278c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801279a:	791b      	ldrb	r3, [r3, #4]
 801279c:	429a      	cmp	r2, r3
 801279e:	d13b      	bne.n	8012818 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d133      	bne.n	8012818 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80127bc:	429a      	cmp	r2, r3
 80127be:	d12b      	bne.n	8012818 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d124      	bne.n	8012818 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 f982 	bl	8012ad8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80127d4:	e020      	b.n	8012818 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80127d6:	7bbb      	ldrb	r3, [r7, #14]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d01d      	beq.n	8012818 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	2204      	movs	r2, #4
 80127e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80127e4:	e018      	b.n	8012818 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f000 f867 	bl	80128ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f000 f8f6 	bl	80129de <CDC_ProcessReception>
      break;
 80127f2:	e014      	b.n	801281e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80127f4:	2100      	movs	r1, #0
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f001 f951 	bl	8013a9e <USBH_ClrFeature>
 80127fc:	4603      	mov	r3, r0
 80127fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012800:	7bbb      	ldrb	r3, [r7, #14]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d10a      	bne.n	801281c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	2200      	movs	r2, #0
 801280a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 801280e:	e005      	b.n	801281c <USBH_CDC_Process+0x120>

    default:
      break;
 8012810:	bf00      	nop
 8012812:	e004      	b.n	801281e <USBH_CDC_Process+0x122>
      break;
 8012814:	bf00      	nop
 8012816:	e002      	b.n	801281e <USBH_CDC_Process+0x122>
      break;
 8012818:	bf00      	nop
 801281a:	e000      	b.n	801281e <USBH_CDC_Process+0x122>
      break;
 801281c:	bf00      	nop

  }

  return status;
 801281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012820:	4618      	mov	r0, r3
 8012822:	3710      	adds	r7, #16
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012830:	2300      	movs	r3, #0
}
 8012832:	4618      	mov	r0, r3
 8012834:	370c      	adds	r7, #12
 8012836:	46bd      	mov	sp, r7
 8012838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283c:	4770      	bx	lr

0801283e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 801283e:	b580      	push	{r7, lr}
 8012840:	b082      	sub	sp, #8
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
 8012846:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	22a1      	movs	r2, #161	; 0xa1
 801284c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2221      	movs	r2, #33	; 0x21
 8012852:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2200      	movs	r2, #0
 8012858:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2200      	movs	r2, #0
 801285e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2207      	movs	r2, #7
 8012864:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	2207      	movs	r2, #7
 801286a:	4619      	mov	r1, r3
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f001 faf6 	bl	8013e5e <USBH_CtlReq>
 8012872:	4603      	mov	r3, r0
}
 8012874:	4618      	mov	r0, r3
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2221      	movs	r2, #33	; 0x21
 801288a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2220      	movs	r2, #32
 8012890:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2200      	movs	r2, #0
 8012896:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2200      	movs	r2, #0
 801289c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2207      	movs	r2, #7
 80128a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	2207      	movs	r2, #7
 80128a8:	4619      	mov	r1, r3
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f001 fad7 	bl	8013e5e <USBH_CtlReq>
 80128b0:	4603      	mov	r3, r0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3708      	adds	r7, #8
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}

080128ba <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80128ba:	b580      	push	{r7, lr}
 80128bc:	b086      	sub	sp, #24
 80128be:	af02      	add	r7, sp, #8
 80128c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80128c8:	69db      	ldr	r3, [r3, #28]
 80128ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80128cc:	2300      	movs	r3, #0
 80128ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d002      	beq.n	80128e0 <CDC_ProcessTransmission+0x26>
 80128da:	2b02      	cmp	r3, #2
 80128dc:	d023      	beq.n	8012926 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80128de:	e07a      	b.n	80129d6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	8b12      	ldrh	r2, [r2, #24]
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d90b      	bls.n	8012904 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	69d9      	ldr	r1, [r3, #28]
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	8b1a      	ldrh	r2, [r3, #24]
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	7b5b      	ldrb	r3, [r3, #13]
 80128f8:	2001      	movs	r0, #1
 80128fa:	9000      	str	r0, [sp, #0]
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f001 fdac 	bl	801445a <USBH_BulkSendData>
 8012902:	e00b      	b.n	801291c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 801290c:	b29a      	uxth	r2, r3
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	7b5b      	ldrb	r3, [r3, #13]
 8012912:	2001      	movs	r0, #1
 8012914:	9000      	str	r0, [sp, #0]
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f001 fd9f 	bl	801445a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2202      	movs	r2, #2
 8012920:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8012924:	e057      	b.n	80129d6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	7b5b      	ldrb	r3, [r3, #13]
 801292a:	4619      	mov	r1, r3
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f004 ff43 	bl	80177b8 <USBH_LL_GetURBState>
 8012932:	4603      	mov	r3, r0
 8012934:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8012936:	7afb      	ldrb	r3, [r7, #11]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d136      	bne.n	80129aa <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012940:	68fa      	ldr	r2, [r7, #12]
 8012942:	8b12      	ldrh	r2, [r2, #24]
 8012944:	4293      	cmp	r3, r2
 8012946:	d90e      	bls.n	8012966 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	8b12      	ldrh	r2, [r2, #24]
 8012950:	1a9a      	subs	r2, r3, r2
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	69db      	ldr	r3, [r3, #28]
 801295a:	68fa      	ldr	r2, [r7, #12]
 801295c:	8b12      	ldrh	r2, [r2, #24]
 801295e:	441a      	add	r2, r3
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	61da      	str	r2, [r3, #28]
 8012964:	e002      	b.n	801296c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2200      	movs	r2, #0
 801296a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012970:	2b00      	cmp	r3, #0
 8012972:	d004      	beq.n	801297e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2201      	movs	r2, #1
 8012978:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801297c:	e006      	b.n	801298c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2200      	movs	r2, #0
 8012982:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 f892 	bl	8012ab0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2204      	movs	r2, #4
 8012990:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80129a0:	2200      	movs	r2, #0
 80129a2:	4619      	mov	r1, r3
 80129a4:	f001 fff6 	bl	8014994 <osMessagePut>
      break;
 80129a8:	e014      	b.n	80129d4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80129aa:	7afb      	ldrb	r3, [r7, #11]
 80129ac:	2b02      	cmp	r3, #2
 80129ae:	d111      	bne.n	80129d4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2201      	movs	r2, #1
 80129b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2204      	movs	r2, #4
 80129bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80129cc:	2200      	movs	r2, #0
 80129ce:	4619      	mov	r1, r3
 80129d0:	f001 ffe0 	bl	8014994 <osMessagePut>
      break;
 80129d4:	bf00      	nop
  }
}
 80129d6:	bf00      	nop
 80129d8:	3710      	adds	r7, #16
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}

080129de <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80129de:	b580      	push	{r7, lr}
 80129e0:	b086      	sub	sp, #24
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80129ec:	69db      	ldr	r3, [r3, #28]
 80129ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80129f0:	2300      	movs	r3, #0
 80129f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80129fa:	2b03      	cmp	r3, #3
 80129fc:	d002      	beq.n	8012a04 <CDC_ProcessReception+0x26>
 80129fe:	2b04      	cmp	r3, #4
 8012a00:	d00e      	beq.n	8012a20 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8012a02:	e051      	b.n	8012aa8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	6a19      	ldr	r1, [r3, #32]
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	8b5a      	ldrh	r2, [r3, #26]
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	7b1b      	ldrb	r3, [r3, #12]
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f001 fd47 	bl	80144a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	2204      	movs	r2, #4
 8012a1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8012a1e:	e043      	b.n	8012aa8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	7b1b      	ldrb	r3, [r3, #12]
 8012a24:	4619      	mov	r1, r3
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f004 fec6 	bl	80177b8 <USBH_LL_GetURBState>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012a30:	7cfb      	ldrb	r3, [r7, #19]
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	d137      	bne.n	8012aa6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	7b1b      	ldrb	r3, [r3, #12]
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f004 fe29 	bl	8017694 <USBH_LL_GetLastXferSize>
 8012a42:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a48:	68fa      	ldr	r2, [r7, #12]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d016      	beq.n	8012a7c <CDC_ProcessReception+0x9e>
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	8b5b      	ldrh	r3, [r3, #26]
 8012a52:	461a      	mov	r2, r3
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	4293      	cmp	r3, r2
 8012a58:	d910      	bls.n	8012a7c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	1ad2      	subs	r2, r2, r3
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	6a1a      	ldr	r2, [r3, #32]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	441a      	add	r2, r3
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	2203      	movs	r2, #3
 8012a76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8012a7a:	e006      	b.n	8012a8a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f000 f81d 	bl	8012ac4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2204      	movs	r2, #4
 8012a8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	f001 ff77 	bl	8014994 <osMessagePut>
      break;
 8012aa6:	bf00      	nop
  }
}
 8012aa8:	bf00      	nop
 8012aaa:	3718      	adds	r7, #24
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012ab8:	bf00      	nop
 8012aba:	370c      	adds	r7, #12
 8012abc:	46bd      	mov	sp, r7
 8012abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac2:	4770      	bx	lr

08012ac4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012acc:	bf00      	nop
 8012ace:	370c      	adds	r7, #12
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012ae0:	bf00      	nop
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8012aec:	b5b0      	push	{r4, r5, r7, lr}
 8012aee:	b090      	sub	sp, #64	; 0x40
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	60b9      	str	r1, [r7, #8]
 8012af6:	4613      	mov	r3, r2
 8012af8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d101      	bne.n	8012b04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8012b00:	2302      	movs	r3, #2
 8012b02:	e04d      	b.n	8012ba0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	79fa      	ldrb	r2, [r7, #7]
 8012b08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2200      	movs	r2, #0
 8012b18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8012b1c:	68f8      	ldr	r0, [r7, #12]
 8012b1e:	f000 f847 	bl	8012bb0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	2200      	movs	r2, #0
 8012b26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2200      	movs	r2, #0
 8012b36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d003      	beq.n	8012b50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	68ba      	ldr	r2, [r7, #8]
 8012b4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8012b50:	4b15      	ldr	r3, [pc, #84]	; (8012ba8 <USBH_Init+0xbc>)
 8012b52:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8012b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8012b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012b60:	2100      	movs	r1, #0
 8012b62:	4618      	mov	r0, r3
 8012b64:	f001 feee 	bl	8014944 <osMessageCreate>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8012b70:	4b0e      	ldr	r3, [pc, #56]	; (8012bac <USBH_Init+0xc0>)
 8012b72:	f107 0414 	add.w	r4, r7, #20
 8012b76:	461d      	mov	r5, r3
 8012b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012b80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8012b84:	f107 0314 	add.w	r3, r7, #20
 8012b88:	68f9      	ldr	r1, [r7, #12]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f001 fde2 	bl	8014754 <osThreadCreate>
 8012b90:	4602      	mov	r2, r0
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8012b98:	68f8      	ldr	r0, [r7, #12]
 8012b9a:	f004 fcc7 	bl	801752c <USBH_LL_Init>

  return USBH_OK;
 8012b9e:	2300      	movs	r3, #0
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3740      	adds	r7, #64	; 0x40
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ba8:	0801a100 	.word	0x0801a100
 8012bac:	0801a110 	.word	0x0801a110

08012bb0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b085      	sub	sp, #20
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	60fb      	str	r3, [r7, #12]
 8012bc0:	e009      	b.n	8012bd6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	33e0      	adds	r3, #224	; 0xe0
 8012bc8:	009b      	lsls	r3, r3, #2
 8012bca:	4413      	add	r3, r2
 8012bcc:	2200      	movs	r2, #0
 8012bce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	60fb      	str	r3, [r7, #12]
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b0e      	cmp	r3, #14
 8012bda:	d9f2      	bls.n	8012bc2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012bdc:	2300      	movs	r3, #0
 8012bde:	60fb      	str	r3, [r7, #12]
 8012be0:	e009      	b.n	8012bf6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8012be2:	687a      	ldr	r2, [r7, #4]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	4413      	add	r3, r2
 8012be8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012bec:	2200      	movs	r2, #0
 8012bee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	60fb      	str	r3, [r7, #12]
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bfc:	d3f1      	bcc.n	8012be2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2200      	movs	r2, #0
 8012c02:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2200      	movs	r2, #0
 8012c08:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2240      	movs	r2, #64	; 0x40
 8012c22:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2200      	movs	r2, #0
 8012c28:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2201      	movs	r2, #1
 8012c36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2200      	movs	r2, #0
 8012c46:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8012c4a:	2300      	movs	r3, #0
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3714      	adds	r7, #20
 8012c50:	46bd      	mov	sp, r7
 8012c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c56:	4770      	bx	lr

08012c58 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b085      	sub	sp, #20
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8012c62:	2300      	movs	r3, #0
 8012c64:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d016      	beq.n	8012c9a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d10e      	bne.n	8012c94 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012c7c:	1c59      	adds	r1, r3, #1
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	33de      	adds	r3, #222	; 0xde
 8012c88:	6839      	ldr	r1, [r7, #0]
 8012c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	73fb      	strb	r3, [r7, #15]
 8012c92:	e004      	b.n	8012c9e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8012c94:	2302      	movs	r3, #2
 8012c96:	73fb      	strb	r3, [r7, #15]
 8012c98:	e001      	b.n	8012c9e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8012c9a:	2302      	movs	r3, #2
 8012c9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3714      	adds	r7, #20
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr

08012cac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b085      	sub	sp, #20
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	460b      	mov	r3, r1
 8012cb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8012cc2:	78fa      	ldrb	r2, [r7, #3]
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d204      	bcs.n	8012cd2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	78fa      	ldrb	r2, [r7, #3]
 8012ccc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8012cd0:	e001      	b.n	8012cd6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8012cd2:	2302      	movs	r3, #2
 8012cd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3714      	adds	r7, #20
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b087      	sub	sp, #28
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	4608      	mov	r0, r1
 8012cee:	4611      	mov	r1, r2
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	70fb      	strb	r3, [r7, #3]
 8012cf6:	460b      	mov	r3, r1
 8012cf8:	70bb      	strb	r3, [r7, #2]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8012d02:	2300      	movs	r3, #0
 8012d04:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8012d0c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012d0e:	e025      	b.n	8012d5c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8012d10:	7dfb      	ldrb	r3, [r7, #23]
 8012d12:	221a      	movs	r2, #26
 8012d14:	fb02 f303 	mul.w	r3, r2, r3
 8012d18:	3308      	adds	r3, #8
 8012d1a:	68fa      	ldr	r2, [r7, #12]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	3302      	adds	r3, #2
 8012d20:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	795b      	ldrb	r3, [r3, #5]
 8012d26:	78fa      	ldrb	r2, [r7, #3]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d002      	beq.n	8012d32 <USBH_FindInterface+0x4e>
 8012d2c:	78fb      	ldrb	r3, [r7, #3]
 8012d2e:	2bff      	cmp	r3, #255	; 0xff
 8012d30:	d111      	bne.n	8012d56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012d36:	78ba      	ldrb	r2, [r7, #2]
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d002      	beq.n	8012d42 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d3c:	78bb      	ldrb	r3, [r7, #2]
 8012d3e:	2bff      	cmp	r3, #255	; 0xff
 8012d40:	d109      	bne.n	8012d56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d46:	787a      	ldrb	r2, [r7, #1]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d002      	beq.n	8012d52 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012d4c:	787b      	ldrb	r3, [r7, #1]
 8012d4e:	2bff      	cmp	r3, #255	; 0xff
 8012d50:	d101      	bne.n	8012d56 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8012d52:	7dfb      	ldrb	r3, [r7, #23]
 8012d54:	e006      	b.n	8012d64 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012d56:	7dfb      	ldrb	r3, [r7, #23]
 8012d58:	3301      	adds	r3, #1
 8012d5a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d9d6      	bls.n	8012d10 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8012d62:	23ff      	movs	r3, #255	; 0xff
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	371c      	adds	r7, #28
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f004 fc13 	bl	80175a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8012d7e:	2101      	movs	r1, #1
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f004 fd2c 	bl	80177de <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b088      	sub	sp, #32
 8012d94:	af04      	add	r7, sp, #16
 8012d96:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8012d98:	2302      	movs	r3, #2
 8012d9a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8012da6:	b2db      	uxtb	r3, r3
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d102      	bne.n	8012db2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2203      	movs	r2, #3
 8012db0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	2b0b      	cmp	r3, #11
 8012dba:	f200 823c 	bhi.w	8013236 <USBH_Process+0x4a6>
 8012dbe:	a201      	add	r2, pc, #4	; (adr r2, 8012dc4 <USBH_Process+0x34>)
 8012dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dc4:	08012df5 	.word	0x08012df5
 8012dc8:	08012e43 	.word	0x08012e43
 8012dcc:	08012ec7 	.word	0x08012ec7
 8012dd0:	080131b5 	.word	0x080131b5
 8012dd4:	08013237 	.word	0x08013237
 8012dd8:	08012f87 	.word	0x08012f87
 8012ddc:	0801313f 	.word	0x0801313f
 8012de0:	08012fd9 	.word	0x08012fd9
 8012de4:	08013015 	.word	0x08013015
 8012de8:	0801304f 	.word	0x0801304f
 8012dec:	08013097 	.word	0x08013097
 8012df0:	0801319d 	.word	0x0801319d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	f000 821c 	beq.w	801323a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2201      	movs	r2, #1
 8012e06:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8012e08:	20c8      	movs	r0, #200	; 0xc8
 8012e0a:	f004 fd2f 	bl	801786c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f004 fc25 	bl	801765e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2200      	movs	r2, #0
 8012e18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2201      	movs	r2, #1
 8012e28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012e38:	2200      	movs	r2, #0
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	f001 fdaa 	bl	8014994 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8012e40:	e1fb      	b.n	801323a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d107      	bne.n	8012e5c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2202      	movs	r2, #2
 8012e58:	701a      	strb	r2, [r3, #0]
 8012e5a:	e025      	b.n	8012ea8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8012e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012e66:	d914      	bls.n	8012e92 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012e6e:	3301      	adds	r3, #1
 8012e70:	b2da      	uxtb	r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012e7e:	2b03      	cmp	r3, #3
 8012e80:	d903      	bls.n	8012e8a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	220d      	movs	r2, #13
 8012e86:	701a      	strb	r2, [r3, #0]
 8012e88:	e00e      	b.n	8012ea8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	701a      	strb	r2, [r3, #0]
 8012e90:	e00a      	b.n	8012ea8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8012e98:	f103 020a 	add.w	r2, r3, #10
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8012ea2:	200a      	movs	r0, #10
 8012ea4:	f004 fce2 	bl	801786c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2201      	movs	r2, #1
 8012eac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	f001 fd68 	bl	8014994 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8012ec4:	e1c0      	b.n	8013248 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d005      	beq.n	8012edc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012ed6:	2104      	movs	r1, #4
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8012edc:	2064      	movs	r0, #100	; 0x64
 8012ede:	f004 fcc5 	bl	801786c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f004 fb94 	bl	8017610 <USBH_LL_GetSpeed>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	461a      	mov	r2, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2205      	movs	r2, #5
 8012ef6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8012ef8:	2100      	movs	r1, #0
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f001 fb1f 	bl	801453e <USBH_AllocPipe>
 8012f00:	4603      	mov	r3, r0
 8012f02:	461a      	mov	r2, r3
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8012f08:	2180      	movs	r1, #128	; 0x80
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f001 fb17 	bl	801453e <USBH_AllocPipe>
 8012f10:	4603      	mov	r3, r0
 8012f12:	461a      	mov	r2, r3
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	7919      	ldrb	r1, [r3, #4]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012f28:	687a      	ldr	r2, [r7, #4]
 8012f2a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012f2c:	b292      	uxth	r2, r2
 8012f2e:	9202      	str	r2, [sp, #8]
 8012f30:	2200      	movs	r2, #0
 8012f32:	9201      	str	r2, [sp, #4]
 8012f34:	9300      	str	r3, [sp, #0]
 8012f36:	4603      	mov	r3, r0
 8012f38:	2280      	movs	r2, #128	; 0x80
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f001 fad0 	bl	80144e0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	7959      	ldrb	r1, [r3, #5]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012f50:	687a      	ldr	r2, [r7, #4]
 8012f52:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012f54:	b292      	uxth	r2, r2
 8012f56:	9202      	str	r2, [sp, #8]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	9201      	str	r2, [sp, #4]
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	4603      	mov	r3, r0
 8012f60:	2200      	movs	r2, #0
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f001 fabc 	bl	80144e0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4619      	mov	r1, r3
 8012f80:	f001 fd08 	bl	8014994 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8012f84:	e160      	b.n	8013248 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 f964 	bl	8013254 <USBH_HandleEnum>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8012f90:	7bbb      	ldrb	r3, [r7, #14]
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	f040 8152 	bne.w	801323e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d103      	bne.n	8012fb4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2208      	movs	r2, #8
 8012fb0:	701a      	strb	r2, [r3, #0]
 8012fb2:	e002      	b.n	8012fba <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2207      	movs	r2, #7
 8012fb8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2205      	movs	r2, #5
 8012fbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012fce:	2200      	movs	r2, #0
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	f001 fcdf 	bl	8014994 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8012fd6:	e132      	b.n	801323e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	f000 812f 	beq.w	8013242 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012fea:	2101      	movs	r1, #1
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2208      	movs	r2, #8
 8012ff4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2205      	movs	r2, #5
 8012ffa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801300a:	2200      	movs	r2, #0
 801300c:	4619      	mov	r1, r3
 801300e:	f001 fcc1 	bl	8014994 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8013012:	e116      	b.n	8013242 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 801301a:	b29b      	uxth	r3, r3
 801301c:	4619      	mov	r1, r3
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 fcf6 	bl	8013a10 <USBH_SetCfg>
 8013024:	4603      	mov	r3, r0
 8013026:	2b00      	cmp	r3, #0
 8013028:	d102      	bne.n	8013030 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2209      	movs	r2, #9
 801302e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2201      	movs	r2, #1
 8013034:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013044:	2200      	movs	r2, #0
 8013046:	4619      	mov	r1, r3
 8013048:	f001 fca4 	bl	8014994 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801304c:	e0fc      	b.n	8013248 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8013054:	f003 0320 	and.w	r3, r3, #32
 8013058:	2b00      	cmp	r3, #0
 801305a:	d00a      	beq.n	8013072 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 801305c:	2101      	movs	r1, #1
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fcf9 	bl	8013a56 <USBH_SetFeature>
 8013064:	4603      	mov	r3, r0
 8013066:	2b00      	cmp	r3, #0
 8013068:	d106      	bne.n	8013078 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	220a      	movs	r2, #10
 801306e:	701a      	strb	r2, [r3, #0]
 8013070:	e002      	b.n	8013078 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	220a      	movs	r2, #10
 8013076:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2201      	movs	r2, #1
 801307c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801308c:	2200      	movs	r2, #0
 801308e:	4619      	mov	r1, r3
 8013090:	f001 fc80 	bl	8014994 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013094:	e0d8      	b.n	8013248 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801309c:	2b00      	cmp	r3, #0
 801309e:	d03f      	beq.n	8013120 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2200      	movs	r2, #0
 80130a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80130a8:	2300      	movs	r3, #0
 80130aa:	73fb      	strb	r3, [r7, #15]
 80130ac:	e016      	b.n	80130dc <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80130ae:	7bfa      	ldrb	r2, [r7, #15]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	32de      	adds	r2, #222	; 0xde
 80130b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130b8:	791a      	ldrb	r2, [r3, #4]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d108      	bne.n	80130d6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80130c4:	7bfa      	ldrb	r2, [r7, #15]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	32de      	adds	r2, #222	; 0xde
 80130ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80130d4:	e005      	b.n	80130e2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80130d6:	7bfb      	ldrb	r3, [r7, #15]
 80130d8:	3301      	adds	r3, #1
 80130da:	73fb      	strb	r3, [r7, #15]
 80130dc:	7bfb      	ldrb	r3, [r7, #15]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d0e5      	beq.n	80130ae <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d016      	beq.n	801311a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130f2:	689b      	ldr	r3, [r3, #8]
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	4798      	blx	r3
 80130f8:	4603      	mov	r3, r0
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d109      	bne.n	8013112 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2206      	movs	r2, #6
 8013102:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801310a:	2103      	movs	r1, #3
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	4798      	blx	r3
 8013110:	e006      	b.n	8013120 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	220d      	movs	r2, #13
 8013116:	701a      	strb	r2, [r3, #0]
 8013118:	e002      	b.n	8013120 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	220d      	movs	r2, #13
 801311e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2205      	movs	r2, #5
 8013124:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013134:	2200      	movs	r2, #0
 8013136:	4619      	mov	r1, r3
 8013138:	f001 fc2c 	bl	8014994 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801313c:	e084      	b.n	8013248 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013144:	2b00      	cmp	r3, #0
 8013146:	d017      	beq.n	8013178 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801314e:	691b      	ldr	r3, [r3, #16]
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	4798      	blx	r3
 8013154:	4603      	mov	r3, r0
 8013156:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013158:	7bbb      	ldrb	r3, [r7, #14]
 801315a:	b2db      	uxtb	r3, r3
 801315c:	2b00      	cmp	r3, #0
 801315e:	d103      	bne.n	8013168 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	220b      	movs	r2, #11
 8013164:	701a      	strb	r2, [r3, #0]
 8013166:	e00a      	b.n	801317e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8013168:	7bbb      	ldrb	r3, [r7, #14]
 801316a:	b2db      	uxtb	r3, r3
 801316c:	2b02      	cmp	r3, #2
 801316e:	d106      	bne.n	801317e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	220d      	movs	r2, #13
 8013174:	701a      	strb	r2, [r3, #0]
 8013176:	e002      	b.n	801317e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	220d      	movs	r2, #13
 801317c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2205      	movs	r2, #5
 8013182:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013192:	2200      	movs	r2, #0
 8013194:	4619      	mov	r1, r3
 8013196:	f001 fbfd 	bl	8014994 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801319a:	e055      	b.n	8013248 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d04f      	beq.n	8013246 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131ac:	695b      	ldr	r3, [r3, #20]
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	4798      	blx	r3
      }
      break;
 80131b2:	e048      	b.n	8013246 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7ff fcf7 	bl	8012bb0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d009      	beq.n	80131e0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2200      	movs	r2, #0
 80131dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d005      	beq.n	80131f6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80131f0:	2105      	movs	r1, #5
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d107      	bne.n	8013212 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2200      	movs	r2, #0
 8013206:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f7ff fdb0 	bl	8012d70 <USBH_Start>
 8013210:	e002      	b.n	8013218 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f004 f9c6 	bl	80175a4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2201      	movs	r2, #1
 801321c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801322c:	2200      	movs	r2, #0
 801322e:	4619      	mov	r1, r3
 8013230:	f001 fbb0 	bl	8014994 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013234:	e008      	b.n	8013248 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8013236:	bf00      	nop
 8013238:	e006      	b.n	8013248 <USBH_Process+0x4b8>
      break;
 801323a:	bf00      	nop
 801323c:	e004      	b.n	8013248 <USBH_Process+0x4b8>
      break;
 801323e:	bf00      	nop
 8013240:	e002      	b.n	8013248 <USBH_Process+0x4b8>
    break;
 8013242:	bf00      	nop
 8013244:	e000      	b.n	8013248 <USBH_Process+0x4b8>
      break;
 8013246:	bf00      	nop
  }
  return USBH_OK;
 8013248:	2300      	movs	r3, #0
}
 801324a:	4618      	mov	r0, r3
 801324c:	3710      	adds	r7, #16
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop

08013254 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b088      	sub	sp, #32
 8013258:	af04      	add	r7, sp, #16
 801325a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801325c:	2301      	movs	r3, #1
 801325e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013260:	2301      	movs	r3, #1
 8013262:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	785b      	ldrb	r3, [r3, #1]
 8013268:	2b07      	cmp	r3, #7
 801326a:	f200 8208 	bhi.w	801367e <USBH_HandleEnum+0x42a>
 801326e:	a201      	add	r2, pc, #4	; (adr r2, 8013274 <USBH_HandleEnum+0x20>)
 8013270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013274:	08013295 	.word	0x08013295
 8013278:	08013353 	.word	0x08013353
 801327c:	080133bd 	.word	0x080133bd
 8013280:	0801344b 	.word	0x0801344b
 8013284:	080134b5 	.word	0x080134b5
 8013288:	08013525 	.word	0x08013525
 801328c:	080135c1 	.word	0x080135c1
 8013290:	0801363f 	.word	0x0801363f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013294:	2108      	movs	r1, #8
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f000 faea 	bl	8013870 <USBH_Get_DevDesc>
 801329c:	4603      	mov	r3, r0
 801329e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80132a0:	7bbb      	ldrb	r3, [r7, #14]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d130      	bne.n	8013308 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2201      	movs	r2, #1
 80132b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	7919      	ldrb	r1, [r3, #4]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80132ca:	b292      	uxth	r2, r2
 80132cc:	9202      	str	r2, [sp, #8]
 80132ce:	2200      	movs	r2, #0
 80132d0:	9201      	str	r2, [sp, #4]
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	4603      	mov	r3, r0
 80132d6:	2280      	movs	r2, #128	; 0x80
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f001 f901 	bl	80144e0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	7959      	ldrb	r1, [r3, #5]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80132f2:	b292      	uxth	r2, r2
 80132f4:	9202      	str	r2, [sp, #8]
 80132f6:	2200      	movs	r2, #0
 80132f8:	9201      	str	r2, [sp, #4]
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	4603      	mov	r3, r0
 80132fe:	2200      	movs	r2, #0
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f001 f8ed 	bl	80144e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013306:	e1bc      	b.n	8013682 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013308:	7bbb      	ldrb	r3, [r7, #14]
 801330a:	2b03      	cmp	r3, #3
 801330c:	f040 81b9 	bne.w	8013682 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013316:	3301      	adds	r3, #1
 8013318:	b2da      	uxtb	r2, r3
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013326:	2b03      	cmp	r3, #3
 8013328:	d903      	bls.n	8013332 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	220d      	movs	r2, #13
 801332e:	701a      	strb	r2, [r3, #0]
      break;
 8013330:	e1a7      	b.n	8013682 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	795b      	ldrb	r3, [r3, #5]
 8013336:	4619      	mov	r1, r3
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f001 f921 	bl	8014580 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	791b      	ldrb	r3, [r3, #4]
 8013342:	4619      	mov	r1, r3
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f001 f91b 	bl	8014580 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2200      	movs	r2, #0
 801334e:	701a      	strb	r2, [r3, #0]
      break;
 8013350:	e197      	b.n	8013682 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8013352:	2112      	movs	r1, #18
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f000 fa8b 	bl	8013870 <USBH_Get_DevDesc>
 801335a:	4603      	mov	r3, r0
 801335c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801335e:	7bbb      	ldrb	r3, [r7, #14]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d103      	bne.n	801336c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2202      	movs	r2, #2
 8013368:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801336a:	e18c      	b.n	8013686 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801336c:	7bbb      	ldrb	r3, [r7, #14]
 801336e:	2b03      	cmp	r3, #3
 8013370:	f040 8189 	bne.w	8013686 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801337a:	3301      	adds	r3, #1
 801337c:	b2da      	uxtb	r2, r3
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801338a:	2b03      	cmp	r3, #3
 801338c:	d903      	bls.n	8013396 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	220d      	movs	r2, #13
 8013392:	701a      	strb	r2, [r3, #0]
      break;
 8013394:	e177      	b.n	8013686 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	795b      	ldrb	r3, [r3, #5]
 801339a:	4619      	mov	r1, r3
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f001 f8ef 	bl	8014580 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	791b      	ldrb	r3, [r3, #4]
 80133a6:	4619      	mov	r1, r3
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f001 f8e9 	bl	8014580 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2200      	movs	r2, #0
 80133b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2200      	movs	r2, #0
 80133b8:	701a      	strb	r2, [r3, #0]
      break;
 80133ba:	e164      	b.n	8013686 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80133bc:	2101      	movs	r1, #1
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f000 fb02 	bl	80139c8 <USBH_SetAddress>
 80133c4:	4603      	mov	r3, r0
 80133c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80133c8:	7bbb      	ldrb	r3, [r7, #14]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d132      	bne.n	8013434 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80133ce:	2002      	movs	r0, #2
 80133d0:	f004 fa4c 	bl	801786c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2201      	movs	r2, #1
 80133d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2203      	movs	r2, #3
 80133e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	7919      	ldrb	r1, [r3, #4]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80133f6:	b292      	uxth	r2, r2
 80133f8:	9202      	str	r2, [sp, #8]
 80133fa:	2200      	movs	r2, #0
 80133fc:	9201      	str	r2, [sp, #4]
 80133fe:	9300      	str	r3, [sp, #0]
 8013400:	4603      	mov	r3, r0
 8013402:	2280      	movs	r2, #128	; 0x80
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f001 f86b 	bl	80144e0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	7959      	ldrb	r1, [r3, #5]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801341e:	b292      	uxth	r2, r2
 8013420:	9202      	str	r2, [sp, #8]
 8013422:	2200      	movs	r2, #0
 8013424:	9201      	str	r2, [sp, #4]
 8013426:	9300      	str	r3, [sp, #0]
 8013428:	4603      	mov	r3, r0
 801342a:	2200      	movs	r2, #0
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f001 f857 	bl	80144e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8013432:	e12a      	b.n	801368a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013434:	7bbb      	ldrb	r3, [r7, #14]
 8013436:	2b03      	cmp	r3, #3
 8013438:	f040 8127 	bne.w	801368a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	220d      	movs	r2, #13
 8013440:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2200      	movs	r2, #0
 8013446:	705a      	strb	r2, [r3, #1]
      break;
 8013448:	e11f      	b.n	801368a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801344a:	2109      	movs	r1, #9
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f000 fa37 	bl	80138c0 <USBH_Get_CfgDesc>
 8013452:	4603      	mov	r3, r0
 8013454:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013456:	7bbb      	ldrb	r3, [r7, #14]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d103      	bne.n	8013464 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2204      	movs	r2, #4
 8013460:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013462:	e114      	b.n	801368e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013464:	7bbb      	ldrb	r3, [r7, #14]
 8013466:	2b03      	cmp	r3, #3
 8013468:	f040 8111 	bne.w	801368e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013472:	3301      	adds	r3, #1
 8013474:	b2da      	uxtb	r2, r3
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013482:	2b03      	cmp	r3, #3
 8013484:	d903      	bls.n	801348e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	220d      	movs	r2, #13
 801348a:	701a      	strb	r2, [r3, #0]
      break;
 801348c:	e0ff      	b.n	801368e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	795b      	ldrb	r3, [r3, #5]
 8013492:	4619      	mov	r1, r3
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f001 f873 	bl	8014580 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	791b      	ldrb	r3, [r3, #4]
 801349e:	4619      	mov	r1, r3
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f001 f86d 	bl	8014580 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2200      	movs	r2, #0
 80134aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2200      	movs	r2, #0
 80134b0:	701a      	strb	r2, [r3, #0]
      break;
 80134b2:	e0ec      	b.n	801368e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80134ba:	4619      	mov	r1, r3
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f000 f9ff 	bl	80138c0 <USBH_Get_CfgDesc>
 80134c2:	4603      	mov	r3, r0
 80134c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80134c6:	7bbb      	ldrb	r3, [r7, #14]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d103      	bne.n	80134d4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2205      	movs	r2, #5
 80134d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80134d2:	e0de      	b.n	8013692 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80134d4:	7bbb      	ldrb	r3, [r7, #14]
 80134d6:	2b03      	cmp	r3, #3
 80134d8:	f040 80db 	bne.w	8013692 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80134e2:	3301      	adds	r3, #1
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80134f2:	2b03      	cmp	r3, #3
 80134f4:	d903      	bls.n	80134fe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	220d      	movs	r2, #13
 80134fa:	701a      	strb	r2, [r3, #0]
      break;
 80134fc:	e0c9      	b.n	8013692 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	795b      	ldrb	r3, [r3, #5]
 8013502:	4619      	mov	r1, r3
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f001 f83b 	bl	8014580 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	791b      	ldrb	r3, [r3, #4]
 801350e:	4619      	mov	r1, r3
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f001 f835 	bl	8014580 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2200      	movs	r2, #0
 801351a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2200      	movs	r2, #0
 8013520:	701a      	strb	r2, [r3, #0]
      break;
 8013522:	e0b6      	b.n	8013692 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801352a:	2b00      	cmp	r3, #0
 801352c:	d036      	beq.n	801359c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801353a:	23ff      	movs	r3, #255	; 0xff
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f000 f9e3 	bl	8013908 <USBH_Get_StringDesc>
 8013542:	4603      	mov	r3, r0
 8013544:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013546:	7bbb      	ldrb	r3, [r7, #14]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d111      	bne.n	8013570 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2206      	movs	r2, #6
 8013550:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2205      	movs	r2, #5
 8013556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013566:	2200      	movs	r2, #0
 8013568:	4619      	mov	r1, r3
 801356a:	f001 fa13 	bl	8014994 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801356e:	e092      	b.n	8013696 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013570:	7bbb      	ldrb	r3, [r7, #14]
 8013572:	2b03      	cmp	r3, #3
 8013574:	f040 808f 	bne.w	8013696 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2206      	movs	r2, #6
 801357c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2205      	movs	r2, #5
 8013582:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013592:	2200      	movs	r2, #0
 8013594:	4619      	mov	r1, r3
 8013596:	f001 f9fd 	bl	8014994 <osMessagePut>
      break;
 801359a:	e07c      	b.n	8013696 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2206      	movs	r2, #6
 80135a0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2205      	movs	r2, #5
 80135a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80135b6:	2200      	movs	r2, #0
 80135b8:	4619      	mov	r1, r3
 80135ba:	f001 f9eb 	bl	8014994 <osMessagePut>
      break;
 80135be:	e06a      	b.n	8013696 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d027      	beq.n	801361a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80135d6:	23ff      	movs	r3, #255	; 0xff
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f000 f995 	bl	8013908 <USBH_Get_StringDesc>
 80135de:	4603      	mov	r3, r0
 80135e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80135e2:	7bbb      	ldrb	r3, [r7, #14]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d103      	bne.n	80135f0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2207      	movs	r2, #7
 80135ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80135ee:	e054      	b.n	801369a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80135f0:	7bbb      	ldrb	r3, [r7, #14]
 80135f2:	2b03      	cmp	r3, #3
 80135f4:	d151      	bne.n	801369a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2207      	movs	r2, #7
 80135fa:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2205      	movs	r2, #5
 8013600:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013610:	2200      	movs	r2, #0
 8013612:	4619      	mov	r1, r3
 8013614:	f001 f9be 	bl	8014994 <osMessagePut>
      break;
 8013618:	e03f      	b.n	801369a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2207      	movs	r2, #7
 801361e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2205      	movs	r2, #5
 8013624:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013634:	2200      	movs	r2, #0
 8013636:	4619      	mov	r1, r3
 8013638:	f001 f9ac 	bl	8014994 <osMessagePut>
      break;
 801363c:	e02d      	b.n	801369a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8013644:	2b00      	cmp	r3, #0
 8013646:	d017      	beq.n	8013678 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013654:	23ff      	movs	r3, #255	; 0xff
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f000 f956 	bl	8013908 <USBH_Get_StringDesc>
 801365c:	4603      	mov	r3, r0
 801365e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013660:	7bbb      	ldrb	r3, [r7, #14]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d102      	bne.n	801366c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8013666:	2300      	movs	r3, #0
 8013668:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801366a:	e018      	b.n	801369e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801366c:	7bbb      	ldrb	r3, [r7, #14]
 801366e:	2b03      	cmp	r3, #3
 8013670:	d115      	bne.n	801369e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8013672:	2300      	movs	r3, #0
 8013674:	73fb      	strb	r3, [r7, #15]
      break;
 8013676:	e012      	b.n	801369e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8013678:	2300      	movs	r3, #0
 801367a:	73fb      	strb	r3, [r7, #15]
      break;
 801367c:	e00f      	b.n	801369e <USBH_HandleEnum+0x44a>

    default:
      break;
 801367e:	bf00      	nop
 8013680:	e00e      	b.n	80136a0 <USBH_HandleEnum+0x44c>
      break;
 8013682:	bf00      	nop
 8013684:	e00c      	b.n	80136a0 <USBH_HandleEnum+0x44c>
      break;
 8013686:	bf00      	nop
 8013688:	e00a      	b.n	80136a0 <USBH_HandleEnum+0x44c>
      break;
 801368a:	bf00      	nop
 801368c:	e008      	b.n	80136a0 <USBH_HandleEnum+0x44c>
      break;
 801368e:	bf00      	nop
 8013690:	e006      	b.n	80136a0 <USBH_HandleEnum+0x44c>
      break;
 8013692:	bf00      	nop
 8013694:	e004      	b.n	80136a0 <USBH_HandleEnum+0x44c>
      break;
 8013696:	bf00      	nop
 8013698:	e002      	b.n	80136a0 <USBH_HandleEnum+0x44c>
      break;
 801369a:	bf00      	nop
 801369c:	e000      	b.n	80136a0 <USBH_HandleEnum+0x44c>
      break;
 801369e:	bf00      	nop
  }
  return Status;
 80136a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3710      	adds	r7, #16
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop

080136ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	683a      	ldr	r2, [r7, #0]
 80136ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80136be:	bf00      	nop
 80136c0:	370c      	adds	r7, #12
 80136c2:	46bd      	mov	sp, r7
 80136c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c8:	4770      	bx	lr

080136ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b082      	sub	sp, #8
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80136d8:	1c5a      	adds	r2, r3, #1
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f000 f804 	bl	80136ee <USBH_HandleSof>
}
 80136e6:	bf00      	nop
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}

080136ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80136ee:	b580      	push	{r7, lr}
 80136f0:	b082      	sub	sp, #8
 80136f2:	af00      	add	r7, sp, #0
 80136f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b0b      	cmp	r3, #11
 80136fe:	d10a      	bne.n	8013716 <USBH_HandleSof+0x28>
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013706:	2b00      	cmp	r3, #0
 8013708:	d005      	beq.n	8013716 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013710:	699b      	ldr	r3, [r3, #24]
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	4798      	blx	r3
  }
}
 8013716:	bf00      	nop
 8013718:	3708      	adds	r7, #8
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}

0801371e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801371e:	b580      	push	{r7, lr}
 8013720:	b082      	sub	sp, #8
 8013722:	af00      	add	r7, sp, #0
 8013724:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2201      	movs	r2, #1
 801372a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2201      	movs	r2, #1
 8013732:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013742:	2200      	movs	r2, #0
 8013744:	4619      	mov	r1, r3
 8013746:	f001 f925 	bl	8014994 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 801374a:	bf00      	nop
}
 801374c:	3708      	adds	r7, #8
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}

08013752 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8013752:	b480      	push	{r7}
 8013754:	b083      	sub	sp, #12
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8013762:	bf00      	nop
}
 8013764:	370c      	adds	r7, #12
 8013766:	46bd      	mov	sp, r7
 8013768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376c:	4770      	bx	lr

0801376e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801376e:	b580      	push	{r7, lr}
 8013770:	b082      	sub	sp, #8
 8013772:	af00      	add	r7, sp, #0
 8013774:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2201      	movs	r2, #1
 801377a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2200      	movs	r2, #0
 801378a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2201      	movs	r2, #1
 8013792:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80137a2:	2200      	movs	r2, #0
 80137a4:	4619      	mov	r1, r3
 80137a6:	f001 f8f5 	bl	8014994 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80137aa:	2300      	movs	r3, #0
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3708      	adds	r7, #8
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}

080137b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2201      	movs	r2, #1
 80137c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2200      	movs	r2, #0
 80137c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2200      	movs	r2, #0
 80137d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f003 ff00 	bl	80175da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	791b      	ldrb	r3, [r3, #4]
 80137de:	4619      	mov	r1, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f000 fecd 	bl	8014580 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	795b      	ldrb	r3, [r3, #5]
 80137ea:	4619      	mov	r1, r3
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f000 fec7 	bl	8014580 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2201      	movs	r2, #1
 80137f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013806:	2200      	movs	r2, #0
 8013808:	4619      	mov	r1, r3
 801380a:	f001 f8c3 	bl	8014994 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801380e:	2300      	movs	r3, #0
}
 8013810:	4618      	mov	r0, r3
 8013812:	3708      	adds	r7, #8
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}

08013818 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b086      	sub	sp, #24
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8013826:	f107 030c 	add.w	r3, r7, #12
 801382a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801382e:	4618      	mov	r0, r3
 8013830:	f001 f8f0 	bl	8014a14 <osMessageGet>
    if (event.status == osEventMessage)
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2b10      	cmp	r3, #16
 8013838:	d1f2      	bne.n	8013820 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f7ff faa8 	bl	8012d90 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013840:	e7ee      	b.n	8013820 <USBH_Process_OS+0x8>

08013842 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8013842:	b580      	push	{r7, lr}
 8013844:	b082      	sub	sp, #8
 8013846:	af00      	add	r7, sp, #0
 8013848:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2201      	movs	r2, #1
 801384e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801385e:	2200      	movs	r2, #0
 8013860:	4619      	mov	r1, r3
 8013862:	f001 f897 	bl	8014994 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8013866:	2300      	movs	r3, #0
}
 8013868:	4618      	mov	r0, r3
 801386a:	3708      	adds	r7, #8
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b086      	sub	sp, #24
 8013874:	af02      	add	r7, sp, #8
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	460b      	mov	r3, r1
 801387a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8013882:	78fb      	ldrb	r3, [r7, #3]
 8013884:	b29b      	uxth	r3, r3
 8013886:	9300      	str	r3, [sp, #0]
 8013888:	4613      	mov	r3, r2
 801388a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801388e:	2100      	movs	r1, #0
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f000 f864 	bl	801395e <USBH_GetDescriptor>
 8013896:	4603      	mov	r3, r0
 8013898:	73fb      	strb	r3, [r7, #15]
 801389a:	7bfb      	ldrb	r3, [r7, #15]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d10a      	bne.n	80138b6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80138ac:	78fa      	ldrb	r2, [r7, #3]
 80138ae:	b292      	uxth	r2, r2
 80138b0:	4619      	mov	r1, r3
 80138b2:	f000 f918 	bl	8013ae6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80138b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3710      	adds	r7, #16
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b086      	sub	sp, #24
 80138c4:	af02      	add	r7, sp, #8
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	460b      	mov	r3, r1
 80138ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	331c      	adds	r3, #28
 80138d0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80138d2:	887b      	ldrh	r3, [r7, #2]
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80138dc:	2100      	movs	r1, #0
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f000 f83d 	bl	801395e <USBH_GetDescriptor>
 80138e4:	4603      	mov	r3, r0
 80138e6:	72fb      	strb	r3, [r7, #11]
 80138e8:	7afb      	ldrb	r3, [r7, #11]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d107      	bne.n	80138fe <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80138f4:	887a      	ldrh	r2, [r7, #2]
 80138f6:	68f9      	ldr	r1, [r7, #12]
 80138f8:	4618      	mov	r0, r3
 80138fa:	f000 f964 	bl	8013bc6 <USBH_ParseCfgDesc>
  }

  return status;
 80138fe:	7afb      	ldrb	r3, [r7, #11]
}
 8013900:	4618      	mov	r0, r3
 8013902:	3710      	adds	r7, #16
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b088      	sub	sp, #32
 801390c:	af02      	add	r7, sp, #8
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	607a      	str	r2, [r7, #4]
 8013912:	461a      	mov	r2, r3
 8013914:	460b      	mov	r3, r1
 8013916:	72fb      	strb	r3, [r7, #11]
 8013918:	4613      	mov	r3, r2
 801391a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 801391c:	7afb      	ldrb	r3, [r7, #11]
 801391e:	b29b      	uxth	r3, r3
 8013920:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013924:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801392c:	893b      	ldrh	r3, [r7, #8]
 801392e:	9300      	str	r3, [sp, #0]
 8013930:	460b      	mov	r3, r1
 8013932:	2100      	movs	r1, #0
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f000 f812 	bl	801395e <USBH_GetDescriptor>
 801393a:	4603      	mov	r3, r0
 801393c:	75fb      	strb	r3, [r7, #23]
 801393e:	7dfb      	ldrb	r3, [r7, #23]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d107      	bne.n	8013954 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801394a:	893a      	ldrh	r2, [r7, #8]
 801394c:	6879      	ldr	r1, [r7, #4]
 801394e:	4618      	mov	r0, r3
 8013950:	f000 fa37 	bl	8013dc2 <USBH_ParseStringDesc>
  }

  return status;
 8013954:	7dfb      	ldrb	r3, [r7, #23]
}
 8013956:	4618      	mov	r0, r3
 8013958:	3718      	adds	r7, #24
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}

0801395e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801395e:	b580      	push	{r7, lr}
 8013960:	b084      	sub	sp, #16
 8013962:	af00      	add	r7, sp, #0
 8013964:	60f8      	str	r0, [r7, #12]
 8013966:	607b      	str	r3, [r7, #4]
 8013968:	460b      	mov	r3, r1
 801396a:	72fb      	strb	r3, [r7, #11]
 801396c:	4613      	mov	r3, r2
 801396e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	789b      	ldrb	r3, [r3, #2]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d11c      	bne.n	80139b2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8013978:	7afb      	ldrb	r3, [r7, #11]
 801397a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801397e:	b2da      	uxtb	r2, r3
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	2206      	movs	r2, #6
 8013988:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	893a      	ldrh	r2, [r7, #8]
 801398e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013990:	893b      	ldrh	r3, [r7, #8]
 8013992:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801399a:	d104      	bne.n	80139a6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	f240 4209 	movw	r2, #1033	; 0x409
 80139a2:	829a      	strh	r2, [r3, #20]
 80139a4:	e002      	b.n	80139ac <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2200      	movs	r2, #0
 80139aa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	8b3a      	ldrh	r2, [r7, #24]
 80139b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80139b2:	8b3b      	ldrh	r3, [r7, #24]
 80139b4:	461a      	mov	r2, r3
 80139b6:	6879      	ldr	r1, [r7, #4]
 80139b8:	68f8      	ldr	r0, [r7, #12]
 80139ba:	f000 fa50 	bl	8013e5e <USBH_CtlReq>
 80139be:	4603      	mov	r3, r0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	460b      	mov	r3, r1
 80139d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	789b      	ldrb	r3, [r3, #2]
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d10f      	bne.n	80139fc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2200      	movs	r2, #0
 80139e0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2205      	movs	r2, #5
 80139e6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80139e8:	78fb      	ldrb	r3, [r7, #3]
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2200      	movs	r2, #0
 80139f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2200      	movs	r2, #0
 80139fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80139fc:	2200      	movs	r2, #0
 80139fe:	2100      	movs	r1, #0
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f000 fa2c 	bl	8013e5e <USBH_CtlReq>
 8013a06:	4603      	mov	r3, r0
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	460b      	mov	r3, r1
 8013a1a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	789b      	ldrb	r3, [r3, #2]
 8013a20:	2b01      	cmp	r3, #1
 8013a22:	d10e      	bne.n	8013a42 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2200      	movs	r2, #0
 8013a28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2209      	movs	r2, #9
 8013a2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	887a      	ldrh	r2, [r7, #2]
 8013a34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2200      	movs	r2, #0
 8013a3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8013a42:	2200      	movs	r2, #0
 8013a44:	2100      	movs	r1, #0
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f000 fa09 	bl	8013e5e <USBH_CtlReq>
 8013a4c:	4603      	mov	r3, r0
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3708      	adds	r7, #8
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}

08013a56 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8013a56:	b580      	push	{r7, lr}
 8013a58:	b082      	sub	sp, #8
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
 8013a5e:	460b      	mov	r3, r1
 8013a60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	789b      	ldrb	r3, [r3, #2]
 8013a66:	2b01      	cmp	r3, #1
 8013a68:	d10f      	bne.n	8013a8a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	2203      	movs	r2, #3
 8013a74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8013a76:	78fb      	ldrb	r3, [r7, #3]
 8013a78:	b29a      	uxth	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2200      	movs	r2, #0
 8013a82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2200      	movs	r2, #0
 8013a88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	2100      	movs	r1, #0
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 f9e5 	bl	8013e5e <USBH_CtlReq>
 8013a94:	4603      	mov	r3, r0
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	789b      	ldrb	r3, [r3, #2]
 8013aae:	2b01      	cmp	r3, #1
 8013ab0:	d10f      	bne.n	8013ad2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2202      	movs	r2, #2
 8013ab6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2201      	movs	r2, #1
 8013abc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013ac4:	78fb      	ldrb	r3, [r7, #3]
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	2100      	movs	r1, #0
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f000 f9c1 	bl	8013e5e <USBH_CtlReq>
 8013adc:	4603      	mov	r3, r0
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3708      	adds	r7, #8
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}

08013ae6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8013ae6:	b480      	push	{r7}
 8013ae8:	b085      	sub	sp, #20
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	60f8      	str	r0, [r7, #12]
 8013aee:	60b9      	str	r1, [r7, #8]
 8013af0:	4613      	mov	r3, r2
 8013af2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	781a      	ldrb	r2, [r3, #0]
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	785a      	ldrb	r2, [r3, #1]
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	3302      	adds	r3, #2
 8013b08:	781b      	ldrb	r3, [r3, #0]
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	3303      	adds	r3, #3
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	021b      	lsls	r3, r3, #8
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	b29a      	uxth	r2, r3
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	791a      	ldrb	r2, [r3, #4]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	795a      	ldrb	r2, [r3, #5]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	799a      	ldrb	r2, [r3, #6]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	79da      	ldrb	r2, [r3, #7]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8013b40:	88fb      	ldrh	r3, [r7, #6]
 8013b42:	2b08      	cmp	r3, #8
 8013b44:	d939      	bls.n	8013bba <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	3308      	adds	r3, #8
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	b29a      	uxth	r2, r3
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	3309      	adds	r3, #9
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	021b      	lsls	r3, r3, #8
 8013b58:	b29b      	uxth	r3, r3
 8013b5a:	4313      	orrs	r3, r2
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	330a      	adds	r3, #10
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	b29a      	uxth	r2, r3
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	330b      	adds	r3, #11
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	021b      	lsls	r3, r3, #8
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	4313      	orrs	r3, r2
 8013b78:	b29a      	uxth	r2, r3
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	330c      	adds	r3, #12
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	330d      	adds	r3, #13
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	021b      	lsls	r3, r3, #8
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	4313      	orrs	r3, r2
 8013b94:	b29a      	uxth	r2, r3
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	7b9a      	ldrb	r2, [r3, #14]
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	7bda      	ldrb	r2, [r3, #15]
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	7c1a      	ldrb	r2, [r3, #16]
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	7c5a      	ldrb	r2, [r3, #17]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	745a      	strb	r2, [r3, #17]
  }
}
 8013bba:	bf00      	nop
 8013bbc:	3714      	adds	r7, #20
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr

08013bc6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b08a      	sub	sp, #40	; 0x28
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	60f8      	str	r0, [r7, #12]
 8013bce:	60b9      	str	r1, [r7, #8]
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8013bde:	2300      	movs	r3, #0
 8013be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	781a      	ldrb	r2, [r3, #0]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	785a      	ldrb	r2, [r3, #1]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	3302      	adds	r3, #2
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	3303      	adds	r3, #3
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	b29b      	uxth	r3, r3
 8013c08:	021b      	lsls	r3, r3, #8
 8013c0a:	b29b      	uxth	r3, r3
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	b29a      	uxth	r2, r3
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	791a      	ldrb	r2, [r3, #4]
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	795a      	ldrb	r2, [r3, #5]
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	799a      	ldrb	r2, [r3, #6]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	79da      	ldrb	r2, [r3, #7]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	7a1a      	ldrb	r2, [r3, #8]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8013c3c:	88fb      	ldrh	r3, [r7, #6]
 8013c3e:	2b09      	cmp	r3, #9
 8013c40:	d95f      	bls.n	8013d02 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8013c42:	2309      	movs	r3, #9
 8013c44:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013c4a:	e051      	b.n	8013cf0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013c4c:	f107 0316 	add.w	r3, r7, #22
 8013c50:	4619      	mov	r1, r3
 8013c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c54:	f000 f8e8 	bl	8013e28 <USBH_GetNextDesc>
 8013c58:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8013c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5c:	785b      	ldrb	r3, [r3, #1]
 8013c5e:	2b04      	cmp	r3, #4
 8013c60:	d146      	bne.n	8013cf0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8013c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c66:	221a      	movs	r2, #26
 8013c68:	fb02 f303 	mul.w	r3, r2, r3
 8013c6c:	3308      	adds	r3, #8
 8013c6e:	68fa      	ldr	r2, [r7, #12]
 8013c70:	4413      	add	r3, r2
 8013c72:	3302      	adds	r3, #2
 8013c74:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c78:	69f8      	ldr	r0, [r7, #28]
 8013c7a:	f000 f846 	bl	8013d0a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8013c84:	2300      	movs	r3, #0
 8013c86:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013c88:	e022      	b.n	8013cd0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013c8a:	f107 0316 	add.w	r3, r7, #22
 8013c8e:	4619      	mov	r1, r3
 8013c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c92:	f000 f8c9 	bl	8013e28 <USBH_GetNextDesc>
 8013c96:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8013c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9a:	785b      	ldrb	r3, [r3, #1]
 8013c9c:	2b05      	cmp	r3, #5
 8013c9e:	d117      	bne.n	8013cd0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8013ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013ca4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013ca8:	3201      	adds	r2, #1
 8013caa:	00d2      	lsls	r2, r2, #3
 8013cac:	211a      	movs	r1, #26
 8013cae:	fb01 f303 	mul.w	r3, r1, r3
 8013cb2:	4413      	add	r3, r2
 8013cb4:	3308      	adds	r3, #8
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	4413      	add	r3, r2
 8013cba:	3304      	adds	r3, #4
 8013cbc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8013cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cc0:	69b8      	ldr	r0, [r7, #24]
 8013cc2:	f000 f851 	bl	8013d68 <USBH_ParseEPDesc>
            ep_ix++;
 8013cc6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013cca:	3301      	adds	r3, #1
 8013ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	791b      	ldrb	r3, [r3, #4]
 8013cd4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d204      	bcs.n	8013ce6 <USBH_ParseCfgDesc+0x120>
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	885a      	ldrh	r2, [r3, #2]
 8013ce0:	8afb      	ldrh	r3, [r7, #22]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d8d1      	bhi.n	8013c8a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8013ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cea:	3301      	adds	r3, #1
 8013cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d804      	bhi.n	8013d02 <USBH_ParseCfgDesc+0x13c>
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	885a      	ldrh	r2, [r3, #2]
 8013cfc:	8afb      	ldrh	r3, [r7, #22]
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d8a4      	bhi.n	8013c4c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8013d02:	bf00      	nop
 8013d04:	3728      	adds	r7, #40	; 0x28
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}

08013d0a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8013d0a:	b480      	push	{r7}
 8013d0c:	b083      	sub	sp, #12
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	6078      	str	r0, [r7, #4]
 8013d12:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	781a      	ldrb	r2, [r3, #0]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	785a      	ldrb	r2, [r3, #1]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	789a      	ldrb	r2, [r3, #2]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	78da      	ldrb	r2, [r3, #3]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	791a      	ldrb	r2, [r3, #4]
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	795a      	ldrb	r2, [r3, #5]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	799a      	ldrb	r2, [r3, #6]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	79da      	ldrb	r2, [r3, #7]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	7a1a      	ldrb	r2, [r3, #8]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	721a      	strb	r2, [r3, #8]
}
 8013d5c:	bf00      	nop
 8013d5e:	370c      	adds	r7, #12
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b083      	sub	sp, #12
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	781a      	ldrb	r2, [r3, #0]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	785a      	ldrb	r2, [r3, #1]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	789a      	ldrb	r2, [r3, #2]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	78da      	ldrb	r2, [r3, #3]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	3304      	adds	r3, #4
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	b29a      	uxth	r2, r3
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	3305      	adds	r3, #5
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	021b      	lsls	r3, r3, #8
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	4313      	orrs	r3, r2
 8013da8:	b29a      	uxth	r2, r3
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	799a      	ldrb	r2, [r3, #6]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	719a      	strb	r2, [r3, #6]
}
 8013db6:	bf00      	nop
 8013db8:	370c      	adds	r7, #12
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc0:	4770      	bx	lr

08013dc2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8013dc2:	b480      	push	{r7}
 8013dc4:	b087      	sub	sp, #28
 8013dc6:	af00      	add	r7, sp, #0
 8013dc8:	60f8      	str	r0, [r7, #12]
 8013dca:	60b9      	str	r1, [r7, #8]
 8013dcc:	4613      	mov	r3, r2
 8013dce:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	781b      	ldrb	r3, [r3, #0]
 8013dd6:	2b03      	cmp	r3, #3
 8013dd8:	d120      	bne.n	8013e1c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	1e9a      	subs	r2, r3, #2
 8013de0:	88fb      	ldrh	r3, [r7, #6]
 8013de2:	4293      	cmp	r3, r2
 8013de4:	bf28      	it	cs
 8013de6:	4613      	movcs	r3, r2
 8013de8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	3302      	adds	r3, #2
 8013dee:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8013df0:	2300      	movs	r3, #0
 8013df2:	82fb      	strh	r3, [r7, #22]
 8013df4:	e00b      	b.n	8013e0e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8013df6:	8afb      	ldrh	r3, [r7, #22]
 8013df8:	68fa      	ldr	r2, [r7, #12]
 8013dfa:	4413      	add	r3, r2
 8013dfc:	781a      	ldrb	r2, [r3, #0]
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	701a      	strb	r2, [r3, #0]
      pdest++;
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	3301      	adds	r3, #1
 8013e06:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013e08:	8afb      	ldrh	r3, [r7, #22]
 8013e0a:	3302      	adds	r3, #2
 8013e0c:	82fb      	strh	r3, [r7, #22]
 8013e0e:	8afa      	ldrh	r2, [r7, #22]
 8013e10:	8abb      	ldrh	r3, [r7, #20]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d3ef      	bcc.n	8013df6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	701a      	strb	r2, [r3, #0]
  }
}
 8013e1c:	bf00      	nop
 8013e1e:	371c      	adds	r7, #28
 8013e20:	46bd      	mov	sp, r7
 8013e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e26:	4770      	bx	lr

08013e28 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b085      	sub	sp, #20
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	881a      	ldrh	r2, [r3, #0]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	4413      	add	r3, r2
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013e50:	68fb      	ldr	r3, [r7, #12]
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3714      	adds	r7, #20
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr

08013e5e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b086      	sub	sp, #24
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	60f8      	str	r0, [r7, #12]
 8013e66:	60b9      	str	r1, [r7, #8]
 8013e68:	4613      	mov	r3, r2
 8013e6a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	789b      	ldrb	r3, [r3, #2]
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	d002      	beq.n	8013e7e <USBH_CtlReq+0x20>
 8013e78:	2b02      	cmp	r3, #2
 8013e7a:	d01d      	beq.n	8013eb8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8013e7c:	e043      	b.n	8013f06 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	68ba      	ldr	r2, [r7, #8]
 8013e82:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	88fa      	ldrh	r2, [r7, #6]
 8013e88:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	2202      	movs	r2, #2
 8013e94:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8013e96:	2301      	movs	r3, #1
 8013e98:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	2203      	movs	r2, #3
 8013e9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013eae:	2200      	movs	r2, #0
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	f000 fd6f 	bl	8014994 <osMessagePut>
      break;
 8013eb6:	e026      	b.n	8013f06 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8013eb8:	68f8      	ldr	r0, [r7, #12]
 8013eba:	f000 f829 	bl	8013f10 <USBH_HandleControl>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8013ec2:	7dfb      	ldrb	r3, [r7, #23]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d002      	beq.n	8013ece <USBH_CtlReq+0x70>
 8013ec8:	7dfb      	ldrb	r3, [r7, #23]
 8013eca:	2b03      	cmp	r3, #3
 8013ecc:	d106      	bne.n	8013edc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2201      	movs	r2, #1
 8013ed2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	761a      	strb	r2, [r3, #24]
 8013eda:	e005      	b.n	8013ee8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8013edc:	7dfb      	ldrb	r3, [r7, #23]
 8013ede:	2b02      	cmp	r3, #2
 8013ee0:	d102      	bne.n	8013ee8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2201      	movs	r2, #1
 8013ee6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2203      	movs	r2, #3
 8013eec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013efc:	2200      	movs	r2, #0
 8013efe:	4619      	mov	r1, r3
 8013f00:	f000 fd48 	bl	8014994 <osMessagePut>
      break;
 8013f04:	bf00      	nop
  }
  return status;
 8013f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3718      	adds	r7, #24
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b086      	sub	sp, #24
 8013f14:	af02      	add	r7, sp, #8
 8013f16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013f18:	2301      	movs	r3, #1
 8013f1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	7e1b      	ldrb	r3, [r3, #24]
 8013f24:	3b01      	subs	r3, #1
 8013f26:	2b0a      	cmp	r3, #10
 8013f28:	f200 8229 	bhi.w	801437e <USBH_HandleControl+0x46e>
 8013f2c:	a201      	add	r2, pc, #4	; (adr r2, 8013f34 <USBH_HandleControl+0x24>)
 8013f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f32:	bf00      	nop
 8013f34:	08013f61 	.word	0x08013f61
 8013f38:	08013f7b 	.word	0x08013f7b
 8013f3c:	0801401d 	.word	0x0801401d
 8013f40:	08014043 	.word	0x08014043
 8013f44:	080140cf 	.word	0x080140cf
 8013f48:	080140f9 	.word	0x080140f9
 8013f4c:	080141bb 	.word	0x080141bb
 8013f50:	080141dd 	.word	0x080141dd
 8013f54:	0801426f 	.word	0x0801426f
 8013f58:	08014295 	.word	0x08014295
 8013f5c:	08014327 	.word	0x08014327
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f103 0110 	add.w	r1, r3, #16
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	795b      	ldrb	r3, [r3, #5]
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f000 fa17 	bl	80143a0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2202      	movs	r2, #2
 8013f76:	761a      	strb	r2, [r3, #24]
      break;
 8013f78:	e20c      	b.n	8014394 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	795b      	ldrb	r3, [r3, #5]
 8013f7e:	4619      	mov	r1, r3
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f003 fc19 	bl	80177b8 <USBH_LL_GetURBState>
 8013f86:	4603      	mov	r3, r0
 8013f88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013f8a:	7bbb      	ldrb	r3, [r7, #14]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d12c      	bne.n	8013fea <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	7c1b      	ldrb	r3, [r3, #16]
 8013f94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013f98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	8adb      	ldrh	r3, [r3, #22]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d00a      	beq.n	8013fb8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8013fa2:	7b7b      	ldrb	r3, [r7, #13]
 8013fa4:	2b80      	cmp	r3, #128	; 0x80
 8013fa6:	d103      	bne.n	8013fb0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2203      	movs	r2, #3
 8013fac:	761a      	strb	r2, [r3, #24]
 8013fae:	e00d      	b.n	8013fcc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2205      	movs	r2, #5
 8013fb4:	761a      	strb	r2, [r3, #24]
 8013fb6:	e009      	b.n	8013fcc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8013fb8:	7b7b      	ldrb	r3, [r7, #13]
 8013fba:	2b80      	cmp	r3, #128	; 0x80
 8013fbc:	d103      	bne.n	8013fc6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2209      	movs	r2, #9
 8013fc2:	761a      	strb	r2, [r3, #24]
 8013fc4:	e002      	b.n	8013fcc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2207      	movs	r2, #7
 8013fca:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2203      	movs	r2, #3
 8013fd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	f000 fcd6 	bl	8014994 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8013fe8:	e1cb      	b.n	8014382 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013fea:	7bbb      	ldrb	r3, [r7, #14]
 8013fec:	2b04      	cmp	r3, #4
 8013fee:	d003      	beq.n	8013ff8 <USBH_HandleControl+0xe8>
 8013ff0:	7bbb      	ldrb	r3, [r7, #14]
 8013ff2:	2b02      	cmp	r3, #2
 8013ff4:	f040 81c5 	bne.w	8014382 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	220b      	movs	r2, #11
 8013ffc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2203      	movs	r2, #3
 8014002:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014012:	2200      	movs	r2, #0
 8014014:	4619      	mov	r1, r3
 8014016:	f000 fcbd 	bl	8014994 <osMessagePut>
      break;
 801401a:	e1b2      	b.n	8014382 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014022:	b29a      	uxth	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6899      	ldr	r1, [r3, #8]
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	899a      	ldrh	r2, [r3, #12]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	791b      	ldrb	r3, [r3, #4]
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f000 f9f2 	bl	801441e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2204      	movs	r2, #4
 801403e:	761a      	strb	r2, [r3, #24]
      break;
 8014040:	e1a8      	b.n	8014394 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	791b      	ldrb	r3, [r3, #4]
 8014046:	4619      	mov	r1, r3
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f003 fbb5 	bl	80177b8 <USBH_LL_GetURBState>
 801404e:	4603      	mov	r3, r0
 8014050:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8014052:	7bbb      	ldrb	r3, [r7, #14]
 8014054:	2b01      	cmp	r3, #1
 8014056:	d110      	bne.n	801407a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2209      	movs	r2, #9
 801405c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2203      	movs	r2, #3
 8014062:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014072:	2200      	movs	r2, #0
 8014074:	4619      	mov	r1, r3
 8014076:	f000 fc8d 	bl	8014994 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801407a:	7bbb      	ldrb	r3, [r7, #14]
 801407c:	2b05      	cmp	r3, #5
 801407e:	d110      	bne.n	80140a2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8014080:	2303      	movs	r3, #3
 8014082:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2203      	movs	r2, #3
 8014088:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014098:	2200      	movs	r2, #0
 801409a:	4619      	mov	r1, r3
 801409c:	f000 fc7a 	bl	8014994 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80140a0:	e171      	b.n	8014386 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80140a2:	7bbb      	ldrb	r3, [r7, #14]
 80140a4:	2b04      	cmp	r3, #4
 80140a6:	f040 816e 	bne.w	8014386 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	220b      	movs	r2, #11
 80140ae:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2203      	movs	r2, #3
 80140b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80140c4:	2200      	movs	r2, #0
 80140c6:	4619      	mov	r1, r3
 80140c8:	f000 fc64 	bl	8014994 <osMessagePut>
      break;
 80140cc:	e15b      	b.n	8014386 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6899      	ldr	r1, [r3, #8]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	899a      	ldrh	r2, [r3, #12]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	795b      	ldrb	r3, [r3, #5]
 80140da:	2001      	movs	r0, #1
 80140dc:	9000      	str	r0, [sp, #0]
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f000 f978 	bl	80143d4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80140ea:	b29a      	uxth	r2, r3
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2206      	movs	r2, #6
 80140f4:	761a      	strb	r2, [r3, #24]
      break;
 80140f6:	e14d      	b.n	8014394 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	795b      	ldrb	r3, [r3, #5]
 80140fc:	4619      	mov	r1, r3
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f003 fb5a 	bl	80177b8 <USBH_LL_GetURBState>
 8014104:	4603      	mov	r3, r0
 8014106:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014108:	7bbb      	ldrb	r3, [r7, #14]
 801410a:	2b01      	cmp	r3, #1
 801410c:	d111      	bne.n	8014132 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2207      	movs	r2, #7
 8014112:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2203      	movs	r2, #3
 8014118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014128:	2200      	movs	r2, #0
 801412a:	4619      	mov	r1, r3
 801412c:	f000 fc32 	bl	8014994 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014130:	e12b      	b.n	801438a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8014132:	7bbb      	ldrb	r3, [r7, #14]
 8014134:	2b05      	cmp	r3, #5
 8014136:	d113      	bne.n	8014160 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	220c      	movs	r2, #12
 801413c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801413e:	2303      	movs	r3, #3
 8014140:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2203      	movs	r2, #3
 8014146:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014156:	2200      	movs	r2, #0
 8014158:	4619      	mov	r1, r3
 801415a:	f000 fc1b 	bl	8014994 <osMessagePut>
      break;
 801415e:	e114      	b.n	801438a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014160:	7bbb      	ldrb	r3, [r7, #14]
 8014162:	2b02      	cmp	r3, #2
 8014164:	d111      	bne.n	801418a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	2205      	movs	r2, #5
 801416a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2203      	movs	r2, #3
 8014170:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014180:	2200      	movs	r2, #0
 8014182:	4619      	mov	r1, r3
 8014184:	f000 fc06 	bl	8014994 <osMessagePut>
      break;
 8014188:	e0ff      	b.n	801438a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801418a:	7bbb      	ldrb	r3, [r7, #14]
 801418c:	2b04      	cmp	r3, #4
 801418e:	f040 80fc 	bne.w	801438a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	220b      	movs	r2, #11
 8014196:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8014198:	2302      	movs	r3, #2
 801419a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2203      	movs	r2, #3
 80141a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80141b0:	2200      	movs	r2, #0
 80141b2:	4619      	mov	r1, r3
 80141b4:	f000 fbee 	bl	8014994 <osMessagePut>
      break;
 80141b8:	e0e7      	b.n	801438a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	791b      	ldrb	r3, [r3, #4]
 80141be:	2200      	movs	r2, #0
 80141c0:	2100      	movs	r1, #0
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f000 f92b 	bl	801441e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2208      	movs	r2, #8
 80141d8:	761a      	strb	r2, [r3, #24]

      break;
 80141da:	e0db      	b.n	8014394 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	791b      	ldrb	r3, [r3, #4]
 80141e0:	4619      	mov	r1, r3
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f003 fae8 	bl	80177b8 <USBH_LL_GetURBState>
 80141e8:	4603      	mov	r3, r0
 80141ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80141ec:	7bbb      	ldrb	r3, [r7, #14]
 80141ee:	2b01      	cmp	r3, #1
 80141f0:	d113      	bne.n	801421a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	220d      	movs	r2, #13
 80141f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80141f8:	2300      	movs	r3, #0
 80141fa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2203      	movs	r2, #3
 8014200:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014210:	2200      	movs	r2, #0
 8014212:	4619      	mov	r1, r3
 8014214:	f000 fbbe 	bl	8014994 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014218:	e0b9      	b.n	801438e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 801421a:	7bbb      	ldrb	r3, [r7, #14]
 801421c:	2b04      	cmp	r3, #4
 801421e:	d111      	bne.n	8014244 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	220b      	movs	r2, #11
 8014224:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2203      	movs	r2, #3
 801422a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801423a:	2200      	movs	r2, #0
 801423c:	4619      	mov	r1, r3
 801423e:	f000 fba9 	bl	8014994 <osMessagePut>
      break;
 8014242:	e0a4      	b.n	801438e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8014244:	7bbb      	ldrb	r3, [r7, #14]
 8014246:	2b05      	cmp	r3, #5
 8014248:	f040 80a1 	bne.w	801438e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 801424c:	2303      	movs	r3, #3
 801424e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2203      	movs	r2, #3
 8014254:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014264:	2200      	movs	r2, #0
 8014266:	4619      	mov	r1, r3
 8014268:	f000 fb94 	bl	8014994 <osMessagePut>
      break;
 801426c:	e08f      	b.n	801438e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	795b      	ldrb	r3, [r3, #5]
 8014272:	2201      	movs	r2, #1
 8014274:	9200      	str	r2, [sp, #0]
 8014276:	2200      	movs	r2, #0
 8014278:	2100      	movs	r1, #0
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f000 f8aa 	bl	80143d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014286:	b29a      	uxth	r2, r3
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	220a      	movs	r2, #10
 8014290:	761a      	strb	r2, [r3, #24]
      break;
 8014292:	e07f      	b.n	8014394 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	795b      	ldrb	r3, [r3, #5]
 8014298:	4619      	mov	r1, r3
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f003 fa8c 	bl	80177b8 <USBH_LL_GetURBState>
 80142a0:	4603      	mov	r3, r0
 80142a2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80142a4:	7bbb      	ldrb	r3, [r7, #14]
 80142a6:	2b01      	cmp	r3, #1
 80142a8:	d113      	bne.n	80142d2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80142aa:	2300      	movs	r3, #0
 80142ac:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	220d      	movs	r2, #13
 80142b2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2203      	movs	r2, #3
 80142b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142c8:	2200      	movs	r2, #0
 80142ca:	4619      	mov	r1, r3
 80142cc:	f000 fb62 	bl	8014994 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80142d0:	e05f      	b.n	8014392 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80142d2:	7bbb      	ldrb	r3, [r7, #14]
 80142d4:	2b02      	cmp	r3, #2
 80142d6:	d111      	bne.n	80142fc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2209      	movs	r2, #9
 80142dc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2203      	movs	r2, #3
 80142e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142f2:	2200      	movs	r2, #0
 80142f4:	4619      	mov	r1, r3
 80142f6:	f000 fb4d 	bl	8014994 <osMessagePut>
      break;
 80142fa:	e04a      	b.n	8014392 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80142fc:	7bbb      	ldrb	r3, [r7, #14]
 80142fe:	2b04      	cmp	r3, #4
 8014300:	d147      	bne.n	8014392 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	220b      	movs	r2, #11
 8014306:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2203      	movs	r2, #3
 801430c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801431c:	2200      	movs	r2, #0
 801431e:	4619      	mov	r1, r3
 8014320:	f000 fb38 	bl	8014994 <osMessagePut>
      break;
 8014324:	e035      	b.n	8014392 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	7e5b      	ldrb	r3, [r3, #25]
 801432a:	3301      	adds	r3, #1
 801432c:	b2da      	uxtb	r2, r3
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	765a      	strb	r2, [r3, #25]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	7e5b      	ldrb	r3, [r3, #25]
 8014336:	2b02      	cmp	r3, #2
 8014338:	d806      	bhi.n	8014348 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2201      	movs	r2, #1
 801433e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2201      	movs	r2, #1
 8014344:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8014346:	e025      	b.n	8014394 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801434e:	2106      	movs	r1, #6
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2200      	movs	r2, #0
 8014358:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	795b      	ldrb	r3, [r3, #5]
 801435e:	4619      	mov	r1, r3
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f000 f90d 	bl	8014580 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	791b      	ldrb	r3, [r3, #4]
 801436a:	4619      	mov	r1, r3
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 f907 	bl	8014580 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2200      	movs	r2, #0
 8014376:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8014378:	2302      	movs	r3, #2
 801437a:	73fb      	strb	r3, [r7, #15]
      break;
 801437c:	e00a      	b.n	8014394 <USBH_HandleControl+0x484>

    default:
      break;
 801437e:	bf00      	nop
 8014380:	e008      	b.n	8014394 <USBH_HandleControl+0x484>
      break;
 8014382:	bf00      	nop
 8014384:	e006      	b.n	8014394 <USBH_HandleControl+0x484>
      break;
 8014386:	bf00      	nop
 8014388:	e004      	b.n	8014394 <USBH_HandleControl+0x484>
      break;
 801438a:	bf00      	nop
 801438c:	e002      	b.n	8014394 <USBH_HandleControl+0x484>
      break;
 801438e:	bf00      	nop
 8014390:	e000      	b.n	8014394 <USBH_HandleControl+0x484>
      break;
 8014392:	bf00      	nop
  }

  return status;
 8014394:	7bfb      	ldrb	r3, [r7, #15]
}
 8014396:	4618      	mov	r0, r3
 8014398:	3710      	adds	r7, #16
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop

080143a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b088      	sub	sp, #32
 80143a4:	af04      	add	r7, sp, #16
 80143a6:	60f8      	str	r0, [r7, #12]
 80143a8:	60b9      	str	r1, [r7, #8]
 80143aa:	4613      	mov	r3, r2
 80143ac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80143ae:	79f9      	ldrb	r1, [r7, #7]
 80143b0:	2300      	movs	r3, #0
 80143b2:	9303      	str	r3, [sp, #12]
 80143b4:	2308      	movs	r3, #8
 80143b6:	9302      	str	r3, [sp, #8]
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	9301      	str	r3, [sp, #4]
 80143bc:	2300      	movs	r3, #0
 80143be:	9300      	str	r3, [sp, #0]
 80143c0:	2300      	movs	r3, #0
 80143c2:	2200      	movs	r2, #0
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f003 f9c6 	bl	8017756 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80143ca:	2300      	movs	r3, #0
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3710      	adds	r7, #16
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b088      	sub	sp, #32
 80143d8:	af04      	add	r7, sp, #16
 80143da:	60f8      	str	r0, [r7, #12]
 80143dc:	60b9      	str	r1, [r7, #8]
 80143de:	4611      	mov	r1, r2
 80143e0:	461a      	mov	r2, r3
 80143e2:	460b      	mov	r3, r1
 80143e4:	80fb      	strh	r3, [r7, #6]
 80143e6:	4613      	mov	r3, r2
 80143e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d001      	beq.n	80143f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80143f4:	2300      	movs	r3, #0
 80143f6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80143f8:	7979      	ldrb	r1, [r7, #5]
 80143fa:	7e3b      	ldrb	r3, [r7, #24]
 80143fc:	9303      	str	r3, [sp, #12]
 80143fe:	88fb      	ldrh	r3, [r7, #6]
 8014400:	9302      	str	r3, [sp, #8]
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	9301      	str	r3, [sp, #4]
 8014406:	2301      	movs	r3, #1
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	2300      	movs	r3, #0
 801440c:	2200      	movs	r2, #0
 801440e:	68f8      	ldr	r0, [r7, #12]
 8014410:	f003 f9a1 	bl	8017756 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8014414:	2300      	movs	r3, #0
}
 8014416:	4618      	mov	r0, r3
 8014418:	3710      	adds	r7, #16
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}

0801441e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801441e:	b580      	push	{r7, lr}
 8014420:	b088      	sub	sp, #32
 8014422:	af04      	add	r7, sp, #16
 8014424:	60f8      	str	r0, [r7, #12]
 8014426:	60b9      	str	r1, [r7, #8]
 8014428:	4611      	mov	r1, r2
 801442a:	461a      	mov	r2, r3
 801442c:	460b      	mov	r3, r1
 801442e:	80fb      	strh	r3, [r7, #6]
 8014430:	4613      	mov	r3, r2
 8014432:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014434:	7979      	ldrb	r1, [r7, #5]
 8014436:	2300      	movs	r3, #0
 8014438:	9303      	str	r3, [sp, #12]
 801443a:	88fb      	ldrh	r3, [r7, #6]
 801443c:	9302      	str	r3, [sp, #8]
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	9301      	str	r3, [sp, #4]
 8014442:	2301      	movs	r3, #1
 8014444:	9300      	str	r3, [sp, #0]
 8014446:	2300      	movs	r3, #0
 8014448:	2201      	movs	r2, #1
 801444a:	68f8      	ldr	r0, [r7, #12]
 801444c:	f003 f983 	bl	8017756 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8014450:	2300      	movs	r3, #0

}
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801445a:	b580      	push	{r7, lr}
 801445c:	b088      	sub	sp, #32
 801445e:	af04      	add	r7, sp, #16
 8014460:	60f8      	str	r0, [r7, #12]
 8014462:	60b9      	str	r1, [r7, #8]
 8014464:	4611      	mov	r1, r2
 8014466:	461a      	mov	r2, r3
 8014468:	460b      	mov	r3, r1
 801446a:	80fb      	strh	r3, [r7, #6]
 801446c:	4613      	mov	r3, r2
 801446e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014476:	2b00      	cmp	r3, #0
 8014478:	d001      	beq.n	801447e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801447a:	2300      	movs	r3, #0
 801447c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801447e:	7979      	ldrb	r1, [r7, #5]
 8014480:	7e3b      	ldrb	r3, [r7, #24]
 8014482:	9303      	str	r3, [sp, #12]
 8014484:	88fb      	ldrh	r3, [r7, #6]
 8014486:	9302      	str	r3, [sp, #8]
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	9301      	str	r3, [sp, #4]
 801448c:	2301      	movs	r3, #1
 801448e:	9300      	str	r3, [sp, #0]
 8014490:	2302      	movs	r3, #2
 8014492:	2200      	movs	r2, #0
 8014494:	68f8      	ldr	r0, [r7, #12]
 8014496:	f003 f95e 	bl	8017756 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801449a:	2300      	movs	r3, #0
}
 801449c:	4618      	mov	r0, r3
 801449e:	3710      	adds	r7, #16
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}

080144a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b088      	sub	sp, #32
 80144a8:	af04      	add	r7, sp, #16
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	4611      	mov	r1, r2
 80144b0:	461a      	mov	r2, r3
 80144b2:	460b      	mov	r3, r1
 80144b4:	80fb      	strh	r3, [r7, #6]
 80144b6:	4613      	mov	r3, r2
 80144b8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80144ba:	7979      	ldrb	r1, [r7, #5]
 80144bc:	2300      	movs	r3, #0
 80144be:	9303      	str	r3, [sp, #12]
 80144c0:	88fb      	ldrh	r3, [r7, #6]
 80144c2:	9302      	str	r3, [sp, #8]
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	9301      	str	r3, [sp, #4]
 80144c8:	2301      	movs	r3, #1
 80144ca:	9300      	str	r3, [sp, #0]
 80144cc:	2302      	movs	r3, #2
 80144ce:	2201      	movs	r2, #1
 80144d0:	68f8      	ldr	r0, [r7, #12]
 80144d2:	f003 f940 	bl	8017756 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80144d6:	2300      	movs	r3, #0
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3710      	adds	r7, #16
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b086      	sub	sp, #24
 80144e4:	af04      	add	r7, sp, #16
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	4608      	mov	r0, r1
 80144ea:	4611      	mov	r1, r2
 80144ec:	461a      	mov	r2, r3
 80144ee:	4603      	mov	r3, r0
 80144f0:	70fb      	strb	r3, [r7, #3]
 80144f2:	460b      	mov	r3, r1
 80144f4:	70bb      	strb	r3, [r7, #2]
 80144f6:	4613      	mov	r3, r2
 80144f8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80144fa:	7878      	ldrb	r0, [r7, #1]
 80144fc:	78ba      	ldrb	r2, [r7, #2]
 80144fe:	78f9      	ldrb	r1, [r7, #3]
 8014500:	8b3b      	ldrh	r3, [r7, #24]
 8014502:	9302      	str	r3, [sp, #8]
 8014504:	7d3b      	ldrb	r3, [r7, #20]
 8014506:	9301      	str	r3, [sp, #4]
 8014508:	7c3b      	ldrb	r3, [r7, #16]
 801450a:	9300      	str	r3, [sp, #0]
 801450c:	4603      	mov	r3, r0
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f003 f8d3 	bl	80176ba <USBH_LL_OpenPipe>

  return USBH_OK;
 8014514:	2300      	movs	r3, #0
}
 8014516:	4618      	mov	r0, r3
 8014518:	3708      	adds	r7, #8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}

0801451e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801451e:	b580      	push	{r7, lr}
 8014520:	b082      	sub	sp, #8
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
 8014526:	460b      	mov	r3, r1
 8014528:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801452a:	78fb      	ldrb	r3, [r7, #3]
 801452c:	4619      	mov	r1, r3
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f003 f8f2 	bl	8017718 <USBH_LL_ClosePipe>

  return USBH_OK;
 8014534:	2300      	movs	r3, #0
}
 8014536:	4618      	mov	r0, r3
 8014538:	3708      	adds	r7, #8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}

0801453e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801453e:	b580      	push	{r7, lr}
 8014540:	b084      	sub	sp, #16
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
 8014546:	460b      	mov	r3, r1
 8014548:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f000 f836 	bl	80145bc <USBH_GetFreePipe>
 8014550:	4603      	mov	r3, r0
 8014552:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014554:	89fb      	ldrh	r3, [r7, #14]
 8014556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801455a:	4293      	cmp	r3, r2
 801455c:	d00a      	beq.n	8014574 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801455e:	78fa      	ldrb	r2, [r7, #3]
 8014560:	89fb      	ldrh	r3, [r7, #14]
 8014562:	f003 030f 	and.w	r3, r3, #15
 8014566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801456a:	6879      	ldr	r1, [r7, #4]
 801456c:	33e0      	adds	r3, #224	; 0xe0
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	440b      	add	r3, r1
 8014572:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8014574:	89fb      	ldrh	r3, [r7, #14]
 8014576:	b2db      	uxtb	r3, r3
}
 8014578:	4618      	mov	r0, r3
 801457a:	3710      	adds	r7, #16
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	460b      	mov	r3, r1
 801458a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 801458c:	78fb      	ldrb	r3, [r7, #3]
 801458e:	2b0a      	cmp	r3, #10
 8014590:	d80d      	bhi.n	80145ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014592:	78fb      	ldrb	r3, [r7, #3]
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	33e0      	adds	r3, #224	; 0xe0
 8014598:	009b      	lsls	r3, r3, #2
 801459a:	4413      	add	r3, r2
 801459c:	685a      	ldr	r2, [r3, #4]
 801459e:	78fb      	ldrb	r3, [r7, #3]
 80145a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80145a4:	6879      	ldr	r1, [r7, #4]
 80145a6:	33e0      	adds	r3, #224	; 0xe0
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	440b      	add	r3, r1
 80145ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80145ae:	2300      	movs	r3, #0
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	370c      	adds	r7, #12
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr

080145bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80145bc:	b480      	push	{r7}
 80145be:	b085      	sub	sp, #20
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80145c4:	2300      	movs	r3, #0
 80145c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80145c8:	2300      	movs	r3, #0
 80145ca:	73fb      	strb	r3, [r7, #15]
 80145cc:	e00f      	b.n	80145ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80145ce:	7bfb      	ldrb	r3, [r7, #15]
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	33e0      	adds	r3, #224	; 0xe0
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	4413      	add	r3, r2
 80145d8:	685b      	ldr	r3, [r3, #4]
 80145da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d102      	bne.n	80145e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80145e2:	7bfb      	ldrb	r3, [r7, #15]
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	e007      	b.n	80145f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80145e8:	7bfb      	ldrb	r3, [r7, #15]
 80145ea:	3301      	adds	r3, #1
 80145ec:	73fb      	strb	r3, [r7, #15]
 80145ee:	7bfb      	ldrb	r3, [r7, #15]
 80145f0:	2b0a      	cmp	r3, #10
 80145f2:	d9ec      	bls.n	80145ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80145f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3714      	adds	r7, #20
 80145fc:	46bd      	mov	sp, r7
 80145fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014602:	4770      	bx	lr

08014604 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014604:	b480      	push	{r7}
 8014606:	b087      	sub	sp, #28
 8014608:	af00      	add	r7, sp, #0
 801460a:	60f8      	str	r0, [r7, #12]
 801460c:	60b9      	str	r1, [r7, #8]
 801460e:	4613      	mov	r3, r2
 8014610:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014612:	2301      	movs	r3, #1
 8014614:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014616:	2300      	movs	r3, #0
 8014618:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801461a:	4b1f      	ldr	r3, [pc, #124]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801461c:	7a5b      	ldrb	r3, [r3, #9]
 801461e:	b2db      	uxtb	r3, r3
 8014620:	2b00      	cmp	r3, #0
 8014622:	d131      	bne.n	8014688 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014624:	4b1c      	ldr	r3, [pc, #112]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 8014626:	7a5b      	ldrb	r3, [r3, #9]
 8014628:	b2db      	uxtb	r3, r3
 801462a:	461a      	mov	r2, r3
 801462c:	4b1a      	ldr	r3, [pc, #104]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801462e:	2100      	movs	r1, #0
 8014630:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014632:	4b19      	ldr	r3, [pc, #100]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 8014634:	7a5b      	ldrb	r3, [r3, #9]
 8014636:	b2db      	uxtb	r3, r3
 8014638:	4a17      	ldr	r2, [pc, #92]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801463a:	009b      	lsls	r3, r3, #2
 801463c:	4413      	add	r3, r2
 801463e:	68fa      	ldr	r2, [r7, #12]
 8014640:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014642:	4b15      	ldr	r3, [pc, #84]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 8014644:	7a5b      	ldrb	r3, [r3, #9]
 8014646:	b2db      	uxtb	r3, r3
 8014648:	461a      	mov	r2, r3
 801464a:	4b13      	ldr	r3, [pc, #76]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801464c:	4413      	add	r3, r2
 801464e:	79fa      	ldrb	r2, [r7, #7]
 8014650:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014652:	4b11      	ldr	r3, [pc, #68]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 8014654:	7a5b      	ldrb	r3, [r3, #9]
 8014656:	b2db      	uxtb	r3, r3
 8014658:	1c5a      	adds	r2, r3, #1
 801465a:	b2d1      	uxtb	r1, r2
 801465c:	4a0e      	ldr	r2, [pc, #56]	; (8014698 <FATFS_LinkDriverEx+0x94>)
 801465e:	7251      	strb	r1, [r2, #9]
 8014660:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014662:	7dbb      	ldrb	r3, [r7, #22]
 8014664:	3330      	adds	r3, #48	; 0x30
 8014666:	b2da      	uxtb	r2, r3
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	3301      	adds	r3, #1
 8014670:	223a      	movs	r2, #58	; 0x3a
 8014672:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	3302      	adds	r3, #2
 8014678:	222f      	movs	r2, #47	; 0x2f
 801467a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	3303      	adds	r3, #3
 8014680:	2200      	movs	r2, #0
 8014682:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014684:	2300      	movs	r3, #0
 8014686:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014688:	7dfb      	ldrb	r3, [r7, #23]
}
 801468a:	4618      	mov	r0, r3
 801468c:	371c      	adds	r7, #28
 801468e:	46bd      	mov	sp, r7
 8014690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014694:	4770      	bx	lr
 8014696:	bf00      	nop
 8014698:	20000370 	.word	0x20000370

0801469c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80146a6:	2200      	movs	r2, #0
 80146a8:	6839      	ldr	r1, [r7, #0]
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7ff ffaa 	bl	8014604 <FATFS_LinkDriverEx>
 80146b0:	4603      	mov	r3, r0
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3708      	adds	r7, #8
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}

080146ba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80146ba:	b480      	push	{r7}
 80146bc:	b085      	sub	sp, #20
 80146be:	af00      	add	r7, sp, #0
 80146c0:	4603      	mov	r3, r0
 80146c2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80146c4:	2300      	movs	r3, #0
 80146c6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80146c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80146cc:	2b84      	cmp	r3, #132	; 0x84
 80146ce:	d005      	beq.n	80146dc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80146d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	4413      	add	r3, r2
 80146d8:	3303      	adds	r3, #3
 80146da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80146dc:	68fb      	ldr	r3, [r7, #12]
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3714      	adds	r7, #20
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr

080146ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80146ea:	b480      	push	{r7}
 80146ec:	b083      	sub	sp, #12
 80146ee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146f0:	f3ef 8305 	mrs	r3, IPSR
 80146f4:	607b      	str	r3, [r7, #4]
  return(result);
 80146f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	bf14      	ite	ne
 80146fc:	2301      	movne	r3, #1
 80146fe:	2300      	moveq	r3, #0
 8014700:	b2db      	uxtb	r3, r3
}
 8014702:	4618      	mov	r0, r3
 8014704:	370c      	adds	r7, #12
 8014706:	46bd      	mov	sp, r7
 8014708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470c:	4770      	bx	lr

0801470e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801470e:	b580      	push	{r7, lr}
 8014710:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014712:	f001 fa85 	bl	8015c20 <vTaskStartScheduler>
  
  return osOK;
 8014716:	2300      	movs	r3, #0
}
 8014718:	4618      	mov	r0, r3
 801471a:	bd80      	pop	{r7, pc}

0801471c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014720:	f001 fed8 	bl	80164d4 <xTaskGetSchedulerState>
 8014724:	4603      	mov	r3, r0
 8014726:	2b01      	cmp	r3, #1
 8014728:	d101      	bne.n	801472e <osKernelRunning+0x12>
    return 0;
 801472a:	2300      	movs	r3, #0
 801472c:	e000      	b.n	8014730 <osKernelRunning+0x14>
  else
    return 1;
 801472e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014730:	4618      	mov	r0, r3
 8014732:	bd80      	pop	{r7, pc}

08014734 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014738:	f7ff ffd7 	bl	80146ea <inHandlerMode>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d003      	beq.n	801474a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014742:	f001 fb8d 	bl	8015e60 <xTaskGetTickCountFromISR>
 8014746:	4603      	mov	r3, r0
 8014748:	e002      	b.n	8014750 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801474a:	f001 fb79 	bl	8015e40 <xTaskGetTickCount>
 801474e:	4603      	mov	r3, r0
  }
}
 8014750:	4618      	mov	r0, r3
 8014752:	bd80      	pop	{r7, pc}

08014754 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014756:	b089      	sub	sp, #36	; 0x24
 8014758:	af04      	add	r7, sp, #16
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	695b      	ldr	r3, [r3, #20]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d020      	beq.n	80147a8 <osThreadCreate+0x54>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	699b      	ldr	r3, [r3, #24]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d01c      	beq.n	80147a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	685c      	ldr	r4, [r3, #4]
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681d      	ldr	r5, [r3, #0]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	691e      	ldr	r6, [r3, #16]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff ff9a 	bl	80146ba <makeFreeRtosPriority>
 8014786:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	695b      	ldr	r3, [r3, #20]
 801478c:	687a      	ldr	r2, [r7, #4]
 801478e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014790:	9202      	str	r2, [sp, #8]
 8014792:	9301      	str	r3, [sp, #4]
 8014794:	9100      	str	r1, [sp, #0]
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	4632      	mov	r2, r6
 801479a:	4629      	mov	r1, r5
 801479c:	4620      	mov	r0, r4
 801479e:	f000 ffd1 	bl	8015744 <xTaskCreateStatic>
 80147a2:	4603      	mov	r3, r0
 80147a4:	60fb      	str	r3, [r7, #12]
 80147a6:	e01c      	b.n	80147e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	685c      	ldr	r4, [r3, #4]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80147b4:	b29e      	uxth	r6, r3
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80147bc:	4618      	mov	r0, r3
 80147be:	f7ff ff7c 	bl	80146ba <makeFreeRtosPriority>
 80147c2:	4602      	mov	r2, r0
 80147c4:	f107 030c 	add.w	r3, r7, #12
 80147c8:	9301      	str	r3, [sp, #4]
 80147ca:	9200      	str	r2, [sp, #0]
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	4632      	mov	r2, r6
 80147d0:	4629      	mov	r1, r5
 80147d2:	4620      	mov	r0, r4
 80147d4:	f001 f819 	bl	801580a <xTaskCreate>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b01      	cmp	r3, #1
 80147dc:	d001      	beq.n	80147e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80147de:	2300      	movs	r3, #0
 80147e0:	e000      	b.n	80147e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80147e2:	68fb      	ldr	r3, [r7, #12]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3714      	adds	r7, #20
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147ec <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f001 f94b 	bl	8015a90 <vTaskDelete>
  return osOK;
 80147fa:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	3708      	adds	r7, #8
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}

08014804 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d001      	beq.n	801481a <osDelay+0x16>
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	e000      	b.n	801481c <osDelay+0x18>
 801481a:	2301      	movs	r3, #1
 801481c:	4618      	mov	r0, r3
 801481e:	f001 f9c9 	bl	8015bb4 <vTaskDelay>
  
  return osOK;
 8014822:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014824:	4618      	mov	r0, r3
 8014826:	3710      	adds	r7, #16
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b086      	sub	sp, #24
 8014830:	af02      	add	r7, sp, #8
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8014836:	2300      	movs	r3, #0
 8014838:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801483a:	2300      	movs	r3, #0
 801483c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 801483e:	f7ff ff54 	bl	80146ea <inHandlerMode>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d01c      	beq.n	8014882 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8014848:	6839      	ldr	r1, [r7, #0]
 801484a:	f107 0208 	add.w	r2, r7, #8
 801484e:	f107 030c 	add.w	r3, r7, #12
 8014852:	9300      	str	r3, [sp, #0]
 8014854:	4613      	mov	r3, r2
 8014856:	2201      	movs	r2, #1
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f001 fff9 	bl	8016850 <xTaskGenericNotifyFromISR>
 801485e:	4603      	mov	r3, r0
 8014860:	2b01      	cmp	r3, #1
 8014862:	d002      	beq.n	801486a <osSignalSet+0x3e>
      return 0x80000000;
 8014864:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014868:	e019      	b.n	801489e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d015      	beq.n	801489c <osSignalSet+0x70>
 8014870:	4b0d      	ldr	r3, [pc, #52]	; (80148a8 <osSignalSet+0x7c>)
 8014872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014876:	601a      	str	r2, [r3, #0]
 8014878:	f3bf 8f4f 	dsb	sy
 801487c:	f3bf 8f6f 	isb	sy
 8014880:	e00c      	b.n	801489c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8014882:	6839      	ldr	r1, [r7, #0]
 8014884:	f107 0308 	add.w	r3, r7, #8
 8014888:	2201      	movs	r2, #1
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f001 ff24 	bl	80166d8 <xTaskGenericNotify>
 8014890:	4603      	mov	r3, r0
 8014892:	2b01      	cmp	r3, #1
 8014894:	d002      	beq.n	801489c <osSignalSet+0x70>
    return 0x80000000;
 8014896:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801489a:	e000      	b.n	801489e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 801489c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3710      	adds	r7, #16
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	e000ed04 	.word	0xe000ed04

080148ac <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80148ac:	b590      	push	{r4, r7, lr}
 80148ae:	b089      	sub	sp, #36	; 0x24
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	60b9      	str	r1, [r7, #8]
 80148b6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80148b8:	2300      	movs	r3, #0
 80148ba:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80148bc:	2300      	movs	r3, #0
 80148be:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148c6:	d103      	bne.n	80148d0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80148c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80148cc:	61fb      	str	r3, [r7, #28]
 80148ce:	e009      	b.n	80148e4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d006      	beq.n	80148e4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d101      	bne.n	80148e4 <osSignalWait+0x38>
      ticks = 1;
 80148e0:	2301      	movs	r3, #1
 80148e2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80148e4:	f7ff ff01 	bl	80146ea <inHandlerMode>
 80148e8:	4603      	mov	r3, r0
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d002      	beq.n	80148f4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80148ee:	2382      	movs	r3, #130	; 0x82
 80148f0:	613b      	str	r3, [r7, #16]
 80148f2:	e01b      	b.n	801492c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80148f4:	68b9      	ldr	r1, [r7, #8]
 80148f6:	f107 0310 	add.w	r3, r7, #16
 80148fa:	1d1a      	adds	r2, r3, #4
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	2000      	movs	r0, #0
 8014900:	f001 fe90 	bl	8016624 <xTaskNotifyWait>
 8014904:	4603      	mov	r3, r0
 8014906:	2b01      	cmp	r3, #1
 8014908:	d008      	beq.n	801491c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d102      	bne.n	8014916 <osSignalWait+0x6a>
 8014910:	2300      	movs	r3, #0
 8014912:	613b      	str	r3, [r7, #16]
 8014914:	e00a      	b.n	801492c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8014916:	2340      	movs	r3, #64	; 0x40
 8014918:	613b      	str	r3, [r7, #16]
 801491a:	e007      	b.n	801492c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	2b00      	cmp	r3, #0
 8014920:	da02      	bge.n	8014928 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8014922:	2386      	movs	r3, #134	; 0x86
 8014924:	613b      	str	r3, [r7, #16]
 8014926:	e001      	b.n	801492c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8014928:	2308      	movs	r3, #8
 801492a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	461c      	mov	r4, r3
 8014930:	f107 0310 	add.w	r3, r7, #16
 8014934:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014938:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	3724      	adds	r7, #36	; 0x24
 8014940:	46bd      	mov	sp, r7
 8014942:	bd90      	pop	{r4, r7, pc}

08014944 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014944:	b590      	push	{r4, r7, lr}
 8014946:	b085      	sub	sp, #20
 8014948:	af02      	add	r7, sp, #8
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	689b      	ldr	r3, [r3, #8]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d011      	beq.n	801497a <osMessageCreate+0x36>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	68db      	ldr	r3, [r3, #12]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d00d      	beq.n	801497a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6818      	ldr	r0, [r3, #0]
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	6859      	ldr	r1, [r3, #4]
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	689a      	ldr	r2, [r3, #8]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	68db      	ldr	r3, [r3, #12]
 801496e:	2400      	movs	r4, #0
 8014970:	9400      	str	r4, [sp, #0]
 8014972:	f000 f9e1 	bl	8014d38 <xQueueGenericCreateStatic>
 8014976:	4603      	mov	r3, r0
 8014978:	e008      	b.n	801498c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6818      	ldr	r0, [r3, #0]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	685b      	ldr	r3, [r3, #4]
 8014982:	2200      	movs	r2, #0
 8014984:	4619      	mov	r1, r3
 8014986:	f000 fa59 	bl	8014e3c <xQueueGenericCreate>
 801498a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801498c:	4618      	mov	r0, r3
 801498e:	370c      	adds	r7, #12
 8014990:	46bd      	mov	sp, r7
 8014992:	bd90      	pop	{r4, r7, pc}

08014994 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b086      	sub	sp, #24
 8014998:	af00      	add	r7, sp, #0
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80149a0:	2300      	movs	r3, #0
 80149a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d101      	bne.n	80149b2 <osMessagePut+0x1e>
    ticks = 1;
 80149ae:	2301      	movs	r3, #1
 80149b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80149b2:	f7ff fe9a 	bl	80146ea <inHandlerMode>
 80149b6:	4603      	mov	r3, r0
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d018      	beq.n	80149ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80149bc:	f107 0210 	add.w	r2, r7, #16
 80149c0:	f107 0108 	add.w	r1, r7, #8
 80149c4:	2300      	movs	r3, #0
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	f000 fba0 	bl	801510c <xQueueGenericSendFromISR>
 80149cc:	4603      	mov	r3, r0
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d001      	beq.n	80149d6 <osMessagePut+0x42>
      return osErrorOS;
 80149d2:	23ff      	movs	r3, #255	; 0xff
 80149d4:	e018      	b.n	8014a08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d014      	beq.n	8014a06 <osMessagePut+0x72>
 80149dc:	4b0c      	ldr	r3, [pc, #48]	; (8014a10 <osMessagePut+0x7c>)
 80149de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149e2:	601a      	str	r2, [r3, #0]
 80149e4:	f3bf 8f4f 	dsb	sy
 80149e8:	f3bf 8f6f 	isb	sy
 80149ec:	e00b      	b.n	8014a06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80149ee:	f107 0108 	add.w	r1, r7, #8
 80149f2:	2300      	movs	r3, #0
 80149f4:	697a      	ldr	r2, [r7, #20]
 80149f6:	68f8      	ldr	r0, [r7, #12]
 80149f8:	f000 fa82 	bl	8014f00 <xQueueGenericSend>
 80149fc:	4603      	mov	r3, r0
 80149fe:	2b01      	cmp	r3, #1
 8014a00:	d001      	beq.n	8014a06 <osMessagePut+0x72>
      return osErrorOS;
 8014a02:	23ff      	movs	r3, #255	; 0xff
 8014a04:	e000      	b.n	8014a08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014a06:	2300      	movs	r3, #0
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3718      	adds	r7, #24
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	e000ed04 	.word	0xe000ed04

08014a14 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014a14:	b590      	push	{r4, r7, lr}
 8014a16:	b08b      	sub	sp, #44	; 0x2c
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014a24:	2300      	movs	r3, #0
 8014a26:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d10a      	bne.n	8014a44 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014a2e:	2380      	movs	r3, #128	; 0x80
 8014a30:	617b      	str	r3, [r7, #20]
    return event;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	461c      	mov	r4, r3
 8014a36:	f107 0314 	add.w	r3, r7, #20
 8014a3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a42:	e054      	b.n	8014aee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014a44:	2300      	movs	r3, #0
 8014a46:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a52:	d103      	bne.n	8014a5c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a58:	627b      	str	r3, [r7, #36]	; 0x24
 8014a5a:	e009      	b.n	8014a70 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d006      	beq.n	8014a70 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d101      	bne.n	8014a70 <osMessageGet+0x5c>
      ticks = 1;
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014a70:	f7ff fe3b 	bl	80146ea <inHandlerMode>
 8014a74:	4603      	mov	r3, r0
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d01c      	beq.n	8014ab4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014a7a:	f107 0220 	add.w	r2, r7, #32
 8014a7e:	f107 0314 	add.w	r3, r7, #20
 8014a82:	3304      	adds	r3, #4
 8014a84:	4619      	mov	r1, r3
 8014a86:	68b8      	ldr	r0, [r7, #8]
 8014a88:	f000 fcc6 	bl	8015418 <xQueueReceiveFromISR>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2b01      	cmp	r3, #1
 8014a90:	d102      	bne.n	8014a98 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014a92:	2310      	movs	r3, #16
 8014a94:	617b      	str	r3, [r7, #20]
 8014a96:	e001      	b.n	8014a9c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014a9c:	6a3b      	ldr	r3, [r7, #32]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d01d      	beq.n	8014ade <osMessageGet+0xca>
 8014aa2:	4b15      	ldr	r3, [pc, #84]	; (8014af8 <osMessageGet+0xe4>)
 8014aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014aa8:	601a      	str	r2, [r3, #0]
 8014aaa:	f3bf 8f4f 	dsb	sy
 8014aae:	f3bf 8f6f 	isb	sy
 8014ab2:	e014      	b.n	8014ade <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014ab4:	f107 0314 	add.w	r3, r7, #20
 8014ab8:	3304      	adds	r3, #4
 8014aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014abc:	4619      	mov	r1, r3
 8014abe:	68b8      	ldr	r0, [r7, #8]
 8014ac0:	f000 fbc4 	bl	801524c <xQueueReceive>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	2b01      	cmp	r3, #1
 8014ac8:	d102      	bne.n	8014ad0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014aca:	2310      	movs	r3, #16
 8014acc:	617b      	str	r3, [r7, #20]
 8014ace:	e006      	b.n	8014ade <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d101      	bne.n	8014ada <osMessageGet+0xc6>
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	e000      	b.n	8014adc <osMessageGet+0xc8>
 8014ada:	2340      	movs	r3, #64	; 0x40
 8014adc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	461c      	mov	r4, r3
 8014ae2:	f107 0314 	add.w	r3, r7, #20
 8014ae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014aee:	68f8      	ldr	r0, [r7, #12]
 8014af0:	372c      	adds	r7, #44	; 0x2c
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd90      	pop	{r4, r7, pc}
 8014af6:	bf00      	nop
 8014af8:	e000ed04 	.word	0xe000ed04

08014afc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014afc:	b480      	push	{r7}
 8014afe:	b083      	sub	sp, #12
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f103 0208 	add.w	r2, r3, #8
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f103 0208 	add.w	r2, r3, #8
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f103 0208 	add.w	r2, r3, #8
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014b30:	bf00      	nop
 8014b32:	370c      	adds	r7, #12
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr

08014b3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b083      	sub	sp, #12
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2200      	movs	r2, #0
 8014b48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014b4a:	bf00      	nop
 8014b4c:	370c      	adds	r7, #12
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b54:	4770      	bx	lr

08014b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014b56:	b480      	push	{r7}
 8014b58:	b085      	sub	sp, #20
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	6078      	str	r0, [r7, #4]
 8014b5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	68fa      	ldr	r2, [r7, #12]
 8014b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	689a      	ldr	r2, [r3, #8]
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	689b      	ldr	r3, [r3, #8]
 8014b78:	683a      	ldr	r2, [r7, #0]
 8014b7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	683a      	ldr	r2, [r7, #0]
 8014b80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	1c5a      	adds	r2, r3, #1
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	601a      	str	r2, [r3, #0]
}
 8014b92:	bf00      	nop
 8014b94:	3714      	adds	r7, #20
 8014b96:	46bd      	mov	sp, r7
 8014b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9c:	4770      	bx	lr

08014b9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014b9e:	b480      	push	{r7}
 8014ba0:	b085      	sub	sp, #20
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	6078      	str	r0, [r7, #4]
 8014ba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014bb4:	d103      	bne.n	8014bbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	691b      	ldr	r3, [r3, #16]
 8014bba:	60fb      	str	r3, [r7, #12]
 8014bbc:	e00c      	b.n	8014bd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	3308      	adds	r3, #8
 8014bc2:	60fb      	str	r3, [r7, #12]
 8014bc4:	e002      	b.n	8014bcc <vListInsert+0x2e>
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	60fb      	str	r3, [r7, #12]
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	685b      	ldr	r3, [r3, #4]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	68ba      	ldr	r2, [r7, #8]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d2f6      	bcs.n	8014bc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	685a      	ldr	r2, [r3, #4]
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	683a      	ldr	r2, [r7, #0]
 8014be6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	68fa      	ldr	r2, [r7, #12]
 8014bec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	683a      	ldr	r2, [r7, #0]
 8014bf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	687a      	ldr	r2, [r7, #4]
 8014bf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	1c5a      	adds	r2, r3, #1
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	601a      	str	r2, [r3, #0]
}
 8014c04:	bf00      	nop
 8014c06:	3714      	adds	r7, #20
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014c10:	b480      	push	{r7}
 8014c12:	b085      	sub	sp, #20
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	691b      	ldr	r3, [r3, #16]
 8014c1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	685b      	ldr	r3, [r3, #4]
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	6892      	ldr	r2, [r2, #8]
 8014c26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	689b      	ldr	r3, [r3, #8]
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	6852      	ldr	r2, [r2, #4]
 8014c30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d103      	bne.n	8014c44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	689a      	ldr	r2, [r3, #8]
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	1e5a      	subs	r2, r3, #1
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	681b      	ldr	r3, [r3, #0]
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3714      	adds	r7, #20
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr

08014c64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
 8014c6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d10c      	bne.n	8014c92 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c7c:	b672      	cpsid	i
 8014c7e:	f383 8811 	msr	BASEPRI, r3
 8014c82:	f3bf 8f6f 	isb	sy
 8014c86:	f3bf 8f4f 	dsb	sy
 8014c8a:	b662      	cpsie	i
 8014c8c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014c8e:	bf00      	nop
 8014c90:	e7fe      	b.n	8014c90 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8014c92:	f002 f833 	bl	8016cfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	681a      	ldr	r2, [r3, #0]
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c9e:	68f9      	ldr	r1, [r7, #12]
 8014ca0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014ca2:	fb01 f303 	mul.w	r3, r1, r3
 8014ca6:	441a      	add	r2, r3
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	681a      	ldr	r2, [r3, #0]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	68f9      	ldr	r1, [r7, #12]
 8014cc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014cc8:	fb01 f303 	mul.w	r3, r1, r3
 8014ccc:	441a      	add	r2, r3
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	22ff      	movs	r2, #255	; 0xff
 8014cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	22ff      	movs	r2, #255	; 0xff
 8014cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d114      	bne.n	8014d12 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	691b      	ldr	r3, [r3, #16]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d01a      	beq.n	8014d26 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	3310      	adds	r3, #16
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f001 fa27 	bl	8016148 <xTaskRemoveFromEventList>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d012      	beq.n	8014d26 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014d00:	4b0c      	ldr	r3, [pc, #48]	; (8014d34 <xQueueGenericReset+0xd0>)
 8014d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d06:	601a      	str	r2, [r3, #0]
 8014d08:	f3bf 8f4f 	dsb	sy
 8014d0c:	f3bf 8f6f 	isb	sy
 8014d10:	e009      	b.n	8014d26 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	3310      	adds	r3, #16
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7ff fef0 	bl	8014afc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	3324      	adds	r3, #36	; 0x24
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7ff feeb 	bl	8014afc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014d26:	f002 f81d 	bl	8016d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014d2a:	2301      	movs	r3, #1
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3710      	adds	r7, #16
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	e000ed04 	.word	0xe000ed04

08014d38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b08e      	sub	sp, #56	; 0x38
 8014d3c:	af02      	add	r7, sp, #8
 8014d3e:	60f8      	str	r0, [r7, #12]
 8014d40:	60b9      	str	r1, [r7, #8]
 8014d42:	607a      	str	r2, [r7, #4]
 8014d44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d10c      	bne.n	8014d66 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8014d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d50:	b672      	cpsid	i
 8014d52:	f383 8811 	msr	BASEPRI, r3
 8014d56:	f3bf 8f6f 	isb	sy
 8014d5a:	f3bf 8f4f 	dsb	sy
 8014d5e:	b662      	cpsie	i
 8014d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014d62:	bf00      	nop
 8014d64:	e7fe      	b.n	8014d64 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d10c      	bne.n	8014d86 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8014d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d70:	b672      	cpsid	i
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	b662      	cpsie	i
 8014d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014d82:	bf00      	nop
 8014d84:	e7fe      	b.n	8014d84 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d002      	beq.n	8014d92 <xQueueGenericCreateStatic+0x5a>
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d001      	beq.n	8014d96 <xQueueGenericCreateStatic+0x5e>
 8014d92:	2301      	movs	r3, #1
 8014d94:	e000      	b.n	8014d98 <xQueueGenericCreateStatic+0x60>
 8014d96:	2300      	movs	r3, #0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d10c      	bne.n	8014db6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8014d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da0:	b672      	cpsid	i
 8014da2:	f383 8811 	msr	BASEPRI, r3
 8014da6:	f3bf 8f6f 	isb	sy
 8014daa:	f3bf 8f4f 	dsb	sy
 8014dae:	b662      	cpsie	i
 8014db0:	623b      	str	r3, [r7, #32]
}
 8014db2:	bf00      	nop
 8014db4:	e7fe      	b.n	8014db4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d102      	bne.n	8014dc2 <xQueueGenericCreateStatic+0x8a>
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d101      	bne.n	8014dc6 <xQueueGenericCreateStatic+0x8e>
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	e000      	b.n	8014dc8 <xQueueGenericCreateStatic+0x90>
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d10c      	bne.n	8014de6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8014dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd0:	b672      	cpsid	i
 8014dd2:	f383 8811 	msr	BASEPRI, r3
 8014dd6:	f3bf 8f6f 	isb	sy
 8014dda:	f3bf 8f4f 	dsb	sy
 8014dde:	b662      	cpsie	i
 8014de0:	61fb      	str	r3, [r7, #28]
}
 8014de2:	bf00      	nop
 8014de4:	e7fe      	b.n	8014de4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014de6:	2348      	movs	r3, #72	; 0x48
 8014de8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	2b48      	cmp	r3, #72	; 0x48
 8014dee:	d00c      	beq.n	8014e0a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8014df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df4:	b672      	cpsid	i
 8014df6:	f383 8811 	msr	BASEPRI, r3
 8014dfa:	f3bf 8f6f 	isb	sy
 8014dfe:	f3bf 8f4f 	dsb	sy
 8014e02:	b662      	cpsie	i
 8014e04:	61bb      	str	r3, [r7, #24]
}
 8014e06:	bf00      	nop
 8014e08:	e7fe      	b.n	8014e08 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014e0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d00d      	beq.n	8014e32 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e18:	2201      	movs	r2, #1
 8014e1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014e1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e24:	9300      	str	r3, [sp, #0]
 8014e26:	4613      	mov	r3, r2
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	68b9      	ldr	r1, [r7, #8]
 8014e2c:	68f8      	ldr	r0, [r7, #12]
 8014e2e:	f000 f847 	bl	8014ec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014e34:	4618      	mov	r0, r3
 8014e36:	3730      	adds	r7, #48	; 0x30
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b08a      	sub	sp, #40	; 0x28
 8014e40:	af02      	add	r7, sp, #8
 8014e42:	60f8      	str	r0, [r7, #12]
 8014e44:	60b9      	str	r1, [r7, #8]
 8014e46:	4613      	mov	r3, r2
 8014e48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d10c      	bne.n	8014e6a <xQueueGenericCreate+0x2e>
	__asm volatile
 8014e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e54:	b672      	cpsid	i
 8014e56:	f383 8811 	msr	BASEPRI, r3
 8014e5a:	f3bf 8f6f 	isb	sy
 8014e5e:	f3bf 8f4f 	dsb	sy
 8014e62:	b662      	cpsie	i
 8014e64:	613b      	str	r3, [r7, #16]
}
 8014e66:	bf00      	nop
 8014e68:	e7fe      	b.n	8014e68 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d102      	bne.n	8014e76 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014e70:	2300      	movs	r3, #0
 8014e72:	61fb      	str	r3, [r7, #28]
 8014e74:	e004      	b.n	8014e80 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	68ba      	ldr	r2, [r7, #8]
 8014e7a:	fb02 f303 	mul.w	r3, r2, r3
 8014e7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014e80:	69fb      	ldr	r3, [r7, #28]
 8014e82:	3348      	adds	r3, #72	; 0x48
 8014e84:	4618      	mov	r0, r3
 8014e86:	f002 f865 	bl	8016f54 <pvPortMalloc>
 8014e8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014e8c:	69bb      	ldr	r3, [r7, #24]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d011      	beq.n	8014eb6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014e92:	69bb      	ldr	r3, [r7, #24]
 8014e94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	3348      	adds	r3, #72	; 0x48
 8014e9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014ea4:	79fa      	ldrb	r2, [r7, #7]
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	697a      	ldr	r2, [r7, #20]
 8014eae:	68b9      	ldr	r1, [r7, #8]
 8014eb0:	68f8      	ldr	r0, [r7, #12]
 8014eb2:	f000 f805 	bl	8014ec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014eb6:	69bb      	ldr	r3, [r7, #24]
	}
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3720      	adds	r7, #32
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}

08014ec0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b084      	sub	sp, #16
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	60f8      	str	r0, [r7, #12]
 8014ec8:	60b9      	str	r1, [r7, #8]
 8014eca:	607a      	str	r2, [r7, #4]
 8014ecc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d103      	bne.n	8014edc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	69ba      	ldr	r2, [r7, #24]
 8014ed8:	601a      	str	r2, [r3, #0]
 8014eda:	e002      	b.n	8014ee2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014edc:	69bb      	ldr	r3, [r7, #24]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	68fa      	ldr	r2, [r7, #12]
 8014ee6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014ee8:	69bb      	ldr	r3, [r7, #24]
 8014eea:	68ba      	ldr	r2, [r7, #8]
 8014eec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014eee:	2101      	movs	r1, #1
 8014ef0:	69b8      	ldr	r0, [r7, #24]
 8014ef2:	f7ff feb7 	bl	8014c64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014ef6:	bf00      	nop
 8014ef8:	3710      	adds	r7, #16
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
	...

08014f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b08e      	sub	sp, #56	; 0x38
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	60f8      	str	r0, [r7, #12]
 8014f08:	60b9      	str	r1, [r7, #8]
 8014f0a:	607a      	str	r2, [r7, #4]
 8014f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d10c      	bne.n	8014f36 <xQueueGenericSend+0x36>
	__asm volatile
 8014f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f20:	b672      	cpsid	i
 8014f22:	f383 8811 	msr	BASEPRI, r3
 8014f26:	f3bf 8f6f 	isb	sy
 8014f2a:	f3bf 8f4f 	dsb	sy
 8014f2e:	b662      	cpsie	i
 8014f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014f32:	bf00      	nop
 8014f34:	e7fe      	b.n	8014f34 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d103      	bne.n	8014f44 <xQueueGenericSend+0x44>
 8014f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d101      	bne.n	8014f48 <xQueueGenericSend+0x48>
 8014f44:	2301      	movs	r3, #1
 8014f46:	e000      	b.n	8014f4a <xQueueGenericSend+0x4a>
 8014f48:	2300      	movs	r3, #0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d10c      	bne.n	8014f68 <xQueueGenericSend+0x68>
	__asm volatile
 8014f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f52:	b672      	cpsid	i
 8014f54:	f383 8811 	msr	BASEPRI, r3
 8014f58:	f3bf 8f6f 	isb	sy
 8014f5c:	f3bf 8f4f 	dsb	sy
 8014f60:	b662      	cpsie	i
 8014f62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014f64:	bf00      	nop
 8014f66:	e7fe      	b.n	8014f66 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	2b02      	cmp	r3, #2
 8014f6c:	d103      	bne.n	8014f76 <xQueueGenericSend+0x76>
 8014f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d101      	bne.n	8014f7a <xQueueGenericSend+0x7a>
 8014f76:	2301      	movs	r3, #1
 8014f78:	e000      	b.n	8014f7c <xQueueGenericSend+0x7c>
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d10c      	bne.n	8014f9a <xQueueGenericSend+0x9a>
	__asm volatile
 8014f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f84:	b672      	cpsid	i
 8014f86:	f383 8811 	msr	BASEPRI, r3
 8014f8a:	f3bf 8f6f 	isb	sy
 8014f8e:	f3bf 8f4f 	dsb	sy
 8014f92:	b662      	cpsie	i
 8014f94:	623b      	str	r3, [r7, #32]
}
 8014f96:	bf00      	nop
 8014f98:	e7fe      	b.n	8014f98 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f9a:	f001 fa9b 	bl	80164d4 <xTaskGetSchedulerState>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d102      	bne.n	8014faa <xQueueGenericSend+0xaa>
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d101      	bne.n	8014fae <xQueueGenericSend+0xae>
 8014faa:	2301      	movs	r3, #1
 8014fac:	e000      	b.n	8014fb0 <xQueueGenericSend+0xb0>
 8014fae:	2300      	movs	r3, #0
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d10c      	bne.n	8014fce <xQueueGenericSend+0xce>
	__asm volatile
 8014fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb8:	b672      	cpsid	i
 8014fba:	f383 8811 	msr	BASEPRI, r3
 8014fbe:	f3bf 8f6f 	isb	sy
 8014fc2:	f3bf 8f4f 	dsb	sy
 8014fc6:	b662      	cpsie	i
 8014fc8:	61fb      	str	r3, [r7, #28]
}
 8014fca:	bf00      	nop
 8014fcc:	e7fe      	b.n	8014fcc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014fce:	f001 fe95 	bl	8016cfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d302      	bcc.n	8014fe4 <xQueueGenericSend+0xe4>
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	2b02      	cmp	r3, #2
 8014fe2:	d129      	bne.n	8015038 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014fe4:	683a      	ldr	r2, [r7, #0]
 8014fe6:	68b9      	ldr	r1, [r7, #8]
 8014fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fea:	f000 fa9b 	bl	8015524 <prvCopyDataToQueue>
 8014fee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d010      	beq.n	801501a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ffa:	3324      	adds	r3, #36	; 0x24
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f001 f8a3 	bl	8016148 <xTaskRemoveFromEventList>
 8015002:	4603      	mov	r3, r0
 8015004:	2b00      	cmp	r3, #0
 8015006:	d013      	beq.n	8015030 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015008:	4b3f      	ldr	r3, [pc, #252]	; (8015108 <xQueueGenericSend+0x208>)
 801500a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801500e:	601a      	str	r2, [r3, #0]
 8015010:	f3bf 8f4f 	dsb	sy
 8015014:	f3bf 8f6f 	isb	sy
 8015018:	e00a      	b.n	8015030 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801501c:	2b00      	cmp	r3, #0
 801501e:	d007      	beq.n	8015030 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015020:	4b39      	ldr	r3, [pc, #228]	; (8015108 <xQueueGenericSend+0x208>)
 8015022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015026:	601a      	str	r2, [r3, #0]
 8015028:	f3bf 8f4f 	dsb	sy
 801502c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015030:	f001 fe98 	bl	8016d64 <vPortExitCritical>
				return pdPASS;
 8015034:	2301      	movs	r3, #1
 8015036:	e063      	b.n	8015100 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d103      	bne.n	8015046 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801503e:	f001 fe91 	bl	8016d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015042:	2300      	movs	r3, #0
 8015044:	e05c      	b.n	8015100 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015048:	2b00      	cmp	r3, #0
 801504a:	d106      	bne.n	801505a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801504c:	f107 0314 	add.w	r3, r7, #20
 8015050:	4618      	mov	r0, r3
 8015052:	f001 f8dd 	bl	8016210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015056:	2301      	movs	r3, #1
 8015058:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801505a:	f001 fe83 	bl	8016d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801505e:	f000 fe43 	bl	8015ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015062:	f001 fe4b 	bl	8016cfc <vPortEnterCritical>
 8015066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801506c:	b25b      	sxtb	r3, r3
 801506e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015072:	d103      	bne.n	801507c <xQueueGenericSend+0x17c>
 8015074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015076:	2200      	movs	r2, #0
 8015078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801507e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015082:	b25b      	sxtb	r3, r3
 8015084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015088:	d103      	bne.n	8015092 <xQueueGenericSend+0x192>
 801508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801508c:	2200      	movs	r2, #0
 801508e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015092:	f001 fe67 	bl	8016d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015096:	1d3a      	adds	r2, r7, #4
 8015098:	f107 0314 	add.w	r3, r7, #20
 801509c:	4611      	mov	r1, r2
 801509e:	4618      	mov	r0, r3
 80150a0:	f001 f8cc 	bl	801623c <xTaskCheckForTimeOut>
 80150a4:	4603      	mov	r3, r0
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d124      	bne.n	80150f4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80150aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150ac:	f000 fb32 	bl	8015714 <prvIsQueueFull>
 80150b0:	4603      	mov	r3, r0
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d018      	beq.n	80150e8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80150b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b8:	3310      	adds	r3, #16
 80150ba:	687a      	ldr	r2, [r7, #4]
 80150bc:	4611      	mov	r1, r2
 80150be:	4618      	mov	r0, r3
 80150c0:	f001 f81c 	bl	80160fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80150c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150c6:	f000 fabd 	bl	8015644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80150ca:	f000 fe1b 	bl	8015d04 <xTaskResumeAll>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	f47f af7c 	bne.w	8014fce <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80150d6:	4b0c      	ldr	r3, [pc, #48]	; (8015108 <xQueueGenericSend+0x208>)
 80150d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150dc:	601a      	str	r2, [r3, #0]
 80150de:	f3bf 8f4f 	dsb	sy
 80150e2:	f3bf 8f6f 	isb	sy
 80150e6:	e772      	b.n	8014fce <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80150e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150ea:	f000 faab 	bl	8015644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150ee:	f000 fe09 	bl	8015d04 <xTaskResumeAll>
 80150f2:	e76c      	b.n	8014fce <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80150f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150f6:	f000 faa5 	bl	8015644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150fa:	f000 fe03 	bl	8015d04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80150fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015100:	4618      	mov	r0, r3
 8015102:	3738      	adds	r7, #56	; 0x38
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}
 8015108:	e000ed04 	.word	0xe000ed04

0801510c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b08e      	sub	sp, #56	; 0x38
 8015110:	af00      	add	r7, sp, #0
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	60b9      	str	r1, [r7, #8]
 8015116:	607a      	str	r2, [r7, #4]
 8015118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015120:	2b00      	cmp	r3, #0
 8015122:	d10c      	bne.n	801513e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8015124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015128:	b672      	cpsid	i
 801512a:	f383 8811 	msr	BASEPRI, r3
 801512e:	f3bf 8f6f 	isb	sy
 8015132:	f3bf 8f4f 	dsb	sy
 8015136:	b662      	cpsie	i
 8015138:	627b      	str	r3, [r7, #36]	; 0x24
}
 801513a:	bf00      	nop
 801513c:	e7fe      	b.n	801513c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d103      	bne.n	801514c <xQueueGenericSendFromISR+0x40>
 8015144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015148:	2b00      	cmp	r3, #0
 801514a:	d101      	bne.n	8015150 <xQueueGenericSendFromISR+0x44>
 801514c:	2301      	movs	r3, #1
 801514e:	e000      	b.n	8015152 <xQueueGenericSendFromISR+0x46>
 8015150:	2300      	movs	r3, #0
 8015152:	2b00      	cmp	r3, #0
 8015154:	d10c      	bne.n	8015170 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8015156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801515a:	b672      	cpsid	i
 801515c:	f383 8811 	msr	BASEPRI, r3
 8015160:	f3bf 8f6f 	isb	sy
 8015164:	f3bf 8f4f 	dsb	sy
 8015168:	b662      	cpsie	i
 801516a:	623b      	str	r3, [r7, #32]
}
 801516c:	bf00      	nop
 801516e:	e7fe      	b.n	801516e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	2b02      	cmp	r3, #2
 8015174:	d103      	bne.n	801517e <xQueueGenericSendFromISR+0x72>
 8015176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801517a:	2b01      	cmp	r3, #1
 801517c:	d101      	bne.n	8015182 <xQueueGenericSendFromISR+0x76>
 801517e:	2301      	movs	r3, #1
 8015180:	e000      	b.n	8015184 <xQueueGenericSendFromISR+0x78>
 8015182:	2300      	movs	r3, #0
 8015184:	2b00      	cmp	r3, #0
 8015186:	d10c      	bne.n	80151a2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8015188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801518c:	b672      	cpsid	i
 801518e:	f383 8811 	msr	BASEPRI, r3
 8015192:	f3bf 8f6f 	isb	sy
 8015196:	f3bf 8f4f 	dsb	sy
 801519a:	b662      	cpsie	i
 801519c:	61fb      	str	r3, [r7, #28]
}
 801519e:	bf00      	nop
 80151a0:	e7fe      	b.n	80151a0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80151a2:	f001 fe93 	bl	8016ecc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80151a6:	f3ef 8211 	mrs	r2, BASEPRI
 80151aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ae:	b672      	cpsid	i
 80151b0:	f383 8811 	msr	BASEPRI, r3
 80151b4:	f3bf 8f6f 	isb	sy
 80151b8:	f3bf 8f4f 	dsb	sy
 80151bc:	b662      	cpsie	i
 80151be:	61ba      	str	r2, [r7, #24]
 80151c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80151c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80151c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80151ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d302      	bcc.n	80151d8 <xQueueGenericSendFromISR+0xcc>
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	2b02      	cmp	r3, #2
 80151d6:	d12c      	bne.n	8015232 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80151d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80151de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80151e2:	683a      	ldr	r2, [r7, #0]
 80151e4:	68b9      	ldr	r1, [r7, #8]
 80151e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151e8:	f000 f99c 	bl	8015524 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80151ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80151f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151f4:	d112      	bne.n	801521c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80151f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d016      	beq.n	801522c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80151fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015200:	3324      	adds	r3, #36	; 0x24
 8015202:	4618      	mov	r0, r3
 8015204:	f000 ffa0 	bl	8016148 <xTaskRemoveFromEventList>
 8015208:	4603      	mov	r3, r0
 801520a:	2b00      	cmp	r3, #0
 801520c:	d00e      	beq.n	801522c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d00b      	beq.n	801522c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2201      	movs	r2, #1
 8015218:	601a      	str	r2, [r3, #0]
 801521a:	e007      	b.n	801522c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801521c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015220:	3301      	adds	r3, #1
 8015222:	b2db      	uxtb	r3, r3
 8015224:	b25a      	sxtb	r2, r3
 8015226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801522c:	2301      	movs	r3, #1
 801522e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015230:	e001      	b.n	8015236 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015232:	2300      	movs	r3, #0
 8015234:	637b      	str	r3, [r7, #52]	; 0x34
 8015236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015238:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015240:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015244:	4618      	mov	r0, r3
 8015246:	3738      	adds	r7, #56	; 0x38
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b08c      	sub	sp, #48	; 0x30
 8015250:	af00      	add	r7, sp, #0
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015258:	2300      	movs	r3, #0
 801525a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015262:	2b00      	cmp	r3, #0
 8015264:	d10c      	bne.n	8015280 <xQueueReceive+0x34>
	__asm volatile
 8015266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801526a:	b672      	cpsid	i
 801526c:	f383 8811 	msr	BASEPRI, r3
 8015270:	f3bf 8f6f 	isb	sy
 8015274:	f3bf 8f4f 	dsb	sy
 8015278:	b662      	cpsie	i
 801527a:	623b      	str	r3, [r7, #32]
}
 801527c:	bf00      	nop
 801527e:	e7fe      	b.n	801527e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d103      	bne.n	801528e <xQueueReceive+0x42>
 8015286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801528a:	2b00      	cmp	r3, #0
 801528c:	d101      	bne.n	8015292 <xQueueReceive+0x46>
 801528e:	2301      	movs	r3, #1
 8015290:	e000      	b.n	8015294 <xQueueReceive+0x48>
 8015292:	2300      	movs	r3, #0
 8015294:	2b00      	cmp	r3, #0
 8015296:	d10c      	bne.n	80152b2 <xQueueReceive+0x66>
	__asm volatile
 8015298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801529c:	b672      	cpsid	i
 801529e:	f383 8811 	msr	BASEPRI, r3
 80152a2:	f3bf 8f6f 	isb	sy
 80152a6:	f3bf 8f4f 	dsb	sy
 80152aa:	b662      	cpsie	i
 80152ac:	61fb      	str	r3, [r7, #28]
}
 80152ae:	bf00      	nop
 80152b0:	e7fe      	b.n	80152b0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80152b2:	f001 f90f 	bl	80164d4 <xTaskGetSchedulerState>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d102      	bne.n	80152c2 <xQueueReceive+0x76>
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d101      	bne.n	80152c6 <xQueueReceive+0x7a>
 80152c2:	2301      	movs	r3, #1
 80152c4:	e000      	b.n	80152c8 <xQueueReceive+0x7c>
 80152c6:	2300      	movs	r3, #0
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d10c      	bne.n	80152e6 <xQueueReceive+0x9a>
	__asm volatile
 80152cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152d0:	b672      	cpsid	i
 80152d2:	f383 8811 	msr	BASEPRI, r3
 80152d6:	f3bf 8f6f 	isb	sy
 80152da:	f3bf 8f4f 	dsb	sy
 80152de:	b662      	cpsie	i
 80152e0:	61bb      	str	r3, [r7, #24]
}
 80152e2:	bf00      	nop
 80152e4:	e7fe      	b.n	80152e4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80152e6:	f001 fd09 	bl	8016cfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80152ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80152f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d01f      	beq.n	8015336 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80152f6:	68b9      	ldr	r1, [r7, #8]
 80152f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152fa:	f000 f97d 	bl	80155f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80152fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015300:	1e5a      	subs	r2, r3, #1
 8015302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015304:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015308:	691b      	ldr	r3, [r3, #16]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d00f      	beq.n	801532e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015310:	3310      	adds	r3, #16
 8015312:	4618      	mov	r0, r3
 8015314:	f000 ff18 	bl	8016148 <xTaskRemoveFromEventList>
 8015318:	4603      	mov	r3, r0
 801531a:	2b00      	cmp	r3, #0
 801531c:	d007      	beq.n	801532e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801531e:	4b3d      	ldr	r3, [pc, #244]	; (8015414 <xQueueReceive+0x1c8>)
 8015320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015324:	601a      	str	r2, [r3, #0]
 8015326:	f3bf 8f4f 	dsb	sy
 801532a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801532e:	f001 fd19 	bl	8016d64 <vPortExitCritical>
				return pdPASS;
 8015332:	2301      	movs	r3, #1
 8015334:	e069      	b.n	801540a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d103      	bne.n	8015344 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801533c:	f001 fd12 	bl	8016d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015340:	2300      	movs	r3, #0
 8015342:	e062      	b.n	801540a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015346:	2b00      	cmp	r3, #0
 8015348:	d106      	bne.n	8015358 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801534a:	f107 0310 	add.w	r3, r7, #16
 801534e:	4618      	mov	r0, r3
 8015350:	f000 ff5e 	bl	8016210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015354:	2301      	movs	r3, #1
 8015356:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015358:	f001 fd04 	bl	8016d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801535c:	f000 fcc4 	bl	8015ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015360:	f001 fccc 	bl	8016cfc <vPortEnterCritical>
 8015364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801536a:	b25b      	sxtb	r3, r3
 801536c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015370:	d103      	bne.n	801537a <xQueueReceive+0x12e>
 8015372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015374:	2200      	movs	r2, #0
 8015376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801537c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015380:	b25b      	sxtb	r3, r3
 8015382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015386:	d103      	bne.n	8015390 <xQueueReceive+0x144>
 8015388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538a:	2200      	movs	r2, #0
 801538c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015390:	f001 fce8 	bl	8016d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015394:	1d3a      	adds	r2, r7, #4
 8015396:	f107 0310 	add.w	r3, r7, #16
 801539a:	4611      	mov	r1, r2
 801539c:	4618      	mov	r0, r3
 801539e:	f000 ff4d 	bl	801623c <xTaskCheckForTimeOut>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d123      	bne.n	80153f0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80153a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153aa:	f000 f99d 	bl	80156e8 <prvIsQueueEmpty>
 80153ae:	4603      	mov	r3, r0
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d017      	beq.n	80153e4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80153b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153b6:	3324      	adds	r3, #36	; 0x24
 80153b8:	687a      	ldr	r2, [r7, #4]
 80153ba:	4611      	mov	r1, r2
 80153bc:	4618      	mov	r0, r3
 80153be:	f000 fe9d 	bl	80160fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80153c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153c4:	f000 f93e 	bl	8015644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80153c8:	f000 fc9c 	bl	8015d04 <xTaskResumeAll>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d189      	bne.n	80152e6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80153d2:	4b10      	ldr	r3, [pc, #64]	; (8015414 <xQueueReceive+0x1c8>)
 80153d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153d8:	601a      	str	r2, [r3, #0]
 80153da:	f3bf 8f4f 	dsb	sy
 80153de:	f3bf 8f6f 	isb	sy
 80153e2:	e780      	b.n	80152e6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80153e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153e6:	f000 f92d 	bl	8015644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80153ea:	f000 fc8b 	bl	8015d04 <xTaskResumeAll>
 80153ee:	e77a      	b.n	80152e6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80153f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153f2:	f000 f927 	bl	8015644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80153f6:	f000 fc85 	bl	8015d04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80153fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153fc:	f000 f974 	bl	80156e8 <prvIsQueueEmpty>
 8015400:	4603      	mov	r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	f43f af6f 	beq.w	80152e6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015408:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801540a:	4618      	mov	r0, r3
 801540c:	3730      	adds	r7, #48	; 0x30
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	e000ed04 	.word	0xe000ed04

08015418 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b08e      	sub	sp, #56	; 0x38
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542a:	2b00      	cmp	r3, #0
 801542c:	d10c      	bne.n	8015448 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015432:	b672      	cpsid	i
 8015434:	f383 8811 	msr	BASEPRI, r3
 8015438:	f3bf 8f6f 	isb	sy
 801543c:	f3bf 8f4f 	dsb	sy
 8015440:	b662      	cpsie	i
 8015442:	623b      	str	r3, [r7, #32]
}
 8015444:	bf00      	nop
 8015446:	e7fe      	b.n	8015446 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d103      	bne.n	8015456 <xQueueReceiveFromISR+0x3e>
 801544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015452:	2b00      	cmp	r3, #0
 8015454:	d101      	bne.n	801545a <xQueueReceiveFromISR+0x42>
 8015456:	2301      	movs	r3, #1
 8015458:	e000      	b.n	801545c <xQueueReceiveFromISR+0x44>
 801545a:	2300      	movs	r3, #0
 801545c:	2b00      	cmp	r3, #0
 801545e:	d10c      	bne.n	801547a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8015460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015464:	b672      	cpsid	i
 8015466:	f383 8811 	msr	BASEPRI, r3
 801546a:	f3bf 8f6f 	isb	sy
 801546e:	f3bf 8f4f 	dsb	sy
 8015472:	b662      	cpsie	i
 8015474:	61fb      	str	r3, [r7, #28]
}
 8015476:	bf00      	nop
 8015478:	e7fe      	b.n	8015478 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801547a:	f001 fd27 	bl	8016ecc <vPortValidateInterruptPriority>
	__asm volatile
 801547e:	f3ef 8211 	mrs	r2, BASEPRI
 8015482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015486:	b672      	cpsid	i
 8015488:	f383 8811 	msr	BASEPRI, r3
 801548c:	f3bf 8f6f 	isb	sy
 8015490:	f3bf 8f4f 	dsb	sy
 8015494:	b662      	cpsie	i
 8015496:	61ba      	str	r2, [r7, #24]
 8015498:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801549a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801549c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80154a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d02f      	beq.n	801550a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80154aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80154b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80154b4:	68b9      	ldr	r1, [r7, #8]
 80154b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154b8:	f000 f89e 	bl	80155f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80154bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154be:	1e5a      	subs	r2, r3, #1
 80154c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80154c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80154c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80154cc:	d112      	bne.n	80154f4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80154ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d0:	691b      	ldr	r3, [r3, #16]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d016      	beq.n	8015504 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80154d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d8:	3310      	adds	r3, #16
 80154da:	4618      	mov	r0, r3
 80154dc:	f000 fe34 	bl	8016148 <xTaskRemoveFromEventList>
 80154e0:	4603      	mov	r3, r0
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d00e      	beq.n	8015504 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d00b      	beq.n	8015504 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2201      	movs	r2, #1
 80154f0:	601a      	str	r2, [r3, #0]
 80154f2:	e007      	b.n	8015504 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80154f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154f8:	3301      	adds	r3, #1
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	b25a      	sxtb	r2, r3
 80154fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015504:	2301      	movs	r3, #1
 8015506:	637b      	str	r3, [r7, #52]	; 0x34
 8015508:	e001      	b.n	801550e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801550a:	2300      	movs	r3, #0
 801550c:	637b      	str	r3, [r7, #52]	; 0x34
 801550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015510:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	f383 8811 	msr	BASEPRI, r3
}
 8015518:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801551c:	4618      	mov	r0, r3
 801551e:	3738      	adds	r7, #56	; 0x38
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}

08015524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b086      	sub	sp, #24
 8015528:	af00      	add	r7, sp, #0
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015530:	2300      	movs	r3, #0
 8015532:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015538:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801553e:	2b00      	cmp	r3, #0
 8015540:	d10d      	bne.n	801555e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d14d      	bne.n	80155e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	689b      	ldr	r3, [r3, #8]
 801554e:	4618      	mov	r0, r3
 8015550:	f000 ffde 	bl	8016510 <xTaskPriorityDisinherit>
 8015554:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	2200      	movs	r2, #0
 801555a:	609a      	str	r2, [r3, #8]
 801555c:	e043      	b.n	80155e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d119      	bne.n	8015598 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	6858      	ldr	r0, [r3, #4]
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801556c:	461a      	mov	r2, r3
 801556e:	68b9      	ldr	r1, [r7, #8]
 8015570:	f003 fafc 	bl	8018b6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	685a      	ldr	r2, [r3, #4]
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801557c:	441a      	add	r2, r3
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	685a      	ldr	r2, [r3, #4]
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	689b      	ldr	r3, [r3, #8]
 801558a:	429a      	cmp	r2, r3
 801558c:	d32b      	bcc.n	80155e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	605a      	str	r2, [r3, #4]
 8015596:	e026      	b.n	80155e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	68d8      	ldr	r0, [r3, #12]
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155a0:	461a      	mov	r2, r3
 80155a2:	68b9      	ldr	r1, [r7, #8]
 80155a4:	f003 fae2 	bl	8018b6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	68da      	ldr	r2, [r3, #12]
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155b0:	425b      	negs	r3, r3
 80155b2:	441a      	add	r2, r3
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	68da      	ldr	r2, [r3, #12]
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d207      	bcs.n	80155d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	689a      	ldr	r2, [r3, #8]
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155cc:	425b      	negs	r3, r3
 80155ce:	441a      	add	r2, r3
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2b02      	cmp	r3, #2
 80155d8:	d105      	bne.n	80155e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d002      	beq.n	80155e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80155e0:	693b      	ldr	r3, [r7, #16]
 80155e2:	3b01      	subs	r3, #1
 80155e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	1c5a      	adds	r2, r3, #1
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80155ee:	697b      	ldr	r3, [r7, #20]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3718      	adds	r7, #24
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015606:	2b00      	cmp	r3, #0
 8015608:	d018      	beq.n	801563c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	68da      	ldr	r2, [r3, #12]
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015612:	441a      	add	r2, r3
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	68da      	ldr	r2, [r3, #12]
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	689b      	ldr	r3, [r3, #8]
 8015620:	429a      	cmp	r2, r3
 8015622:	d303      	bcc.n	801562c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681a      	ldr	r2, [r3, #0]
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	68d9      	ldr	r1, [r3, #12]
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015634:	461a      	mov	r2, r3
 8015636:	6838      	ldr	r0, [r7, #0]
 8015638:	f003 fa98 	bl	8018b6c <memcpy>
	}
}
 801563c:	bf00      	nop
 801563e:	3708      	adds	r7, #8
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}

08015644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b084      	sub	sp, #16
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801564c:	f001 fb56 	bl	8016cfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015658:	e011      	b.n	801567e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565e:	2b00      	cmp	r3, #0
 8015660:	d012      	beq.n	8015688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	3324      	adds	r3, #36	; 0x24
 8015666:	4618      	mov	r0, r3
 8015668:	f000 fd6e 	bl	8016148 <xTaskRemoveFromEventList>
 801566c:	4603      	mov	r3, r0
 801566e:	2b00      	cmp	r3, #0
 8015670:	d001      	beq.n	8015676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015672:	f000 fe49 	bl	8016308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015676:	7bfb      	ldrb	r3, [r7, #15]
 8015678:	3b01      	subs	r3, #1
 801567a:	b2db      	uxtb	r3, r3
 801567c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801567e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015682:	2b00      	cmp	r3, #0
 8015684:	dce9      	bgt.n	801565a <prvUnlockQueue+0x16>
 8015686:	e000      	b.n	801568a <prvUnlockQueue+0x46>
					break;
 8015688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	22ff      	movs	r2, #255	; 0xff
 801568e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015692:	f001 fb67 	bl	8016d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015696:	f001 fb31 	bl	8016cfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80156a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80156a2:	e011      	b.n	80156c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	691b      	ldr	r3, [r3, #16]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d012      	beq.n	80156d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	3310      	adds	r3, #16
 80156b0:	4618      	mov	r0, r3
 80156b2:	f000 fd49 	bl	8016148 <xTaskRemoveFromEventList>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d001      	beq.n	80156c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80156bc:	f000 fe24 	bl	8016308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80156c0:	7bbb      	ldrb	r3, [r7, #14]
 80156c2:	3b01      	subs	r3, #1
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80156c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	dce9      	bgt.n	80156a4 <prvUnlockQueue+0x60>
 80156d0:	e000      	b.n	80156d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80156d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	22ff      	movs	r2, #255	; 0xff
 80156d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80156dc:	f001 fb42 	bl	8016d64 <vPortExitCritical>
}
 80156e0:	bf00      	nop
 80156e2:	3710      	adds	r7, #16
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}

080156e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b084      	sub	sp, #16
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80156f0:	f001 fb04 	bl	8016cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d102      	bne.n	8015702 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80156fc:	2301      	movs	r3, #1
 80156fe:	60fb      	str	r3, [r7, #12]
 8015700:	e001      	b.n	8015706 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015702:	2300      	movs	r3, #0
 8015704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015706:	f001 fb2d 	bl	8016d64 <vPortExitCritical>

	return xReturn;
 801570a:	68fb      	ldr	r3, [r7, #12]
}
 801570c:	4618      	mov	r0, r3
 801570e:	3710      	adds	r7, #16
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b084      	sub	sp, #16
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801571c:	f001 faee 	bl	8016cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015728:	429a      	cmp	r2, r3
 801572a:	d102      	bne.n	8015732 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801572c:	2301      	movs	r3, #1
 801572e:	60fb      	str	r3, [r7, #12]
 8015730:	e001      	b.n	8015736 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015732:	2300      	movs	r3, #0
 8015734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015736:	f001 fb15 	bl	8016d64 <vPortExitCritical>

	return xReturn;
 801573a:	68fb      	ldr	r3, [r7, #12]
}
 801573c:	4618      	mov	r0, r3
 801573e:	3710      	adds	r7, #16
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}

08015744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015744:	b580      	push	{r7, lr}
 8015746:	b08e      	sub	sp, #56	; 0x38
 8015748:	af04      	add	r7, sp, #16
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
 8015750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015754:	2b00      	cmp	r3, #0
 8015756:	d10c      	bne.n	8015772 <xTaskCreateStatic+0x2e>
	__asm volatile
 8015758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575c:	b672      	cpsid	i
 801575e:	f383 8811 	msr	BASEPRI, r3
 8015762:	f3bf 8f6f 	isb	sy
 8015766:	f3bf 8f4f 	dsb	sy
 801576a:	b662      	cpsie	i
 801576c:	623b      	str	r3, [r7, #32]
}
 801576e:	bf00      	nop
 8015770:	e7fe      	b.n	8015770 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015774:	2b00      	cmp	r3, #0
 8015776:	d10c      	bne.n	8015792 <xTaskCreateStatic+0x4e>
	__asm volatile
 8015778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801577c:	b672      	cpsid	i
 801577e:	f383 8811 	msr	BASEPRI, r3
 8015782:	f3bf 8f6f 	isb	sy
 8015786:	f3bf 8f4f 	dsb	sy
 801578a:	b662      	cpsie	i
 801578c:	61fb      	str	r3, [r7, #28]
}
 801578e:	bf00      	nop
 8015790:	e7fe      	b.n	8015790 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015792:	2358      	movs	r3, #88	; 0x58
 8015794:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	2b58      	cmp	r3, #88	; 0x58
 801579a:	d00c      	beq.n	80157b6 <xTaskCreateStatic+0x72>
	__asm volatile
 801579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a0:	b672      	cpsid	i
 80157a2:	f383 8811 	msr	BASEPRI, r3
 80157a6:	f3bf 8f6f 	isb	sy
 80157aa:	f3bf 8f4f 	dsb	sy
 80157ae:	b662      	cpsie	i
 80157b0:	61bb      	str	r3, [r7, #24]
}
 80157b2:	bf00      	nop
 80157b4:	e7fe      	b.n	80157b4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80157b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80157b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d01e      	beq.n	80157fc <xTaskCreateStatic+0xb8>
 80157be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d01b      	beq.n	80157fc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80157c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80157c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80157ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d0:	2202      	movs	r2, #2
 80157d2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80157d6:	2300      	movs	r3, #0
 80157d8:	9303      	str	r3, [sp, #12]
 80157da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157dc:	9302      	str	r3, [sp, #8]
 80157de:	f107 0314 	add.w	r3, r7, #20
 80157e2:	9301      	str	r3, [sp, #4]
 80157e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	687a      	ldr	r2, [r7, #4]
 80157ec:	68b9      	ldr	r1, [r7, #8]
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f000 f850 	bl	8015894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80157f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157f6:	f000 f8e1 	bl	80159bc <prvAddNewTaskToReadyList>
 80157fa:	e001      	b.n	8015800 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80157fc:	2300      	movs	r3, #0
 80157fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015800:	697b      	ldr	r3, [r7, #20]
	}
 8015802:	4618      	mov	r0, r3
 8015804:	3728      	adds	r7, #40	; 0x28
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}

0801580a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801580a:	b580      	push	{r7, lr}
 801580c:	b08c      	sub	sp, #48	; 0x30
 801580e:	af04      	add	r7, sp, #16
 8015810:	60f8      	str	r0, [r7, #12]
 8015812:	60b9      	str	r1, [r7, #8]
 8015814:	603b      	str	r3, [r7, #0]
 8015816:	4613      	mov	r3, r2
 8015818:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801581a:	88fb      	ldrh	r3, [r7, #6]
 801581c:	009b      	lsls	r3, r3, #2
 801581e:	4618      	mov	r0, r3
 8015820:	f001 fb98 	bl	8016f54 <pvPortMalloc>
 8015824:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d00e      	beq.n	801584a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801582c:	2058      	movs	r0, #88	; 0x58
 801582e:	f001 fb91 	bl	8016f54 <pvPortMalloc>
 8015832:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015834:	69fb      	ldr	r3, [r7, #28]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d003      	beq.n	8015842 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	697a      	ldr	r2, [r7, #20]
 801583e:	631a      	str	r2, [r3, #48]	; 0x30
 8015840:	e005      	b.n	801584e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015842:	6978      	ldr	r0, [r7, #20]
 8015844:	f001 fc56 	bl	80170f4 <vPortFree>
 8015848:	e001      	b.n	801584e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801584a:	2300      	movs	r3, #0
 801584c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801584e:	69fb      	ldr	r3, [r7, #28]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d017      	beq.n	8015884 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	2200      	movs	r2, #0
 8015858:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801585c:	88fa      	ldrh	r2, [r7, #6]
 801585e:	2300      	movs	r3, #0
 8015860:	9303      	str	r3, [sp, #12]
 8015862:	69fb      	ldr	r3, [r7, #28]
 8015864:	9302      	str	r3, [sp, #8]
 8015866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015868:	9301      	str	r3, [sp, #4]
 801586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586c:	9300      	str	r3, [sp, #0]
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	68b9      	ldr	r1, [r7, #8]
 8015872:	68f8      	ldr	r0, [r7, #12]
 8015874:	f000 f80e 	bl	8015894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015878:	69f8      	ldr	r0, [r7, #28]
 801587a:	f000 f89f 	bl	80159bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801587e:	2301      	movs	r3, #1
 8015880:	61bb      	str	r3, [r7, #24]
 8015882:	e002      	b.n	801588a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015888:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801588a:	69bb      	ldr	r3, [r7, #24]
	}
 801588c:	4618      	mov	r0, r3
 801588e:	3720      	adds	r7, #32
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b088      	sub	sp, #32
 8015898:	af00      	add	r7, sp, #0
 801589a:	60f8      	str	r0, [r7, #12]
 801589c:	60b9      	str	r1, [r7, #8]
 801589e:	607a      	str	r2, [r7, #4]
 80158a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80158a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	461a      	mov	r2, r3
 80158ac:	21a5      	movs	r1, #165	; 0xa5
 80158ae:	f003 f96b 	bl	8018b88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80158b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80158b6:	6879      	ldr	r1, [r7, #4]
 80158b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80158bc:	440b      	add	r3, r1
 80158be:	009b      	lsls	r3, r3, #2
 80158c0:	4413      	add	r3, r2
 80158c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	f023 0307 	bic.w	r3, r3, #7
 80158ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80158cc:	69bb      	ldr	r3, [r7, #24]
 80158ce:	f003 0307 	and.w	r3, r3, #7
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d00c      	beq.n	80158f0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80158d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158da:	b672      	cpsid	i
 80158dc:	f383 8811 	msr	BASEPRI, r3
 80158e0:	f3bf 8f6f 	isb	sy
 80158e4:	f3bf 8f4f 	dsb	sy
 80158e8:	b662      	cpsie	i
 80158ea:	617b      	str	r3, [r7, #20]
}
 80158ec:	bf00      	nop
 80158ee:	e7fe      	b.n	80158ee <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d01f      	beq.n	8015936 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80158f6:	2300      	movs	r3, #0
 80158f8:	61fb      	str	r3, [r7, #28]
 80158fa:	e012      	b.n	8015922 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80158fc:	68ba      	ldr	r2, [r7, #8]
 80158fe:	69fb      	ldr	r3, [r7, #28]
 8015900:	4413      	add	r3, r2
 8015902:	7819      	ldrb	r1, [r3, #0]
 8015904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015906:	69fb      	ldr	r3, [r7, #28]
 8015908:	4413      	add	r3, r2
 801590a:	3334      	adds	r3, #52	; 0x34
 801590c:	460a      	mov	r2, r1
 801590e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015910:	68ba      	ldr	r2, [r7, #8]
 8015912:	69fb      	ldr	r3, [r7, #28]
 8015914:	4413      	add	r3, r2
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d006      	beq.n	801592a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801591c:	69fb      	ldr	r3, [r7, #28]
 801591e:	3301      	adds	r3, #1
 8015920:	61fb      	str	r3, [r7, #28]
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	2b0f      	cmp	r3, #15
 8015926:	d9e9      	bls.n	80158fc <prvInitialiseNewTask+0x68>
 8015928:	e000      	b.n	801592c <prvInitialiseNewTask+0x98>
			{
				break;
 801592a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592e:	2200      	movs	r2, #0
 8015930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015934:	e003      	b.n	801593e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015938:	2200      	movs	r2, #0
 801593a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015940:	2b06      	cmp	r3, #6
 8015942:	d901      	bls.n	8015948 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015944:	2306      	movs	r3, #6
 8015946:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801594a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801594c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015952:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015956:	2200      	movs	r2, #0
 8015958:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595c:	3304      	adds	r3, #4
 801595e:	4618      	mov	r0, r3
 8015960:	f7ff f8ec 	bl	8014b3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015966:	3318      	adds	r3, #24
 8015968:	4618      	mov	r0, r3
 801596a:	f7ff f8e7 	bl	8014b3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015972:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015976:	f1c3 0207 	rsb	r2, r3, #7
 801597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801597c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015982:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8015984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015986:	2200      	movs	r2, #0
 8015988:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801598c:	2200      	movs	r2, #0
 801598e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015992:	2200      	movs	r2, #0
 8015994:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015998:	683a      	ldr	r2, [r7, #0]
 801599a:	68f9      	ldr	r1, [r7, #12]
 801599c:	69b8      	ldr	r0, [r7, #24]
 801599e:	f001 f89f 	bl	8016ae0 <pxPortInitialiseStack>
 80159a2:	4602      	mov	r2, r0
 80159a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80159a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d002      	beq.n	80159b4 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80159ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80159b4:	bf00      	nop
 80159b6:	3720      	adds	r7, #32
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}

080159bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80159c4:	f001 f99a 	bl	8016cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80159c8:	4b2a      	ldr	r3, [pc, #168]	; (8015a74 <prvAddNewTaskToReadyList+0xb8>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	3301      	adds	r3, #1
 80159ce:	4a29      	ldr	r2, [pc, #164]	; (8015a74 <prvAddNewTaskToReadyList+0xb8>)
 80159d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80159d2:	4b29      	ldr	r3, [pc, #164]	; (8015a78 <prvAddNewTaskToReadyList+0xbc>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d109      	bne.n	80159ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80159da:	4a27      	ldr	r2, [pc, #156]	; (8015a78 <prvAddNewTaskToReadyList+0xbc>)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80159e0:	4b24      	ldr	r3, [pc, #144]	; (8015a74 <prvAddNewTaskToReadyList+0xb8>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	2b01      	cmp	r3, #1
 80159e6:	d110      	bne.n	8015a0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80159e8:	f000 fcb4 	bl	8016354 <prvInitialiseTaskLists>
 80159ec:	e00d      	b.n	8015a0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80159ee:	4b23      	ldr	r3, [pc, #140]	; (8015a7c <prvAddNewTaskToReadyList+0xc0>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d109      	bne.n	8015a0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80159f6:	4b20      	ldr	r3, [pc, #128]	; (8015a78 <prvAddNewTaskToReadyList+0xbc>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d802      	bhi.n	8015a0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015a04:	4a1c      	ldr	r2, [pc, #112]	; (8015a78 <prvAddNewTaskToReadyList+0xbc>)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015a0a:	4b1d      	ldr	r3, [pc, #116]	; (8015a80 <prvAddNewTaskToReadyList+0xc4>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	3301      	adds	r3, #1
 8015a10:	4a1b      	ldr	r2, [pc, #108]	; (8015a80 <prvAddNewTaskToReadyList+0xc4>)
 8015a12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a18:	2201      	movs	r2, #1
 8015a1a:	409a      	lsls	r2, r3
 8015a1c:	4b19      	ldr	r3, [pc, #100]	; (8015a84 <prvAddNewTaskToReadyList+0xc8>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	4313      	orrs	r3, r2
 8015a22:	4a18      	ldr	r2, [pc, #96]	; (8015a84 <prvAddNewTaskToReadyList+0xc8>)
 8015a24:	6013      	str	r3, [r2, #0]
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	009b      	lsls	r3, r3, #2
 8015a2e:	4413      	add	r3, r2
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	4a15      	ldr	r2, [pc, #84]	; (8015a88 <prvAddNewTaskToReadyList+0xcc>)
 8015a34:	441a      	add	r2, r3
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	3304      	adds	r3, #4
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	4610      	mov	r0, r2
 8015a3e:	f7ff f88a 	bl	8014b56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015a42:	f001 f98f 	bl	8016d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015a46:	4b0d      	ldr	r3, [pc, #52]	; (8015a7c <prvAddNewTaskToReadyList+0xc0>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d00e      	beq.n	8015a6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015a4e:	4b0a      	ldr	r3, [pc, #40]	; (8015a78 <prvAddNewTaskToReadyList+0xbc>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d207      	bcs.n	8015a6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015a5c:	4b0b      	ldr	r3, [pc, #44]	; (8015a8c <prvAddNewTaskToReadyList+0xd0>)
 8015a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a62:	601a      	str	r2, [r3, #0]
 8015a64:	f3bf 8f4f 	dsb	sy
 8015a68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a6c:	bf00      	nop
 8015a6e:	3708      	adds	r7, #8
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	2000047c 	.word	0x2000047c
 8015a78:	2000037c 	.word	0x2000037c
 8015a7c:	20000488 	.word	0x20000488
 8015a80:	20000498 	.word	0x20000498
 8015a84:	20000484 	.word	0x20000484
 8015a88:	20000380 	.word	0x20000380
 8015a8c:	e000ed04 	.word	0xe000ed04

08015a90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b084      	sub	sp, #16
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8015a98:	f001 f930 	bl	8016cfc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d102      	bne.n	8015aa8 <vTaskDelete+0x18>
 8015aa2:	4b3a      	ldr	r3, [pc, #232]	; (8015b8c <vTaskDelete+0xfc>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	e000      	b.n	8015aaa <vTaskDelete+0x1a>
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	3304      	adds	r3, #4
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7ff f8ad 	bl	8014c10 <uxListRemove>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d115      	bne.n	8015ae8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ac0:	4933      	ldr	r1, [pc, #204]	; (8015b90 <vTaskDelete+0x100>)
 8015ac2:	4613      	mov	r3, r2
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	4413      	add	r3, r2
 8015ac8:	009b      	lsls	r3, r3, #2
 8015aca:	440b      	add	r3, r1
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d10a      	bne.n	8015ae8 <vTaskDelete+0x58>
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ad6:	2201      	movs	r2, #1
 8015ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8015adc:	43da      	mvns	r2, r3
 8015ade:	4b2d      	ldr	r3, [pc, #180]	; (8015b94 <vTaskDelete+0x104>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	4013      	ands	r3, r2
 8015ae4:	4a2b      	ldr	r2, [pc, #172]	; (8015b94 <vTaskDelete+0x104>)
 8015ae6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d004      	beq.n	8015afa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	3318      	adds	r3, #24
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7ff f88b 	bl	8014c10 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8015afa:	4b27      	ldr	r3, [pc, #156]	; (8015b98 <vTaskDelete+0x108>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	3301      	adds	r3, #1
 8015b00:	4a25      	ldr	r2, [pc, #148]	; (8015b98 <vTaskDelete+0x108>)
 8015b02:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8015b04:	4b21      	ldr	r3, [pc, #132]	; (8015b8c <vTaskDelete+0xfc>)
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d10b      	bne.n	8015b26 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	3304      	adds	r3, #4
 8015b12:	4619      	mov	r1, r3
 8015b14:	4821      	ldr	r0, [pc, #132]	; (8015b9c <vTaskDelete+0x10c>)
 8015b16:	f7ff f81e 	bl	8014b56 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8015b1a:	4b21      	ldr	r3, [pc, #132]	; (8015ba0 <vTaskDelete+0x110>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	3301      	adds	r3, #1
 8015b20:	4a1f      	ldr	r2, [pc, #124]	; (8015ba0 <vTaskDelete+0x110>)
 8015b22:	6013      	str	r3, [r2, #0]
 8015b24:	e009      	b.n	8015b3a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8015b26:	4b1f      	ldr	r3, [pc, #124]	; (8015ba4 <vTaskDelete+0x114>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	3b01      	subs	r3, #1
 8015b2c:	4a1d      	ldr	r2, [pc, #116]	; (8015ba4 <vTaskDelete+0x114>)
 8015b2e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8015b30:	68f8      	ldr	r0, [r7, #12]
 8015b32:	f000 fc7d 	bl	8016430 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8015b36:	f000 fcad 	bl	8016494 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8015b3a:	f001 f913 	bl	8016d64 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8015b3e:	4b1a      	ldr	r3, [pc, #104]	; (8015ba8 <vTaskDelete+0x118>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d01d      	beq.n	8015b82 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8015b46:	4b11      	ldr	r3, [pc, #68]	; (8015b8c <vTaskDelete+0xfc>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	68fa      	ldr	r2, [r7, #12]
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d118      	bne.n	8015b82 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8015b50:	4b16      	ldr	r3, [pc, #88]	; (8015bac <vTaskDelete+0x11c>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d00c      	beq.n	8015b72 <vTaskDelete+0xe2>
	__asm volatile
 8015b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b5c:	b672      	cpsid	i
 8015b5e:	f383 8811 	msr	BASEPRI, r3
 8015b62:	f3bf 8f6f 	isb	sy
 8015b66:	f3bf 8f4f 	dsb	sy
 8015b6a:	b662      	cpsie	i
 8015b6c:	60bb      	str	r3, [r7, #8]
}
 8015b6e:	bf00      	nop
 8015b70:	e7fe      	b.n	8015b70 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8015b72:	4b0f      	ldr	r3, [pc, #60]	; (8015bb0 <vTaskDelete+0x120>)
 8015b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b78:	601a      	str	r2, [r3, #0]
 8015b7a:	f3bf 8f4f 	dsb	sy
 8015b7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015b82:	bf00      	nop
 8015b84:	3710      	adds	r7, #16
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}
 8015b8a:	bf00      	nop
 8015b8c:	2000037c 	.word	0x2000037c
 8015b90:	20000380 	.word	0x20000380
 8015b94:	20000484 	.word	0x20000484
 8015b98:	20000498 	.word	0x20000498
 8015b9c:	20000450 	.word	0x20000450
 8015ba0:	20000464 	.word	0x20000464
 8015ba4:	2000047c 	.word	0x2000047c
 8015ba8:	20000488 	.word	0x20000488
 8015bac:	200004a4 	.word	0x200004a4
 8015bb0:	e000ed04 	.word	0xe000ed04

08015bb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b084      	sub	sp, #16
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d019      	beq.n	8015bfa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015bc6:	4b14      	ldr	r3, [pc, #80]	; (8015c18 <vTaskDelay+0x64>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d00c      	beq.n	8015be8 <vTaskDelay+0x34>
	__asm volatile
 8015bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd2:	b672      	cpsid	i
 8015bd4:	f383 8811 	msr	BASEPRI, r3
 8015bd8:	f3bf 8f6f 	isb	sy
 8015bdc:	f3bf 8f4f 	dsb	sy
 8015be0:	b662      	cpsie	i
 8015be2:	60bb      	str	r3, [r7, #8]
}
 8015be4:	bf00      	nop
 8015be6:	e7fe      	b.n	8015be6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8015be8:	f000 f87e 	bl	8015ce8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015bec:	2100      	movs	r1, #0
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f000 ff10 	bl	8016a14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015bf4:	f000 f886 	bl	8015d04 <xTaskResumeAll>
 8015bf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d107      	bne.n	8015c10 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8015c00:	4b06      	ldr	r3, [pc, #24]	; (8015c1c <vTaskDelay+0x68>)
 8015c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c06:	601a      	str	r2, [r3, #0]
 8015c08:	f3bf 8f4f 	dsb	sy
 8015c0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015c10:	bf00      	nop
 8015c12:	3710      	adds	r7, #16
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}
 8015c18:	200004a4 	.word	0x200004a4
 8015c1c:	e000ed04 	.word	0xe000ed04

08015c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b08a      	sub	sp, #40	; 0x28
 8015c24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015c26:	2300      	movs	r3, #0
 8015c28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015c2e:	463a      	mov	r2, r7
 8015c30:	1d39      	adds	r1, r7, #4
 8015c32:	f107 0308 	add.w	r3, r7, #8
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7ea fe06 	bl	8000848 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015c3c:	6839      	ldr	r1, [r7, #0]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	68ba      	ldr	r2, [r7, #8]
 8015c42:	9202      	str	r2, [sp, #8]
 8015c44:	9301      	str	r3, [sp, #4]
 8015c46:	2300      	movs	r3, #0
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	460a      	mov	r2, r1
 8015c4e:	4920      	ldr	r1, [pc, #128]	; (8015cd0 <vTaskStartScheduler+0xb0>)
 8015c50:	4820      	ldr	r0, [pc, #128]	; (8015cd4 <vTaskStartScheduler+0xb4>)
 8015c52:	f7ff fd77 	bl	8015744 <xTaskCreateStatic>
 8015c56:	4603      	mov	r3, r0
 8015c58:	4a1f      	ldr	r2, [pc, #124]	; (8015cd8 <vTaskStartScheduler+0xb8>)
 8015c5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015c5c:	4b1e      	ldr	r3, [pc, #120]	; (8015cd8 <vTaskStartScheduler+0xb8>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d002      	beq.n	8015c6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015c64:	2301      	movs	r3, #1
 8015c66:	617b      	str	r3, [r7, #20]
 8015c68:	e001      	b.n	8015c6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	2b01      	cmp	r3, #1
 8015c72:	d118      	bne.n	8015ca6 <vTaskStartScheduler+0x86>
	__asm volatile
 8015c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c78:	b672      	cpsid	i
 8015c7a:	f383 8811 	msr	BASEPRI, r3
 8015c7e:	f3bf 8f6f 	isb	sy
 8015c82:	f3bf 8f4f 	dsb	sy
 8015c86:	b662      	cpsie	i
 8015c88:	613b      	str	r3, [r7, #16]
}
 8015c8a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015c8c:	4b13      	ldr	r3, [pc, #76]	; (8015cdc <vTaskStartScheduler+0xbc>)
 8015c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015c94:	4b12      	ldr	r3, [pc, #72]	; (8015ce0 <vTaskStartScheduler+0xc0>)
 8015c96:	2201      	movs	r2, #1
 8015c98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015c9a:	4b12      	ldr	r3, [pc, #72]	; (8015ce4 <vTaskStartScheduler+0xc4>)
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015ca0:	f000 ffae 	bl	8016c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015ca4:	e010      	b.n	8015cc8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cac:	d10c      	bne.n	8015cc8 <vTaskStartScheduler+0xa8>
	__asm volatile
 8015cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cb2:	b672      	cpsid	i
 8015cb4:	f383 8811 	msr	BASEPRI, r3
 8015cb8:	f3bf 8f6f 	isb	sy
 8015cbc:	f3bf 8f4f 	dsb	sy
 8015cc0:	b662      	cpsie	i
 8015cc2:	60fb      	str	r3, [r7, #12]
}
 8015cc4:	bf00      	nop
 8015cc6:	e7fe      	b.n	8015cc6 <vTaskStartScheduler+0xa6>
}
 8015cc8:	bf00      	nop
 8015cca:	3718      	adds	r7, #24
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	0801a12c 	.word	0x0801a12c
 8015cd4:	08016321 	.word	0x08016321
 8015cd8:	200004a0 	.word	0x200004a0
 8015cdc:	2000049c 	.word	0x2000049c
 8015ce0:	20000488 	.word	0x20000488
 8015ce4:	20000480 	.word	0x20000480

08015ce8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015ce8:	b480      	push	{r7}
 8015cea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015cec:	4b04      	ldr	r3, [pc, #16]	; (8015d00 <vTaskSuspendAll+0x18>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	3301      	adds	r3, #1
 8015cf2:	4a03      	ldr	r2, [pc, #12]	; (8015d00 <vTaskSuspendAll+0x18>)
 8015cf4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8015cf6:	bf00      	nop
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfe:	4770      	bx	lr
 8015d00:	200004a4 	.word	0x200004a4

08015d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b084      	sub	sp, #16
 8015d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015d12:	4b42      	ldr	r3, [pc, #264]	; (8015e1c <xTaskResumeAll+0x118>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d10c      	bne.n	8015d34 <xTaskResumeAll+0x30>
	__asm volatile
 8015d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d1e:	b672      	cpsid	i
 8015d20:	f383 8811 	msr	BASEPRI, r3
 8015d24:	f3bf 8f6f 	isb	sy
 8015d28:	f3bf 8f4f 	dsb	sy
 8015d2c:	b662      	cpsie	i
 8015d2e:	603b      	str	r3, [r7, #0]
}
 8015d30:	bf00      	nop
 8015d32:	e7fe      	b.n	8015d32 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015d34:	f000 ffe2 	bl	8016cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015d38:	4b38      	ldr	r3, [pc, #224]	; (8015e1c <xTaskResumeAll+0x118>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	3b01      	subs	r3, #1
 8015d3e:	4a37      	ldr	r2, [pc, #220]	; (8015e1c <xTaskResumeAll+0x118>)
 8015d40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d42:	4b36      	ldr	r3, [pc, #216]	; (8015e1c <xTaskResumeAll+0x118>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d161      	bne.n	8015e0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015d4a:	4b35      	ldr	r3, [pc, #212]	; (8015e20 <xTaskResumeAll+0x11c>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d05d      	beq.n	8015e0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015d52:	e02e      	b.n	8015db2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d54:	4b33      	ldr	r3, [pc, #204]	; (8015e24 <xTaskResumeAll+0x120>)
 8015d56:	68db      	ldr	r3, [r3, #12]
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	3318      	adds	r3, #24
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7fe ff55 	bl	8014c10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	3304      	adds	r3, #4
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7fe ff50 	bl	8014c10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d74:	2201      	movs	r2, #1
 8015d76:	409a      	lsls	r2, r3
 8015d78:	4b2b      	ldr	r3, [pc, #172]	; (8015e28 <xTaskResumeAll+0x124>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	4313      	orrs	r3, r2
 8015d7e:	4a2a      	ldr	r2, [pc, #168]	; (8015e28 <xTaskResumeAll+0x124>)
 8015d80:	6013      	str	r3, [r2, #0]
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d86:	4613      	mov	r3, r2
 8015d88:	009b      	lsls	r3, r3, #2
 8015d8a:	4413      	add	r3, r2
 8015d8c:	009b      	lsls	r3, r3, #2
 8015d8e:	4a27      	ldr	r2, [pc, #156]	; (8015e2c <xTaskResumeAll+0x128>)
 8015d90:	441a      	add	r2, r3
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	3304      	adds	r3, #4
 8015d96:	4619      	mov	r1, r3
 8015d98:	4610      	mov	r0, r2
 8015d9a:	f7fe fedc 	bl	8014b56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015da2:	4b23      	ldr	r3, [pc, #140]	; (8015e30 <xTaskResumeAll+0x12c>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d302      	bcc.n	8015db2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015dac:	4b21      	ldr	r3, [pc, #132]	; (8015e34 <xTaskResumeAll+0x130>)
 8015dae:	2201      	movs	r2, #1
 8015db0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015db2:	4b1c      	ldr	r3, [pc, #112]	; (8015e24 <xTaskResumeAll+0x120>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d1cc      	bne.n	8015d54 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015dc0:	f000 fb68 	bl	8016494 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015dc4:	4b1c      	ldr	r3, [pc, #112]	; (8015e38 <xTaskResumeAll+0x134>)
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d010      	beq.n	8015df2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015dd0:	f000 f858 	bl	8015e84 <xTaskIncrementTick>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d002      	beq.n	8015de0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015dda:	4b16      	ldr	r3, [pc, #88]	; (8015e34 <xTaskResumeAll+0x130>)
 8015ddc:	2201      	movs	r2, #1
 8015dde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	3b01      	subs	r3, #1
 8015de4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d1f1      	bne.n	8015dd0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8015dec:	4b12      	ldr	r3, [pc, #72]	; (8015e38 <xTaskResumeAll+0x134>)
 8015dee:	2200      	movs	r2, #0
 8015df0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015df2:	4b10      	ldr	r3, [pc, #64]	; (8015e34 <xTaskResumeAll+0x130>)
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d009      	beq.n	8015e0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015dfa:	2301      	movs	r3, #1
 8015dfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015dfe:	4b0f      	ldr	r3, [pc, #60]	; (8015e3c <xTaskResumeAll+0x138>)
 8015e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e04:	601a      	str	r2, [r3, #0]
 8015e06:	f3bf 8f4f 	dsb	sy
 8015e0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015e0e:	f000 ffa9 	bl	8016d64 <vPortExitCritical>

	return xAlreadyYielded;
 8015e12:	68bb      	ldr	r3, [r7, #8]
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	3710      	adds	r7, #16
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}
 8015e1c:	200004a4 	.word	0x200004a4
 8015e20:	2000047c 	.word	0x2000047c
 8015e24:	2000043c 	.word	0x2000043c
 8015e28:	20000484 	.word	0x20000484
 8015e2c:	20000380 	.word	0x20000380
 8015e30:	2000037c 	.word	0x2000037c
 8015e34:	20000490 	.word	0x20000490
 8015e38:	2000048c 	.word	0x2000048c
 8015e3c:	e000ed04 	.word	0xe000ed04

08015e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015e40:	b480      	push	{r7}
 8015e42:	b083      	sub	sp, #12
 8015e44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015e46:	4b05      	ldr	r3, [pc, #20]	; (8015e5c <xTaskGetTickCount+0x1c>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015e4c:	687b      	ldr	r3, [r7, #4]
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	370c      	adds	r7, #12
 8015e52:	46bd      	mov	sp, r7
 8015e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e58:	4770      	bx	lr
 8015e5a:	bf00      	nop
 8015e5c:	20000480 	.word	0x20000480

08015e60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b082      	sub	sp, #8
 8015e64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e66:	f001 f831 	bl	8016ecc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015e6e:	4b04      	ldr	r3, [pc, #16]	; (8015e80 <xTaskGetTickCountFromISR+0x20>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e74:	683b      	ldr	r3, [r7, #0]
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3708      	adds	r7, #8
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	20000480 	.word	0x20000480

08015e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b086      	sub	sp, #24
 8015e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e8e:	4b4f      	ldr	r3, [pc, #316]	; (8015fcc <xTaskIncrementTick+0x148>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	f040 808a 	bne.w	8015fac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015e98:	4b4d      	ldr	r3, [pc, #308]	; (8015fd0 <xTaskIncrementTick+0x14c>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015ea0:	4a4b      	ldr	r2, [pc, #300]	; (8015fd0 <xTaskIncrementTick+0x14c>)
 8015ea2:	693b      	ldr	r3, [r7, #16]
 8015ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015ea6:	693b      	ldr	r3, [r7, #16]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d122      	bne.n	8015ef2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8015eac:	4b49      	ldr	r3, [pc, #292]	; (8015fd4 <xTaskIncrementTick+0x150>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d00c      	beq.n	8015ed0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8015eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eba:	b672      	cpsid	i
 8015ebc:	f383 8811 	msr	BASEPRI, r3
 8015ec0:	f3bf 8f6f 	isb	sy
 8015ec4:	f3bf 8f4f 	dsb	sy
 8015ec8:	b662      	cpsie	i
 8015eca:	603b      	str	r3, [r7, #0]
}
 8015ecc:	bf00      	nop
 8015ece:	e7fe      	b.n	8015ece <xTaskIncrementTick+0x4a>
 8015ed0:	4b40      	ldr	r3, [pc, #256]	; (8015fd4 <xTaskIncrementTick+0x150>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	60fb      	str	r3, [r7, #12]
 8015ed6:	4b40      	ldr	r3, [pc, #256]	; (8015fd8 <xTaskIncrementTick+0x154>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	4a3e      	ldr	r2, [pc, #248]	; (8015fd4 <xTaskIncrementTick+0x150>)
 8015edc:	6013      	str	r3, [r2, #0]
 8015ede:	4a3e      	ldr	r2, [pc, #248]	; (8015fd8 <xTaskIncrementTick+0x154>)
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	6013      	str	r3, [r2, #0]
 8015ee4:	4b3d      	ldr	r3, [pc, #244]	; (8015fdc <xTaskIncrementTick+0x158>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	3301      	adds	r3, #1
 8015eea:	4a3c      	ldr	r2, [pc, #240]	; (8015fdc <xTaskIncrementTick+0x158>)
 8015eec:	6013      	str	r3, [r2, #0]
 8015eee:	f000 fad1 	bl	8016494 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015ef2:	4b3b      	ldr	r3, [pc, #236]	; (8015fe0 <xTaskIncrementTick+0x15c>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	693a      	ldr	r2, [r7, #16]
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	d348      	bcc.n	8015f8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015efc:	4b35      	ldr	r3, [pc, #212]	; (8015fd4 <xTaskIncrementTick+0x150>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d104      	bne.n	8015f10 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f06:	4b36      	ldr	r3, [pc, #216]	; (8015fe0 <xTaskIncrementTick+0x15c>)
 8015f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f0c:	601a      	str	r2, [r3, #0]
					break;
 8015f0e:	e03e      	b.n	8015f8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f10:	4b30      	ldr	r3, [pc, #192]	; (8015fd4 <xTaskIncrementTick+0x150>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	68db      	ldr	r3, [r3, #12]
 8015f16:	68db      	ldr	r3, [r3, #12]
 8015f18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015f20:	693a      	ldr	r2, [r7, #16]
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d203      	bcs.n	8015f30 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015f28:	4a2d      	ldr	r2, [pc, #180]	; (8015fe0 <xTaskIncrementTick+0x15c>)
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015f2e:	e02e      	b.n	8015f8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	3304      	adds	r3, #4
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7fe fe6b 	bl	8014c10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d004      	beq.n	8015f4c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	3318      	adds	r3, #24
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7fe fe62 	bl	8014c10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f50:	2201      	movs	r2, #1
 8015f52:	409a      	lsls	r2, r3
 8015f54:	4b23      	ldr	r3, [pc, #140]	; (8015fe4 <xTaskIncrementTick+0x160>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4313      	orrs	r3, r2
 8015f5a:	4a22      	ldr	r2, [pc, #136]	; (8015fe4 <xTaskIncrementTick+0x160>)
 8015f5c:	6013      	str	r3, [r2, #0]
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f62:	4613      	mov	r3, r2
 8015f64:	009b      	lsls	r3, r3, #2
 8015f66:	4413      	add	r3, r2
 8015f68:	009b      	lsls	r3, r3, #2
 8015f6a:	4a1f      	ldr	r2, [pc, #124]	; (8015fe8 <xTaskIncrementTick+0x164>)
 8015f6c:	441a      	add	r2, r3
 8015f6e:	68bb      	ldr	r3, [r7, #8]
 8015f70:	3304      	adds	r3, #4
 8015f72:	4619      	mov	r1, r3
 8015f74:	4610      	mov	r0, r2
 8015f76:	f7fe fdee 	bl	8014b56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015f7a:	68bb      	ldr	r3, [r7, #8]
 8015f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f7e:	4b1b      	ldr	r3, [pc, #108]	; (8015fec <xTaskIncrementTick+0x168>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d3b9      	bcc.n	8015efc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8015f88:	2301      	movs	r3, #1
 8015f8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f8c:	e7b6      	b.n	8015efc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015f8e:	4b17      	ldr	r3, [pc, #92]	; (8015fec <xTaskIncrementTick+0x168>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f94:	4914      	ldr	r1, [pc, #80]	; (8015fe8 <xTaskIncrementTick+0x164>)
 8015f96:	4613      	mov	r3, r2
 8015f98:	009b      	lsls	r3, r3, #2
 8015f9a:	4413      	add	r3, r2
 8015f9c:	009b      	lsls	r3, r3, #2
 8015f9e:	440b      	add	r3, r1
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	2b01      	cmp	r3, #1
 8015fa4:	d907      	bls.n	8015fb6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8015fa6:	2301      	movs	r3, #1
 8015fa8:	617b      	str	r3, [r7, #20]
 8015faa:	e004      	b.n	8015fb6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015fac:	4b10      	ldr	r3, [pc, #64]	; (8015ff0 <xTaskIncrementTick+0x16c>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	4a0f      	ldr	r2, [pc, #60]	; (8015ff0 <xTaskIncrementTick+0x16c>)
 8015fb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015fb6:	4b0f      	ldr	r3, [pc, #60]	; (8015ff4 <xTaskIncrementTick+0x170>)
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d001      	beq.n	8015fc2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015fc2:	697b      	ldr	r3, [r7, #20]
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3718      	adds	r7, #24
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}
 8015fcc:	200004a4 	.word	0x200004a4
 8015fd0:	20000480 	.word	0x20000480
 8015fd4:	20000434 	.word	0x20000434
 8015fd8:	20000438 	.word	0x20000438
 8015fdc:	20000494 	.word	0x20000494
 8015fe0:	2000049c 	.word	0x2000049c
 8015fe4:	20000484 	.word	0x20000484
 8015fe8:	20000380 	.word	0x20000380
 8015fec:	2000037c 	.word	0x2000037c
 8015ff0:	2000048c 	.word	0x2000048c
 8015ff4:	20000490 	.word	0x20000490

08015ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b088      	sub	sp, #32
 8015ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015ffe:	4b3a      	ldr	r3, [pc, #232]	; (80160e8 <vTaskSwitchContext+0xf0>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d003      	beq.n	801600e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016006:	4b39      	ldr	r3, [pc, #228]	; (80160ec <vTaskSwitchContext+0xf4>)
 8016008:	2201      	movs	r2, #1
 801600a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801600c:	e068      	b.n	80160e0 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801600e:	4b37      	ldr	r3, [pc, #220]	; (80160ec <vTaskSwitchContext+0xf4>)
 8016010:	2200      	movs	r2, #0
 8016012:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016014:	4b36      	ldr	r3, [pc, #216]	; (80160f0 <vTaskSwitchContext+0xf8>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801601a:	61fb      	str	r3, [r7, #28]
 801601c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8016020:	61bb      	str	r3, [r7, #24]
 8016022:	69fb      	ldr	r3, [r7, #28]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	69ba      	ldr	r2, [r7, #24]
 8016028:	429a      	cmp	r2, r3
 801602a:	d111      	bne.n	8016050 <vTaskSwitchContext+0x58>
 801602c:	69fb      	ldr	r3, [r7, #28]
 801602e:	3304      	adds	r3, #4
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	69ba      	ldr	r2, [r7, #24]
 8016034:	429a      	cmp	r2, r3
 8016036:	d10b      	bne.n	8016050 <vTaskSwitchContext+0x58>
 8016038:	69fb      	ldr	r3, [r7, #28]
 801603a:	3308      	adds	r3, #8
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	69ba      	ldr	r2, [r7, #24]
 8016040:	429a      	cmp	r2, r3
 8016042:	d105      	bne.n	8016050 <vTaskSwitchContext+0x58>
 8016044:	69fb      	ldr	r3, [r7, #28]
 8016046:	330c      	adds	r3, #12
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	69ba      	ldr	r2, [r7, #24]
 801604c:	429a      	cmp	r2, r3
 801604e:	d008      	beq.n	8016062 <vTaskSwitchContext+0x6a>
 8016050:	4b27      	ldr	r3, [pc, #156]	; (80160f0 <vTaskSwitchContext+0xf8>)
 8016052:	681a      	ldr	r2, [r3, #0]
 8016054:	4b26      	ldr	r3, [pc, #152]	; (80160f0 <vTaskSwitchContext+0xf8>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	3334      	adds	r3, #52	; 0x34
 801605a:	4619      	mov	r1, r3
 801605c:	4610      	mov	r0, r2
 801605e:	f7ea fbe0 	bl	8000822 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016062:	4b24      	ldr	r3, [pc, #144]	; (80160f4 <vTaskSwitchContext+0xfc>)
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	fab3 f383 	clz	r3, r3
 801606e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016070:	7afb      	ldrb	r3, [r7, #11]
 8016072:	f1c3 031f 	rsb	r3, r3, #31
 8016076:	617b      	str	r3, [r7, #20]
 8016078:	491f      	ldr	r1, [pc, #124]	; (80160f8 <vTaskSwitchContext+0x100>)
 801607a:	697a      	ldr	r2, [r7, #20]
 801607c:	4613      	mov	r3, r2
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	4413      	add	r3, r2
 8016082:	009b      	lsls	r3, r3, #2
 8016084:	440b      	add	r3, r1
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d10c      	bne.n	80160a6 <vTaskSwitchContext+0xae>
	__asm volatile
 801608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016090:	b672      	cpsid	i
 8016092:	f383 8811 	msr	BASEPRI, r3
 8016096:	f3bf 8f6f 	isb	sy
 801609a:	f3bf 8f4f 	dsb	sy
 801609e:	b662      	cpsie	i
 80160a0:	607b      	str	r3, [r7, #4]
}
 80160a2:	bf00      	nop
 80160a4:	e7fe      	b.n	80160a4 <vTaskSwitchContext+0xac>
 80160a6:	697a      	ldr	r2, [r7, #20]
 80160a8:	4613      	mov	r3, r2
 80160aa:	009b      	lsls	r3, r3, #2
 80160ac:	4413      	add	r3, r2
 80160ae:	009b      	lsls	r3, r3, #2
 80160b0:	4a11      	ldr	r2, [pc, #68]	; (80160f8 <vTaskSwitchContext+0x100>)
 80160b2:	4413      	add	r3, r2
 80160b4:	613b      	str	r3, [r7, #16]
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	685a      	ldr	r2, [r3, #4]
 80160bc:	693b      	ldr	r3, [r7, #16]
 80160be:	605a      	str	r2, [r3, #4]
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	685a      	ldr	r2, [r3, #4]
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	3308      	adds	r3, #8
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d104      	bne.n	80160d6 <vTaskSwitchContext+0xde>
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	685b      	ldr	r3, [r3, #4]
 80160d0:	685a      	ldr	r2, [r3, #4]
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	605a      	str	r2, [r3, #4]
 80160d6:	693b      	ldr	r3, [r7, #16]
 80160d8:	685b      	ldr	r3, [r3, #4]
 80160da:	68db      	ldr	r3, [r3, #12]
 80160dc:	4a04      	ldr	r2, [pc, #16]	; (80160f0 <vTaskSwitchContext+0xf8>)
 80160de:	6013      	str	r3, [r2, #0]
}
 80160e0:	bf00      	nop
 80160e2:	3720      	adds	r7, #32
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	200004a4 	.word	0x200004a4
 80160ec:	20000490 	.word	0x20000490
 80160f0:	2000037c 	.word	0x2000037c
 80160f4:	20000484 	.word	0x20000484
 80160f8:	20000380 	.word	0x20000380

080160fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b084      	sub	sp, #16
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
 8016104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d10c      	bne.n	8016126 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016110:	b672      	cpsid	i
 8016112:	f383 8811 	msr	BASEPRI, r3
 8016116:	f3bf 8f6f 	isb	sy
 801611a:	f3bf 8f4f 	dsb	sy
 801611e:	b662      	cpsie	i
 8016120:	60fb      	str	r3, [r7, #12]
}
 8016122:	bf00      	nop
 8016124:	e7fe      	b.n	8016124 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016126:	4b07      	ldr	r3, [pc, #28]	; (8016144 <vTaskPlaceOnEventList+0x48>)
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	3318      	adds	r3, #24
 801612c:	4619      	mov	r1, r3
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f7fe fd35 	bl	8014b9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016134:	2101      	movs	r1, #1
 8016136:	6838      	ldr	r0, [r7, #0]
 8016138:	f000 fc6c 	bl	8016a14 <prvAddCurrentTaskToDelayedList>
}
 801613c:	bf00      	nop
 801613e:	3710      	adds	r7, #16
 8016140:	46bd      	mov	sp, r7
 8016142:	bd80      	pop	{r7, pc}
 8016144:	2000037c 	.word	0x2000037c

08016148 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b086      	sub	sp, #24
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	68db      	ldr	r3, [r3, #12]
 8016154:	68db      	ldr	r3, [r3, #12]
 8016156:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d10c      	bne.n	8016178 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016162:	b672      	cpsid	i
 8016164:	f383 8811 	msr	BASEPRI, r3
 8016168:	f3bf 8f6f 	isb	sy
 801616c:	f3bf 8f4f 	dsb	sy
 8016170:	b662      	cpsie	i
 8016172:	60fb      	str	r3, [r7, #12]
}
 8016174:	bf00      	nop
 8016176:	e7fe      	b.n	8016176 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	3318      	adds	r3, #24
 801617c:	4618      	mov	r0, r3
 801617e:	f7fe fd47 	bl	8014c10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016182:	4b1d      	ldr	r3, [pc, #116]	; (80161f8 <xTaskRemoveFromEventList+0xb0>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d11c      	bne.n	80161c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801618a:	693b      	ldr	r3, [r7, #16]
 801618c:	3304      	adds	r3, #4
 801618e:	4618      	mov	r0, r3
 8016190:	f7fe fd3e 	bl	8014c10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016198:	2201      	movs	r2, #1
 801619a:	409a      	lsls	r2, r3
 801619c:	4b17      	ldr	r3, [pc, #92]	; (80161fc <xTaskRemoveFromEventList+0xb4>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	4313      	orrs	r3, r2
 80161a2:	4a16      	ldr	r2, [pc, #88]	; (80161fc <xTaskRemoveFromEventList+0xb4>)
 80161a4:	6013      	str	r3, [r2, #0]
 80161a6:	693b      	ldr	r3, [r7, #16]
 80161a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161aa:	4613      	mov	r3, r2
 80161ac:	009b      	lsls	r3, r3, #2
 80161ae:	4413      	add	r3, r2
 80161b0:	009b      	lsls	r3, r3, #2
 80161b2:	4a13      	ldr	r2, [pc, #76]	; (8016200 <xTaskRemoveFromEventList+0xb8>)
 80161b4:	441a      	add	r2, r3
 80161b6:	693b      	ldr	r3, [r7, #16]
 80161b8:	3304      	adds	r3, #4
 80161ba:	4619      	mov	r1, r3
 80161bc:	4610      	mov	r0, r2
 80161be:	f7fe fcca 	bl	8014b56 <vListInsertEnd>
 80161c2:	e005      	b.n	80161d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	3318      	adds	r3, #24
 80161c8:	4619      	mov	r1, r3
 80161ca:	480e      	ldr	r0, [pc, #56]	; (8016204 <xTaskRemoveFromEventList+0xbc>)
 80161cc:	f7fe fcc3 	bl	8014b56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161d4:	4b0c      	ldr	r3, [pc, #48]	; (8016208 <xTaskRemoveFromEventList+0xc0>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161da:	429a      	cmp	r2, r3
 80161dc:	d905      	bls.n	80161ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80161de:	2301      	movs	r3, #1
 80161e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80161e2:	4b0a      	ldr	r3, [pc, #40]	; (801620c <xTaskRemoveFromEventList+0xc4>)
 80161e4:	2201      	movs	r2, #1
 80161e6:	601a      	str	r2, [r3, #0]
 80161e8:	e001      	b.n	80161ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80161ea:	2300      	movs	r3, #0
 80161ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80161ee:	697b      	ldr	r3, [r7, #20]
}
 80161f0:	4618      	mov	r0, r3
 80161f2:	3718      	adds	r7, #24
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	200004a4 	.word	0x200004a4
 80161fc:	20000484 	.word	0x20000484
 8016200:	20000380 	.word	0x20000380
 8016204:	2000043c 	.word	0x2000043c
 8016208:	2000037c 	.word	0x2000037c
 801620c:	20000490 	.word	0x20000490

08016210 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016210:	b480      	push	{r7}
 8016212:	b083      	sub	sp, #12
 8016214:	af00      	add	r7, sp, #0
 8016216:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016218:	4b06      	ldr	r3, [pc, #24]	; (8016234 <vTaskInternalSetTimeOutState+0x24>)
 801621a:	681a      	ldr	r2, [r3, #0]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016220:	4b05      	ldr	r3, [pc, #20]	; (8016238 <vTaskInternalSetTimeOutState+0x28>)
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	605a      	str	r2, [r3, #4]
}
 8016228:	bf00      	nop
 801622a:	370c      	adds	r7, #12
 801622c:	46bd      	mov	sp, r7
 801622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016232:	4770      	bx	lr
 8016234:	20000494 	.word	0x20000494
 8016238:	20000480 	.word	0x20000480

0801623c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b088      	sub	sp, #32
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
 8016244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d10c      	bne.n	8016266 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016250:	b672      	cpsid	i
 8016252:	f383 8811 	msr	BASEPRI, r3
 8016256:	f3bf 8f6f 	isb	sy
 801625a:	f3bf 8f4f 	dsb	sy
 801625e:	b662      	cpsie	i
 8016260:	613b      	str	r3, [r7, #16]
}
 8016262:	bf00      	nop
 8016264:	e7fe      	b.n	8016264 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d10c      	bne.n	8016286 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016270:	b672      	cpsid	i
 8016272:	f383 8811 	msr	BASEPRI, r3
 8016276:	f3bf 8f6f 	isb	sy
 801627a:	f3bf 8f4f 	dsb	sy
 801627e:	b662      	cpsie	i
 8016280:	60fb      	str	r3, [r7, #12]
}
 8016282:	bf00      	nop
 8016284:	e7fe      	b.n	8016284 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8016286:	f000 fd39 	bl	8016cfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801628a:	4b1d      	ldr	r3, [pc, #116]	; (8016300 <xTaskCheckForTimeOut+0xc4>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	685b      	ldr	r3, [r3, #4]
 8016294:	69ba      	ldr	r2, [r7, #24]
 8016296:	1ad3      	subs	r3, r2, r3
 8016298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80162a2:	d102      	bne.n	80162aa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80162a4:	2300      	movs	r3, #0
 80162a6:	61fb      	str	r3, [r7, #28]
 80162a8:	e023      	b.n	80162f2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681a      	ldr	r2, [r3, #0]
 80162ae:	4b15      	ldr	r3, [pc, #84]	; (8016304 <xTaskCheckForTimeOut+0xc8>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d007      	beq.n	80162c6 <xTaskCheckForTimeOut+0x8a>
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	69ba      	ldr	r2, [r7, #24]
 80162bc:	429a      	cmp	r2, r3
 80162be:	d302      	bcc.n	80162c6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80162c0:	2301      	movs	r3, #1
 80162c2:	61fb      	str	r3, [r7, #28]
 80162c4:	e015      	b.n	80162f2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	697a      	ldr	r2, [r7, #20]
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d20b      	bcs.n	80162e8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	681a      	ldr	r2, [r3, #0]
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	1ad2      	subs	r2, r2, r3
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f7ff ff97 	bl	8016210 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80162e2:	2300      	movs	r3, #0
 80162e4:	61fb      	str	r3, [r7, #28]
 80162e6:	e004      	b.n	80162f2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80162e8:	683b      	ldr	r3, [r7, #0]
 80162ea:	2200      	movs	r2, #0
 80162ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80162ee:	2301      	movs	r3, #1
 80162f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80162f2:	f000 fd37 	bl	8016d64 <vPortExitCritical>

	return xReturn;
 80162f6:	69fb      	ldr	r3, [r7, #28]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3720      	adds	r7, #32
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	20000480 	.word	0x20000480
 8016304:	20000494 	.word	0x20000494

08016308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016308:	b480      	push	{r7}
 801630a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801630c:	4b03      	ldr	r3, [pc, #12]	; (801631c <vTaskMissedYield+0x14>)
 801630e:	2201      	movs	r2, #1
 8016310:	601a      	str	r2, [r3, #0]
}
 8016312:	bf00      	nop
 8016314:	46bd      	mov	sp, r7
 8016316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631a:	4770      	bx	lr
 801631c:	20000490 	.word	0x20000490

08016320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016328:	f000 f854 	bl	80163d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801632c:	4b07      	ldr	r3, [pc, #28]	; (801634c <prvIdleTask+0x2c>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	2b01      	cmp	r3, #1
 8016332:	d907      	bls.n	8016344 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016334:	4b06      	ldr	r3, [pc, #24]	; (8016350 <prvIdleTask+0x30>)
 8016336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801633a:	601a      	str	r2, [r3, #0]
 801633c:	f3bf 8f4f 	dsb	sy
 8016340:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016344:	f7ea fa66 	bl	8000814 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016348:	e7ee      	b.n	8016328 <prvIdleTask+0x8>
 801634a:	bf00      	nop
 801634c:	20000380 	.word	0x20000380
 8016350:	e000ed04 	.word	0xe000ed04

08016354 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b082      	sub	sp, #8
 8016358:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801635a:	2300      	movs	r3, #0
 801635c:	607b      	str	r3, [r7, #4]
 801635e:	e00c      	b.n	801637a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016360:	687a      	ldr	r2, [r7, #4]
 8016362:	4613      	mov	r3, r2
 8016364:	009b      	lsls	r3, r3, #2
 8016366:	4413      	add	r3, r2
 8016368:	009b      	lsls	r3, r3, #2
 801636a:	4a12      	ldr	r2, [pc, #72]	; (80163b4 <prvInitialiseTaskLists+0x60>)
 801636c:	4413      	add	r3, r2
 801636e:	4618      	mov	r0, r3
 8016370:	f7fe fbc4 	bl	8014afc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	3301      	adds	r3, #1
 8016378:	607b      	str	r3, [r7, #4]
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2b06      	cmp	r3, #6
 801637e:	d9ef      	bls.n	8016360 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016380:	480d      	ldr	r0, [pc, #52]	; (80163b8 <prvInitialiseTaskLists+0x64>)
 8016382:	f7fe fbbb 	bl	8014afc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016386:	480d      	ldr	r0, [pc, #52]	; (80163bc <prvInitialiseTaskLists+0x68>)
 8016388:	f7fe fbb8 	bl	8014afc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801638c:	480c      	ldr	r0, [pc, #48]	; (80163c0 <prvInitialiseTaskLists+0x6c>)
 801638e:	f7fe fbb5 	bl	8014afc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016392:	480c      	ldr	r0, [pc, #48]	; (80163c4 <prvInitialiseTaskLists+0x70>)
 8016394:	f7fe fbb2 	bl	8014afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016398:	480b      	ldr	r0, [pc, #44]	; (80163c8 <prvInitialiseTaskLists+0x74>)
 801639a:	f7fe fbaf 	bl	8014afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801639e:	4b0b      	ldr	r3, [pc, #44]	; (80163cc <prvInitialiseTaskLists+0x78>)
 80163a0:	4a05      	ldr	r2, [pc, #20]	; (80163b8 <prvInitialiseTaskLists+0x64>)
 80163a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80163a4:	4b0a      	ldr	r3, [pc, #40]	; (80163d0 <prvInitialiseTaskLists+0x7c>)
 80163a6:	4a05      	ldr	r2, [pc, #20]	; (80163bc <prvInitialiseTaskLists+0x68>)
 80163a8:	601a      	str	r2, [r3, #0]
}
 80163aa:	bf00      	nop
 80163ac:	3708      	adds	r7, #8
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	20000380 	.word	0x20000380
 80163b8:	2000040c 	.word	0x2000040c
 80163bc:	20000420 	.word	0x20000420
 80163c0:	2000043c 	.word	0x2000043c
 80163c4:	20000450 	.word	0x20000450
 80163c8:	20000468 	.word	0x20000468
 80163cc:	20000434 	.word	0x20000434
 80163d0:	20000438 	.word	0x20000438

080163d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b082      	sub	sp, #8
 80163d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80163da:	e019      	b.n	8016410 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80163dc:	f000 fc8e 	bl	8016cfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163e0:	4b10      	ldr	r3, [pc, #64]	; (8016424 <prvCheckTasksWaitingTermination+0x50>)
 80163e2:	68db      	ldr	r3, [r3, #12]
 80163e4:	68db      	ldr	r3, [r3, #12]
 80163e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	3304      	adds	r3, #4
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7fe fc0f 	bl	8014c10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80163f2:	4b0d      	ldr	r3, [pc, #52]	; (8016428 <prvCheckTasksWaitingTermination+0x54>)
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	3b01      	subs	r3, #1
 80163f8:	4a0b      	ldr	r2, [pc, #44]	; (8016428 <prvCheckTasksWaitingTermination+0x54>)
 80163fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80163fc:	4b0b      	ldr	r3, [pc, #44]	; (801642c <prvCheckTasksWaitingTermination+0x58>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	3b01      	subs	r3, #1
 8016402:	4a0a      	ldr	r2, [pc, #40]	; (801642c <prvCheckTasksWaitingTermination+0x58>)
 8016404:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016406:	f000 fcad 	bl	8016d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	f000 f810 	bl	8016430 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016410:	4b06      	ldr	r3, [pc, #24]	; (801642c <prvCheckTasksWaitingTermination+0x58>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d1e1      	bne.n	80163dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016418:	bf00      	nop
 801641a:	bf00      	nop
 801641c:	3708      	adds	r7, #8
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	20000450 	.word	0x20000450
 8016428:	2000047c 	.word	0x2000047c
 801642c:	20000464 	.word	0x20000464

08016430 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801643e:	2b00      	cmp	r3, #0
 8016440:	d108      	bne.n	8016454 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016446:	4618      	mov	r0, r3
 8016448:	f000 fe54 	bl	80170f4 <vPortFree>
				vPortFree( pxTCB );
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f000 fe51 	bl	80170f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016452:	e01a      	b.n	801648a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801645a:	2b01      	cmp	r3, #1
 801645c:	d103      	bne.n	8016466 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f000 fe48 	bl	80170f4 <vPortFree>
	}
 8016464:	e011      	b.n	801648a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801646c:	2b02      	cmp	r3, #2
 801646e:	d00c      	beq.n	801648a <prvDeleteTCB+0x5a>
	__asm volatile
 8016470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016474:	b672      	cpsid	i
 8016476:	f383 8811 	msr	BASEPRI, r3
 801647a:	f3bf 8f6f 	isb	sy
 801647e:	f3bf 8f4f 	dsb	sy
 8016482:	b662      	cpsie	i
 8016484:	60fb      	str	r3, [r7, #12]
}
 8016486:	bf00      	nop
 8016488:	e7fe      	b.n	8016488 <prvDeleteTCB+0x58>
	}
 801648a:	bf00      	nop
 801648c:	3710      	adds	r7, #16
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
	...

08016494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016494:	b480      	push	{r7}
 8016496:	b083      	sub	sp, #12
 8016498:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801649a:	4b0c      	ldr	r3, [pc, #48]	; (80164cc <prvResetNextTaskUnblockTime+0x38>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d104      	bne.n	80164ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80164a4:	4b0a      	ldr	r3, [pc, #40]	; (80164d0 <prvResetNextTaskUnblockTime+0x3c>)
 80164a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80164aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80164ac:	e008      	b.n	80164c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164ae:	4b07      	ldr	r3, [pc, #28]	; (80164cc <prvResetNextTaskUnblockTime+0x38>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	68db      	ldr	r3, [r3, #12]
 80164b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	4a04      	ldr	r2, [pc, #16]	; (80164d0 <prvResetNextTaskUnblockTime+0x3c>)
 80164be:	6013      	str	r3, [r2, #0]
}
 80164c0:	bf00      	nop
 80164c2:	370c      	adds	r7, #12
 80164c4:	46bd      	mov	sp, r7
 80164c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ca:	4770      	bx	lr
 80164cc:	20000434 	.word	0x20000434
 80164d0:	2000049c 	.word	0x2000049c

080164d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80164d4:	b480      	push	{r7}
 80164d6:	b083      	sub	sp, #12
 80164d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80164da:	4b0b      	ldr	r3, [pc, #44]	; (8016508 <xTaskGetSchedulerState+0x34>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d102      	bne.n	80164e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80164e2:	2301      	movs	r3, #1
 80164e4:	607b      	str	r3, [r7, #4]
 80164e6:	e008      	b.n	80164fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164e8:	4b08      	ldr	r3, [pc, #32]	; (801650c <xTaskGetSchedulerState+0x38>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d102      	bne.n	80164f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80164f0:	2302      	movs	r3, #2
 80164f2:	607b      	str	r3, [r7, #4]
 80164f4:	e001      	b.n	80164fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80164f6:	2300      	movs	r3, #0
 80164f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80164fa:	687b      	ldr	r3, [r7, #4]
	}
 80164fc:	4618      	mov	r0, r3
 80164fe:	370c      	adds	r7, #12
 8016500:	46bd      	mov	sp, r7
 8016502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016506:	4770      	bx	lr
 8016508:	20000488 	.word	0x20000488
 801650c:	200004a4 	.word	0x200004a4

08016510 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016510:	b580      	push	{r7, lr}
 8016512:	b086      	sub	sp, #24
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801651c:	2300      	movs	r3, #0
 801651e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d072      	beq.n	801660c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016526:	4b3c      	ldr	r3, [pc, #240]	; (8016618 <xTaskPriorityDisinherit+0x108>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	693a      	ldr	r2, [r7, #16]
 801652c:	429a      	cmp	r2, r3
 801652e:	d00c      	beq.n	801654a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8016530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016534:	b672      	cpsid	i
 8016536:	f383 8811 	msr	BASEPRI, r3
 801653a:	f3bf 8f6f 	isb	sy
 801653e:	f3bf 8f4f 	dsb	sy
 8016542:	b662      	cpsie	i
 8016544:	60fb      	str	r3, [r7, #12]
}
 8016546:	bf00      	nop
 8016548:	e7fe      	b.n	8016548 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801654a:	693b      	ldr	r3, [r7, #16]
 801654c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801654e:	2b00      	cmp	r3, #0
 8016550:	d10c      	bne.n	801656c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8016552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016556:	b672      	cpsid	i
 8016558:	f383 8811 	msr	BASEPRI, r3
 801655c:	f3bf 8f6f 	isb	sy
 8016560:	f3bf 8f4f 	dsb	sy
 8016564:	b662      	cpsie	i
 8016566:	60bb      	str	r3, [r7, #8]
}
 8016568:	bf00      	nop
 801656a:	e7fe      	b.n	801656a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801656c:	693b      	ldr	r3, [r7, #16]
 801656e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016570:	1e5a      	subs	r2, r3, #1
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801657e:	429a      	cmp	r2, r3
 8016580:	d044      	beq.n	801660c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016586:	2b00      	cmp	r3, #0
 8016588:	d140      	bne.n	801660c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	3304      	adds	r3, #4
 801658e:	4618      	mov	r0, r3
 8016590:	f7fe fb3e 	bl	8014c10 <uxListRemove>
 8016594:	4603      	mov	r3, r0
 8016596:	2b00      	cmp	r3, #0
 8016598:	d115      	bne.n	80165c6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801659a:	693b      	ldr	r3, [r7, #16]
 801659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801659e:	491f      	ldr	r1, [pc, #124]	; (801661c <xTaskPriorityDisinherit+0x10c>)
 80165a0:	4613      	mov	r3, r2
 80165a2:	009b      	lsls	r3, r3, #2
 80165a4:	4413      	add	r3, r2
 80165a6:	009b      	lsls	r3, r3, #2
 80165a8:	440b      	add	r3, r1
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d10a      	bne.n	80165c6 <xTaskPriorityDisinherit+0xb6>
 80165b0:	693b      	ldr	r3, [r7, #16]
 80165b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165b4:	2201      	movs	r2, #1
 80165b6:	fa02 f303 	lsl.w	r3, r2, r3
 80165ba:	43da      	mvns	r2, r3
 80165bc:	4b18      	ldr	r3, [pc, #96]	; (8016620 <xTaskPriorityDisinherit+0x110>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4013      	ands	r3, r2
 80165c2:	4a17      	ldr	r2, [pc, #92]	; (8016620 <xTaskPriorityDisinherit+0x110>)
 80165c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80165ca:	693b      	ldr	r3, [r7, #16]
 80165cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165ce:	693b      	ldr	r3, [r7, #16]
 80165d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165d2:	f1c3 0207 	rsb	r2, r3, #7
 80165d6:	693b      	ldr	r3, [r7, #16]
 80165d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165de:	2201      	movs	r2, #1
 80165e0:	409a      	lsls	r2, r3
 80165e2:	4b0f      	ldr	r3, [pc, #60]	; (8016620 <xTaskPriorityDisinherit+0x110>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	4313      	orrs	r3, r2
 80165e8:	4a0d      	ldr	r2, [pc, #52]	; (8016620 <xTaskPriorityDisinherit+0x110>)
 80165ea:	6013      	str	r3, [r2, #0]
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165f0:	4613      	mov	r3, r2
 80165f2:	009b      	lsls	r3, r3, #2
 80165f4:	4413      	add	r3, r2
 80165f6:	009b      	lsls	r3, r3, #2
 80165f8:	4a08      	ldr	r2, [pc, #32]	; (801661c <xTaskPriorityDisinherit+0x10c>)
 80165fa:	441a      	add	r2, r3
 80165fc:	693b      	ldr	r3, [r7, #16]
 80165fe:	3304      	adds	r3, #4
 8016600:	4619      	mov	r1, r3
 8016602:	4610      	mov	r0, r2
 8016604:	f7fe faa7 	bl	8014b56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016608:	2301      	movs	r3, #1
 801660a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801660c:	697b      	ldr	r3, [r7, #20]
	}
 801660e:	4618      	mov	r0, r3
 8016610:	3718      	adds	r7, #24
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	2000037c 	.word	0x2000037c
 801661c:	20000380 	.word	0x20000380
 8016620:	20000484 	.word	0x20000484

08016624 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8016624:	b580      	push	{r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af00      	add	r7, sp, #0
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	607a      	str	r2, [r7, #4]
 8016630:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8016632:	f000 fb63 	bl	8016cfc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016636:	4b26      	ldr	r3, [pc, #152]	; (80166d0 <xTaskNotifyWait+0xac>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801663e:	b2db      	uxtb	r3, r3
 8016640:	2b02      	cmp	r3, #2
 8016642:	d01a      	beq.n	801667a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8016644:	4b22      	ldr	r3, [pc, #136]	; (80166d0 <xTaskNotifyWait+0xac>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801664a:	68fa      	ldr	r2, [r7, #12]
 801664c:	43d2      	mvns	r2, r2
 801664e:	400a      	ands	r2, r1
 8016650:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016652:	4b1f      	ldr	r3, [pc, #124]	; (80166d0 <xTaskNotifyWait+0xac>)
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	2201      	movs	r2, #1
 8016658:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 801665c:	683b      	ldr	r3, [r7, #0]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d00b      	beq.n	801667a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016662:	2101      	movs	r1, #1
 8016664:	6838      	ldr	r0, [r7, #0]
 8016666:	f000 f9d5 	bl	8016a14 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801666a:	4b1a      	ldr	r3, [pc, #104]	; (80166d4 <xTaskNotifyWait+0xb0>)
 801666c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016670:	601a      	str	r2, [r3, #0]
 8016672:	f3bf 8f4f 	dsb	sy
 8016676:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801667a:	f000 fb73 	bl	8016d64 <vPortExitCritical>

		taskENTER_CRITICAL();
 801667e:	f000 fb3d 	bl	8016cfc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d004      	beq.n	8016692 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8016688:	4b11      	ldr	r3, [pc, #68]	; (80166d0 <xTaskNotifyWait+0xac>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016692:	4b0f      	ldr	r3, [pc, #60]	; (80166d0 <xTaskNotifyWait+0xac>)
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801669a:	b2db      	uxtb	r3, r3
 801669c:	2b02      	cmp	r3, #2
 801669e:	d002      	beq.n	80166a6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80166a0:	2300      	movs	r3, #0
 80166a2:	617b      	str	r3, [r7, #20]
 80166a4:	e008      	b.n	80166b8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80166a6:	4b0a      	ldr	r3, [pc, #40]	; (80166d0 <xTaskNotifyWait+0xac>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80166ac:	68ba      	ldr	r2, [r7, #8]
 80166ae:	43d2      	mvns	r2, r2
 80166b0:	400a      	ands	r2, r1
 80166b2:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80166b4:	2301      	movs	r3, #1
 80166b6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80166b8:	4b05      	ldr	r3, [pc, #20]	; (80166d0 <xTaskNotifyWait+0xac>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2200      	movs	r2, #0
 80166be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80166c2:	f000 fb4f 	bl	8016d64 <vPortExitCritical>

		return xReturn;
 80166c6:	697b      	ldr	r3, [r7, #20]
	}
 80166c8:	4618      	mov	r0, r3
 80166ca:	3718      	adds	r7, #24
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}
 80166d0:	2000037c 	.word	0x2000037c
 80166d4:	e000ed04 	.word	0xe000ed04

080166d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b08a      	sub	sp, #40	; 0x28
 80166dc:	af00      	add	r7, sp, #0
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	603b      	str	r3, [r7, #0]
 80166e4:	4613      	mov	r3, r2
 80166e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80166e8:	2301      	movs	r3, #1
 80166ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d10c      	bne.n	801670c <xTaskGenericNotify+0x34>
	__asm volatile
 80166f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166f6:	b672      	cpsid	i
 80166f8:	f383 8811 	msr	BASEPRI, r3
 80166fc:	f3bf 8f6f 	isb	sy
 8016700:	f3bf 8f4f 	dsb	sy
 8016704:	b662      	cpsie	i
 8016706:	61bb      	str	r3, [r7, #24]
}
 8016708:	bf00      	nop
 801670a:	e7fe      	b.n	801670a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8016710:	f000 faf4 	bl	8016cfc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d003      	beq.n	8016722 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801671a:	6a3b      	ldr	r3, [r7, #32]
 801671c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016722:	6a3b      	ldr	r3, [r7, #32]
 8016724:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016728:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801672a:	6a3b      	ldr	r3, [r7, #32]
 801672c:	2202      	movs	r2, #2
 801672e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8016732:	79fb      	ldrb	r3, [r7, #7]
 8016734:	2b04      	cmp	r3, #4
 8016736:	d828      	bhi.n	801678a <xTaskGenericNotify+0xb2>
 8016738:	a201      	add	r2, pc, #4	; (adr r2, 8016740 <xTaskGenericNotify+0x68>)
 801673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801673e:	bf00      	nop
 8016740:	080167af 	.word	0x080167af
 8016744:	08016755 	.word	0x08016755
 8016748:	08016763 	.word	0x08016763
 801674c:	0801676f 	.word	0x0801676f
 8016750:	08016777 	.word	0x08016777
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8016754:	6a3b      	ldr	r3, [r7, #32]
 8016756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	431a      	orrs	r2, r3
 801675c:	6a3b      	ldr	r3, [r7, #32]
 801675e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016760:	e028      	b.n	80167b4 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8016762:	6a3b      	ldr	r3, [r7, #32]
 8016764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016766:	1c5a      	adds	r2, r3, #1
 8016768:	6a3b      	ldr	r3, [r7, #32]
 801676a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801676c:	e022      	b.n	80167b4 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801676e:	6a3b      	ldr	r3, [r7, #32]
 8016770:	68ba      	ldr	r2, [r7, #8]
 8016772:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016774:	e01e      	b.n	80167b4 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8016776:	7ffb      	ldrb	r3, [r7, #31]
 8016778:	2b02      	cmp	r3, #2
 801677a:	d003      	beq.n	8016784 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801677c:	6a3b      	ldr	r3, [r7, #32]
 801677e:	68ba      	ldr	r2, [r7, #8]
 8016780:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8016782:	e017      	b.n	80167b4 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 8016784:	2300      	movs	r3, #0
 8016786:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8016788:	e014      	b.n	80167b4 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801678a:	6a3b      	ldr	r3, [r7, #32]
 801678c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801678e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016792:	d00e      	beq.n	80167b2 <xTaskGenericNotify+0xda>
	__asm volatile
 8016794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016798:	b672      	cpsid	i
 801679a:	f383 8811 	msr	BASEPRI, r3
 801679e:	f3bf 8f6f 	isb	sy
 80167a2:	f3bf 8f4f 	dsb	sy
 80167a6:	b662      	cpsie	i
 80167a8:	617b      	str	r3, [r7, #20]
}
 80167aa:	bf00      	nop
 80167ac:	e7fe      	b.n	80167ac <xTaskGenericNotify+0xd4>
					break;
 80167ae:	bf00      	nop
 80167b0:	e000      	b.n	80167b4 <xTaskGenericNotify+0xdc>

					break;
 80167b2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80167b4:	7ffb      	ldrb	r3, [r7, #31]
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	d13b      	bne.n	8016832 <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80167ba:	6a3b      	ldr	r3, [r7, #32]
 80167bc:	3304      	adds	r3, #4
 80167be:	4618      	mov	r0, r3
 80167c0:	f7fe fa26 	bl	8014c10 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80167c4:	6a3b      	ldr	r3, [r7, #32]
 80167c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167c8:	2201      	movs	r2, #1
 80167ca:	409a      	lsls	r2, r3
 80167cc:	4b1c      	ldr	r3, [pc, #112]	; (8016840 <xTaskGenericNotify+0x168>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	4313      	orrs	r3, r2
 80167d2:	4a1b      	ldr	r2, [pc, #108]	; (8016840 <xTaskGenericNotify+0x168>)
 80167d4:	6013      	str	r3, [r2, #0]
 80167d6:	6a3b      	ldr	r3, [r7, #32]
 80167d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167da:	4613      	mov	r3, r2
 80167dc:	009b      	lsls	r3, r3, #2
 80167de:	4413      	add	r3, r2
 80167e0:	009b      	lsls	r3, r3, #2
 80167e2:	4a18      	ldr	r2, [pc, #96]	; (8016844 <xTaskGenericNotify+0x16c>)
 80167e4:	441a      	add	r2, r3
 80167e6:	6a3b      	ldr	r3, [r7, #32]
 80167e8:	3304      	adds	r3, #4
 80167ea:	4619      	mov	r1, r3
 80167ec:	4610      	mov	r0, r2
 80167ee:	f7fe f9b2 	bl	8014b56 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80167f2:	6a3b      	ldr	r3, [r7, #32]
 80167f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d00c      	beq.n	8016814 <xTaskGenericNotify+0x13c>
	__asm volatile
 80167fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167fe:	b672      	cpsid	i
 8016800:	f383 8811 	msr	BASEPRI, r3
 8016804:	f3bf 8f6f 	isb	sy
 8016808:	f3bf 8f4f 	dsb	sy
 801680c:	b662      	cpsie	i
 801680e:	613b      	str	r3, [r7, #16]
}
 8016810:	bf00      	nop
 8016812:	e7fe      	b.n	8016812 <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016814:	6a3b      	ldr	r3, [r7, #32]
 8016816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016818:	4b0b      	ldr	r3, [pc, #44]	; (8016848 <xTaskGenericNotify+0x170>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801681e:	429a      	cmp	r2, r3
 8016820:	d907      	bls.n	8016832 <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8016822:	4b0a      	ldr	r3, [pc, #40]	; (801684c <xTaskGenericNotify+0x174>)
 8016824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016828:	601a      	str	r2, [r3, #0]
 801682a:	f3bf 8f4f 	dsb	sy
 801682e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016832:	f000 fa97 	bl	8016d64 <vPortExitCritical>

		return xReturn;
 8016836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8016838:	4618      	mov	r0, r3
 801683a:	3728      	adds	r7, #40	; 0x28
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}
 8016840:	20000484 	.word	0x20000484
 8016844:	20000380 	.word	0x20000380
 8016848:	2000037c 	.word	0x2000037c
 801684c:	e000ed04 	.word	0xe000ed04

08016850 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08e      	sub	sp, #56	; 0x38
 8016854:	af00      	add	r7, sp, #0
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	603b      	str	r3, [r7, #0]
 801685c:	4613      	mov	r3, r2
 801685e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8016860:	2301      	movs	r3, #1
 8016862:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d10c      	bne.n	8016884 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 801686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801686e:	b672      	cpsid	i
 8016870:	f383 8811 	msr	BASEPRI, r3
 8016874:	f3bf 8f6f 	isb	sy
 8016878:	f3bf 8f4f 	dsb	sy
 801687c:	b662      	cpsie	i
 801687e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016880:	bf00      	nop
 8016882:	e7fe      	b.n	8016882 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016884:	f000 fb22 	bl	8016ecc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801688c:	f3ef 8211 	mrs	r2, BASEPRI
 8016890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016894:	b672      	cpsid	i
 8016896:	f383 8811 	msr	BASEPRI, r3
 801689a:	f3bf 8f6f 	isb	sy
 801689e:	f3bf 8f4f 	dsb	sy
 80168a2:	b662      	cpsie	i
 80168a4:	623a      	str	r2, [r7, #32]
 80168a6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80168a8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80168aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80168ac:	683b      	ldr	r3, [r7, #0]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d003      	beq.n	80168ba <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80168b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80168ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80168c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80168c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c6:	2202      	movs	r2, #2
 80168c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80168cc:	79fb      	ldrb	r3, [r7, #7]
 80168ce:	2b04      	cmp	r3, #4
 80168d0:	d828      	bhi.n	8016924 <xTaskGenericNotifyFromISR+0xd4>
 80168d2:	a201      	add	r2, pc, #4	; (adr r2, 80168d8 <xTaskGenericNotifyFromISR+0x88>)
 80168d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168d8:	08016949 	.word	0x08016949
 80168dc:	080168ed 	.word	0x080168ed
 80168e0:	080168fb 	.word	0x080168fb
 80168e4:	08016907 	.word	0x08016907
 80168e8:	0801690f 	.word	0x0801690f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80168ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	431a      	orrs	r2, r3
 80168f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80168f8:	e029      	b.n	801694e <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80168fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168fe:	1c5a      	adds	r2, r3, #1
 8016900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016902:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8016904:	e023      	b.n	801694e <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8016906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016908:	68ba      	ldr	r2, [r7, #8]
 801690a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801690c:	e01f      	b.n	801694e <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801690e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016912:	2b02      	cmp	r3, #2
 8016914:	d003      	beq.n	801691e <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8016916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016918:	68ba      	ldr	r2, [r7, #8]
 801691a:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801691c:	e017      	b.n	801694e <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 801691e:	2300      	movs	r3, #0
 8016920:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8016922:	e014      	b.n	801694e <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8016924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801692c:	d00e      	beq.n	801694c <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 801692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016932:	b672      	cpsid	i
 8016934:	f383 8811 	msr	BASEPRI, r3
 8016938:	f3bf 8f6f 	isb	sy
 801693c:	f3bf 8f4f 	dsb	sy
 8016940:	b662      	cpsie	i
 8016942:	61bb      	str	r3, [r7, #24]
}
 8016944:	bf00      	nop
 8016946:	e7fe      	b.n	8016946 <xTaskGenericNotifyFromISR+0xf6>
					break;
 8016948:	bf00      	nop
 801694a:	e000      	b.n	801694e <xTaskGenericNotifyFromISR+0xfe>
					break;
 801694c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801694e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016952:	2b01      	cmp	r3, #1
 8016954:	d147      	bne.n	80169e6 <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801695a:	2b00      	cmp	r3, #0
 801695c:	d00c      	beq.n	8016978 <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 801695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016962:	b672      	cpsid	i
 8016964:	f383 8811 	msr	BASEPRI, r3
 8016968:	f3bf 8f6f 	isb	sy
 801696c:	f3bf 8f4f 	dsb	sy
 8016970:	b662      	cpsie	i
 8016972:	617b      	str	r3, [r7, #20]
}
 8016974:	bf00      	nop
 8016976:	e7fe      	b.n	8016976 <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016978:	4b20      	ldr	r3, [pc, #128]	; (80169fc <xTaskGenericNotifyFromISR+0x1ac>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d11c      	bne.n	80169ba <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016982:	3304      	adds	r3, #4
 8016984:	4618      	mov	r0, r3
 8016986:	f7fe f943 	bl	8014c10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801698e:	2201      	movs	r2, #1
 8016990:	409a      	lsls	r2, r3
 8016992:	4b1b      	ldr	r3, [pc, #108]	; (8016a00 <xTaskGenericNotifyFromISR+0x1b0>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	4313      	orrs	r3, r2
 8016998:	4a19      	ldr	r2, [pc, #100]	; (8016a00 <xTaskGenericNotifyFromISR+0x1b0>)
 801699a:	6013      	str	r3, [r2, #0]
 801699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169a0:	4613      	mov	r3, r2
 80169a2:	009b      	lsls	r3, r3, #2
 80169a4:	4413      	add	r3, r2
 80169a6:	009b      	lsls	r3, r3, #2
 80169a8:	4a16      	ldr	r2, [pc, #88]	; (8016a04 <xTaskGenericNotifyFromISR+0x1b4>)
 80169aa:	441a      	add	r2, r3
 80169ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ae:	3304      	adds	r3, #4
 80169b0:	4619      	mov	r1, r3
 80169b2:	4610      	mov	r0, r2
 80169b4:	f7fe f8cf 	bl	8014b56 <vListInsertEnd>
 80169b8:	e005      	b.n	80169c6 <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80169ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169bc:	3318      	adds	r3, #24
 80169be:	4619      	mov	r1, r3
 80169c0:	4811      	ldr	r0, [pc, #68]	; (8016a08 <xTaskGenericNotifyFromISR+0x1b8>)
 80169c2:	f7fe f8c8 	bl	8014b56 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80169c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169ca:	4b10      	ldr	r3, [pc, #64]	; (8016a0c <xTaskGenericNotifyFromISR+0x1bc>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169d0:	429a      	cmp	r2, r3
 80169d2:	d908      	bls.n	80169e6 <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80169d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d002      	beq.n	80169e0 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80169da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169dc:	2201      	movs	r2, #1
 80169de:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80169e0:	4b0b      	ldr	r3, [pc, #44]	; (8016a10 <xTaskGenericNotifyFromISR+0x1c0>)
 80169e2:	2201      	movs	r2, #1
 80169e4:	601a      	str	r2, [r3, #0]
 80169e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	f383 8811 	msr	BASEPRI, r3
}
 80169f0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80169f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3738      	adds	r7, #56	; 0x38
 80169f8:	46bd      	mov	sp, r7
 80169fa:	bd80      	pop	{r7, pc}
 80169fc:	200004a4 	.word	0x200004a4
 8016a00:	20000484 	.word	0x20000484
 8016a04:	20000380 	.word	0x20000380
 8016a08:	2000043c 	.word	0x2000043c
 8016a0c:	2000037c 	.word	0x2000037c
 8016a10:	20000490 	.word	0x20000490

08016a14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016a1e:	4b29      	ldr	r3, [pc, #164]	; (8016ac4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a24:	4b28      	ldr	r3, [pc, #160]	; (8016ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	3304      	adds	r3, #4
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7fe f8f0 	bl	8014c10 <uxListRemove>
 8016a30:	4603      	mov	r3, r0
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d10b      	bne.n	8016a4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016a36:	4b24      	ldr	r3, [pc, #144]	; (8016ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a3c:	2201      	movs	r2, #1
 8016a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8016a42:	43da      	mvns	r2, r3
 8016a44:	4b21      	ldr	r3, [pc, #132]	; (8016acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	4013      	ands	r3, r2
 8016a4a:	4a20      	ldr	r2, [pc, #128]	; (8016acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8016a4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a54:	d10a      	bne.n	8016a6c <prvAddCurrentTaskToDelayedList+0x58>
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d007      	beq.n	8016a6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016a5c:	4b1a      	ldr	r3, [pc, #104]	; (8016ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	3304      	adds	r3, #4
 8016a62:	4619      	mov	r1, r3
 8016a64:	481a      	ldr	r0, [pc, #104]	; (8016ad0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016a66:	f7fe f876 	bl	8014b56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016a6a:	e026      	b.n	8016aba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016a6c:	68fa      	ldr	r2, [r7, #12]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	4413      	add	r3, r2
 8016a72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016a74:	4b14      	ldr	r3, [pc, #80]	; (8016ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	68ba      	ldr	r2, [r7, #8]
 8016a7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016a7c:	68ba      	ldr	r2, [r7, #8]
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d209      	bcs.n	8016a98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016a84:	4b13      	ldr	r3, [pc, #76]	; (8016ad4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016a86:	681a      	ldr	r2, [r3, #0]
 8016a88:	4b0f      	ldr	r3, [pc, #60]	; (8016ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	3304      	adds	r3, #4
 8016a8e:	4619      	mov	r1, r3
 8016a90:	4610      	mov	r0, r2
 8016a92:	f7fe f884 	bl	8014b9e <vListInsert>
}
 8016a96:	e010      	b.n	8016aba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016a98:	4b0f      	ldr	r3, [pc, #60]	; (8016ad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016a9a:	681a      	ldr	r2, [r3, #0]
 8016a9c:	4b0a      	ldr	r3, [pc, #40]	; (8016ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	3304      	adds	r3, #4
 8016aa2:	4619      	mov	r1, r3
 8016aa4:	4610      	mov	r0, r2
 8016aa6:	f7fe f87a 	bl	8014b9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016aaa:	4b0c      	ldr	r3, [pc, #48]	; (8016adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	68ba      	ldr	r2, [r7, #8]
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d202      	bcs.n	8016aba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016ab4:	4a09      	ldr	r2, [pc, #36]	; (8016adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	6013      	str	r3, [r2, #0]
}
 8016aba:	bf00      	nop
 8016abc:	3710      	adds	r7, #16
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	bd80      	pop	{r7, pc}
 8016ac2:	bf00      	nop
 8016ac4:	20000480 	.word	0x20000480
 8016ac8:	2000037c 	.word	0x2000037c
 8016acc:	20000484 	.word	0x20000484
 8016ad0:	20000468 	.word	0x20000468
 8016ad4:	20000438 	.word	0x20000438
 8016ad8:	20000434 	.word	0x20000434
 8016adc:	2000049c 	.word	0x2000049c

08016ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b085      	sub	sp, #20
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	60f8      	str	r0, [r7, #12]
 8016ae8:	60b9      	str	r1, [r7, #8]
 8016aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	3b04      	subs	r3, #4
 8016af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	3b04      	subs	r3, #4
 8016afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016b00:	68bb      	ldr	r3, [r7, #8]
 8016b02:	f023 0201 	bic.w	r2, r3, #1
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	3b04      	subs	r3, #4
 8016b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016b10:	4a0c      	ldr	r2, [pc, #48]	; (8016b44 <pxPortInitialiseStack+0x64>)
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	3b14      	subs	r3, #20
 8016b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016b1c:	687a      	ldr	r2, [r7, #4]
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	3b04      	subs	r3, #4
 8016b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	f06f 0202 	mvn.w	r2, #2
 8016b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	3b20      	subs	r3, #32
 8016b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016b36:	68fb      	ldr	r3, [r7, #12]
}
 8016b38:	4618      	mov	r0, r3
 8016b3a:	3714      	adds	r7, #20
 8016b3c:	46bd      	mov	sp, r7
 8016b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b42:	4770      	bx	lr
 8016b44:	08016b49 	.word	0x08016b49

08016b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b085      	sub	sp, #20
 8016b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016b52:	4b14      	ldr	r3, [pc, #80]	; (8016ba4 <prvTaskExitError+0x5c>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b5a:	d00c      	beq.n	8016b76 <prvTaskExitError+0x2e>
	__asm volatile
 8016b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b60:	b672      	cpsid	i
 8016b62:	f383 8811 	msr	BASEPRI, r3
 8016b66:	f3bf 8f6f 	isb	sy
 8016b6a:	f3bf 8f4f 	dsb	sy
 8016b6e:	b662      	cpsie	i
 8016b70:	60fb      	str	r3, [r7, #12]
}
 8016b72:	bf00      	nop
 8016b74:	e7fe      	b.n	8016b74 <prvTaskExitError+0x2c>
	__asm volatile
 8016b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b7a:	b672      	cpsid	i
 8016b7c:	f383 8811 	msr	BASEPRI, r3
 8016b80:	f3bf 8f6f 	isb	sy
 8016b84:	f3bf 8f4f 	dsb	sy
 8016b88:	b662      	cpsie	i
 8016b8a:	60bb      	str	r3, [r7, #8]
}
 8016b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016b8e:	bf00      	nop
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d0fc      	beq.n	8016b90 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016b96:	bf00      	nop
 8016b98:	bf00      	nop
 8016b9a:	3714      	adds	r7, #20
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba2:	4770      	bx	lr
 8016ba4:	2000004c 	.word	0x2000004c
	...

08016bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016bb0:	4b07      	ldr	r3, [pc, #28]	; (8016bd0 <pxCurrentTCBConst2>)
 8016bb2:	6819      	ldr	r1, [r3, #0]
 8016bb4:	6808      	ldr	r0, [r1, #0]
 8016bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bba:	f380 8809 	msr	PSP, r0
 8016bbe:	f3bf 8f6f 	isb	sy
 8016bc2:	f04f 0000 	mov.w	r0, #0
 8016bc6:	f380 8811 	msr	BASEPRI, r0
 8016bca:	4770      	bx	lr
 8016bcc:	f3af 8000 	nop.w

08016bd0 <pxCurrentTCBConst2>:
 8016bd0:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016bd4:	bf00      	nop
 8016bd6:	bf00      	nop

08016bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016bd8:	4808      	ldr	r0, [pc, #32]	; (8016bfc <prvPortStartFirstTask+0x24>)
 8016bda:	6800      	ldr	r0, [r0, #0]
 8016bdc:	6800      	ldr	r0, [r0, #0]
 8016bde:	f380 8808 	msr	MSP, r0
 8016be2:	f04f 0000 	mov.w	r0, #0
 8016be6:	f380 8814 	msr	CONTROL, r0
 8016bea:	b662      	cpsie	i
 8016bec:	b661      	cpsie	f
 8016bee:	f3bf 8f4f 	dsb	sy
 8016bf2:	f3bf 8f6f 	isb	sy
 8016bf6:	df00      	svc	0
 8016bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016bfa:	bf00      	nop
 8016bfc:	e000ed08 	.word	0xe000ed08

08016c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b084      	sub	sp, #16
 8016c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016c06:	4b37      	ldr	r3, [pc, #220]	; (8016ce4 <xPortStartScheduler+0xe4>)
 8016c08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	781b      	ldrb	r3, [r3, #0]
 8016c0e:	b2db      	uxtb	r3, r3
 8016c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	22ff      	movs	r2, #255	; 0xff
 8016c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	b2db      	uxtb	r3, r3
 8016c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016c20:	78fb      	ldrb	r3, [r7, #3]
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016c28:	b2da      	uxtb	r2, r3
 8016c2a:	4b2f      	ldr	r3, [pc, #188]	; (8016ce8 <xPortStartScheduler+0xe8>)
 8016c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016c2e:	4b2f      	ldr	r3, [pc, #188]	; (8016cec <xPortStartScheduler+0xec>)
 8016c30:	2207      	movs	r2, #7
 8016c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016c34:	e009      	b.n	8016c4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016c36:	4b2d      	ldr	r3, [pc, #180]	; (8016cec <xPortStartScheduler+0xec>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	3b01      	subs	r3, #1
 8016c3c:	4a2b      	ldr	r2, [pc, #172]	; (8016cec <xPortStartScheduler+0xec>)
 8016c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016c40:	78fb      	ldrb	r3, [r7, #3]
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	b2db      	uxtb	r3, r3
 8016c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016c4a:	78fb      	ldrb	r3, [r7, #3]
 8016c4c:	b2db      	uxtb	r3, r3
 8016c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016c52:	2b80      	cmp	r3, #128	; 0x80
 8016c54:	d0ef      	beq.n	8016c36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016c56:	4b25      	ldr	r3, [pc, #148]	; (8016cec <xPortStartScheduler+0xec>)
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	f1c3 0307 	rsb	r3, r3, #7
 8016c5e:	2b04      	cmp	r3, #4
 8016c60:	d00c      	beq.n	8016c7c <xPortStartScheduler+0x7c>
	__asm volatile
 8016c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c66:	b672      	cpsid	i
 8016c68:	f383 8811 	msr	BASEPRI, r3
 8016c6c:	f3bf 8f6f 	isb	sy
 8016c70:	f3bf 8f4f 	dsb	sy
 8016c74:	b662      	cpsie	i
 8016c76:	60bb      	str	r3, [r7, #8]
}
 8016c78:	bf00      	nop
 8016c7a:	e7fe      	b.n	8016c7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016c7c:	4b1b      	ldr	r3, [pc, #108]	; (8016cec <xPortStartScheduler+0xec>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	021b      	lsls	r3, r3, #8
 8016c82:	4a1a      	ldr	r2, [pc, #104]	; (8016cec <xPortStartScheduler+0xec>)
 8016c84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016c86:	4b19      	ldr	r3, [pc, #100]	; (8016cec <xPortStartScheduler+0xec>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016c8e:	4a17      	ldr	r2, [pc, #92]	; (8016cec <xPortStartScheduler+0xec>)
 8016c90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	b2da      	uxtb	r2, r3
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016c9a:	4b15      	ldr	r3, [pc, #84]	; (8016cf0 <xPortStartScheduler+0xf0>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	4a14      	ldr	r2, [pc, #80]	; (8016cf0 <xPortStartScheduler+0xf0>)
 8016ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016ca4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016ca6:	4b12      	ldr	r3, [pc, #72]	; (8016cf0 <xPortStartScheduler+0xf0>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	4a11      	ldr	r2, [pc, #68]	; (8016cf0 <xPortStartScheduler+0xf0>)
 8016cac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016cb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016cb2:	f000 f8dd 	bl	8016e70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016cb6:	4b0f      	ldr	r3, [pc, #60]	; (8016cf4 <xPortStartScheduler+0xf4>)
 8016cb8:	2200      	movs	r2, #0
 8016cba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016cbc:	f000 f8fc 	bl	8016eb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016cc0:	4b0d      	ldr	r3, [pc, #52]	; (8016cf8 <xPortStartScheduler+0xf8>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	4a0c      	ldr	r2, [pc, #48]	; (8016cf8 <xPortStartScheduler+0xf8>)
 8016cc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016cca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016ccc:	f7ff ff84 	bl	8016bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016cd0:	f7ff f992 	bl	8015ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8016cd4:	f7ff ff38 	bl	8016b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016cd8:	2300      	movs	r3, #0
}
 8016cda:	4618      	mov	r0, r3
 8016cdc:	3710      	adds	r7, #16
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}
 8016ce2:	bf00      	nop
 8016ce4:	e000e400 	.word	0xe000e400
 8016ce8:	200004a8 	.word	0x200004a8
 8016cec:	200004ac 	.word	0x200004ac
 8016cf0:	e000ed20 	.word	0xe000ed20
 8016cf4:	2000004c 	.word	0x2000004c
 8016cf8:	e000ef34 	.word	0xe000ef34

08016cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016cfc:	b480      	push	{r7}
 8016cfe:	b083      	sub	sp, #12
 8016d00:	af00      	add	r7, sp, #0
	__asm volatile
 8016d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d06:	b672      	cpsid	i
 8016d08:	f383 8811 	msr	BASEPRI, r3
 8016d0c:	f3bf 8f6f 	isb	sy
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	b662      	cpsie	i
 8016d16:	607b      	str	r3, [r7, #4]
}
 8016d18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016d1a:	4b10      	ldr	r3, [pc, #64]	; (8016d5c <vPortEnterCritical+0x60>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	3301      	adds	r3, #1
 8016d20:	4a0e      	ldr	r2, [pc, #56]	; (8016d5c <vPortEnterCritical+0x60>)
 8016d22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016d24:	4b0d      	ldr	r3, [pc, #52]	; (8016d5c <vPortEnterCritical+0x60>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	2b01      	cmp	r3, #1
 8016d2a:	d111      	bne.n	8016d50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016d2c:	4b0c      	ldr	r3, [pc, #48]	; (8016d60 <vPortEnterCritical+0x64>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d00c      	beq.n	8016d50 <vPortEnterCritical+0x54>
	__asm volatile
 8016d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3a:	b672      	cpsid	i
 8016d3c:	f383 8811 	msr	BASEPRI, r3
 8016d40:	f3bf 8f6f 	isb	sy
 8016d44:	f3bf 8f4f 	dsb	sy
 8016d48:	b662      	cpsie	i
 8016d4a:	603b      	str	r3, [r7, #0]
}
 8016d4c:	bf00      	nop
 8016d4e:	e7fe      	b.n	8016d4e <vPortEnterCritical+0x52>
	}
}
 8016d50:	bf00      	nop
 8016d52:	370c      	adds	r7, #12
 8016d54:	46bd      	mov	sp, r7
 8016d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5a:	4770      	bx	lr
 8016d5c:	2000004c 	.word	0x2000004c
 8016d60:	e000ed04 	.word	0xe000ed04

08016d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016d64:	b480      	push	{r7}
 8016d66:	b083      	sub	sp, #12
 8016d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016d6a:	4b13      	ldr	r3, [pc, #76]	; (8016db8 <vPortExitCritical+0x54>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d10c      	bne.n	8016d8c <vPortExitCritical+0x28>
	__asm volatile
 8016d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d76:	b672      	cpsid	i
 8016d78:	f383 8811 	msr	BASEPRI, r3
 8016d7c:	f3bf 8f6f 	isb	sy
 8016d80:	f3bf 8f4f 	dsb	sy
 8016d84:	b662      	cpsie	i
 8016d86:	607b      	str	r3, [r7, #4]
}
 8016d88:	bf00      	nop
 8016d8a:	e7fe      	b.n	8016d8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016d8c:	4b0a      	ldr	r3, [pc, #40]	; (8016db8 <vPortExitCritical+0x54>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	3b01      	subs	r3, #1
 8016d92:	4a09      	ldr	r2, [pc, #36]	; (8016db8 <vPortExitCritical+0x54>)
 8016d94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016d96:	4b08      	ldr	r3, [pc, #32]	; (8016db8 <vPortExitCritical+0x54>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d105      	bne.n	8016daa <vPortExitCritical+0x46>
 8016d9e:	2300      	movs	r3, #0
 8016da0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	f383 8811 	msr	BASEPRI, r3
}
 8016da8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016daa:	bf00      	nop
 8016dac:	370c      	adds	r7, #12
 8016dae:	46bd      	mov	sp, r7
 8016db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db4:	4770      	bx	lr
 8016db6:	bf00      	nop
 8016db8:	2000004c 	.word	0x2000004c
 8016dbc:	00000000 	.word	0x00000000

08016dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016dc0:	f3ef 8009 	mrs	r0, PSP
 8016dc4:	f3bf 8f6f 	isb	sy
 8016dc8:	4b15      	ldr	r3, [pc, #84]	; (8016e20 <pxCurrentTCBConst>)
 8016dca:	681a      	ldr	r2, [r3, #0]
 8016dcc:	f01e 0f10 	tst.w	lr, #16
 8016dd0:	bf08      	it	eq
 8016dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dda:	6010      	str	r0, [r2, #0]
 8016ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016de4:	b672      	cpsid	i
 8016de6:	f380 8811 	msr	BASEPRI, r0
 8016dea:	f3bf 8f4f 	dsb	sy
 8016dee:	f3bf 8f6f 	isb	sy
 8016df2:	b662      	cpsie	i
 8016df4:	f7ff f900 	bl	8015ff8 <vTaskSwitchContext>
 8016df8:	f04f 0000 	mov.w	r0, #0
 8016dfc:	f380 8811 	msr	BASEPRI, r0
 8016e00:	bc09      	pop	{r0, r3}
 8016e02:	6819      	ldr	r1, [r3, #0]
 8016e04:	6808      	ldr	r0, [r1, #0]
 8016e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e0a:	f01e 0f10 	tst.w	lr, #16
 8016e0e:	bf08      	it	eq
 8016e10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016e14:	f380 8809 	msr	PSP, r0
 8016e18:	f3bf 8f6f 	isb	sy
 8016e1c:	4770      	bx	lr
 8016e1e:	bf00      	nop

08016e20 <pxCurrentTCBConst>:
 8016e20:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016e24:	bf00      	nop
 8016e26:	bf00      	nop

08016e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8016e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e32:	b672      	cpsid	i
 8016e34:	f383 8811 	msr	BASEPRI, r3
 8016e38:	f3bf 8f6f 	isb	sy
 8016e3c:	f3bf 8f4f 	dsb	sy
 8016e40:	b662      	cpsie	i
 8016e42:	607b      	str	r3, [r7, #4]
}
 8016e44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016e46:	f7ff f81d 	bl	8015e84 <xTaskIncrementTick>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d003      	beq.n	8016e58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016e50:	4b06      	ldr	r3, [pc, #24]	; (8016e6c <SysTick_Handler+0x44>)
 8016e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e56:	601a      	str	r2, [r3, #0]
 8016e58:	2300      	movs	r3, #0
 8016e5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	f383 8811 	msr	BASEPRI, r3
}
 8016e62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016e64:	bf00      	nop
 8016e66:	3708      	adds	r7, #8
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}
 8016e6c:	e000ed04 	.word	0xe000ed04

08016e70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016e70:	b480      	push	{r7}
 8016e72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016e74:	4b0b      	ldr	r3, [pc, #44]	; (8016ea4 <vPortSetupTimerInterrupt+0x34>)
 8016e76:	2200      	movs	r2, #0
 8016e78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016e7a:	4b0b      	ldr	r3, [pc, #44]	; (8016ea8 <vPortSetupTimerInterrupt+0x38>)
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016e80:	4b0a      	ldr	r3, [pc, #40]	; (8016eac <vPortSetupTimerInterrupt+0x3c>)
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	4a0a      	ldr	r2, [pc, #40]	; (8016eb0 <vPortSetupTimerInterrupt+0x40>)
 8016e86:	fba2 2303 	umull	r2, r3, r2, r3
 8016e8a:	099b      	lsrs	r3, r3, #6
 8016e8c:	4a09      	ldr	r2, [pc, #36]	; (8016eb4 <vPortSetupTimerInterrupt+0x44>)
 8016e8e:	3b01      	subs	r3, #1
 8016e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016e92:	4b04      	ldr	r3, [pc, #16]	; (8016ea4 <vPortSetupTimerInterrupt+0x34>)
 8016e94:	2207      	movs	r2, #7
 8016e96:	601a      	str	r2, [r3, #0]
}
 8016e98:	bf00      	nop
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea0:	4770      	bx	lr
 8016ea2:	bf00      	nop
 8016ea4:	e000e010 	.word	0xe000e010
 8016ea8:	e000e018 	.word	0xe000e018
 8016eac:	20000008 	.word	0x20000008
 8016eb0:	10624dd3 	.word	0x10624dd3
 8016eb4:	e000e014 	.word	0xe000e014

08016eb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016eb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016ec8 <vPortEnableVFP+0x10>
 8016ebc:	6801      	ldr	r1, [r0, #0]
 8016ebe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016ec2:	6001      	str	r1, [r0, #0]
 8016ec4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016ec6:	bf00      	nop
 8016ec8:	e000ed88 	.word	0xe000ed88

08016ecc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016ecc:	b480      	push	{r7}
 8016ece:	b085      	sub	sp, #20
 8016ed0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016ed2:	f3ef 8305 	mrs	r3, IPSR
 8016ed6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	2b0f      	cmp	r3, #15
 8016edc:	d916      	bls.n	8016f0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016ede:	4a19      	ldr	r2, [pc, #100]	; (8016f44 <vPortValidateInterruptPriority+0x78>)
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	4413      	add	r3, r2
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016ee8:	4b17      	ldr	r3, [pc, #92]	; (8016f48 <vPortValidateInterruptPriority+0x7c>)
 8016eea:	781b      	ldrb	r3, [r3, #0]
 8016eec:	7afa      	ldrb	r2, [r7, #11]
 8016eee:	429a      	cmp	r2, r3
 8016ef0:	d20c      	bcs.n	8016f0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8016ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef6:	b672      	cpsid	i
 8016ef8:	f383 8811 	msr	BASEPRI, r3
 8016efc:	f3bf 8f6f 	isb	sy
 8016f00:	f3bf 8f4f 	dsb	sy
 8016f04:	b662      	cpsie	i
 8016f06:	607b      	str	r3, [r7, #4]
}
 8016f08:	bf00      	nop
 8016f0a:	e7fe      	b.n	8016f0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016f0c:	4b0f      	ldr	r3, [pc, #60]	; (8016f4c <vPortValidateInterruptPriority+0x80>)
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016f14:	4b0e      	ldr	r3, [pc, #56]	; (8016f50 <vPortValidateInterruptPriority+0x84>)
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	d90c      	bls.n	8016f36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8016f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f20:	b672      	cpsid	i
 8016f22:	f383 8811 	msr	BASEPRI, r3
 8016f26:	f3bf 8f6f 	isb	sy
 8016f2a:	f3bf 8f4f 	dsb	sy
 8016f2e:	b662      	cpsie	i
 8016f30:	603b      	str	r3, [r7, #0]
}
 8016f32:	bf00      	nop
 8016f34:	e7fe      	b.n	8016f34 <vPortValidateInterruptPriority+0x68>
	}
 8016f36:	bf00      	nop
 8016f38:	3714      	adds	r7, #20
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f40:	4770      	bx	lr
 8016f42:	bf00      	nop
 8016f44:	e000e3f0 	.word	0xe000e3f0
 8016f48:	200004a8 	.word	0x200004a8
 8016f4c:	e000ed0c 	.word	0xe000ed0c
 8016f50:	200004ac 	.word	0x200004ac

08016f54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b08a      	sub	sp, #40	; 0x28
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016f60:	f7fe fec2 	bl	8015ce8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016f64:	4b5e      	ldr	r3, [pc, #376]	; (80170e0 <pvPortMalloc+0x18c>)
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d101      	bne.n	8016f70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016f6c:	f000 f920 	bl	80171b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016f70:	4b5c      	ldr	r3, [pc, #368]	; (80170e4 <pvPortMalloc+0x190>)
 8016f72:	681a      	ldr	r2, [r3, #0]
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	4013      	ands	r3, r2
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	f040 8092 	bne.w	80170a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d01f      	beq.n	8016fc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8016f84:	2208      	movs	r2, #8
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	4413      	add	r3, r2
 8016f8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f003 0307 	and.w	r3, r3, #7
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d016      	beq.n	8016fc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	f023 0307 	bic.w	r3, r3, #7
 8016f9c:	3308      	adds	r3, #8
 8016f9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	f003 0307 	and.w	r3, r3, #7
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d00c      	beq.n	8016fc4 <pvPortMalloc+0x70>
	__asm volatile
 8016faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fae:	b672      	cpsid	i
 8016fb0:	f383 8811 	msr	BASEPRI, r3
 8016fb4:	f3bf 8f6f 	isb	sy
 8016fb8:	f3bf 8f4f 	dsb	sy
 8016fbc:	b662      	cpsie	i
 8016fbe:	617b      	str	r3, [r7, #20]
}
 8016fc0:	bf00      	nop
 8016fc2:	e7fe      	b.n	8016fc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d06b      	beq.n	80170a2 <pvPortMalloc+0x14e>
 8016fca:	4b47      	ldr	r3, [pc, #284]	; (80170e8 <pvPortMalloc+0x194>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	687a      	ldr	r2, [r7, #4]
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d866      	bhi.n	80170a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016fd4:	4b45      	ldr	r3, [pc, #276]	; (80170ec <pvPortMalloc+0x198>)
 8016fd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016fd8:	4b44      	ldr	r3, [pc, #272]	; (80170ec <pvPortMalloc+0x198>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016fde:	e004      	b.n	8016fea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8016fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	687a      	ldr	r2, [r7, #4]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d903      	bls.n	8016ffc <pvPortMalloc+0xa8>
 8016ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d1f1      	bne.n	8016fe0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016ffc:	4b38      	ldr	r3, [pc, #224]	; (80170e0 <pvPortMalloc+0x18c>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017002:	429a      	cmp	r2, r3
 8017004:	d04d      	beq.n	80170a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017006:	6a3b      	ldr	r3, [r7, #32]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	2208      	movs	r2, #8
 801700c:	4413      	add	r3, r2
 801700e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017012:	681a      	ldr	r2, [r3, #0]
 8017014:	6a3b      	ldr	r3, [r7, #32]
 8017016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801701a:	685a      	ldr	r2, [r3, #4]
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	1ad2      	subs	r2, r2, r3
 8017020:	2308      	movs	r3, #8
 8017022:	005b      	lsls	r3, r3, #1
 8017024:	429a      	cmp	r2, r3
 8017026:	d921      	bls.n	801706c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	4413      	add	r3, r2
 801702e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017030:	69bb      	ldr	r3, [r7, #24]
 8017032:	f003 0307 	and.w	r3, r3, #7
 8017036:	2b00      	cmp	r3, #0
 8017038:	d00c      	beq.n	8017054 <pvPortMalloc+0x100>
	__asm volatile
 801703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801703e:	b672      	cpsid	i
 8017040:	f383 8811 	msr	BASEPRI, r3
 8017044:	f3bf 8f6f 	isb	sy
 8017048:	f3bf 8f4f 	dsb	sy
 801704c:	b662      	cpsie	i
 801704e:	613b      	str	r3, [r7, #16]
}
 8017050:	bf00      	nop
 8017052:	e7fe      	b.n	8017052 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017056:	685a      	ldr	r2, [r3, #4]
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	1ad2      	subs	r2, r2, r3
 801705c:	69bb      	ldr	r3, [r7, #24]
 801705e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017062:	687a      	ldr	r2, [r7, #4]
 8017064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017066:	69b8      	ldr	r0, [r7, #24]
 8017068:	f000 f904 	bl	8017274 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801706c:	4b1e      	ldr	r3, [pc, #120]	; (80170e8 <pvPortMalloc+0x194>)
 801706e:	681a      	ldr	r2, [r3, #0]
 8017070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017072:	685b      	ldr	r3, [r3, #4]
 8017074:	1ad3      	subs	r3, r2, r3
 8017076:	4a1c      	ldr	r2, [pc, #112]	; (80170e8 <pvPortMalloc+0x194>)
 8017078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801707a:	4b1b      	ldr	r3, [pc, #108]	; (80170e8 <pvPortMalloc+0x194>)
 801707c:	681a      	ldr	r2, [r3, #0]
 801707e:	4b1c      	ldr	r3, [pc, #112]	; (80170f0 <pvPortMalloc+0x19c>)
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	429a      	cmp	r2, r3
 8017084:	d203      	bcs.n	801708e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017086:	4b18      	ldr	r3, [pc, #96]	; (80170e8 <pvPortMalloc+0x194>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	4a19      	ldr	r2, [pc, #100]	; (80170f0 <pvPortMalloc+0x19c>)
 801708c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017090:	685a      	ldr	r2, [r3, #4]
 8017092:	4b14      	ldr	r3, [pc, #80]	; (80170e4 <pvPortMalloc+0x190>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	431a      	orrs	r2, r3
 8017098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709e:	2200      	movs	r2, #0
 80170a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80170a2:	f7fe fe2f 	bl	8015d04 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80170a6:	69fb      	ldr	r3, [r7, #28]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d101      	bne.n	80170b0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80170ac:	f7e9 fbc4 	bl	8000838 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80170b0:	69fb      	ldr	r3, [r7, #28]
 80170b2:	f003 0307 	and.w	r3, r3, #7
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d00c      	beq.n	80170d4 <pvPortMalloc+0x180>
	__asm volatile
 80170ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170be:	b672      	cpsid	i
 80170c0:	f383 8811 	msr	BASEPRI, r3
 80170c4:	f3bf 8f6f 	isb	sy
 80170c8:	f3bf 8f4f 	dsb	sy
 80170cc:	b662      	cpsie	i
 80170ce:	60fb      	str	r3, [r7, #12]
}
 80170d0:	bf00      	nop
 80170d2:	e7fe      	b.n	80170d2 <pvPortMalloc+0x17e>
	return pvReturn;
 80170d4:	69fb      	ldr	r3, [r7, #28]
}
 80170d6:	4618      	mov	r0, r3
 80170d8:	3728      	adds	r7, #40	; 0x28
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
 80170de:	bf00      	nop
 80170e0:	200084b8 	.word	0x200084b8
 80170e4:	200084c4 	.word	0x200084c4
 80170e8:	200084bc 	.word	0x200084bc
 80170ec:	200084b0 	.word	0x200084b0
 80170f0:	200084c0 	.word	0x200084c0

080170f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b086      	sub	sp, #24
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d04c      	beq.n	80171a0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017106:	2308      	movs	r3, #8
 8017108:	425b      	negs	r3, r3
 801710a:	697a      	ldr	r2, [r7, #20]
 801710c:	4413      	add	r3, r2
 801710e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	685a      	ldr	r2, [r3, #4]
 8017118:	4b23      	ldr	r3, [pc, #140]	; (80171a8 <vPortFree+0xb4>)
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	4013      	ands	r3, r2
 801711e:	2b00      	cmp	r3, #0
 8017120:	d10c      	bne.n	801713c <vPortFree+0x48>
	__asm volatile
 8017122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017126:	b672      	cpsid	i
 8017128:	f383 8811 	msr	BASEPRI, r3
 801712c:	f3bf 8f6f 	isb	sy
 8017130:	f3bf 8f4f 	dsb	sy
 8017134:	b662      	cpsie	i
 8017136:	60fb      	str	r3, [r7, #12]
}
 8017138:	bf00      	nop
 801713a:	e7fe      	b.n	801713a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801713c:	693b      	ldr	r3, [r7, #16]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d00c      	beq.n	801715e <vPortFree+0x6a>
	__asm volatile
 8017144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017148:	b672      	cpsid	i
 801714a:	f383 8811 	msr	BASEPRI, r3
 801714e:	f3bf 8f6f 	isb	sy
 8017152:	f3bf 8f4f 	dsb	sy
 8017156:	b662      	cpsie	i
 8017158:	60bb      	str	r3, [r7, #8]
}
 801715a:	bf00      	nop
 801715c:	e7fe      	b.n	801715c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801715e:	693b      	ldr	r3, [r7, #16]
 8017160:	685a      	ldr	r2, [r3, #4]
 8017162:	4b11      	ldr	r3, [pc, #68]	; (80171a8 <vPortFree+0xb4>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	4013      	ands	r3, r2
 8017168:	2b00      	cmp	r3, #0
 801716a:	d019      	beq.n	80171a0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d115      	bne.n	80171a0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017174:	693b      	ldr	r3, [r7, #16]
 8017176:	685a      	ldr	r2, [r3, #4]
 8017178:	4b0b      	ldr	r3, [pc, #44]	; (80171a8 <vPortFree+0xb4>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	43db      	mvns	r3, r3
 801717e:	401a      	ands	r2, r3
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017184:	f7fe fdb0 	bl	8015ce8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	685a      	ldr	r2, [r3, #4]
 801718c:	4b07      	ldr	r3, [pc, #28]	; (80171ac <vPortFree+0xb8>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	4413      	add	r3, r2
 8017192:	4a06      	ldr	r2, [pc, #24]	; (80171ac <vPortFree+0xb8>)
 8017194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017196:	6938      	ldr	r0, [r7, #16]
 8017198:	f000 f86c 	bl	8017274 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801719c:	f7fe fdb2 	bl	8015d04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80171a0:	bf00      	nop
 80171a2:	3718      	adds	r7, #24
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}
 80171a8:	200084c4 	.word	0x200084c4
 80171ac:	200084bc 	.word	0x200084bc

080171b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80171b0:	b480      	push	{r7}
 80171b2:	b085      	sub	sp, #20
 80171b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80171b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80171ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80171bc:	4b27      	ldr	r3, [pc, #156]	; (801725c <prvHeapInit+0xac>)
 80171be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	f003 0307 	and.w	r3, r3, #7
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d00c      	beq.n	80171e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	3307      	adds	r3, #7
 80171ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	f023 0307 	bic.w	r3, r3, #7
 80171d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80171d8:	68ba      	ldr	r2, [r7, #8]
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	1ad3      	subs	r3, r2, r3
 80171de:	4a1f      	ldr	r2, [pc, #124]	; (801725c <prvHeapInit+0xac>)
 80171e0:	4413      	add	r3, r2
 80171e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80171e8:	4a1d      	ldr	r2, [pc, #116]	; (8017260 <prvHeapInit+0xb0>)
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80171ee:	4b1c      	ldr	r3, [pc, #112]	; (8017260 <prvHeapInit+0xb0>)
 80171f0:	2200      	movs	r2, #0
 80171f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	68ba      	ldr	r2, [r7, #8]
 80171f8:	4413      	add	r3, r2
 80171fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80171fc:	2208      	movs	r2, #8
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	1a9b      	subs	r3, r3, r2
 8017202:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	f023 0307 	bic.w	r3, r3, #7
 801720a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	4a15      	ldr	r2, [pc, #84]	; (8017264 <prvHeapInit+0xb4>)
 8017210:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017212:	4b14      	ldr	r3, [pc, #80]	; (8017264 <prvHeapInit+0xb4>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	2200      	movs	r2, #0
 8017218:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801721a:	4b12      	ldr	r3, [pc, #72]	; (8017264 <prvHeapInit+0xb4>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	2200      	movs	r2, #0
 8017220:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	68fa      	ldr	r2, [r7, #12]
 801722a:	1ad2      	subs	r2, r2, r3
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017230:	4b0c      	ldr	r3, [pc, #48]	; (8017264 <prvHeapInit+0xb4>)
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017238:	683b      	ldr	r3, [r7, #0]
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	4a0a      	ldr	r2, [pc, #40]	; (8017268 <prvHeapInit+0xb8>)
 801723e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	685b      	ldr	r3, [r3, #4]
 8017244:	4a09      	ldr	r2, [pc, #36]	; (801726c <prvHeapInit+0xbc>)
 8017246:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017248:	4b09      	ldr	r3, [pc, #36]	; (8017270 <prvHeapInit+0xc0>)
 801724a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801724e:	601a      	str	r2, [r3, #0]
}
 8017250:	bf00      	nop
 8017252:	3714      	adds	r7, #20
 8017254:	46bd      	mov	sp, r7
 8017256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725a:	4770      	bx	lr
 801725c:	200004b0 	.word	0x200004b0
 8017260:	200084b0 	.word	0x200084b0
 8017264:	200084b8 	.word	0x200084b8
 8017268:	200084c0 	.word	0x200084c0
 801726c:	200084bc 	.word	0x200084bc
 8017270:	200084c4 	.word	0x200084c4

08017274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017274:	b480      	push	{r7}
 8017276:	b085      	sub	sp, #20
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801727c:	4b28      	ldr	r3, [pc, #160]	; (8017320 <prvInsertBlockIntoFreeList+0xac>)
 801727e:	60fb      	str	r3, [r7, #12]
 8017280:	e002      	b.n	8017288 <prvInsertBlockIntoFreeList+0x14>
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	60fb      	str	r3, [r7, #12]
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	687a      	ldr	r2, [r7, #4]
 801728e:	429a      	cmp	r2, r3
 8017290:	d8f7      	bhi.n	8017282 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	685b      	ldr	r3, [r3, #4]
 801729a:	68ba      	ldr	r2, [r7, #8]
 801729c:	4413      	add	r3, r2
 801729e:	687a      	ldr	r2, [r7, #4]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d108      	bne.n	80172b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	685a      	ldr	r2, [r3, #4]
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	685b      	ldr	r3, [r3, #4]
 80172ac:	441a      	add	r2, r3
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	685b      	ldr	r3, [r3, #4]
 80172be:	68ba      	ldr	r2, [r7, #8]
 80172c0:	441a      	add	r2, r3
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d118      	bne.n	80172fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	681a      	ldr	r2, [r3, #0]
 80172ce:	4b15      	ldr	r3, [pc, #84]	; (8017324 <prvInsertBlockIntoFreeList+0xb0>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	429a      	cmp	r2, r3
 80172d4:	d00d      	beq.n	80172f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	685a      	ldr	r2, [r3, #4]
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	441a      	add	r2, r3
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	681a      	ldr	r2, [r3, #0]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	601a      	str	r2, [r3, #0]
 80172f0:	e008      	b.n	8017304 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80172f2:	4b0c      	ldr	r3, [pc, #48]	; (8017324 <prvInsertBlockIntoFreeList+0xb0>)
 80172f4:	681a      	ldr	r2, [r3, #0]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	601a      	str	r2, [r3, #0]
 80172fa:	e003      	b.n	8017304 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681a      	ldr	r2, [r3, #0]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017304:	68fa      	ldr	r2, [r7, #12]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	429a      	cmp	r2, r3
 801730a:	d002      	beq.n	8017312 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017312:	bf00      	nop
 8017314:	3714      	adds	r7, #20
 8017316:	46bd      	mov	sp, r7
 8017318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731c:	4770      	bx	lr
 801731e:	bf00      	nop
 8017320:	200084b0 	.word	0x200084b0
 8017324:	200084b8 	.word	0x200084b8

08017328 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801732c:	2201      	movs	r2, #1
 801732e:	490e      	ldr	r1, [pc, #56]	; (8017368 <MX_USB_HOST_Init+0x40>)
 8017330:	480e      	ldr	r0, [pc, #56]	; (801736c <MX_USB_HOST_Init+0x44>)
 8017332:	f7fb fbdb 	bl	8012aec <USBH_Init>
 8017336:	4603      	mov	r3, r0
 8017338:	2b00      	cmp	r3, #0
 801733a:	d001      	beq.n	8017340 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801733c:	f7ea feba 	bl	80020b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017340:	490b      	ldr	r1, [pc, #44]	; (8017370 <MX_USB_HOST_Init+0x48>)
 8017342:	480a      	ldr	r0, [pc, #40]	; (801736c <MX_USB_HOST_Init+0x44>)
 8017344:	f7fb fc88 	bl	8012c58 <USBH_RegisterClass>
 8017348:	4603      	mov	r3, r0
 801734a:	2b00      	cmp	r3, #0
 801734c:	d001      	beq.n	8017352 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801734e:	f7ea feb1 	bl	80020b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017352:	4806      	ldr	r0, [pc, #24]	; (801736c <MX_USB_HOST_Init+0x44>)
 8017354:	f7fb fd0c 	bl	8012d70 <USBH_Start>
 8017358:	4603      	mov	r3, r0
 801735a:	2b00      	cmp	r3, #0
 801735c:	d001      	beq.n	8017362 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801735e:	f7ea fea9 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017362:	bf00      	nop
 8017364:	bd80      	pop	{r7, pc}
 8017366:	bf00      	nop
 8017368:	08017375 	.word	0x08017375
 801736c:	2004b8cc 	.word	0x2004b8cc
 8017370:	2000002c 	.word	0x2000002c

08017374 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017374:	b480      	push	{r7}
 8017376:	b083      	sub	sp, #12
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
 801737c:	460b      	mov	r3, r1
 801737e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017380:	78fb      	ldrb	r3, [r7, #3]
 8017382:	3b01      	subs	r3, #1
 8017384:	2b04      	cmp	r3, #4
 8017386:	d819      	bhi.n	80173bc <USBH_UserProcess+0x48>
 8017388:	a201      	add	r2, pc, #4	; (adr r2, 8017390 <USBH_UserProcess+0x1c>)
 801738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801738e:	bf00      	nop
 8017390:	080173bd 	.word	0x080173bd
 8017394:	080173ad 	.word	0x080173ad
 8017398:	080173bd 	.word	0x080173bd
 801739c:	080173b5 	.word	0x080173b5
 80173a0:	080173a5 	.word	0x080173a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80173a4:	4b09      	ldr	r3, [pc, #36]	; (80173cc <USBH_UserProcess+0x58>)
 80173a6:	2203      	movs	r2, #3
 80173a8:	701a      	strb	r2, [r3, #0]
  break;
 80173aa:	e008      	b.n	80173be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80173ac:	4b07      	ldr	r3, [pc, #28]	; (80173cc <USBH_UserProcess+0x58>)
 80173ae:	2202      	movs	r2, #2
 80173b0:	701a      	strb	r2, [r3, #0]
  break;
 80173b2:	e004      	b.n	80173be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80173b4:	4b05      	ldr	r3, [pc, #20]	; (80173cc <USBH_UserProcess+0x58>)
 80173b6:	2201      	movs	r2, #1
 80173b8:	701a      	strb	r2, [r3, #0]
  break;
 80173ba:	e000      	b.n	80173be <USBH_UserProcess+0x4a>

  default:
  break;
 80173bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80173be:	bf00      	nop
 80173c0:	370c      	adds	r7, #12
 80173c2:	46bd      	mov	sp, r7
 80173c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c8:	4770      	bx	lr
 80173ca:	bf00      	nop
 80173cc:	200084c8 	.word	0x200084c8

080173d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b08a      	sub	sp, #40	; 0x28
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80173d8:	f107 0314 	add.w	r3, r7, #20
 80173dc:	2200      	movs	r2, #0
 80173de:	601a      	str	r2, [r3, #0]
 80173e0:	605a      	str	r2, [r3, #4]
 80173e2:	609a      	str	r2, [r3, #8]
 80173e4:	60da      	str	r2, [r3, #12]
 80173e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80173f0:	d13c      	bne.n	801746c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80173f2:	4b20      	ldr	r3, [pc, #128]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 80173f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173f6:	4a1f      	ldr	r2, [pc, #124]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 80173f8:	f043 0301 	orr.w	r3, r3, #1
 80173fc:	6313      	str	r3, [r2, #48]	; 0x30
 80173fe:	4b1d      	ldr	r3, [pc, #116]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 8017400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017402:	f003 0301 	and.w	r3, r3, #1
 8017406:	613b      	str	r3, [r7, #16]
 8017408:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801740a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801740e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017410:	2302      	movs	r3, #2
 8017412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017414:	2300      	movs	r3, #0
 8017416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017418:	2303      	movs	r3, #3
 801741a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801741c:	230a      	movs	r3, #10
 801741e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017420:	f107 0314 	add.w	r3, r7, #20
 8017424:	4619      	mov	r1, r3
 8017426:	4814      	ldr	r0, [pc, #80]	; (8017478 <HAL_HCD_MspInit+0xa8>)
 8017428:	f7ef fd86 	bl	8006f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801742c:	4b11      	ldr	r3, [pc, #68]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 801742e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017430:	4a10      	ldr	r2, [pc, #64]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 8017432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017436:	6353      	str	r3, [r2, #52]	; 0x34
 8017438:	4b0e      	ldr	r3, [pc, #56]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 801743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801743c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017440:	60fb      	str	r3, [r7, #12]
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	4b0b      	ldr	r3, [pc, #44]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 8017446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017448:	4a0a      	ldr	r2, [pc, #40]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 801744a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801744e:	6453      	str	r3, [r2, #68]	; 0x44
 8017450:	4b08      	ldr	r3, [pc, #32]	; (8017474 <HAL_HCD_MspInit+0xa4>)
 8017452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017458:	60bb      	str	r3, [r7, #8]
 801745a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801745c:	2200      	movs	r2, #0
 801745e:	2105      	movs	r1, #5
 8017460:	2043      	movs	r0, #67	; 0x43
 8017462:	f7ee facf 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017466:	2043      	movs	r0, #67	; 0x43
 8017468:	f7ee fae8 	bl	8005a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801746c:	bf00      	nop
 801746e:	3728      	adds	r7, #40	; 0x28
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}
 8017474:	40023800 	.word	0x40023800
 8017478:	40020000 	.word	0x40020000

0801747c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b082      	sub	sp, #8
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801748a:	4618      	mov	r0, r3
 801748c:	f7fc f91d 	bl	80136ca <USBH_LL_IncTimer>
}
 8017490:	bf00      	nop
 8017492:	3708      	adds	r7, #8
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}

08017498 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b082      	sub	sp, #8
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80174a6:	4618      	mov	r0, r3
 80174a8:	f7fc f961 	bl	801376e <USBH_LL_Connect>
}
 80174ac:	bf00      	nop
 80174ae:	3708      	adds	r7, #8
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}

080174b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b082      	sub	sp, #8
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80174c2:	4618      	mov	r0, r3
 80174c4:	f7fc f976 	bl	80137b4 <USBH_LL_Disconnect>
}
 80174c8:	bf00      	nop
 80174ca:	3708      	adds	r7, #8
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}

080174d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b082      	sub	sp, #8
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
 80174d8:	460b      	mov	r3, r1
 80174da:	70fb      	strb	r3, [r7, #3]
 80174dc:	4613      	mov	r3, r2
 80174de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80174e6:	4618      	mov	r0, r3
 80174e8:	f7fc f9ab 	bl	8013842 <USBH_LL_NotifyURBChange>
#endif
}
 80174ec:	bf00      	nop
 80174ee:	3708      	adds	r7, #8
 80174f0:	46bd      	mov	sp, r7
 80174f2:	bd80      	pop	{r7, pc}

080174f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b082      	sub	sp, #8
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017502:	4618      	mov	r0, r3
 8017504:	f7fc f90b 	bl	801371e <USBH_LL_PortEnabled>
}
 8017508:	bf00      	nop
 801750a:	3708      	adds	r7, #8
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}

08017510 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801751e:	4618      	mov	r0, r3
 8017520:	f7fc f917 	bl	8013752 <USBH_LL_PortDisabled>
}
 8017524:	bf00      	nop
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801753a:	2b01      	cmp	r3, #1
 801753c:	d12a      	bne.n	8017594 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801753e:	4a18      	ldr	r2, [pc, #96]	; (80175a0 <USBH_LL_Init+0x74>)
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4a15      	ldr	r2, [pc, #84]	; (80175a0 <USBH_LL_Init+0x74>)
 801754a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801754e:	4b14      	ldr	r3, [pc, #80]	; (80175a0 <USBH_LL_Init+0x74>)
 8017550:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017554:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8017556:	4b12      	ldr	r3, [pc, #72]	; (80175a0 <USBH_LL_Init+0x74>)
 8017558:	2208      	movs	r2, #8
 801755a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801755c:	4b10      	ldr	r3, [pc, #64]	; (80175a0 <USBH_LL_Init+0x74>)
 801755e:	2201      	movs	r2, #1
 8017560:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017562:	4b0f      	ldr	r3, [pc, #60]	; (80175a0 <USBH_LL_Init+0x74>)
 8017564:	2200      	movs	r2, #0
 8017566:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017568:	4b0d      	ldr	r3, [pc, #52]	; (80175a0 <USBH_LL_Init+0x74>)
 801756a:	2202      	movs	r2, #2
 801756c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801756e:	4b0c      	ldr	r3, [pc, #48]	; (80175a0 <USBH_LL_Init+0x74>)
 8017570:	2200      	movs	r2, #0
 8017572:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017574:	480a      	ldr	r0, [pc, #40]	; (80175a0 <USBH_LL_Init+0x74>)
 8017576:	f7f0 f806 	bl	8007586 <HAL_HCD_Init>
 801757a:	4603      	mov	r3, r0
 801757c:	2b00      	cmp	r3, #0
 801757e:	d001      	beq.n	8017584 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8017580:	f7ea fd98 	bl	80020b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8017584:	4806      	ldr	r0, [pc, #24]	; (80175a0 <USBH_LL_Init+0x74>)
 8017586:	f7f0 fbe3 	bl	8007d50 <HAL_HCD_GetCurrentFrame>
 801758a:	4603      	mov	r3, r0
 801758c:	4619      	mov	r1, r3
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f7fc f88c 	bl	80136ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8017594:	2300      	movs	r3, #0
}
 8017596:	4618      	mov	r0, r3
 8017598:	3708      	adds	r7, #8
 801759a:	46bd      	mov	sp, r7
 801759c:	bd80      	pop	{r7, pc}
 801759e:	bf00      	nop
 80175a0:	2004bcb0 	.word	0x2004bcb0

080175a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b084      	sub	sp, #16
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175ac:	2300      	movs	r3, #0
 80175ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80175b0:	2300      	movs	r3, #0
 80175b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7f0 fb52 	bl	8007c64 <HAL_HCD_Start>
 80175c0:	4603      	mov	r3, r0
 80175c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80175c4:	7bfb      	ldrb	r3, [r7, #15]
 80175c6:	4618      	mov	r0, r3
 80175c8:	f000 f95c 	bl	8017884 <USBH_Get_USB_Status>
 80175cc:	4603      	mov	r3, r0
 80175ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3710      	adds	r7, #16
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}

080175da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80175da:	b580      	push	{r7, lr}
 80175dc:	b084      	sub	sp, #16
 80175de:	af00      	add	r7, sp, #0
 80175e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175e2:	2300      	movs	r3, #0
 80175e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80175e6:	2300      	movs	r3, #0
 80175e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7f0 fb5a 	bl	8007caa <HAL_HCD_Stop>
 80175f6:	4603      	mov	r3, r0
 80175f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80175fa:	7bfb      	ldrb	r3, [r7, #15]
 80175fc:	4618      	mov	r0, r3
 80175fe:	f000 f941 	bl	8017884 <USBH_Get_USB_Status>
 8017602:	4603      	mov	r3, r0
 8017604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017606:	7bbb      	ldrb	r3, [r7, #14]
}
 8017608:	4618      	mov	r0, r3
 801760a:	3710      	adds	r7, #16
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}

08017610 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b084      	sub	sp, #16
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017618:	2301      	movs	r3, #1
 801761a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017622:	4618      	mov	r0, r3
 8017624:	f7f0 fba2 	bl	8007d6c <HAL_HCD_GetCurrentSpeed>
 8017628:	4603      	mov	r3, r0
 801762a:	2b02      	cmp	r3, #2
 801762c:	d00c      	beq.n	8017648 <USBH_LL_GetSpeed+0x38>
 801762e:	2b02      	cmp	r3, #2
 8017630:	d80d      	bhi.n	801764e <USBH_LL_GetSpeed+0x3e>
 8017632:	2b00      	cmp	r3, #0
 8017634:	d002      	beq.n	801763c <USBH_LL_GetSpeed+0x2c>
 8017636:	2b01      	cmp	r3, #1
 8017638:	d003      	beq.n	8017642 <USBH_LL_GetSpeed+0x32>
 801763a:	e008      	b.n	801764e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801763c:	2300      	movs	r3, #0
 801763e:	73fb      	strb	r3, [r7, #15]
    break;
 8017640:	e008      	b.n	8017654 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8017642:	2301      	movs	r3, #1
 8017644:	73fb      	strb	r3, [r7, #15]
    break;
 8017646:	e005      	b.n	8017654 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8017648:	2302      	movs	r3, #2
 801764a:	73fb      	strb	r3, [r7, #15]
    break;
 801764c:	e002      	b.n	8017654 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801764e:	2301      	movs	r3, #1
 8017650:	73fb      	strb	r3, [r7, #15]
    break;
 8017652:	bf00      	nop
  }
  return  speed;
 8017654:	7bfb      	ldrb	r3, [r7, #15]
}
 8017656:	4618      	mov	r0, r3
 8017658:	3710      	adds	r7, #16
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}

0801765e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801765e:	b580      	push	{r7, lr}
 8017660:	b084      	sub	sp, #16
 8017662:	af00      	add	r7, sp, #0
 8017664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017666:	2300      	movs	r3, #0
 8017668:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801766a:	2300      	movs	r3, #0
 801766c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017674:	4618      	mov	r0, r3
 8017676:	f7f0 fb35 	bl	8007ce4 <HAL_HCD_ResetPort>
 801767a:	4603      	mov	r3, r0
 801767c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801767e:	7bfb      	ldrb	r3, [r7, #15]
 8017680:	4618      	mov	r0, r3
 8017682:	f000 f8ff 	bl	8017884 <USBH_Get_USB_Status>
 8017686:	4603      	mov	r3, r0
 8017688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801768a:	7bbb      	ldrb	r3, [r7, #14]
}
 801768c:	4618      	mov	r0, r3
 801768e:	3710      	adds	r7, #16
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}

08017694 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b082      	sub	sp, #8
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
 801769c:	460b      	mov	r3, r1
 801769e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80176a6:	78fa      	ldrb	r2, [r7, #3]
 80176a8:	4611      	mov	r1, r2
 80176aa:	4618      	mov	r0, r3
 80176ac:	f7f0 fb3c 	bl	8007d28 <HAL_HCD_HC_GetXferCount>
 80176b0:	4603      	mov	r3, r0
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	3708      	adds	r7, #8
 80176b6:	46bd      	mov	sp, r7
 80176b8:	bd80      	pop	{r7, pc}

080176ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80176ba:	b590      	push	{r4, r7, lr}
 80176bc:	b089      	sub	sp, #36	; 0x24
 80176be:	af04      	add	r7, sp, #16
 80176c0:	6078      	str	r0, [r7, #4]
 80176c2:	4608      	mov	r0, r1
 80176c4:	4611      	mov	r1, r2
 80176c6:	461a      	mov	r2, r3
 80176c8:	4603      	mov	r3, r0
 80176ca:	70fb      	strb	r3, [r7, #3]
 80176cc:	460b      	mov	r3, r1
 80176ce:	70bb      	strb	r3, [r7, #2]
 80176d0:	4613      	mov	r3, r2
 80176d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176d4:	2300      	movs	r3, #0
 80176d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80176d8:	2300      	movs	r3, #0
 80176da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80176e2:	787c      	ldrb	r4, [r7, #1]
 80176e4:	78ba      	ldrb	r2, [r7, #2]
 80176e6:	78f9      	ldrb	r1, [r7, #3]
 80176e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80176ea:	9302      	str	r3, [sp, #8]
 80176ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80176f0:	9301      	str	r3, [sp, #4]
 80176f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80176f6:	9300      	str	r3, [sp, #0]
 80176f8:	4623      	mov	r3, r4
 80176fa:	f7ef ffa6 	bl	800764a <HAL_HCD_HC_Init>
 80176fe:	4603      	mov	r3, r0
 8017700:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8017702:	7bfb      	ldrb	r3, [r7, #15]
 8017704:	4618      	mov	r0, r3
 8017706:	f000 f8bd 	bl	8017884 <USBH_Get_USB_Status>
 801770a:	4603      	mov	r3, r0
 801770c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801770e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017710:	4618      	mov	r0, r3
 8017712:	3714      	adds	r7, #20
 8017714:	46bd      	mov	sp, r7
 8017716:	bd90      	pop	{r4, r7, pc}

08017718 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b084      	sub	sp, #16
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	460b      	mov	r3, r1
 8017722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017724:	2300      	movs	r3, #0
 8017726:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017728:	2300      	movs	r3, #0
 801772a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017732:	78fa      	ldrb	r2, [r7, #3]
 8017734:	4611      	mov	r1, r2
 8017736:	4618      	mov	r0, r3
 8017738:	f7f0 f816 	bl	8007768 <HAL_HCD_HC_Halt>
 801773c:	4603      	mov	r3, r0
 801773e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017740:	7bfb      	ldrb	r3, [r7, #15]
 8017742:	4618      	mov	r0, r3
 8017744:	f000 f89e 	bl	8017884 <USBH_Get_USB_Status>
 8017748:	4603      	mov	r3, r0
 801774a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801774c:	7bbb      	ldrb	r3, [r7, #14]
}
 801774e:	4618      	mov	r0, r3
 8017750:	3710      	adds	r7, #16
 8017752:	46bd      	mov	sp, r7
 8017754:	bd80      	pop	{r7, pc}

08017756 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8017756:	b590      	push	{r4, r7, lr}
 8017758:	b089      	sub	sp, #36	; 0x24
 801775a:	af04      	add	r7, sp, #16
 801775c:	6078      	str	r0, [r7, #4]
 801775e:	4608      	mov	r0, r1
 8017760:	4611      	mov	r1, r2
 8017762:	461a      	mov	r2, r3
 8017764:	4603      	mov	r3, r0
 8017766:	70fb      	strb	r3, [r7, #3]
 8017768:	460b      	mov	r3, r1
 801776a:	70bb      	strb	r3, [r7, #2]
 801776c:	4613      	mov	r3, r2
 801776e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017770:	2300      	movs	r3, #0
 8017772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017774:	2300      	movs	r3, #0
 8017776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801777e:	787c      	ldrb	r4, [r7, #1]
 8017780:	78ba      	ldrb	r2, [r7, #2]
 8017782:	78f9      	ldrb	r1, [r7, #3]
 8017784:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017788:	9303      	str	r3, [sp, #12]
 801778a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801778c:	9302      	str	r3, [sp, #8]
 801778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017790:	9301      	str	r3, [sp, #4]
 8017792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017796:	9300      	str	r3, [sp, #0]
 8017798:	4623      	mov	r3, r4
 801779a:	f7f0 f809 	bl	80077b0 <HAL_HCD_HC_SubmitRequest>
 801779e:	4603      	mov	r3, r0
 80177a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80177a2:	7bfb      	ldrb	r3, [r7, #15]
 80177a4:	4618      	mov	r0, r3
 80177a6:	f000 f86d 	bl	8017884 <USBH_Get_USB_Status>
 80177aa:	4603      	mov	r3, r0
 80177ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80177b0:	4618      	mov	r0, r3
 80177b2:	3714      	adds	r7, #20
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd90      	pop	{r4, r7, pc}

080177b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	460b      	mov	r3, r1
 80177c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80177ca:	78fa      	ldrb	r2, [r7, #3]
 80177cc:	4611      	mov	r1, r2
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7f0 fa96 	bl	8007d00 <HAL_HCD_HC_GetURBState>
 80177d4:	4603      	mov	r3, r0
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3708      	adds	r7, #8
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}

080177de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80177de:	b580      	push	{r7, lr}
 80177e0:	b082      	sub	sp, #8
 80177e2:	af00      	add	r7, sp, #0
 80177e4:	6078      	str	r0, [r7, #4]
 80177e6:	460b      	mov	r3, r1
 80177e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80177f0:	2b01      	cmp	r3, #1
 80177f2:	d103      	bne.n	80177fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80177f4:	78fb      	ldrb	r3, [r7, #3]
 80177f6:	4618      	mov	r0, r3
 80177f8:	f000 f870 	bl	80178dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80177fc:	20c8      	movs	r0, #200	; 0xc8
 80177fe:	f7ed fd79 	bl	80052f4 <HAL_Delay>
  return USBH_OK;
 8017802:	2300      	movs	r3, #0
}
 8017804:	4618      	mov	r0, r3
 8017806:	3708      	adds	r7, #8
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}

0801780c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801780c:	b480      	push	{r7}
 801780e:	b085      	sub	sp, #20
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	460b      	mov	r3, r1
 8017816:	70fb      	strb	r3, [r7, #3]
 8017818:	4613      	mov	r3, r2
 801781a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017822:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8017824:	78fb      	ldrb	r3, [r7, #3]
 8017826:	68fa      	ldr	r2, [r7, #12]
 8017828:	212c      	movs	r1, #44	; 0x2c
 801782a:	fb01 f303 	mul.w	r3, r1, r3
 801782e:	4413      	add	r3, r2
 8017830:	333b      	adds	r3, #59	; 0x3b
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d009      	beq.n	801784c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8017838:	78fb      	ldrb	r3, [r7, #3]
 801783a:	68fa      	ldr	r2, [r7, #12]
 801783c:	212c      	movs	r1, #44	; 0x2c
 801783e:	fb01 f303 	mul.w	r3, r1, r3
 8017842:	4413      	add	r3, r2
 8017844:	3354      	adds	r3, #84	; 0x54
 8017846:	78ba      	ldrb	r2, [r7, #2]
 8017848:	701a      	strb	r2, [r3, #0]
 801784a:	e008      	b.n	801785e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801784c:	78fb      	ldrb	r3, [r7, #3]
 801784e:	68fa      	ldr	r2, [r7, #12]
 8017850:	212c      	movs	r1, #44	; 0x2c
 8017852:	fb01 f303 	mul.w	r3, r1, r3
 8017856:	4413      	add	r3, r2
 8017858:	3355      	adds	r3, #85	; 0x55
 801785a:	78ba      	ldrb	r2, [r7, #2]
 801785c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801785e:	2300      	movs	r3, #0
}
 8017860:	4618      	mov	r0, r3
 8017862:	3714      	adds	r7, #20
 8017864:	46bd      	mov	sp, r7
 8017866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786a:	4770      	bx	lr

0801786c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	f7ed fd3d 	bl	80052f4 <HAL_Delay>
}
 801787a:	bf00      	nop
 801787c:	3708      	adds	r7, #8
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}
	...

08017884 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017884:	b480      	push	{r7}
 8017886:	b085      	sub	sp, #20
 8017888:	af00      	add	r7, sp, #0
 801788a:	4603      	mov	r3, r0
 801788c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801788e:	2300      	movs	r3, #0
 8017890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017892:	79fb      	ldrb	r3, [r7, #7]
 8017894:	2b03      	cmp	r3, #3
 8017896:	d817      	bhi.n	80178c8 <USBH_Get_USB_Status+0x44>
 8017898:	a201      	add	r2, pc, #4	; (adr r2, 80178a0 <USBH_Get_USB_Status+0x1c>)
 801789a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801789e:	bf00      	nop
 80178a0:	080178b1 	.word	0x080178b1
 80178a4:	080178b7 	.word	0x080178b7
 80178a8:	080178bd 	.word	0x080178bd
 80178ac:	080178c3 	.word	0x080178c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80178b0:	2300      	movs	r3, #0
 80178b2:	73fb      	strb	r3, [r7, #15]
    break;
 80178b4:	e00b      	b.n	80178ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80178b6:	2302      	movs	r3, #2
 80178b8:	73fb      	strb	r3, [r7, #15]
    break;
 80178ba:	e008      	b.n	80178ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80178bc:	2301      	movs	r3, #1
 80178be:	73fb      	strb	r3, [r7, #15]
    break;
 80178c0:	e005      	b.n	80178ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80178c2:	2302      	movs	r3, #2
 80178c4:	73fb      	strb	r3, [r7, #15]
    break;
 80178c6:	e002      	b.n	80178ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80178c8:	2302      	movs	r3, #2
 80178ca:	73fb      	strb	r3, [r7, #15]
    break;
 80178cc:	bf00      	nop
  }
  return usb_status;
 80178ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80178d0:	4618      	mov	r0, r3
 80178d2:	3714      	adds	r7, #20
 80178d4:	46bd      	mov	sp, r7
 80178d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178da:	4770      	bx	lr

080178dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b084      	sub	sp, #16
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	4603      	mov	r3, r0
 80178e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80178e6:	79fb      	ldrb	r3, [r7, #7]
 80178e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80178ea:	79fb      	ldrb	r3, [r7, #7]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d102      	bne.n	80178f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80178f0:	2301      	movs	r3, #1
 80178f2:	73fb      	strb	r3, [r7, #15]
 80178f4:	e001      	b.n	80178fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80178f6:	2300      	movs	r3, #0
 80178f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80178fa:	7bfb      	ldrb	r3, [r7, #15]
 80178fc:	461a      	mov	r2, r3
 80178fe:	2120      	movs	r1, #32
 8017900:	4803      	ldr	r0, [pc, #12]	; (8017910 <MX_DriverVbusFS+0x34>)
 8017902:	f7ef fde9 	bl	80074d8 <HAL_GPIO_WritePin>
}
 8017906:	bf00      	nop
 8017908:	3710      	adds	r7, #16
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}
 801790e:	bf00      	nop
 8017910:	40020c00 	.word	0x40020c00

08017914 <arm_rfft_fast_init_f32>:
 8017914:	084b      	lsrs	r3, r1, #1
 8017916:	2b80      	cmp	r3, #128	; 0x80
 8017918:	b430      	push	{r4, r5}
 801791a:	8201      	strh	r1, [r0, #16]
 801791c:	8003      	strh	r3, [r0, #0]
 801791e:	d070      	beq.n	8017a02 <arm_rfft_fast_init_f32+0xee>
 8017920:	d916      	bls.n	8017950 <arm_rfft_fast_init_f32+0x3c>
 8017922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017926:	d05f      	beq.n	80179e8 <arm_rfft_fast_init_f32+0xd4>
 8017928:	d936      	bls.n	8017998 <arm_rfft_fast_init_f32+0x84>
 801792a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801792e:	d026      	beq.n	801797e <arm_rfft_fast_init_f32+0x6a>
 8017930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017934:	d112      	bne.n	801795c <arm_rfft_fast_init_f32+0x48>
 8017936:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 801793a:	4c38      	ldr	r4, [pc, #224]	; (8017a1c <arm_rfft_fast_init_f32+0x108>)
 801793c:	4938      	ldr	r1, [pc, #224]	; (8017a20 <arm_rfft_fast_init_f32+0x10c>)
 801793e:	2300      	movs	r3, #0
 8017940:	4a38      	ldr	r2, [pc, #224]	; (8017a24 <arm_rfft_fast_init_f32+0x110>)
 8017942:	8185      	strh	r5, [r0, #12]
 8017944:	6084      	str	r4, [r0, #8]
 8017946:	6041      	str	r1, [r0, #4]
 8017948:	6142      	str	r2, [r0, #20]
 801794a:	4618      	mov	r0, r3
 801794c:	bc30      	pop	{r4, r5}
 801794e:	4770      	bx	lr
 8017950:	2b20      	cmp	r3, #32
 8017952:	d031      	beq.n	80179b8 <arm_rfft_fast_init_f32+0xa4>
 8017954:	2b40      	cmp	r3, #64	; 0x40
 8017956:	d006      	beq.n	8017966 <arm_rfft_fast_init_f32+0x52>
 8017958:	2b10      	cmp	r3, #16
 801795a:	d039      	beq.n	80179d0 <arm_rfft_fast_init_f32+0xbc>
 801795c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017960:	bc30      	pop	{r4, r5}
 8017962:	4618      	mov	r0, r3
 8017964:	4770      	bx	lr
 8017966:	2538      	movs	r5, #56	; 0x38
 8017968:	4c2f      	ldr	r4, [pc, #188]	; (8017a28 <arm_rfft_fast_init_f32+0x114>)
 801796a:	4930      	ldr	r1, [pc, #192]	; (8017a2c <arm_rfft_fast_init_f32+0x118>)
 801796c:	2300      	movs	r3, #0
 801796e:	4a30      	ldr	r2, [pc, #192]	; (8017a30 <arm_rfft_fast_init_f32+0x11c>)
 8017970:	8185      	strh	r5, [r0, #12]
 8017972:	6084      	str	r4, [r0, #8]
 8017974:	6041      	str	r1, [r0, #4]
 8017976:	6142      	str	r2, [r0, #20]
 8017978:	4618      	mov	r0, r3
 801797a:	bc30      	pop	{r4, r5}
 801797c:	4770      	bx	lr
 801797e:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8017982:	4c2c      	ldr	r4, [pc, #176]	; (8017a34 <arm_rfft_fast_init_f32+0x120>)
 8017984:	492c      	ldr	r1, [pc, #176]	; (8017a38 <arm_rfft_fast_init_f32+0x124>)
 8017986:	2300      	movs	r3, #0
 8017988:	4a2c      	ldr	r2, [pc, #176]	; (8017a3c <arm_rfft_fast_init_f32+0x128>)
 801798a:	8185      	strh	r5, [r0, #12]
 801798c:	6084      	str	r4, [r0, #8]
 801798e:	6041      	str	r1, [r0, #4]
 8017990:	6142      	str	r2, [r0, #20]
 8017992:	4618      	mov	r0, r3
 8017994:	bc30      	pop	{r4, r5}
 8017996:	4770      	bx	lr
 8017998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801799c:	d1de      	bne.n	801795c <arm_rfft_fast_init_f32+0x48>
 801799e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80179a2:	4c27      	ldr	r4, [pc, #156]	; (8017a40 <arm_rfft_fast_init_f32+0x12c>)
 80179a4:	4927      	ldr	r1, [pc, #156]	; (8017a44 <arm_rfft_fast_init_f32+0x130>)
 80179a6:	2300      	movs	r3, #0
 80179a8:	4a27      	ldr	r2, [pc, #156]	; (8017a48 <arm_rfft_fast_init_f32+0x134>)
 80179aa:	8185      	strh	r5, [r0, #12]
 80179ac:	6084      	str	r4, [r0, #8]
 80179ae:	6041      	str	r1, [r0, #4]
 80179b0:	6142      	str	r2, [r0, #20]
 80179b2:	4618      	mov	r0, r3
 80179b4:	bc30      	pop	{r4, r5}
 80179b6:	4770      	bx	lr
 80179b8:	2530      	movs	r5, #48	; 0x30
 80179ba:	4c24      	ldr	r4, [pc, #144]	; (8017a4c <arm_rfft_fast_init_f32+0x138>)
 80179bc:	4924      	ldr	r1, [pc, #144]	; (8017a50 <arm_rfft_fast_init_f32+0x13c>)
 80179be:	2300      	movs	r3, #0
 80179c0:	4a24      	ldr	r2, [pc, #144]	; (8017a54 <arm_rfft_fast_init_f32+0x140>)
 80179c2:	8185      	strh	r5, [r0, #12]
 80179c4:	6084      	str	r4, [r0, #8]
 80179c6:	6041      	str	r1, [r0, #4]
 80179c8:	6142      	str	r2, [r0, #20]
 80179ca:	4618      	mov	r0, r3
 80179cc:	bc30      	pop	{r4, r5}
 80179ce:	4770      	bx	lr
 80179d0:	2514      	movs	r5, #20
 80179d2:	4c21      	ldr	r4, [pc, #132]	; (8017a58 <arm_rfft_fast_init_f32+0x144>)
 80179d4:	4921      	ldr	r1, [pc, #132]	; (8017a5c <arm_rfft_fast_init_f32+0x148>)
 80179d6:	2300      	movs	r3, #0
 80179d8:	4a21      	ldr	r2, [pc, #132]	; (8017a60 <arm_rfft_fast_init_f32+0x14c>)
 80179da:	8185      	strh	r5, [r0, #12]
 80179dc:	6084      	str	r4, [r0, #8]
 80179de:	6041      	str	r1, [r0, #4]
 80179e0:	6142      	str	r2, [r0, #20]
 80179e2:	4618      	mov	r0, r3
 80179e4:	bc30      	pop	{r4, r5}
 80179e6:	4770      	bx	lr
 80179e8:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80179ec:	4c1d      	ldr	r4, [pc, #116]	; (8017a64 <arm_rfft_fast_init_f32+0x150>)
 80179ee:	491e      	ldr	r1, [pc, #120]	; (8017a68 <arm_rfft_fast_init_f32+0x154>)
 80179f0:	2300      	movs	r3, #0
 80179f2:	4a1e      	ldr	r2, [pc, #120]	; (8017a6c <arm_rfft_fast_init_f32+0x158>)
 80179f4:	8185      	strh	r5, [r0, #12]
 80179f6:	6084      	str	r4, [r0, #8]
 80179f8:	6041      	str	r1, [r0, #4]
 80179fa:	6142      	str	r2, [r0, #20]
 80179fc:	4618      	mov	r0, r3
 80179fe:	bc30      	pop	{r4, r5}
 8017a00:	4770      	bx	lr
 8017a02:	25d0      	movs	r5, #208	; 0xd0
 8017a04:	4c1a      	ldr	r4, [pc, #104]	; (8017a70 <arm_rfft_fast_init_f32+0x15c>)
 8017a06:	491b      	ldr	r1, [pc, #108]	; (8017a74 <arm_rfft_fast_init_f32+0x160>)
 8017a08:	2300      	movs	r3, #0
 8017a0a:	4a1b      	ldr	r2, [pc, #108]	; (8017a78 <arm_rfft_fast_init_f32+0x164>)
 8017a0c:	8185      	strh	r5, [r0, #12]
 8017a0e:	6084      	str	r4, [r0, #8]
 8017a10:	6041      	str	r1, [r0, #4]
 8017a12:	6142      	str	r2, [r0, #20]
 8017a14:	4618      	mov	r0, r3
 8017a16:	bc30      	pop	{r4, r5}
 8017a18:	4770      	bx	lr
 8017a1a:	bf00      	nop
 8017a1c:	0802b608 	.word	0x0802b608
 8017a20:	0801c800 	.word	0x0801c800
 8017a24:	08022970 	.word	0x08022970
 8017a28:	08020900 	.word	0x08020900
 8017a2c:	0802d3c8 	.word	0x0802d3c8
 8017a30:	0802f8b8 	.word	0x0802f8b8
 8017a34:	080292f0 	.word	0x080292f0
 8017a38:	080271f0 	.word	0x080271f0
 8017a3c:	08020970 	.word	0x08020970
 8017a40:	0802f548 	.word	0x0802f548
 8017a44:	08026970 	.word	0x08026970
 8017a48:	0802d5c8 	.word	0x0802d5c8
 8017a4c:	0802a1a8 	.word	0x0802a1a8
 8017a50:	080291f0 	.word	0x080291f0
 8017a54:	08020800 	.word	0x08020800
 8017a58:	0802a100 	.word	0x0802a100
 8017a5c:	08027170 	.word	0x08027170
 8017a60:	0802a128 	.word	0x0802a128
 8017a64:	0802ddc8 	.word	0x0802ddc8
 8017a68:	0802a608 	.word	0x0802a608
 8017a6c:	0802e148 	.word	0x0802e148
 8017a70:	0802fab8 	.word	0x0802fab8
 8017a74:	0802a208 	.word	0x0802a208
 8017a78:	0802f148 	.word	0x0802f148

08017a7c <arm_rfft_fast_f32>:
 8017a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a80:	8a05      	ldrh	r5, [r0, #16]
 8017a82:	4606      	mov	r6, r0
 8017a84:	4617      	mov	r7, r2
 8017a86:	460c      	mov	r4, r1
 8017a88:	086d      	lsrs	r5, r5, #1
 8017a8a:	8005      	strh	r5, [r0, #0]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d15e      	bne.n	8017b4e <arm_rfft_fast_f32+0xd2>
 8017a90:	461a      	mov	r2, r3
 8017a92:	2301      	movs	r3, #1
 8017a94:	f000 fbde 	bl	8018254 <arm_cfft_f32>
 8017a98:	edd4 7a00 	vldr	s15, [r4]
 8017a9c:	ed94 7a01 	vldr	s14, [r4, #4]
 8017aa0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017aa8:	8832      	ldrh	r2, [r6, #0]
 8017aaa:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017aae:	6975      	ldr	r5, [r6, #20]
 8017ab0:	3a01      	subs	r2, #1
 8017ab2:	eeb0 3a46 	vmov.f32	s6, s12
 8017ab6:	3510      	adds	r5, #16
 8017ab8:	f107 0610 	add.w	r6, r7, #16
 8017abc:	ee77 6a87 	vadd.f32	s13, s15, s14
 8017ac0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8017ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017ac8:	f104 0310 	add.w	r3, r4, #16
 8017acc:	3808      	subs	r0, #8
 8017ace:	ee26 7a86 	vmul.f32	s14, s13, s12
 8017ad2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017ad6:	ed87 7a00 	vstr	s14, [r7]
 8017ada:	edc7 7a01 	vstr	s15, [r7, #4]
 8017ade:	ed90 7a02 	vldr	s14, [r0, #8]
 8017ae2:	3a01      	subs	r2, #1
 8017ae4:	ed53 6a02 	vldr	s13, [r3, #-8]
 8017ae8:	f1a0 0008 	sub.w	r0, r0, #8
 8017aec:	ed15 6a02 	vldr	s12, [r5, #-8]
 8017af0:	f103 0308 	add.w	r3, r3, #8
 8017af4:	ee77 7a66 	vsub.f32	s15, s14, s13
 8017af8:	edd0 3a05 	vldr	s7, [r0, #20]
 8017afc:	ed13 5a03 	vldr	s10, [r3, #-12]
 8017b00:	ee77 4a26 	vadd.f32	s9, s14, s13
 8017b04:	ed55 5a01 	vldr	s11, [r5, #-4]
 8017b08:	f106 0608 	add.w	r6, r6, #8
 8017b0c:	ee66 6a27 	vmul.f32	s13, s12, s15
 8017b10:	f105 0508 	add.w	r5, r5, #8
 8017b14:	ee33 4a85 	vadd.f32	s8, s7, s10
 8017b18:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8017b1c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8017b20:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017b24:	ee26 6a04 	vmul.f32	s12, s12, s8
 8017b28:	ee77 7a05 	vadd.f32	s15, s14, s10
 8017b2c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8017b30:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017b34:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8017b38:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017b3c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8017b40:	ed46 7a03 	vstr	s15, [r6, #-12]
 8017b44:	ed06 7a04 	vstr	s14, [r6, #-16]
 8017b48:	d1c9      	bne.n	8017ade <arm_rfft_fast_f32+0x62>
 8017b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b4e:	edd1 7a00 	vldr	s15, [r1]
 8017b52:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8017b56:	edd1 6a01 	vldr	s13, [r1, #4]
 8017b5a:	1e68      	subs	r0, r5, #1
 8017b5c:	6975      	ldr	r5, [r6, #20]
 8017b5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017b62:	00c1      	lsls	r1, r0, #3
 8017b64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017b68:	ee27 7a23 	vmul.f32	s14, s14, s7
 8017b6c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8017b70:	ed82 7a00 	vstr	s14, [r2]
 8017b74:	edc2 7a01 	vstr	s15, [r2, #4]
 8017b78:	b3e0      	cbz	r0, 8017bf4 <arm_rfft_fast_f32+0x178>
 8017b7a:	3908      	subs	r1, #8
 8017b7c:	f104 0210 	add.w	r2, r4, #16
 8017b80:	3510      	adds	r5, #16
 8017b82:	440c      	add	r4, r1
 8017b84:	f107 0110 	add.w	r1, r7, #16
 8017b88:	ed94 7a02 	vldr	s14, [r4, #8]
 8017b8c:	3801      	subs	r0, #1
 8017b8e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8017b92:	f1a4 0408 	sub.w	r4, r4, #8
 8017b96:	ed15 6a02 	vldr	s12, [r5, #-8]
 8017b9a:	f102 0208 	add.w	r2, r2, #8
 8017b9e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8017ba2:	ed94 4a05 	vldr	s8, [r4, #20]
 8017ba6:	ed12 5a03 	vldr	s10, [r2, #-12]
 8017baa:	ee77 6a26 	vadd.f32	s13, s14, s13
 8017bae:	ed55 5a01 	vldr	s11, [r5, #-4]
 8017bb2:	f101 0108 	add.w	r1, r1, #8
 8017bb6:	ee26 3a27 	vmul.f32	s6, s12, s15
 8017bba:	f105 0508 	add.w	r5, r5, #8
 8017bbe:	ee74 4a05 	vadd.f32	s9, s8, s10
 8017bc2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8017bc6:	ee35 5a44 	vsub.f32	s10, s10, s8
 8017bca:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8017bce:	ee26 6a24 	vmul.f32	s12, s12, s9
 8017bd2:	ee77 7a05 	vadd.f32	s15, s14, s10
 8017bd6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8017bda:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017bde:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8017be2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8017be6:	ee27 7a23 	vmul.f32	s14, s14, s7
 8017bea:	ed41 7a03 	vstr	s15, [r1, #-12]
 8017bee:	ed01 7a04 	vstr	s14, [r1, #-16]
 8017bf2:	d1c9      	bne.n	8017b88 <arm_rfft_fast_f32+0x10c>
 8017bf4:	461a      	mov	r2, r3
 8017bf6:	4639      	mov	r1, r7
 8017bf8:	4630      	mov	r0, r6
 8017bfa:	2301      	movs	r3, #1
 8017bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c00:	f000 bb28 	b.w	8018254 <arm_cfft_f32>

08017c04 <arm_cfft_radix8by2_f32>:
 8017c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c08:	4607      	mov	r7, r0
 8017c0a:	4608      	mov	r0, r1
 8017c0c:	ed2d 8b06 	vpush	{d8-d10}
 8017c10:	f8b7 e000 	ldrh.w	lr, [r7]
 8017c14:	687a      	ldr	r2, [r7, #4]
 8017c16:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8017c1a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8017c1e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8017c22:	f000 80b0 	beq.w	8017d86 <arm_cfft_radix8by2_f32+0x182>
 8017c26:	008b      	lsls	r3, r1, #2
 8017c28:	3210      	adds	r2, #16
 8017c2a:	f100 0610 	add.w	r6, r0, #16
 8017c2e:	f108 0510 	add.w	r5, r8, #16
 8017c32:	3310      	adds	r3, #16
 8017c34:	18c4      	adds	r4, r0, r3
 8017c36:	4443      	add	r3, r8
 8017c38:	ed55 6a04 	vldr	s13, [r5, #-16]
 8017c3c:	f1be 0e01 	subs.w	lr, lr, #1
 8017c40:	ed56 4a04 	vldr	s9, [r6, #-16]
 8017c44:	f104 0410 	add.w	r4, r4, #16
 8017c48:	ed15 7a03 	vldr	s14, [r5, #-12]
 8017c4c:	f106 0610 	add.w	r6, r6, #16
 8017c50:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8017c54:	ed55 7a02 	vldr	s15, [r5, #-8]
 8017c58:	ed55 2a01 	vldr	s5, [r5, #-4]
 8017c5c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8017c60:	ed53 0a04 	vldr	s1, [r3, #-16]
 8017c64:	f102 0210 	add.w	r2, r2, #16
 8017c68:	ed13 5a03 	vldr	s10, [r3, #-12]
 8017c6c:	f105 0510 	add.w	r5, r5, #16
 8017c70:	ed13 3a02 	vldr	s6, [r3, #-8]
 8017c74:	f103 0310 	add.w	r3, r3, #16
 8017c78:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8017c7c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8017c80:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8017c84:	ee33 8a83 	vadd.f32	s16, s7, s6
 8017c88:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8017c8c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8017c90:	ee34 0a06 	vadd.f32	s0, s8, s12
 8017c94:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8017c98:	ee76 aa87 	vadd.f32	s21, s13, s14
 8017c9c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8017ca0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8017ca4:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8017ca8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8017cac:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8017cb0:	ee71 8a05 	vadd.f32	s17, s2, s10
 8017cb4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8017cb8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8017cbc:	ee72 9a22 	vadd.f32	s19, s4, s5
 8017cc0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8017cc4:	ee35 5a41 	vsub.f32	s10, s10, s2
 8017cc8:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8017ccc:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8017cd0:	ee36 6a44 	vsub.f32	s12, s12, s8
 8017cd4:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8017cd8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8017cdc:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8017ce0:	ee72 7a62 	vsub.f32	s15, s4, s5
 8017ce4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8017ce8:	ee73 2a63 	vsub.f32	s5, s6, s7
 8017cec:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8017cf0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8017cf4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8017cf8:	ee24 3a84 	vmul.f32	s6, s9, s8
 8017cfc:	ee27 2a26 	vmul.f32	s4, s14, s13
 8017d00:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8017d04:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8017d08:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017d0c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8017d10:	ee65 6a26 	vmul.f32	s13, s10, s13
 8017d14:	ee25 5a04 	vmul.f32	s10, s10, s8
 8017d18:	ee37 7a64 	vsub.f32	s14, s14, s9
 8017d1c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017d20:	ee33 4a02 	vadd.f32	s8, s6, s4
 8017d24:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8017d28:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8017d2c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8017d30:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8017d34:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8017d38:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8017d3c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8017d40:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8017d44:	ee27 4a87 	vmul.f32	s8, s15, s14
 8017d48:	ee61 5a87 	vmul.f32	s11, s3, s14
 8017d4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017d50:	ee22 5a87 	vmul.f32	s10, s5, s14
 8017d54:	ee26 7a07 	vmul.f32	s14, s12, s14
 8017d58:	ee26 6a26 	vmul.f32	s12, s12, s13
 8017d5c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8017d60:	ee74 4a84 	vadd.f32	s9, s9, s8
 8017d64:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8017d68:	ee35 6a46 	vsub.f32	s12, s10, s12
 8017d6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017d70:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8017d74:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8017d78:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8017d7c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8017d80:	f47f af5a 	bne.w	8017c38 <arm_cfft_radix8by2_f32+0x34>
 8017d84:	687a      	ldr	r2, [r7, #4]
 8017d86:	b28c      	uxth	r4, r1
 8017d88:	2302      	movs	r3, #2
 8017d8a:	4621      	mov	r1, r4
 8017d8c:	f000 fbc2 	bl	8018514 <arm_radix8_butterfly_f32>
 8017d90:	4621      	mov	r1, r4
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	4640      	mov	r0, r8
 8017d96:	2302      	movs	r3, #2
 8017d98:	ecbd 8b06 	vpop	{d8-d10}
 8017d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017da0:	f000 bbb8 	b.w	8018514 <arm_radix8_butterfly_f32>

08017da4 <arm_cfft_radix8by4_f32>:
 8017da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da8:	ed2d 8b06 	vpush	{d8-d10}
 8017dac:	8804      	ldrh	r4, [r0, #0]
 8017dae:	b08f      	sub	sp, #60	; 0x3c
 8017db0:	ed91 6a00 	vldr	s12, [r1]
 8017db4:	460a      	mov	r2, r1
 8017db6:	0864      	lsrs	r4, r4, #1
 8017db8:	ed91 7a01 	vldr	s14, [r1, #4]
 8017dbc:	9101      	str	r1, [sp, #4]
 8017dbe:	00a3      	lsls	r3, r4, #2
 8017dc0:	6841      	ldr	r1, [r0, #4]
 8017dc2:	0864      	lsrs	r4, r4, #1
 8017dc4:	900c      	str	r0, [sp, #48]	; 0x30
 8017dc6:	9205      	str	r2, [sp, #20]
 8017dc8:	f101 0610 	add.w	r6, r1, #16
 8017dcc:	4625      	mov	r5, r4
 8017dce:	940b      	str	r4, [sp, #44]	; 0x2c
 8017dd0:	f101 0408 	add.w	r4, r1, #8
 8017dd4:	9602      	str	r6, [sp, #8]
 8017dd6:	9407      	str	r4, [sp, #28]
 8017dd8:	18d4      	adds	r4, r2, r3
 8017dda:	1eaa      	subs	r2, r5, #2
 8017ddc:	f101 0518 	add.w	r5, r1, #24
 8017de0:	18e0      	adds	r0, r4, r3
 8017de2:	edd4 4a00 	vldr	s9, [r4]
 8017de6:	ed94 4a01 	vldr	s8, [r4, #4]
 8017dea:	46a6      	mov	lr, r4
 8017dec:	edd0 6a00 	vldr	s13, [r0]
 8017df0:	18c7      	adds	r7, r0, r3
 8017df2:	edd0 7a01 	vldr	s15, [r0, #4]
 8017df6:	46a0      	mov	r8, r4
 8017df8:	ee76 5a26 	vadd.f32	s11, s12, s13
 8017dfc:	ed97 5a00 	vldr	s10, [r7]
 8017e00:	ee76 6a66 	vsub.f32	s13, s12, s13
 8017e04:	4604      	mov	r4, r0
 8017e06:	9506      	str	r5, [sp, #24]
 8017e08:	4605      	mov	r5, r0
 8017e0a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8017e0e:	900a      	str	r0, [sp, #40]	; 0x28
 8017e10:	9801      	ldr	r0, [sp, #4]
 8017e12:	ee37 6a27 	vadd.f32	s12, s14, s15
 8017e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e1a:	ed97 3a01 	vldr	s6, [r7, #4]
 8017e1e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8017e22:	46bc      	mov	ip, r7
 8017e24:	ee76 3a84 	vadd.f32	s7, s13, s8
 8017e28:	9704      	str	r7, [sp, #16]
 8017e2a:	ee36 7a44 	vsub.f32	s14, s12, s8
 8017e2e:	f8cd e00c 	str.w	lr, [sp, #12]
 8017e32:	ee12 9a90 	vmov	r9, s5
 8017e36:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8017e3a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8017e3e:	1f3e      	subs	r6, r7, #4
 8017e40:	f840 9b08 	str.w	r9, [r0], #8
 8017e44:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8017e48:	edde 2a01 	vldr	s5, [lr, #4]
 8017e4c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017e50:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8017e54:	eddc 4a01 	vldr	s9, [ip, #4]
 8017e58:	ee36 6a22 	vadd.f32	s12, s12, s5
 8017e5c:	9001      	str	r0, [sp, #4]
 8017e5e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017e62:	9805      	ldr	r0, [sp, #20]
 8017e64:	ee13 9a90 	vmov	r9, s7
 8017e68:	ee37 7a43 	vsub.f32	s14, s14, s6
 8017e6c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8017e70:	f1ae 0704 	sub.w	r7, lr, #4
 8017e74:	ee74 4a05 	vadd.f32	s9, s8, s10
 8017e78:	ee76 6a83 	vadd.f32	s13, s13, s6
 8017e7c:	ed80 6a01 	vstr	s12, [r0, #4]
 8017e80:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8017e84:	f848 9b08 	str.w	r9, [r8], #8
 8017e88:	edce 4a01 	vstr	s9, [lr, #4]
 8017e8c:	ee15 ea90 	vmov	lr, s11
 8017e90:	f844 eb08 	str.w	lr, [r4], #8
 8017e94:	ee16 ea90 	vmov	lr, s13
 8017e98:	9408      	str	r4, [sp, #32]
 8017e9a:	462c      	mov	r4, r5
 8017e9c:	ed85 7a01 	vstr	s14, [r5, #4]
 8017ea0:	9d04      	ldr	r5, [sp, #16]
 8017ea2:	f84c eb08 	str.w	lr, [ip], #8
 8017ea6:	edc5 7a01 	vstr	s15, [r5, #4]
 8017eaa:	0855      	lsrs	r5, r2, #1
 8017eac:	9509      	str	r5, [sp, #36]	; 0x24
 8017eae:	f000 8130 	beq.w	8018112 <arm_cfft_radix8by4_f32+0x36e>
 8017eb2:	9805      	ldr	r0, [sp, #20]
 8017eb4:	3b08      	subs	r3, #8
 8017eb6:	46ab      	mov	fp, r5
 8017eb8:	f1a4 020c 	sub.w	r2, r4, #12
 8017ebc:	f100 0510 	add.w	r5, r0, #16
 8017ec0:	f101 0920 	add.w	r9, r1, #32
 8017ec4:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8017ec8:	f8dd a008 	ldr.w	sl, [sp, #8]
 8017ecc:	4433      	add	r3, r6
 8017ece:	3410      	adds	r4, #16
 8017ed0:	4660      	mov	r0, ip
 8017ed2:	4641      	mov	r1, r8
 8017ed4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8017ed8:	ed54 6a02 	vldr	s13, [r4, #-8]
 8017edc:	f1bb 0b01 	subs.w	fp, fp, #1
 8017ee0:	ed55 5a02 	vldr	s11, [r5, #-8]
 8017ee4:	f10a 0a08 	add.w	sl, sl, #8
 8017ee8:	edd1 7a00 	vldr	s15, [r1]
 8017eec:	f105 0508 	add.w	r5, r5, #8
 8017ef0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8017ef4:	edd0 2a00 	vldr	s5, [r0]
 8017ef8:	ed14 7a01 	vldr	s14, [r4, #-4]
 8017efc:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8017f00:	ed55 6a03 	vldr	s13, [r5, #-12]
 8017f04:	f1a2 0208 	sub.w	r2, r2, #8
 8017f08:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8017f0c:	ed90 2a01 	vldr	s4, [r0, #4]
 8017f10:	ee36 5a87 	vadd.f32	s10, s13, s14
 8017f14:	ed91 6a01 	vldr	s12, [r1, #4]
 8017f18:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8017f1c:	f109 0910 	add.w	r9, r9, #16
 8017f20:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8017f24:	f104 0408 	add.w	r4, r4, #8
 8017f28:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8017f2c:	f10e 0e18 	add.w	lr, lr, #24
 8017f30:	ee37 3a67 	vsub.f32	s6, s14, s15
 8017f34:	f1a3 0308 	sub.w	r3, r3, #8
 8017f38:	ed45 6a04 	vstr	s13, [r5, #-16]
 8017f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f40:	edd1 6a01 	vldr	s13, [r1, #4]
 8017f44:	ee75 1a86 	vadd.f32	s3, s11, s12
 8017f48:	edd0 4a01 	vldr	s9, [r0, #4]
 8017f4c:	ee33 3a22 	vadd.f32	s6, s6, s5
 8017f50:	ee75 6a26 	vadd.f32	s13, s10, s13
 8017f54:	ee35 5a46 	vsub.f32	s10, s10, s12
 8017f58:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8017f5c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017f60:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8017f64:	ee35 5a42 	vsub.f32	s10, s10, s4
 8017f68:	ed45 6a03 	vstr	s13, [r5, #-12]
 8017f6c:	ee36 2a02 	vadd.f32	s4, s12, s4
 8017f70:	edd6 7a00 	vldr	s15, [r6]
 8017f74:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8017f78:	ed97 1a00 	vldr	s2, [r7]
 8017f7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017f80:	ed92 8a04 	vldr	s16, [r2, #16]
 8017f84:	ee71 8a27 	vadd.f32	s17, s2, s15
 8017f88:	ed93 aa04 	vldr	s20, [r3, #16]
 8017f8c:	ed16 7a01 	vldr	s14, [r6, #-4]
 8017f90:	ee71 7a67 	vsub.f32	s15, s2, s15
 8017f94:	ed57 0a01 	vldr	s1, [r7, #-4]
 8017f98:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8017f9c:	ee38 6a88 	vadd.f32	s12, s17, s16
 8017fa0:	edd3 9a03 	vldr	s19, [r3, #12]
 8017fa4:	ee30 0a87 	vadd.f32	s0, s1, s14
 8017fa8:	ed92 9a03 	vldr	s18, [r2, #12]
 8017fac:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8017fb0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8017fb4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8017fb8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8017fbc:	ee16 ca10 	vmov	ip, s12
 8017fc0:	ee30 6a49 	vsub.f32	s12, s0, s18
 8017fc4:	ee77 4a01 	vadd.f32	s9, s14, s2
 8017fc8:	f847 c908 	str.w	ip, [r7], #-8
 8017fcc:	ee34 4a29 	vadd.f32	s8, s8, s19
 8017fd0:	edd2 8a03 	vldr	s17, [r2, #12]
 8017fd4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8017fd8:	ed93 8a03 	vldr	s16, [r3, #12]
 8017fdc:	ee71 0a47 	vsub.f32	s1, s2, s14
 8017fe0:	ee30 0a28 	vadd.f32	s0, s0, s17
 8017fe4:	ee39 1a67 	vsub.f32	s2, s18, s15
 8017fe8:	ee36 6a69 	vsub.f32	s12, s12, s19
 8017fec:	ee30 0a08 	vadd.f32	s0, s0, s16
 8017ff0:	ee75 5aca 	vsub.f32	s11, s11, s20
 8017ff4:	ed87 0a01 	vstr	s0, [r7, #4]
 8017ff8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8017ffc:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8018000:	ee21 8a80 	vmul.f32	s16, s3, s0
 8018004:	ee23 7a26 	vmul.f32	s14, s6, s13
 8018008:	ee64 7a26 	vmul.f32	s15, s8, s13
 801800c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8018010:	ee24 4a00 	vmul.f32	s8, s8, s0
 8018014:	ee23 3a00 	vmul.f32	s6, s6, s0
 8018018:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801801c:	ee24 0a80 	vmul.f32	s0, s9, s0
 8018020:	ee38 7a07 	vadd.f32	s14, s16, s14
 8018024:	ee76 6a84 	vadd.f32	s13, s13, s8
 8018028:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801802c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8018030:	ee17 ca10 	vmov	ip, s14
 8018034:	f841 cb08 	str.w	ip, [r1], #8
 8018038:	ed01 3a01 	vstr	s6, [r1, #-4]
 801803c:	ed82 0a04 	vstr	s0, [r2, #16]
 8018040:	edc2 6a03 	vstr	s13, [r2, #12]
 8018044:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8018048:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 801804c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8018050:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8018054:	ee65 4a27 	vmul.f32	s9, s10, s15
 8018058:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801805c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018060:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018064:	ee25 5a26 	vmul.f32	s10, s10, s13
 8018068:	ee66 6a26 	vmul.f32	s13, s12, s13
 801806c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018070:	ee34 6a24 	vadd.f32	s12, s8, s9
 8018074:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8018078:	ee35 5a63 	vsub.f32	s10, s10, s7
 801807c:	ee17 ca90 	vmov	ip, s15
 8018080:	ed04 6a04 	vstr	s12, [r4, #-16]
 8018084:	ed04 5a03 	vstr	s10, [r4, #-12]
 8018088:	f846 c908 	str.w	ip, [r6], #-8
 801808c:	edc6 6a01 	vstr	s13, [r6, #4]
 8018090:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8018094:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8018098:	ee62 5a27 	vmul.f32	s11, s4, s15
 801809c:	ee22 6a87 	vmul.f32	s12, s5, s14
 80180a0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80180a4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80180a8:	ee61 6a07 	vmul.f32	s13, s2, s14
 80180ac:	ee20 7a87 	vmul.f32	s14, s1, s14
 80180b0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80180b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80180b8:	ee35 6a86 	vadd.f32	s12, s11, s12
 80180bc:	ee72 2ac2 	vsub.f32	s5, s5, s4
 80180c0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80180c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80180c8:	ee16 ca10 	vmov	ip, s12
 80180cc:	f840 cb08 	str.w	ip, [r0], #8
 80180d0:	ed40 2a01 	vstr	s5, [r0, #-4]
 80180d4:	edc3 0a04 	vstr	s1, [r3, #16]
 80180d8:	edc3 7a03 	vstr	s15, [r3, #12]
 80180dc:	f47f aefc 	bne.w	8017ed8 <arm_cfft_radix8by4_f32+0x134>
 80180e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80180e2:	9802      	ldr	r0, [sp, #8]
 80180e4:	00cb      	lsls	r3, r1, #3
 80180e6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80180ea:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80180ee:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80180f2:	4498      	add	r8, r3
 80180f4:	449c      	add	ip, r3
 80180f6:	9102      	str	r1, [sp, #8]
 80180f8:	9901      	ldr	r1, [sp, #4]
 80180fa:	4419      	add	r1, r3
 80180fc:	9101      	str	r1, [sp, #4]
 80180fe:	9907      	ldr	r1, [sp, #28]
 8018100:	4419      	add	r1, r3
 8018102:	9107      	str	r1, [sp, #28]
 8018104:	9908      	ldr	r1, [sp, #32]
 8018106:	4419      	add	r1, r3
 8018108:	9b06      	ldr	r3, [sp, #24]
 801810a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801810e:	9108      	str	r1, [sp, #32]
 8018110:	9306      	str	r3, [sp, #24]
 8018112:	9a01      	ldr	r2, [sp, #4]
 8018114:	2304      	movs	r3, #4
 8018116:	9e08      	ldr	r6, [sp, #32]
 8018118:	edd2 7a00 	vldr	s15, [r2]
 801811c:	ed96 7a00 	vldr	s14, [r6]
 8018120:	edd8 2a00 	vldr	s5, [r8]
 8018124:	ee77 5a87 	vadd.f32	s11, s15, s14
 8018128:	ed9c 3a00 	vldr	s6, [ip]
 801812c:	ed92 6a01 	vldr	s12, [r2, #4]
 8018130:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8018134:	edd6 6a01 	vldr	s13, [r6, #4]
 8018138:	ee75 4aa2 	vadd.f32	s9, s11, s5
 801813c:	ed9c 2a01 	vldr	s4, [ip, #4]
 8018140:	ee36 5a26 	vadd.f32	s10, s12, s13
 8018144:	edd8 7a01 	vldr	s15, [r8, #4]
 8018148:	ee76 6a66 	vsub.f32	s13, s12, s13
 801814c:	9d02      	ldr	r5, [sp, #8]
 801814e:	ee34 6a83 	vadd.f32	s12, s9, s6
 8018152:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8018156:	ee37 4a27 	vadd.f32	s8, s14, s15
 801815a:	9805      	ldr	r0, [sp, #20]
 801815c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8018160:	4621      	mov	r1, r4
 8018162:	ed82 6a00 	vstr	s12, [r2]
 8018166:	ee35 6ae2 	vsub.f32	s12, s11, s5
 801816a:	edd8 3a01 	vldr	s7, [r8, #4]
 801816e:	ee75 5a67 	vsub.f32	s11, s10, s15
 8018172:	eddc 1a01 	vldr	s3, [ip, #4]
 8018176:	ee34 4a42 	vsub.f32	s8, s8, s4
 801817a:	ee75 3a23 	vadd.f32	s7, s10, s7
 801817e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8018182:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8018186:	ee33 5aa1 	vadd.f32	s10, s7, s3
 801818a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801818e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8018192:	ed82 5a01 	vstr	s10, [r2, #4]
 8018196:	ee75 5ac2 	vsub.f32	s11, s11, s4
 801819a:	9a07      	ldr	r2, [sp, #28]
 801819c:	ee77 7a02 	vadd.f32	s15, s14, s4
 80181a0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 80181a4:	edd2 2a00 	vldr	s5, [r2]
 80181a8:	ed92 5a01 	vldr	s10, [r2, #4]
 80181ac:	ee64 3a22 	vmul.f32	s7, s8, s5
 80181b0:	ee24 4a05 	vmul.f32	s8, s8, s10
 80181b4:	ee24 5a85 	vmul.f32	s10, s9, s10
 80181b8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80181bc:	ee33 5a85 	vadd.f32	s10, s7, s10
 80181c0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80181c4:	ed88 5a00 	vstr	s10, [r8]
 80181c8:	edc8 4a01 	vstr	s9, [r8, #4]
 80181cc:	edd5 4a01 	vldr	s9, [r5, #4]
 80181d0:	edd5 6a00 	vldr	s13, [r5]
 80181d4:	9d06      	ldr	r5, [sp, #24]
 80181d6:	ee26 5a26 	vmul.f32	s10, s12, s13
 80181da:	ee26 6a24 	vmul.f32	s12, s12, s9
 80181de:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80181e2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80181e6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80181ea:	ee75 5a25 	vadd.f32	s11, s10, s11
 80181ee:	ed86 6a01 	vstr	s12, [r6, #4]
 80181f2:	edc6 5a00 	vstr	s11, [r6]
 80181f6:	edd5 5a01 	vldr	s11, [r5, #4]
 80181fa:	edd5 6a00 	vldr	s13, [r5]
 80181fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018200:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8018204:	ee67 6a26 	vmul.f32	s13, s14, s13
 8018208:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801820c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8018210:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018214:	ee36 7a07 	vadd.f32	s14, s12, s14
 8018218:	edcc 7a01 	vstr	s15, [ip, #4]
 801821c:	ed8c 7a00 	vstr	s14, [ip]
 8018220:	6872      	ldr	r2, [r6, #4]
 8018222:	f000 f977 	bl	8018514 <arm_radix8_butterfly_f32>
 8018226:	9803      	ldr	r0, [sp, #12]
 8018228:	4621      	mov	r1, r4
 801822a:	6872      	ldr	r2, [r6, #4]
 801822c:	2304      	movs	r3, #4
 801822e:	f000 f971 	bl	8018514 <arm_radix8_butterfly_f32>
 8018232:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018234:	4621      	mov	r1, r4
 8018236:	6872      	ldr	r2, [r6, #4]
 8018238:	2304      	movs	r3, #4
 801823a:	f000 f96b 	bl	8018514 <arm_radix8_butterfly_f32>
 801823e:	4621      	mov	r1, r4
 8018240:	6872      	ldr	r2, [r6, #4]
 8018242:	2304      	movs	r3, #4
 8018244:	9804      	ldr	r0, [sp, #16]
 8018246:	b00f      	add	sp, #60	; 0x3c
 8018248:	ecbd 8b06 	vpop	{d8-d10}
 801824c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018250:	f000 b960 	b.w	8018514 <arm_radix8_butterfly_f32>

08018254 <arm_cfft_f32>:
 8018254:	2a01      	cmp	r2, #1
 8018256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801825a:	4606      	mov	r6, r0
 801825c:	4617      	mov	r7, r2
 801825e:	460c      	mov	r4, r1
 8018260:	4698      	mov	r8, r3
 8018262:	8805      	ldrh	r5, [r0, #0]
 8018264:	d053      	beq.n	801830e <arm_cfft_f32+0xba>
 8018266:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801826a:	d04b      	beq.n	8018304 <arm_cfft_f32+0xb0>
 801826c:	d916      	bls.n	801829c <arm_cfft_f32+0x48>
 801826e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8018272:	d01a      	beq.n	80182aa <arm_cfft_f32+0x56>
 8018274:	d95a      	bls.n	801832c <arm_cfft_f32+0xd8>
 8018276:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801827a:	d043      	beq.n	8018304 <arm_cfft_f32+0xb0>
 801827c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8018280:	d105      	bne.n	801828e <arm_cfft_f32+0x3a>
 8018282:	2301      	movs	r3, #1
 8018284:	6872      	ldr	r2, [r6, #4]
 8018286:	4629      	mov	r1, r5
 8018288:	4620      	mov	r0, r4
 801828a:	f000 f943 	bl	8018514 <arm_radix8_butterfly_f32>
 801828e:	f1b8 0f00 	cmp.w	r8, #0
 8018292:	d111      	bne.n	80182b8 <arm_cfft_f32+0x64>
 8018294:	2f01      	cmp	r7, #1
 8018296:	d016      	beq.n	80182c6 <arm_cfft_f32+0x72>
 8018298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801829c:	2d20      	cmp	r5, #32
 801829e:	d031      	beq.n	8018304 <arm_cfft_f32+0xb0>
 80182a0:	d948      	bls.n	8018334 <arm_cfft_f32+0xe0>
 80182a2:	2d40      	cmp	r5, #64	; 0x40
 80182a4:	d0ed      	beq.n	8018282 <arm_cfft_f32+0x2e>
 80182a6:	2d80      	cmp	r5, #128	; 0x80
 80182a8:	d1f1      	bne.n	801828e <arm_cfft_f32+0x3a>
 80182aa:	4621      	mov	r1, r4
 80182ac:	4630      	mov	r0, r6
 80182ae:	f7ff fca9 	bl	8017c04 <arm_cfft_radix8by2_f32>
 80182b2:	f1b8 0f00 	cmp.w	r8, #0
 80182b6:	d0ed      	beq.n	8018294 <arm_cfft_f32+0x40>
 80182b8:	68b2      	ldr	r2, [r6, #8]
 80182ba:	4620      	mov	r0, r4
 80182bc:	89b1      	ldrh	r1, [r6, #12]
 80182be:	f7e7 ffa7 	bl	8000210 <arm_bitreversal_32>
 80182c2:	2f01      	cmp	r7, #1
 80182c4:	d1e8      	bne.n	8018298 <arm_cfft_f32+0x44>
 80182c6:	ee07 5a90 	vmov	s15, r5
 80182ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80182ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80182d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80182d6:	2d00      	cmp	r5, #0
 80182d8:	d0de      	beq.n	8018298 <arm_cfft_f32+0x44>
 80182da:	f104 0108 	add.w	r1, r4, #8
 80182de:	2300      	movs	r3, #0
 80182e0:	ed11 7a02 	vldr	s14, [r1, #-8]
 80182e4:	3301      	adds	r3, #1
 80182e6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80182ea:	3108      	adds	r1, #8
 80182ec:	429d      	cmp	r5, r3
 80182ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80182f2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80182f6:	ed01 7a04 	vstr	s14, [r1, #-16]
 80182fa:	ed41 7a03 	vstr	s15, [r1, #-12]
 80182fe:	d1ef      	bne.n	80182e0 <arm_cfft_f32+0x8c>
 8018300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018304:	4621      	mov	r1, r4
 8018306:	4630      	mov	r0, r6
 8018308:	f7ff fd4c 	bl	8017da4 <arm_cfft_radix8by4_f32>
 801830c:	e7bf      	b.n	801828e <arm_cfft_f32+0x3a>
 801830e:	b1a5      	cbz	r5, 801833a <arm_cfft_f32+0xe6>
 8018310:	f101 030c 	add.w	r3, r1, #12
 8018314:	2200      	movs	r2, #0
 8018316:	ed53 7a02 	vldr	s15, [r3, #-8]
 801831a:	3201      	adds	r2, #1
 801831c:	3308      	adds	r3, #8
 801831e:	eef1 7a67 	vneg.f32	s15, s15
 8018322:	4295      	cmp	r5, r2
 8018324:	ed43 7a04 	vstr	s15, [r3, #-16]
 8018328:	d1f5      	bne.n	8018316 <arm_cfft_f32+0xc2>
 801832a:	e79c      	b.n	8018266 <arm_cfft_f32+0x12>
 801832c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8018330:	d0a7      	beq.n	8018282 <arm_cfft_f32+0x2e>
 8018332:	e7ac      	b.n	801828e <arm_cfft_f32+0x3a>
 8018334:	2d10      	cmp	r5, #16
 8018336:	d0b8      	beq.n	80182aa <arm_cfft_f32+0x56>
 8018338:	e7a9      	b.n	801828e <arm_cfft_f32+0x3a>
 801833a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801833e:	d896      	bhi.n	801826e <arm_cfft_f32+0x1a>
 8018340:	e7ac      	b.n	801829c <arm_cfft_f32+0x48>
 8018342:	bf00      	nop

08018344 <arm_cmplx_mag_f32>:
 8018344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018348:	ea5f 0892 	movs.w	r8, r2, lsr #2
 801834c:	b084      	sub	sp, #16
 801834e:	d07f      	beq.n	8018450 <arm_cmplx_mag_f32+0x10c>
 8018350:	f100 0420 	add.w	r4, r0, #32
 8018354:	f101 0510 	add.w	r5, r1, #16
 8018358:	4646      	mov	r6, r8
 801835a:	2700      	movs	r7, #0
 801835c:	e05a      	b.n	8018414 <arm_cmplx_mag_f32+0xd0>
 801835e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018362:	eeb4 0a40 	vcmp.f32	s0, s0
 8018366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801836a:	f040 80a4 	bne.w	80184b6 <arm_cmplx_mag_f32+0x172>
 801836e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8018372:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8018376:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 801837a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801837e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018382:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801838a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801838e:	f2c0 808f 	blt.w	80184b0 <arm_cmplx_mag_f32+0x16c>
 8018392:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018396:	eeb4 0a40 	vcmp.f32	s0, s0
 801839a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801839e:	f040 80af 	bne.w	8018500 <arm_cmplx_mag_f32+0x1bc>
 80183a2:	ed05 0a03 	vstr	s0, [r5, #-12]
 80183a6:	ed54 7a04 	vldr	s15, [r4, #-16]
 80183aa:	ed14 0a03 	vldr	s0, [r4, #-12]
 80183ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80183b2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80183b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80183ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80183be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183c2:	db72      	blt.n	80184aa <arm_cmplx_mag_f32+0x166>
 80183c4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80183c8:	eeb4 0a40 	vcmp.f32	s0, s0
 80183cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183d0:	f040 808c 	bne.w	80184ec <arm_cmplx_mag_f32+0x1a8>
 80183d4:	ed05 0a02 	vstr	s0, [r5, #-8]
 80183d8:	ed54 7a02 	vldr	s15, [r4, #-8]
 80183dc:	ed14 0a01 	vldr	s0, [r4, #-4]
 80183e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80183e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80183e8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80183ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80183f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183f4:	db20      	blt.n	8018438 <arm_cmplx_mag_f32+0xf4>
 80183f6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80183fa:	eeb4 0a40 	vcmp.f32	s0, s0
 80183fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018402:	d169      	bne.n	80184d8 <arm_cmplx_mag_f32+0x194>
 8018404:	3e01      	subs	r6, #1
 8018406:	ed05 0a01 	vstr	s0, [r5, #-4]
 801840a:	f104 0420 	add.w	r4, r4, #32
 801840e:	f105 0510 	add.w	r5, r5, #16
 8018412:	d019      	beq.n	8018448 <arm_cmplx_mag_f32+0x104>
 8018414:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8018418:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 801841c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018420:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018424:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018430:	da95      	bge.n	801835e <arm_cmplx_mag_f32+0x1a>
 8018432:	f845 7c10 	str.w	r7, [r5, #-16]
 8018436:	e79c      	b.n	8018372 <arm_cmplx_mag_f32+0x2e>
 8018438:	3e01      	subs	r6, #1
 801843a:	f845 7c04 	str.w	r7, [r5, #-4]
 801843e:	f104 0420 	add.w	r4, r4, #32
 8018442:	f105 0510 	add.w	r5, r5, #16
 8018446:	d1e5      	bne.n	8018414 <arm_cmplx_mag_f32+0xd0>
 8018448:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 801844c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8018450:	f012 0503 	ands.w	r5, r2, #3
 8018454:	d026      	beq.n	80184a4 <arm_cmplx_mag_f32+0x160>
 8018456:	f100 0408 	add.w	r4, r0, #8
 801845a:	2600      	movs	r6, #0
 801845c:	e00c      	b.n	8018478 <arm_cmplx_mag_f32+0x134>
 801845e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018462:	eeb4 0a40 	vcmp.f32	s0, s0
 8018466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801846a:	d12e      	bne.n	80184ca <arm_cmplx_mag_f32+0x186>
 801846c:	3d01      	subs	r5, #1
 801846e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8018472:	f104 0408 	add.w	r4, r4, #8
 8018476:	d015      	beq.n	80184a4 <arm_cmplx_mag_f32+0x160>
 8018478:	ed54 7a02 	vldr	s15, [r4, #-8]
 801847c:	3104      	adds	r1, #4
 801847e:	ed14 0a01 	vldr	s0, [r4, #-4]
 8018482:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018486:	ee20 0a00 	vmul.f32	s0, s0, s0
 801848a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801848e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018496:	dae2      	bge.n	801845e <arm_cmplx_mag_f32+0x11a>
 8018498:	3d01      	subs	r5, #1
 801849a:	f841 6c04 	str.w	r6, [r1, #-4]
 801849e:	f104 0408 	add.w	r4, r4, #8
 80184a2:	d1e9      	bne.n	8018478 <arm_cmplx_mag_f32+0x134>
 80184a4:	b004      	add	sp, #16
 80184a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184aa:	f845 7c08 	str.w	r7, [r5, #-8]
 80184ae:	e793      	b.n	80183d8 <arm_cmplx_mag_f32+0x94>
 80184b0:	f845 7c0c 	str.w	r7, [r5, #-12]
 80184b4:	e777      	b.n	80183a6 <arm_cmplx_mag_f32+0x62>
 80184b6:	eeb0 0a67 	vmov.f32	s0, s15
 80184ba:	9203      	str	r2, [sp, #12]
 80184bc:	9102      	str	r1, [sp, #8]
 80184be:	9001      	str	r0, [sp, #4]
 80184c0:	f001 fd58 	bl	8019f74 <sqrtf>
 80184c4:	a801      	add	r0, sp, #4
 80184c6:	c807      	ldmia	r0, {r0, r1, r2}
 80184c8:	e751      	b.n	801836e <arm_cmplx_mag_f32+0x2a>
 80184ca:	eeb0 0a67 	vmov.f32	s0, s15
 80184ce:	9101      	str	r1, [sp, #4]
 80184d0:	f001 fd50 	bl	8019f74 <sqrtf>
 80184d4:	9901      	ldr	r1, [sp, #4]
 80184d6:	e7c9      	b.n	801846c <arm_cmplx_mag_f32+0x128>
 80184d8:	eeb0 0a67 	vmov.f32	s0, s15
 80184dc:	9203      	str	r2, [sp, #12]
 80184de:	9102      	str	r1, [sp, #8]
 80184e0:	9001      	str	r0, [sp, #4]
 80184e2:	f001 fd47 	bl	8019f74 <sqrtf>
 80184e6:	a801      	add	r0, sp, #4
 80184e8:	c807      	ldmia	r0, {r0, r1, r2}
 80184ea:	e78b      	b.n	8018404 <arm_cmplx_mag_f32+0xc0>
 80184ec:	eeb0 0a67 	vmov.f32	s0, s15
 80184f0:	9203      	str	r2, [sp, #12]
 80184f2:	9102      	str	r1, [sp, #8]
 80184f4:	9001      	str	r0, [sp, #4]
 80184f6:	f001 fd3d 	bl	8019f74 <sqrtf>
 80184fa:	a801      	add	r0, sp, #4
 80184fc:	c807      	ldmia	r0, {r0, r1, r2}
 80184fe:	e769      	b.n	80183d4 <arm_cmplx_mag_f32+0x90>
 8018500:	eeb0 0a67 	vmov.f32	s0, s15
 8018504:	9203      	str	r2, [sp, #12]
 8018506:	9102      	str	r1, [sp, #8]
 8018508:	9001      	str	r0, [sp, #4]
 801850a:	f001 fd33 	bl	8019f74 <sqrtf>
 801850e:	a801      	add	r0, sp, #4
 8018510:	c807      	ldmia	r0, {r0, r1, r2}
 8018512:	e746      	b.n	80183a2 <arm_cmplx_mag_f32+0x5e>

08018514 <arm_radix8_butterfly_f32>:
 8018514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018518:	469e      	mov	lr, r3
 801851a:	4603      	mov	r3, r0
 801851c:	468a      	mov	sl, r1
 801851e:	468b      	mov	fp, r1
 8018520:	3304      	adds	r3, #4
 8018522:	ed2d 8b10 	vpush	{d8-d15}
 8018526:	469c      	mov	ip, r3
 8018528:	b09d      	sub	sp, #116	; 0x74
 801852a:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8018838 <arm_radix8_butterfly_f32+0x324>
 801852e:	9019      	str	r0, [sp, #100]	; 0x64
 8018530:	921a      	str	r2, [sp, #104]	; 0x68
 8018532:	931b      	str	r3, [sp, #108]	; 0x6c
 8018534:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8018538:	f04f 0800 	mov.w	r8, #0
 801853c:	461a      	mov	r2, r3
 801853e:	9311      	str	r3, [sp, #68]	; 0x44
 8018540:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018544:	4611      	mov	r1, r2
 8018546:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801854a:	9300      	str	r3, [sp, #0]
 801854c:	0053      	lsls	r3, r2, #1
 801854e:	18d5      	adds	r5, r2, r3
 8018550:	9301      	str	r3, [sp, #4]
 8018552:	0113      	lsls	r3, r2, #4
 8018554:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018556:	194c      	adds	r4, r1, r5
 8018558:	eb02 0609 	add.w	r6, r2, r9
 801855c:	9302      	str	r3, [sp, #8]
 801855e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8018562:	4613      	mov	r3, r2
 8018564:	190a      	adds	r2, r1, r4
 8018566:	eb06 0709 	add.w	r7, r6, r9
 801856a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801856e:	1888      	adds	r0, r1, r2
 8018570:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8018574:	4401      	add	r1, r0
 8018576:	3204      	adds	r2, #4
 8018578:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801857c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8018580:	9b00      	ldr	r3, [sp, #0]
 8018582:	3104      	adds	r1, #4
 8018584:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8018588:	44d8      	add	r8, fp
 801858a:	ed90 7a00 	vldr	s14, [r0]
 801858e:	ed94 5a00 	vldr	s10, [r4]
 8018592:	45c2      	cmp	sl, r8
 8018594:	edd7 3a00 	vldr	s7, [r7]
 8018598:	ed96 6a00 	vldr	s12, [r6]
 801859c:	ee37 1a85 	vadd.f32	s2, s15, s10
 80185a0:	ed52 6a01 	vldr	s13, [r2, #-4]
 80185a4:	ee73 4a87 	vadd.f32	s9, s7, s14
 80185a8:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80185ac:	edd5 7a00 	vldr	s15, [r5]
 80185b0:	ee73 3ac7 	vsub.f32	s7, s7, s14
 80185b4:	ed11 7a01 	vldr	s14, [r1, #-4]
 80185b8:	ee36 2a26 	vadd.f32	s4, s12, s13
 80185bc:	ee37 4a87 	vadd.f32	s8, s15, s14
 80185c0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80185c4:	ee71 5a24 	vadd.f32	s11, s2, s9
 80185c8:	ee32 6a04 	vadd.f32	s12, s4, s8
 80185cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80185d0:	ee31 1a64 	vsub.f32	s2, s2, s9
 80185d4:	ee75 4a86 	vadd.f32	s9, s11, s12
 80185d8:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80185dc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80185e0:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80185e4:	ee32 2a44 	vsub.f32	s4, s4, s8
 80185e8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80185ec:	ed94 0a01 	vldr	s0, [r4, #4]
 80185f0:	edc4 5a00 	vstr	s11, [r4]
 80185f4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80185f8:	edd6 5a01 	vldr	s11, [r6, #4]
 80185fc:	edd5 2a01 	vldr	s5, [r5, #4]
 8018600:	ee75 1a27 	vadd.f32	s3, s10, s15
 8018604:	ed92 4a00 	vldr	s8, [r2]
 8018608:	ee75 7a67 	vsub.f32	s15, s10, s15
 801860c:	edd1 4a00 	vldr	s9, [r1]
 8018610:	ee27 7a09 	vmul.f32	s14, s14, s18
 8018614:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8018618:	ed9c 6a00 	vldr	s12, [ip]
 801861c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8018620:	edd0 0a01 	vldr	s1, [r0, #4]
 8018624:	ed97 5a01 	vldr	s10, [r7, #4]
 8018628:	ee35 4a84 	vadd.f32	s8, s11, s8
 801862c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8018630:	ee73 5a26 	vadd.f32	s11, s6, s13
 8018634:	ee76 2a00 	vadd.f32	s5, s12, s0
 8018638:	ee73 6a66 	vsub.f32	s13, s6, s13
 801863c:	ee36 6a40 	vsub.f32	s12, s12, s0
 8018640:	ee35 0a20 	vadd.f32	s0, s10, s1
 8018644:	ee65 5a89 	vmul.f32	s11, s11, s18
 8018648:	ee35 5a60 	vsub.f32	s10, s10, s1
 801864c:	ee32 3a80 	vadd.f32	s6, s5, s0
 8018650:	ee74 0a24 	vadd.f32	s1, s8, s9
 8018654:	ee66 6a89 	vmul.f32	s13, s13, s18
 8018658:	ee74 4a64 	vsub.f32	s9, s8, s9
 801865c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8018660:	ee75 2a25 	vadd.f32	s5, s10, s11
 8018664:	ee33 0a20 	vadd.f32	s0, s6, s1
 8018668:	ee75 5a65 	vsub.f32	s11, s10, s11
 801866c:	ee33 3a60 	vsub.f32	s6, s6, s1
 8018670:	ee36 5a26 	vadd.f32	s10, s12, s13
 8018674:	ed8c 0a00 	vstr	s0, [ip]
 8018678:	ee76 6a66 	vsub.f32	s13, s12, s13
 801867c:	449c      	add	ip, r3
 801867e:	ee33 6a87 	vadd.f32	s12, s7, s14
 8018682:	ed84 3a01 	vstr	s6, [r4, #4]
 8018686:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801868a:	441c      	add	r4, r3
 801868c:	ee71 3a24 	vadd.f32	s7, s2, s9
 8018690:	ee71 4a64 	vsub.f32	s9, s2, s9
 8018694:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8018698:	edc7 3a00 	vstr	s7, [r7]
 801869c:	ee34 1a42 	vsub.f32	s2, s8, s4
 80186a0:	edc0 4a00 	vstr	s9, [r0]
 80186a4:	ee77 3aa5 	vadd.f32	s7, s15, s11
 80186a8:	ee75 4a46 	vsub.f32	s9, s10, s12
 80186ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80186b0:	ed87 1a01 	vstr	s2, [r7, #4]
 80186b4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80186b8:	441f      	add	r7, r3
 80186ba:	ee32 4a04 	vadd.f32	s8, s4, s8
 80186be:	ee71 1ae2 	vsub.f32	s3, s3, s5
 80186c2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80186c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80186ca:	ed80 4a01 	vstr	s8, [r0, #4]
 80186ce:	ed86 3a00 	vstr	s6, [r6]
 80186d2:	4418      	add	r0, r3
 80186d4:	ed41 1a01 	vstr	s3, [r1, #-4]
 80186d8:	ed42 3a01 	vstr	s7, [r2, #-4]
 80186dc:	edc5 7a00 	vstr	s15, [r5]
 80186e0:	edc6 4a01 	vstr	s9, [r6, #4]
 80186e4:	441e      	add	r6, r3
 80186e6:	ed81 6a00 	vstr	s12, [r1]
 80186ea:	4419      	add	r1, r3
 80186ec:	edc2 5a00 	vstr	s11, [r2]
 80186f0:	441a      	add	r2, r3
 80186f2:	ed85 7a01 	vstr	s14, [r5, #4]
 80186f6:	441d      	add	r5, r3
 80186f8:	f63f af44 	bhi.w	8018584 <arm_radix8_butterfly_f32+0x70>
 80186fc:	9300      	str	r3, [sp, #0]
 80186fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018700:	2b07      	cmp	r3, #7
 8018702:	f240 81f4 	bls.w	8018aee <arm_radix8_butterfly_f32+0x5da>
 8018706:	9901      	ldr	r1, [sp, #4]
 8018708:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801870c:	9d02      	ldr	r5, [sp, #8]
 801870e:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8018712:	3101      	adds	r1, #1
 8018714:	eb04 000e 	add.w	r0, r4, lr
 8018718:	00e4      	lsls	r4, r4, #3
 801871a:	3508      	adds	r5, #8
 801871c:	4419      	add	r1, r3
 801871e:	eb00 0c0e 	add.w	ip, r0, lr
 8018722:	9413      	str	r4, [sp, #76]	; 0x4c
 8018724:	00c0      	lsls	r0, r0, #3
 8018726:	185e      	adds	r6, r3, r1
 8018728:	4617      	mov	r7, r2
 801872a:	9218      	str	r2, [sp, #96]	; 0x60
 801872c:	f109 0908 	add.w	r9, r9, #8
 8018730:	199c      	adds	r4, r3, r6
 8018732:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018734:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018736:	9012      	str	r0, [sp, #72]	; 0x48
 8018738:	195d      	adds	r5, r3, r5
 801873a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801873c:	443a      	add	r2, r7
 801873e:	950c      	str	r5, [sp, #48]	; 0x30
 8018740:	4698      	mov	r8, r3
 8018742:	4420      	add	r0, r4
 8018744:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018746:	19d7      	adds	r7, r2, r7
 8018748:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801874c:	4405      	add	r5, r0
 801874e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8018752:	9710      	str	r7, [sp, #64]	; 0x40
 8018754:	eb0c 070e 	add.w	r7, ip, lr
 8018758:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801875c:	3404      	adds	r4, #4
 801875e:	3004      	adds	r0, #4
 8018760:	44c8      	add	r8, r9
 8018762:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8018766:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018768:	940a      	str	r4, [sp, #40]	; 0x28
 801876a:	9009      	str	r0, [sp, #36]	; 0x24
 801876c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8018770:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8018772:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018776:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018778:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801877c:	eb07 080e 	add.w	r8, r7, lr
 8018780:	eb04 0900 	add.w	r9, r4, r0
 8018784:	00f8      	lsls	r0, r7, #3
 8018786:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801878a:	3504      	adds	r5, #4
 801878c:	4607      	mov	r7, r0
 801878e:	9017      	str	r0, [sp, #92]	; 0x5c
 8018790:	910b      	str	r1, [sp, #44]	; 0x2c
 8018792:	4618      	mov	r0, r3
 8018794:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8018798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801879a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801879e:	18e3      	adds	r3, r4, r3
 80187a0:	9508      	str	r5, [sp, #32]
 80187a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80187a4:	910e      	str	r1, [sp, #56]	; 0x38
 80187a6:	4621      	mov	r1, r4
 80187a8:	eb04 0805 	add.w	r8, r4, r5
 80187ac:	9304      	str	r3, [sp, #16]
 80187ae:	19e5      	adds	r5, r4, r7
 80187b0:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80187b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80187b6:	9316      	str	r3, [sp, #88]	; 0x58
 80187b8:	190b      	adds	r3, r1, r4
 80187ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80187bc:	9505      	str	r5, [sp, #20]
 80187be:	9303      	str	r3, [sp, #12]
 80187c0:	f100 0308 	add.w	r3, r0, #8
 80187c4:	9707      	str	r7, [sp, #28]
 80187c6:	4638      	mov	r0, r7
 80187c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80187ca:	2301      	movs	r3, #1
 80187cc:	9306      	str	r3, [sp, #24]
 80187ce:	9b00      	ldr	r3, [sp, #0]
 80187d0:	ed90 fa00 	vldr	s30, [r0]
 80187d4:	edd0 ba01 	vldr	s23, [r0, #4]
 80187d8:	9803      	ldr	r0, [sp, #12]
 80187da:	9903      	ldr	r1, [sp, #12]
 80187dc:	ed90 ba01 	vldr	s22, [r0, #4]
 80187e0:	9804      	ldr	r0, [sp, #16]
 80187e2:	edd1 ea00 	vldr	s29, [r1]
 80187e6:	edd0 aa01 	vldr	s21, [r0, #4]
 80187ea:	9805      	ldr	r0, [sp, #20]
 80187ec:	9905      	ldr	r1, [sp, #20]
 80187ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80187f2:	ed91 da00 	vldr	s26, [r1]
 80187f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80187f8:	9c04      	ldr	r4, [sp, #16]
 80187fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80187fe:	edd8 7a01 	vldr	s15, [r8, #4]
 8018802:	9100      	str	r1, [sp, #0]
 8018804:	edd2 fa00 	vldr	s31, [r2]
 8018808:	ed94 ea00 	vldr	s28, [r4]
 801880c:	ed92 ca01 	vldr	s24, [r2, #4]
 8018810:	f8dd e020 	ldr.w	lr, [sp, #32]
 8018814:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018816:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018818:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801881a:	edd9 da00 	vldr	s27, [r9]
 801881e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018820:	edd8 ca00 	vldr	s25, [r8]
 8018824:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018828:	f8dd c018 	ldr.w	ip, [sp, #24]
 801882c:	ed99 aa01 	vldr	s20, [r9, #4]
 8018830:	edcd 7a02 	vstr	s15, [sp, #8]
 8018834:	9800      	ldr	r0, [sp, #0]
 8018836:	e001      	b.n	801883c <arm_radix8_butterfly_f32+0x328>
 8018838:	3f3504f3 	.word	0x3f3504f3
 801883c:	edd5 3a00 	vldr	s7, [r5]
 8018840:	44dc      	add	ip, fp
 8018842:	ed91 7a00 	vldr	s14, [r1]
 8018846:	edd4 8a00 	vldr	s17, [r4]
 801884a:	45e2      	cmp	sl, ip
 801884c:	ed57 7a01 	vldr	s15, [r7, #-4]
 8018850:	ed90 5a00 	vldr	s10, [r0]
 8018854:	ed56 5a01 	vldr	s11, [r6, #-4]
 8018858:	ee38 6aa7 	vadd.f32	s12, s17, s15
 801885c:	ed92 1a00 	vldr	s2, [r2]
 8018860:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8018864:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8018868:	ee75 9a25 	vadd.f32	s19, s10, s11
 801886c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8018870:	ed92 8a01 	vldr	s16, [r2, #4]
 8018874:	ee73 6a84 	vadd.f32	s13, s7, s8
 8018878:	ee75 5a65 	vsub.f32	s11, s10, s11
 801887c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8018880:	ee73 1a06 	vadd.f32	s3, s6, s12
 8018884:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8018888:	ee75 7a84 	vadd.f32	s15, s11, s8
 801888c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8018890:	ee31 7a85 	vadd.f32	s14, s3, s10
 8018894:	ee67 7a89 	vmul.f32	s15, s15, s18
 8018898:	ee33 3a46 	vsub.f32	s6, s6, s12
 801889c:	ed82 7a00 	vstr	s14, [r2]
 80188a0:	ee79 9ae6 	vsub.f32	s19, s19, s13
 80188a4:	ed96 6a00 	vldr	s12, [r6]
 80188a8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80188ac:	edd5 3a01 	vldr	s7, [r5, #4]
 80188b0:	ee74 8ae7 	vsub.f32	s17, s9, s15
 80188b4:	ed90 7a01 	vldr	s14, [r0, #4]
 80188b8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80188bc:	edde 4a00 	vldr	s9, [lr]
 80188c0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80188c4:	ee77 2a46 	vsub.f32	s5, s14, s12
 80188c8:	edd1 6a01 	vldr	s13, [r1, #4]
 80188cc:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80188d0:	edd7 0a00 	vldr	s1, [r7]
 80188d4:	ee77 5a06 	vadd.f32	s11, s14, s12
 80188d8:	ed94 7a01 	vldr	s14, [r4, #4]
 80188dc:	ee33 6aa4 	vadd.f32	s12, s7, s9
 80188e0:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80188e4:	ee78 4a66 	vsub.f32	s9, s16, s13
 80188e8:	ee78 3a26 	vadd.f32	s7, s16, s13
 80188ec:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80188f0:	ee77 6a20 	vadd.f32	s13, s14, s1
 80188f4:	ee24 4a09 	vmul.f32	s8, s8, s18
 80188f8:	ee37 7a60 	vsub.f32	s14, s14, s1
 80188fc:	ee20 8a09 	vmul.f32	s16, s0, s18
 8018900:	ee75 0a86 	vadd.f32	s1, s11, s12
 8018904:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8018908:	ee62 2a89 	vmul.f32	s5, s5, s18
 801890c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8018910:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8018914:	ee77 7a62 	vsub.f32	s15, s14, s5
 8018918:	ee74 5a88 	vadd.f32	s11, s9, s16
 801891c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8018920:	ee77 4a22 	vadd.f32	s9, s14, s5
 8018924:	ee71 2a04 	vadd.f32	s5, s2, s8
 8018928:	ee31 7a44 	vsub.f32	s14, s2, s8
 801892c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8018930:	ee73 1a06 	vadd.f32	s3, s6, s12
 8018934:	ee33 6a46 	vsub.f32	s12, s6, s12
 8018938:	ee33 3ae9 	vsub.f32	s6, s7, s19
 801893c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8018940:	ee38 4a68 	vsub.f32	s8, s16, s17
 8018944:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8018948:	ee72 5a25 	vadd.f32	s11, s4, s11
 801894c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8018950:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8018954:	ee77 2a27 	vadd.f32	s5, s14, s15
 8018958:	ee37 7a67 	vsub.f32	s14, s14, s15
 801895c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8018960:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8018964:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8018968:	ee2a 5a85 	vmul.f32	s10, s21, s10
 801896c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8018970:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8018974:	ee70 0a20 	vadd.f32	s1, s0, s1
 8018978:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 801897c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8018980:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8018984:	edc2 0a01 	vstr	s1, [r2, #4]
 8018988:	ee38 8a88 	vadd.f32	s16, s17, s16
 801898c:	441a      	add	r2, r3
 801898e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8018992:	ee31 5a45 	vsub.f32	s10, s2, s10
 8018996:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801899a:	ed81 8a00 	vstr	s16, [r1]
 801899e:	ee39 0a80 	vadd.f32	s0, s19, s0
 80189a2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80189a6:	ed81 5a01 	vstr	s10, [r1, #4]
 80189aa:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80189ae:	edcd 3a00 	vstr	s7, [sp]
 80189b2:	ed9d 5a02 	vldr	s10, [sp, #8]
 80189b6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80189ba:	eddd 3a01 	vldr	s7, [sp, #4]
 80189be:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80189c2:	ed84 0a00 	vstr	s0, [r4]
 80189c6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80189ca:	ed84 3a01 	vstr	s6, [r4, #4]
 80189ce:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80189d2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80189d6:	eddd 3a00 	vldr	s7, [sp]
 80189da:	ee25 5a25 	vmul.f32	s10, s10, s11
 80189de:	4419      	add	r1, r3
 80189e0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80189e4:	441c      	add	r4, r3
 80189e6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80189ea:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80189ee:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80189f2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80189f6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80189fa:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80189fe:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8018a02:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8018a06:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8018a0a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8018a0e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8018a12:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8018a16:	ee38 8a01 	vadd.f32	s16, s16, s2
 8018a1a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8018a1e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8018a22:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8018a26:	ed07 8a01 	vstr	s16, [r7, #-4]
 8018a2a:	ee30 0a21 	vadd.f32	s0, s0, s3
 8018a2e:	ed87 6a00 	vstr	s12, [r7]
 8018a32:	ee74 2a62 	vsub.f32	s5, s8, s5
 8018a36:	edc0 0a00 	vstr	s1, [r0]
 8018a3a:	ee33 3a28 	vadd.f32	s6, s6, s17
 8018a3e:	edc0 3a01 	vstr	s7, [r0, #4]
 8018a42:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8018a46:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8018a4a:	edce 4a00 	vstr	s9, [lr]
 8018a4e:	4418      	add	r0, r3
 8018a50:	ed06 0a01 	vstr	s0, [r6, #-4]
 8018a54:	441f      	add	r7, r3
 8018a56:	edc6 2a00 	vstr	s5, [r6]
 8018a5a:	449e      	add	lr, r3
 8018a5c:	ed85 3a00 	vstr	s6, [r5]
 8018a60:	441e      	add	r6, r3
 8018a62:	ed85 7a01 	vstr	s14, [r5, #4]
 8018a66:	441d      	add	r5, r3
 8018a68:	f63f aee8 	bhi.w	801883c <arm_radix8_butterfly_f32+0x328>
 8018a6c:	9a06      	ldr	r2, [sp, #24]
 8018a6e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018a70:	3201      	adds	r2, #1
 8018a72:	4611      	mov	r1, r2
 8018a74:	9206      	str	r2, [sp, #24]
 8018a76:	9a07      	ldr	r2, [sp, #28]
 8018a78:	4402      	add	r2, r0
 8018a7a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018a7c:	9207      	str	r2, [sp, #28]
 8018a7e:	9a03      	ldr	r2, [sp, #12]
 8018a80:	4402      	add	r2, r0
 8018a82:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018a84:	9203      	str	r2, [sp, #12]
 8018a86:	9a04      	ldr	r2, [sp, #16]
 8018a88:	4402      	add	r2, r0
 8018a8a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018a8c:	9204      	str	r2, [sp, #16]
 8018a8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018a90:	4491      	add	r9, r2
 8018a92:	9a05      	ldr	r2, [sp, #20]
 8018a94:	4402      	add	r2, r0
 8018a96:	9205      	str	r2, [sp, #20]
 8018a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a9a:	4490      	add	r8, r2
 8018a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a9e:	3208      	adds	r2, #8
 8018aa0:	920f      	str	r2, [sp, #60]	; 0x3c
 8018aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018aa4:	3208      	adds	r2, #8
 8018aa6:	920e      	str	r2, [sp, #56]	; 0x38
 8018aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018aaa:	3208      	adds	r2, #8
 8018aac:	920d      	str	r2, [sp, #52]	; 0x34
 8018aae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018ab0:	3208      	adds	r2, #8
 8018ab2:	920c      	str	r2, [sp, #48]	; 0x30
 8018ab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ab6:	3208      	adds	r2, #8
 8018ab8:	920b      	str	r2, [sp, #44]	; 0x2c
 8018aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018abc:	3208      	adds	r2, #8
 8018abe:	920a      	str	r2, [sp, #40]	; 0x28
 8018ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ac2:	3208      	adds	r2, #8
 8018ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8018ac6:	9a08      	ldr	r2, [sp, #32]
 8018ac8:	3208      	adds	r2, #8
 8018aca:	9208      	str	r2, [sp, #32]
 8018acc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018ace:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018ad0:	4622      	mov	r2, r4
 8018ad2:	4288      	cmp	r0, r1
 8018ad4:	d005      	beq.n	8018ae2 <arm_radix8_butterfly_f32+0x5ce>
 8018ad6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018ad8:	4621      	mov	r1, r4
 8018ada:	4401      	add	r1, r0
 8018adc:	9807      	ldr	r0, [sp, #28]
 8018ade:	9110      	str	r1, [sp, #64]	; 0x40
 8018ae0:	e676      	b.n	80187d0 <arm_radix8_butterfly_f32+0x2bc>
 8018ae2:	4683      	mov	fp, r0
 8018ae4:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8018ae8:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8018aec:	e522      	b.n	8018534 <arm_radix8_butterfly_f32+0x20>
 8018aee:	b01d      	add	sp, #116	; 0x74
 8018af0:	ecbd 8b10 	vpop	{d8-d15}
 8018af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018af8 <__errno>:
 8018af8:	4b01      	ldr	r3, [pc, #4]	; (8018b00 <__errno+0x8>)
 8018afa:	6818      	ldr	r0, [r3, #0]
 8018afc:	4770      	bx	lr
 8018afe:	bf00      	nop
 8018b00:	20000050 	.word	0x20000050

08018b04 <__libc_init_array>:
 8018b04:	b570      	push	{r4, r5, r6, lr}
 8018b06:	4d0d      	ldr	r5, [pc, #52]	; (8018b3c <__libc_init_array+0x38>)
 8018b08:	4c0d      	ldr	r4, [pc, #52]	; (8018b40 <__libc_init_array+0x3c>)
 8018b0a:	1b64      	subs	r4, r4, r5
 8018b0c:	10a4      	asrs	r4, r4, #2
 8018b0e:	2600      	movs	r6, #0
 8018b10:	42a6      	cmp	r6, r4
 8018b12:	d109      	bne.n	8018b28 <__libc_init_array+0x24>
 8018b14:	4d0b      	ldr	r5, [pc, #44]	; (8018b44 <__libc_init_array+0x40>)
 8018b16:	4c0c      	ldr	r4, [pc, #48]	; (8018b48 <__libc_init_array+0x44>)
 8018b18:	f001 fa56 	bl	8019fc8 <_init>
 8018b1c:	1b64      	subs	r4, r4, r5
 8018b1e:	10a4      	asrs	r4, r4, #2
 8018b20:	2600      	movs	r6, #0
 8018b22:	42a6      	cmp	r6, r4
 8018b24:	d105      	bne.n	8018b32 <__libc_init_array+0x2e>
 8018b26:	bd70      	pop	{r4, r5, r6, pc}
 8018b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b2c:	4798      	blx	r3
 8018b2e:	3601      	adds	r6, #1
 8018b30:	e7ee      	b.n	8018b10 <__libc_init_array+0xc>
 8018b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b36:	4798      	blx	r3
 8018b38:	3601      	adds	r6, #1
 8018b3a:	e7f2      	b.n	8018b22 <__libc_init_array+0x1e>
 8018b3c:	0802fcf8 	.word	0x0802fcf8
 8018b40:	0802fcf8 	.word	0x0802fcf8
 8018b44:	0802fcf8 	.word	0x0802fcf8
 8018b48:	0802fcfc 	.word	0x0802fcfc

08018b4c <malloc>:
 8018b4c:	4b02      	ldr	r3, [pc, #8]	; (8018b58 <malloc+0xc>)
 8018b4e:	4601      	mov	r1, r0
 8018b50:	6818      	ldr	r0, [r3, #0]
 8018b52:	f000 b871 	b.w	8018c38 <_malloc_r>
 8018b56:	bf00      	nop
 8018b58:	20000050 	.word	0x20000050

08018b5c <free>:
 8018b5c:	4b02      	ldr	r3, [pc, #8]	; (8018b68 <free+0xc>)
 8018b5e:	4601      	mov	r1, r0
 8018b60:	6818      	ldr	r0, [r3, #0]
 8018b62:	f000 b819 	b.w	8018b98 <_free_r>
 8018b66:	bf00      	nop
 8018b68:	20000050 	.word	0x20000050

08018b6c <memcpy>:
 8018b6c:	440a      	add	r2, r1
 8018b6e:	4291      	cmp	r1, r2
 8018b70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018b74:	d100      	bne.n	8018b78 <memcpy+0xc>
 8018b76:	4770      	bx	lr
 8018b78:	b510      	push	{r4, lr}
 8018b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b82:	4291      	cmp	r1, r2
 8018b84:	d1f9      	bne.n	8018b7a <memcpy+0xe>
 8018b86:	bd10      	pop	{r4, pc}

08018b88 <memset>:
 8018b88:	4402      	add	r2, r0
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	4293      	cmp	r3, r2
 8018b8e:	d100      	bne.n	8018b92 <memset+0xa>
 8018b90:	4770      	bx	lr
 8018b92:	f803 1b01 	strb.w	r1, [r3], #1
 8018b96:	e7f9      	b.n	8018b8c <memset+0x4>

08018b98 <_free_r>:
 8018b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b9a:	2900      	cmp	r1, #0
 8018b9c:	d048      	beq.n	8018c30 <_free_r+0x98>
 8018b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ba2:	9001      	str	r0, [sp, #4]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8018baa:	bfb8      	it	lt
 8018bac:	18e4      	addlt	r4, r4, r3
 8018bae:	f000 fc4f 	bl	8019450 <__malloc_lock>
 8018bb2:	4a20      	ldr	r2, [pc, #128]	; (8018c34 <_free_r+0x9c>)
 8018bb4:	9801      	ldr	r0, [sp, #4]
 8018bb6:	6813      	ldr	r3, [r2, #0]
 8018bb8:	4615      	mov	r5, r2
 8018bba:	b933      	cbnz	r3, 8018bca <_free_r+0x32>
 8018bbc:	6063      	str	r3, [r4, #4]
 8018bbe:	6014      	str	r4, [r2, #0]
 8018bc0:	b003      	add	sp, #12
 8018bc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018bc6:	f000 bc49 	b.w	801945c <__malloc_unlock>
 8018bca:	42a3      	cmp	r3, r4
 8018bcc:	d90b      	bls.n	8018be6 <_free_r+0x4e>
 8018bce:	6821      	ldr	r1, [r4, #0]
 8018bd0:	1862      	adds	r2, r4, r1
 8018bd2:	4293      	cmp	r3, r2
 8018bd4:	bf04      	itt	eq
 8018bd6:	681a      	ldreq	r2, [r3, #0]
 8018bd8:	685b      	ldreq	r3, [r3, #4]
 8018bda:	6063      	str	r3, [r4, #4]
 8018bdc:	bf04      	itt	eq
 8018bde:	1852      	addeq	r2, r2, r1
 8018be0:	6022      	streq	r2, [r4, #0]
 8018be2:	602c      	str	r4, [r5, #0]
 8018be4:	e7ec      	b.n	8018bc0 <_free_r+0x28>
 8018be6:	461a      	mov	r2, r3
 8018be8:	685b      	ldr	r3, [r3, #4]
 8018bea:	b10b      	cbz	r3, 8018bf0 <_free_r+0x58>
 8018bec:	42a3      	cmp	r3, r4
 8018bee:	d9fa      	bls.n	8018be6 <_free_r+0x4e>
 8018bf0:	6811      	ldr	r1, [r2, #0]
 8018bf2:	1855      	adds	r5, r2, r1
 8018bf4:	42a5      	cmp	r5, r4
 8018bf6:	d10b      	bne.n	8018c10 <_free_r+0x78>
 8018bf8:	6824      	ldr	r4, [r4, #0]
 8018bfa:	4421      	add	r1, r4
 8018bfc:	1854      	adds	r4, r2, r1
 8018bfe:	42a3      	cmp	r3, r4
 8018c00:	6011      	str	r1, [r2, #0]
 8018c02:	d1dd      	bne.n	8018bc0 <_free_r+0x28>
 8018c04:	681c      	ldr	r4, [r3, #0]
 8018c06:	685b      	ldr	r3, [r3, #4]
 8018c08:	6053      	str	r3, [r2, #4]
 8018c0a:	4421      	add	r1, r4
 8018c0c:	6011      	str	r1, [r2, #0]
 8018c0e:	e7d7      	b.n	8018bc0 <_free_r+0x28>
 8018c10:	d902      	bls.n	8018c18 <_free_r+0x80>
 8018c12:	230c      	movs	r3, #12
 8018c14:	6003      	str	r3, [r0, #0]
 8018c16:	e7d3      	b.n	8018bc0 <_free_r+0x28>
 8018c18:	6825      	ldr	r5, [r4, #0]
 8018c1a:	1961      	adds	r1, r4, r5
 8018c1c:	428b      	cmp	r3, r1
 8018c1e:	bf04      	itt	eq
 8018c20:	6819      	ldreq	r1, [r3, #0]
 8018c22:	685b      	ldreq	r3, [r3, #4]
 8018c24:	6063      	str	r3, [r4, #4]
 8018c26:	bf04      	itt	eq
 8018c28:	1949      	addeq	r1, r1, r5
 8018c2a:	6021      	streq	r1, [r4, #0]
 8018c2c:	6054      	str	r4, [r2, #4]
 8018c2e:	e7c7      	b.n	8018bc0 <_free_r+0x28>
 8018c30:	b003      	add	sp, #12
 8018c32:	bd30      	pop	{r4, r5, pc}
 8018c34:	200084cc 	.word	0x200084cc

08018c38 <_malloc_r>:
 8018c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c3a:	1ccd      	adds	r5, r1, #3
 8018c3c:	f025 0503 	bic.w	r5, r5, #3
 8018c40:	3508      	adds	r5, #8
 8018c42:	2d0c      	cmp	r5, #12
 8018c44:	bf38      	it	cc
 8018c46:	250c      	movcc	r5, #12
 8018c48:	2d00      	cmp	r5, #0
 8018c4a:	4606      	mov	r6, r0
 8018c4c:	db01      	blt.n	8018c52 <_malloc_r+0x1a>
 8018c4e:	42a9      	cmp	r1, r5
 8018c50:	d903      	bls.n	8018c5a <_malloc_r+0x22>
 8018c52:	230c      	movs	r3, #12
 8018c54:	6033      	str	r3, [r6, #0]
 8018c56:	2000      	movs	r0, #0
 8018c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c5a:	f000 fbf9 	bl	8019450 <__malloc_lock>
 8018c5e:	4921      	ldr	r1, [pc, #132]	; (8018ce4 <_malloc_r+0xac>)
 8018c60:	680a      	ldr	r2, [r1, #0]
 8018c62:	4614      	mov	r4, r2
 8018c64:	b99c      	cbnz	r4, 8018c8e <_malloc_r+0x56>
 8018c66:	4f20      	ldr	r7, [pc, #128]	; (8018ce8 <_malloc_r+0xb0>)
 8018c68:	683b      	ldr	r3, [r7, #0]
 8018c6a:	b923      	cbnz	r3, 8018c76 <_malloc_r+0x3e>
 8018c6c:	4621      	mov	r1, r4
 8018c6e:	4630      	mov	r0, r6
 8018c70:	f000 f8e0 	bl	8018e34 <_sbrk_r>
 8018c74:	6038      	str	r0, [r7, #0]
 8018c76:	4629      	mov	r1, r5
 8018c78:	4630      	mov	r0, r6
 8018c7a:	f000 f8db 	bl	8018e34 <_sbrk_r>
 8018c7e:	1c43      	adds	r3, r0, #1
 8018c80:	d123      	bne.n	8018cca <_malloc_r+0x92>
 8018c82:	230c      	movs	r3, #12
 8018c84:	6033      	str	r3, [r6, #0]
 8018c86:	4630      	mov	r0, r6
 8018c88:	f000 fbe8 	bl	801945c <__malloc_unlock>
 8018c8c:	e7e3      	b.n	8018c56 <_malloc_r+0x1e>
 8018c8e:	6823      	ldr	r3, [r4, #0]
 8018c90:	1b5b      	subs	r3, r3, r5
 8018c92:	d417      	bmi.n	8018cc4 <_malloc_r+0x8c>
 8018c94:	2b0b      	cmp	r3, #11
 8018c96:	d903      	bls.n	8018ca0 <_malloc_r+0x68>
 8018c98:	6023      	str	r3, [r4, #0]
 8018c9a:	441c      	add	r4, r3
 8018c9c:	6025      	str	r5, [r4, #0]
 8018c9e:	e004      	b.n	8018caa <_malloc_r+0x72>
 8018ca0:	6863      	ldr	r3, [r4, #4]
 8018ca2:	42a2      	cmp	r2, r4
 8018ca4:	bf0c      	ite	eq
 8018ca6:	600b      	streq	r3, [r1, #0]
 8018ca8:	6053      	strne	r3, [r2, #4]
 8018caa:	4630      	mov	r0, r6
 8018cac:	f000 fbd6 	bl	801945c <__malloc_unlock>
 8018cb0:	f104 000b 	add.w	r0, r4, #11
 8018cb4:	1d23      	adds	r3, r4, #4
 8018cb6:	f020 0007 	bic.w	r0, r0, #7
 8018cba:	1ac2      	subs	r2, r0, r3
 8018cbc:	d0cc      	beq.n	8018c58 <_malloc_r+0x20>
 8018cbe:	1a1b      	subs	r3, r3, r0
 8018cc0:	50a3      	str	r3, [r4, r2]
 8018cc2:	e7c9      	b.n	8018c58 <_malloc_r+0x20>
 8018cc4:	4622      	mov	r2, r4
 8018cc6:	6864      	ldr	r4, [r4, #4]
 8018cc8:	e7cc      	b.n	8018c64 <_malloc_r+0x2c>
 8018cca:	1cc4      	adds	r4, r0, #3
 8018ccc:	f024 0403 	bic.w	r4, r4, #3
 8018cd0:	42a0      	cmp	r0, r4
 8018cd2:	d0e3      	beq.n	8018c9c <_malloc_r+0x64>
 8018cd4:	1a21      	subs	r1, r4, r0
 8018cd6:	4630      	mov	r0, r6
 8018cd8:	f000 f8ac 	bl	8018e34 <_sbrk_r>
 8018cdc:	3001      	adds	r0, #1
 8018cde:	d1dd      	bne.n	8018c9c <_malloc_r+0x64>
 8018ce0:	e7cf      	b.n	8018c82 <_malloc_r+0x4a>
 8018ce2:	bf00      	nop
 8018ce4:	200084cc 	.word	0x200084cc
 8018ce8:	200084d0 	.word	0x200084d0

08018cec <iprintf>:
 8018cec:	b40f      	push	{r0, r1, r2, r3}
 8018cee:	4b0a      	ldr	r3, [pc, #40]	; (8018d18 <iprintf+0x2c>)
 8018cf0:	b513      	push	{r0, r1, r4, lr}
 8018cf2:	681c      	ldr	r4, [r3, #0]
 8018cf4:	b124      	cbz	r4, 8018d00 <iprintf+0x14>
 8018cf6:	69a3      	ldr	r3, [r4, #24]
 8018cf8:	b913      	cbnz	r3, 8018d00 <iprintf+0x14>
 8018cfa:	4620      	mov	r0, r4
 8018cfc:	f000 faa4 	bl	8019248 <__sinit>
 8018d00:	ab05      	add	r3, sp, #20
 8018d02:	9a04      	ldr	r2, [sp, #16]
 8018d04:	68a1      	ldr	r1, [r4, #8]
 8018d06:	9301      	str	r3, [sp, #4]
 8018d08:	4620      	mov	r0, r4
 8018d0a:	f000 fd33 	bl	8019774 <_vfiprintf_r>
 8018d0e:	b002      	add	sp, #8
 8018d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d14:	b004      	add	sp, #16
 8018d16:	4770      	bx	lr
 8018d18:	20000050 	.word	0x20000050

08018d1c <putchar>:
 8018d1c:	4b09      	ldr	r3, [pc, #36]	; (8018d44 <putchar+0x28>)
 8018d1e:	b513      	push	{r0, r1, r4, lr}
 8018d20:	681c      	ldr	r4, [r3, #0]
 8018d22:	4601      	mov	r1, r0
 8018d24:	b134      	cbz	r4, 8018d34 <putchar+0x18>
 8018d26:	69a3      	ldr	r3, [r4, #24]
 8018d28:	b923      	cbnz	r3, 8018d34 <putchar+0x18>
 8018d2a:	9001      	str	r0, [sp, #4]
 8018d2c:	4620      	mov	r0, r4
 8018d2e:	f000 fa8b 	bl	8019248 <__sinit>
 8018d32:	9901      	ldr	r1, [sp, #4]
 8018d34:	68a2      	ldr	r2, [r4, #8]
 8018d36:	4620      	mov	r0, r4
 8018d38:	b002      	add	sp, #8
 8018d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d3e:	f000 bfdd 	b.w	8019cfc <_putc_r>
 8018d42:	bf00      	nop
 8018d44:	20000050 	.word	0x20000050

08018d48 <_puts_r>:
 8018d48:	b570      	push	{r4, r5, r6, lr}
 8018d4a:	460e      	mov	r6, r1
 8018d4c:	4605      	mov	r5, r0
 8018d4e:	b118      	cbz	r0, 8018d58 <_puts_r+0x10>
 8018d50:	6983      	ldr	r3, [r0, #24]
 8018d52:	b90b      	cbnz	r3, 8018d58 <_puts_r+0x10>
 8018d54:	f000 fa78 	bl	8019248 <__sinit>
 8018d58:	69ab      	ldr	r3, [r5, #24]
 8018d5a:	68ac      	ldr	r4, [r5, #8]
 8018d5c:	b913      	cbnz	r3, 8018d64 <_puts_r+0x1c>
 8018d5e:	4628      	mov	r0, r5
 8018d60:	f000 fa72 	bl	8019248 <__sinit>
 8018d64:	4b2c      	ldr	r3, [pc, #176]	; (8018e18 <_puts_r+0xd0>)
 8018d66:	429c      	cmp	r4, r3
 8018d68:	d120      	bne.n	8018dac <_puts_r+0x64>
 8018d6a:	686c      	ldr	r4, [r5, #4]
 8018d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d6e:	07db      	lsls	r3, r3, #31
 8018d70:	d405      	bmi.n	8018d7e <_puts_r+0x36>
 8018d72:	89a3      	ldrh	r3, [r4, #12]
 8018d74:	0598      	lsls	r0, r3, #22
 8018d76:	d402      	bmi.n	8018d7e <_puts_r+0x36>
 8018d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d7a:	f000 fb03 	bl	8019384 <__retarget_lock_acquire_recursive>
 8018d7e:	89a3      	ldrh	r3, [r4, #12]
 8018d80:	0719      	lsls	r1, r3, #28
 8018d82:	d51d      	bpl.n	8018dc0 <_puts_r+0x78>
 8018d84:	6923      	ldr	r3, [r4, #16]
 8018d86:	b1db      	cbz	r3, 8018dc0 <_puts_r+0x78>
 8018d88:	3e01      	subs	r6, #1
 8018d8a:	68a3      	ldr	r3, [r4, #8]
 8018d8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018d90:	3b01      	subs	r3, #1
 8018d92:	60a3      	str	r3, [r4, #8]
 8018d94:	bb39      	cbnz	r1, 8018de6 <_puts_r+0x9e>
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	da38      	bge.n	8018e0c <_puts_r+0xc4>
 8018d9a:	4622      	mov	r2, r4
 8018d9c:	210a      	movs	r1, #10
 8018d9e:	4628      	mov	r0, r5
 8018da0:	f000 f878 	bl	8018e94 <__swbuf_r>
 8018da4:	3001      	adds	r0, #1
 8018da6:	d011      	beq.n	8018dcc <_puts_r+0x84>
 8018da8:	250a      	movs	r5, #10
 8018daa:	e011      	b.n	8018dd0 <_puts_r+0x88>
 8018dac:	4b1b      	ldr	r3, [pc, #108]	; (8018e1c <_puts_r+0xd4>)
 8018dae:	429c      	cmp	r4, r3
 8018db0:	d101      	bne.n	8018db6 <_puts_r+0x6e>
 8018db2:	68ac      	ldr	r4, [r5, #8]
 8018db4:	e7da      	b.n	8018d6c <_puts_r+0x24>
 8018db6:	4b1a      	ldr	r3, [pc, #104]	; (8018e20 <_puts_r+0xd8>)
 8018db8:	429c      	cmp	r4, r3
 8018dba:	bf08      	it	eq
 8018dbc:	68ec      	ldreq	r4, [r5, #12]
 8018dbe:	e7d5      	b.n	8018d6c <_puts_r+0x24>
 8018dc0:	4621      	mov	r1, r4
 8018dc2:	4628      	mov	r0, r5
 8018dc4:	f000 f8b8 	bl	8018f38 <__swsetup_r>
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	d0dd      	beq.n	8018d88 <_puts_r+0x40>
 8018dcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018dd2:	07da      	lsls	r2, r3, #31
 8018dd4:	d405      	bmi.n	8018de2 <_puts_r+0x9a>
 8018dd6:	89a3      	ldrh	r3, [r4, #12]
 8018dd8:	059b      	lsls	r3, r3, #22
 8018dda:	d402      	bmi.n	8018de2 <_puts_r+0x9a>
 8018ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018dde:	f000 fad2 	bl	8019386 <__retarget_lock_release_recursive>
 8018de2:	4628      	mov	r0, r5
 8018de4:	bd70      	pop	{r4, r5, r6, pc}
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	da04      	bge.n	8018df4 <_puts_r+0xac>
 8018dea:	69a2      	ldr	r2, [r4, #24]
 8018dec:	429a      	cmp	r2, r3
 8018dee:	dc06      	bgt.n	8018dfe <_puts_r+0xb6>
 8018df0:	290a      	cmp	r1, #10
 8018df2:	d004      	beq.n	8018dfe <_puts_r+0xb6>
 8018df4:	6823      	ldr	r3, [r4, #0]
 8018df6:	1c5a      	adds	r2, r3, #1
 8018df8:	6022      	str	r2, [r4, #0]
 8018dfa:	7019      	strb	r1, [r3, #0]
 8018dfc:	e7c5      	b.n	8018d8a <_puts_r+0x42>
 8018dfe:	4622      	mov	r2, r4
 8018e00:	4628      	mov	r0, r5
 8018e02:	f000 f847 	bl	8018e94 <__swbuf_r>
 8018e06:	3001      	adds	r0, #1
 8018e08:	d1bf      	bne.n	8018d8a <_puts_r+0x42>
 8018e0a:	e7df      	b.n	8018dcc <_puts_r+0x84>
 8018e0c:	6823      	ldr	r3, [r4, #0]
 8018e0e:	250a      	movs	r5, #10
 8018e10:	1c5a      	adds	r2, r3, #1
 8018e12:	6022      	str	r2, [r4, #0]
 8018e14:	701d      	strb	r5, [r3, #0]
 8018e16:	e7db      	b.n	8018dd0 <_puts_r+0x88>
 8018e18:	0802fc7c 	.word	0x0802fc7c
 8018e1c:	0802fc9c 	.word	0x0802fc9c
 8018e20:	0802fc5c 	.word	0x0802fc5c

08018e24 <puts>:
 8018e24:	4b02      	ldr	r3, [pc, #8]	; (8018e30 <puts+0xc>)
 8018e26:	4601      	mov	r1, r0
 8018e28:	6818      	ldr	r0, [r3, #0]
 8018e2a:	f7ff bf8d 	b.w	8018d48 <_puts_r>
 8018e2e:	bf00      	nop
 8018e30:	20000050 	.word	0x20000050

08018e34 <_sbrk_r>:
 8018e34:	b538      	push	{r3, r4, r5, lr}
 8018e36:	4d06      	ldr	r5, [pc, #24]	; (8018e50 <_sbrk_r+0x1c>)
 8018e38:	2300      	movs	r3, #0
 8018e3a:	4604      	mov	r4, r0
 8018e3c:	4608      	mov	r0, r1
 8018e3e:	602b      	str	r3, [r5, #0]
 8018e40:	f7ea fa98 	bl	8003374 <_sbrk>
 8018e44:	1c43      	adds	r3, r0, #1
 8018e46:	d102      	bne.n	8018e4e <_sbrk_r+0x1a>
 8018e48:	682b      	ldr	r3, [r5, #0]
 8018e4a:	b103      	cbz	r3, 8018e4e <_sbrk_r+0x1a>
 8018e4c:	6023      	str	r3, [r4, #0]
 8018e4e:	bd38      	pop	{r3, r4, r5, pc}
 8018e50:	2004bfc0 	.word	0x2004bfc0

08018e54 <siprintf>:
 8018e54:	b40e      	push	{r1, r2, r3}
 8018e56:	b500      	push	{lr}
 8018e58:	b09c      	sub	sp, #112	; 0x70
 8018e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8018e5c:	9002      	str	r0, [sp, #8]
 8018e5e:	9006      	str	r0, [sp, #24]
 8018e60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018e64:	4809      	ldr	r0, [pc, #36]	; (8018e8c <siprintf+0x38>)
 8018e66:	9107      	str	r1, [sp, #28]
 8018e68:	9104      	str	r1, [sp, #16]
 8018e6a:	4909      	ldr	r1, [pc, #36]	; (8018e90 <siprintf+0x3c>)
 8018e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e70:	9105      	str	r1, [sp, #20]
 8018e72:	6800      	ldr	r0, [r0, #0]
 8018e74:	9301      	str	r3, [sp, #4]
 8018e76:	a902      	add	r1, sp, #8
 8018e78:	f000 fb52 	bl	8019520 <_svfiprintf_r>
 8018e7c:	9b02      	ldr	r3, [sp, #8]
 8018e7e:	2200      	movs	r2, #0
 8018e80:	701a      	strb	r2, [r3, #0]
 8018e82:	b01c      	add	sp, #112	; 0x70
 8018e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e88:	b003      	add	sp, #12
 8018e8a:	4770      	bx	lr
 8018e8c:	20000050 	.word	0x20000050
 8018e90:	ffff0208 	.word	0xffff0208

08018e94 <__swbuf_r>:
 8018e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e96:	460e      	mov	r6, r1
 8018e98:	4614      	mov	r4, r2
 8018e9a:	4605      	mov	r5, r0
 8018e9c:	b118      	cbz	r0, 8018ea6 <__swbuf_r+0x12>
 8018e9e:	6983      	ldr	r3, [r0, #24]
 8018ea0:	b90b      	cbnz	r3, 8018ea6 <__swbuf_r+0x12>
 8018ea2:	f000 f9d1 	bl	8019248 <__sinit>
 8018ea6:	4b21      	ldr	r3, [pc, #132]	; (8018f2c <__swbuf_r+0x98>)
 8018ea8:	429c      	cmp	r4, r3
 8018eaa:	d12b      	bne.n	8018f04 <__swbuf_r+0x70>
 8018eac:	686c      	ldr	r4, [r5, #4]
 8018eae:	69a3      	ldr	r3, [r4, #24]
 8018eb0:	60a3      	str	r3, [r4, #8]
 8018eb2:	89a3      	ldrh	r3, [r4, #12]
 8018eb4:	071a      	lsls	r2, r3, #28
 8018eb6:	d52f      	bpl.n	8018f18 <__swbuf_r+0x84>
 8018eb8:	6923      	ldr	r3, [r4, #16]
 8018eba:	b36b      	cbz	r3, 8018f18 <__swbuf_r+0x84>
 8018ebc:	6923      	ldr	r3, [r4, #16]
 8018ebe:	6820      	ldr	r0, [r4, #0]
 8018ec0:	1ac0      	subs	r0, r0, r3
 8018ec2:	6963      	ldr	r3, [r4, #20]
 8018ec4:	b2f6      	uxtb	r6, r6
 8018ec6:	4283      	cmp	r3, r0
 8018ec8:	4637      	mov	r7, r6
 8018eca:	dc04      	bgt.n	8018ed6 <__swbuf_r+0x42>
 8018ecc:	4621      	mov	r1, r4
 8018ece:	4628      	mov	r0, r5
 8018ed0:	f000 f926 	bl	8019120 <_fflush_r>
 8018ed4:	bb30      	cbnz	r0, 8018f24 <__swbuf_r+0x90>
 8018ed6:	68a3      	ldr	r3, [r4, #8]
 8018ed8:	3b01      	subs	r3, #1
 8018eda:	60a3      	str	r3, [r4, #8]
 8018edc:	6823      	ldr	r3, [r4, #0]
 8018ede:	1c5a      	adds	r2, r3, #1
 8018ee0:	6022      	str	r2, [r4, #0]
 8018ee2:	701e      	strb	r6, [r3, #0]
 8018ee4:	6963      	ldr	r3, [r4, #20]
 8018ee6:	3001      	adds	r0, #1
 8018ee8:	4283      	cmp	r3, r0
 8018eea:	d004      	beq.n	8018ef6 <__swbuf_r+0x62>
 8018eec:	89a3      	ldrh	r3, [r4, #12]
 8018eee:	07db      	lsls	r3, r3, #31
 8018ef0:	d506      	bpl.n	8018f00 <__swbuf_r+0x6c>
 8018ef2:	2e0a      	cmp	r6, #10
 8018ef4:	d104      	bne.n	8018f00 <__swbuf_r+0x6c>
 8018ef6:	4621      	mov	r1, r4
 8018ef8:	4628      	mov	r0, r5
 8018efa:	f000 f911 	bl	8019120 <_fflush_r>
 8018efe:	b988      	cbnz	r0, 8018f24 <__swbuf_r+0x90>
 8018f00:	4638      	mov	r0, r7
 8018f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f04:	4b0a      	ldr	r3, [pc, #40]	; (8018f30 <__swbuf_r+0x9c>)
 8018f06:	429c      	cmp	r4, r3
 8018f08:	d101      	bne.n	8018f0e <__swbuf_r+0x7a>
 8018f0a:	68ac      	ldr	r4, [r5, #8]
 8018f0c:	e7cf      	b.n	8018eae <__swbuf_r+0x1a>
 8018f0e:	4b09      	ldr	r3, [pc, #36]	; (8018f34 <__swbuf_r+0xa0>)
 8018f10:	429c      	cmp	r4, r3
 8018f12:	bf08      	it	eq
 8018f14:	68ec      	ldreq	r4, [r5, #12]
 8018f16:	e7ca      	b.n	8018eae <__swbuf_r+0x1a>
 8018f18:	4621      	mov	r1, r4
 8018f1a:	4628      	mov	r0, r5
 8018f1c:	f000 f80c 	bl	8018f38 <__swsetup_r>
 8018f20:	2800      	cmp	r0, #0
 8018f22:	d0cb      	beq.n	8018ebc <__swbuf_r+0x28>
 8018f24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018f28:	e7ea      	b.n	8018f00 <__swbuf_r+0x6c>
 8018f2a:	bf00      	nop
 8018f2c:	0802fc7c 	.word	0x0802fc7c
 8018f30:	0802fc9c 	.word	0x0802fc9c
 8018f34:	0802fc5c 	.word	0x0802fc5c

08018f38 <__swsetup_r>:
 8018f38:	4b32      	ldr	r3, [pc, #200]	; (8019004 <__swsetup_r+0xcc>)
 8018f3a:	b570      	push	{r4, r5, r6, lr}
 8018f3c:	681d      	ldr	r5, [r3, #0]
 8018f3e:	4606      	mov	r6, r0
 8018f40:	460c      	mov	r4, r1
 8018f42:	b125      	cbz	r5, 8018f4e <__swsetup_r+0x16>
 8018f44:	69ab      	ldr	r3, [r5, #24]
 8018f46:	b913      	cbnz	r3, 8018f4e <__swsetup_r+0x16>
 8018f48:	4628      	mov	r0, r5
 8018f4a:	f000 f97d 	bl	8019248 <__sinit>
 8018f4e:	4b2e      	ldr	r3, [pc, #184]	; (8019008 <__swsetup_r+0xd0>)
 8018f50:	429c      	cmp	r4, r3
 8018f52:	d10f      	bne.n	8018f74 <__swsetup_r+0x3c>
 8018f54:	686c      	ldr	r4, [r5, #4]
 8018f56:	89a3      	ldrh	r3, [r4, #12]
 8018f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018f5c:	0719      	lsls	r1, r3, #28
 8018f5e:	d42c      	bmi.n	8018fba <__swsetup_r+0x82>
 8018f60:	06dd      	lsls	r5, r3, #27
 8018f62:	d411      	bmi.n	8018f88 <__swsetup_r+0x50>
 8018f64:	2309      	movs	r3, #9
 8018f66:	6033      	str	r3, [r6, #0]
 8018f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018f6c:	81a3      	strh	r3, [r4, #12]
 8018f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f72:	e03e      	b.n	8018ff2 <__swsetup_r+0xba>
 8018f74:	4b25      	ldr	r3, [pc, #148]	; (801900c <__swsetup_r+0xd4>)
 8018f76:	429c      	cmp	r4, r3
 8018f78:	d101      	bne.n	8018f7e <__swsetup_r+0x46>
 8018f7a:	68ac      	ldr	r4, [r5, #8]
 8018f7c:	e7eb      	b.n	8018f56 <__swsetup_r+0x1e>
 8018f7e:	4b24      	ldr	r3, [pc, #144]	; (8019010 <__swsetup_r+0xd8>)
 8018f80:	429c      	cmp	r4, r3
 8018f82:	bf08      	it	eq
 8018f84:	68ec      	ldreq	r4, [r5, #12]
 8018f86:	e7e6      	b.n	8018f56 <__swsetup_r+0x1e>
 8018f88:	0758      	lsls	r0, r3, #29
 8018f8a:	d512      	bpl.n	8018fb2 <__swsetup_r+0x7a>
 8018f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018f8e:	b141      	cbz	r1, 8018fa2 <__swsetup_r+0x6a>
 8018f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018f94:	4299      	cmp	r1, r3
 8018f96:	d002      	beq.n	8018f9e <__swsetup_r+0x66>
 8018f98:	4630      	mov	r0, r6
 8018f9a:	f7ff fdfd 	bl	8018b98 <_free_r>
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8018fa2:	89a3      	ldrh	r3, [r4, #12]
 8018fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018fa8:	81a3      	strh	r3, [r4, #12]
 8018faa:	2300      	movs	r3, #0
 8018fac:	6063      	str	r3, [r4, #4]
 8018fae:	6923      	ldr	r3, [r4, #16]
 8018fb0:	6023      	str	r3, [r4, #0]
 8018fb2:	89a3      	ldrh	r3, [r4, #12]
 8018fb4:	f043 0308 	orr.w	r3, r3, #8
 8018fb8:	81a3      	strh	r3, [r4, #12]
 8018fba:	6923      	ldr	r3, [r4, #16]
 8018fbc:	b94b      	cbnz	r3, 8018fd2 <__swsetup_r+0x9a>
 8018fbe:	89a3      	ldrh	r3, [r4, #12]
 8018fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018fc8:	d003      	beq.n	8018fd2 <__swsetup_r+0x9a>
 8018fca:	4621      	mov	r1, r4
 8018fcc:	4630      	mov	r0, r6
 8018fce:	f000 f9ff 	bl	80193d0 <__smakebuf_r>
 8018fd2:	89a0      	ldrh	r0, [r4, #12]
 8018fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018fd8:	f010 0301 	ands.w	r3, r0, #1
 8018fdc:	d00a      	beq.n	8018ff4 <__swsetup_r+0xbc>
 8018fde:	2300      	movs	r3, #0
 8018fe0:	60a3      	str	r3, [r4, #8]
 8018fe2:	6963      	ldr	r3, [r4, #20]
 8018fe4:	425b      	negs	r3, r3
 8018fe6:	61a3      	str	r3, [r4, #24]
 8018fe8:	6923      	ldr	r3, [r4, #16]
 8018fea:	b943      	cbnz	r3, 8018ffe <__swsetup_r+0xc6>
 8018fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018ff0:	d1ba      	bne.n	8018f68 <__swsetup_r+0x30>
 8018ff2:	bd70      	pop	{r4, r5, r6, pc}
 8018ff4:	0781      	lsls	r1, r0, #30
 8018ff6:	bf58      	it	pl
 8018ff8:	6963      	ldrpl	r3, [r4, #20]
 8018ffa:	60a3      	str	r3, [r4, #8]
 8018ffc:	e7f4      	b.n	8018fe8 <__swsetup_r+0xb0>
 8018ffe:	2000      	movs	r0, #0
 8019000:	e7f7      	b.n	8018ff2 <__swsetup_r+0xba>
 8019002:	bf00      	nop
 8019004:	20000050 	.word	0x20000050
 8019008:	0802fc7c 	.word	0x0802fc7c
 801900c:	0802fc9c 	.word	0x0802fc9c
 8019010:	0802fc5c 	.word	0x0802fc5c

08019014 <__sflush_r>:
 8019014:	898a      	ldrh	r2, [r1, #12]
 8019016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801901a:	4605      	mov	r5, r0
 801901c:	0710      	lsls	r0, r2, #28
 801901e:	460c      	mov	r4, r1
 8019020:	d458      	bmi.n	80190d4 <__sflush_r+0xc0>
 8019022:	684b      	ldr	r3, [r1, #4]
 8019024:	2b00      	cmp	r3, #0
 8019026:	dc05      	bgt.n	8019034 <__sflush_r+0x20>
 8019028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801902a:	2b00      	cmp	r3, #0
 801902c:	dc02      	bgt.n	8019034 <__sflush_r+0x20>
 801902e:	2000      	movs	r0, #0
 8019030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019036:	2e00      	cmp	r6, #0
 8019038:	d0f9      	beq.n	801902e <__sflush_r+0x1a>
 801903a:	2300      	movs	r3, #0
 801903c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019040:	682f      	ldr	r7, [r5, #0]
 8019042:	602b      	str	r3, [r5, #0]
 8019044:	d032      	beq.n	80190ac <__sflush_r+0x98>
 8019046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019048:	89a3      	ldrh	r3, [r4, #12]
 801904a:	075a      	lsls	r2, r3, #29
 801904c:	d505      	bpl.n	801905a <__sflush_r+0x46>
 801904e:	6863      	ldr	r3, [r4, #4]
 8019050:	1ac0      	subs	r0, r0, r3
 8019052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019054:	b10b      	cbz	r3, 801905a <__sflush_r+0x46>
 8019056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019058:	1ac0      	subs	r0, r0, r3
 801905a:	2300      	movs	r3, #0
 801905c:	4602      	mov	r2, r0
 801905e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019060:	6a21      	ldr	r1, [r4, #32]
 8019062:	4628      	mov	r0, r5
 8019064:	47b0      	blx	r6
 8019066:	1c43      	adds	r3, r0, #1
 8019068:	89a3      	ldrh	r3, [r4, #12]
 801906a:	d106      	bne.n	801907a <__sflush_r+0x66>
 801906c:	6829      	ldr	r1, [r5, #0]
 801906e:	291d      	cmp	r1, #29
 8019070:	d82c      	bhi.n	80190cc <__sflush_r+0xb8>
 8019072:	4a2a      	ldr	r2, [pc, #168]	; (801911c <__sflush_r+0x108>)
 8019074:	40ca      	lsrs	r2, r1
 8019076:	07d6      	lsls	r6, r2, #31
 8019078:	d528      	bpl.n	80190cc <__sflush_r+0xb8>
 801907a:	2200      	movs	r2, #0
 801907c:	6062      	str	r2, [r4, #4]
 801907e:	04d9      	lsls	r1, r3, #19
 8019080:	6922      	ldr	r2, [r4, #16]
 8019082:	6022      	str	r2, [r4, #0]
 8019084:	d504      	bpl.n	8019090 <__sflush_r+0x7c>
 8019086:	1c42      	adds	r2, r0, #1
 8019088:	d101      	bne.n	801908e <__sflush_r+0x7a>
 801908a:	682b      	ldr	r3, [r5, #0]
 801908c:	b903      	cbnz	r3, 8019090 <__sflush_r+0x7c>
 801908e:	6560      	str	r0, [r4, #84]	; 0x54
 8019090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019092:	602f      	str	r7, [r5, #0]
 8019094:	2900      	cmp	r1, #0
 8019096:	d0ca      	beq.n	801902e <__sflush_r+0x1a>
 8019098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801909c:	4299      	cmp	r1, r3
 801909e:	d002      	beq.n	80190a6 <__sflush_r+0x92>
 80190a0:	4628      	mov	r0, r5
 80190a2:	f7ff fd79 	bl	8018b98 <_free_r>
 80190a6:	2000      	movs	r0, #0
 80190a8:	6360      	str	r0, [r4, #52]	; 0x34
 80190aa:	e7c1      	b.n	8019030 <__sflush_r+0x1c>
 80190ac:	6a21      	ldr	r1, [r4, #32]
 80190ae:	2301      	movs	r3, #1
 80190b0:	4628      	mov	r0, r5
 80190b2:	47b0      	blx	r6
 80190b4:	1c41      	adds	r1, r0, #1
 80190b6:	d1c7      	bne.n	8019048 <__sflush_r+0x34>
 80190b8:	682b      	ldr	r3, [r5, #0]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d0c4      	beq.n	8019048 <__sflush_r+0x34>
 80190be:	2b1d      	cmp	r3, #29
 80190c0:	d001      	beq.n	80190c6 <__sflush_r+0xb2>
 80190c2:	2b16      	cmp	r3, #22
 80190c4:	d101      	bne.n	80190ca <__sflush_r+0xb6>
 80190c6:	602f      	str	r7, [r5, #0]
 80190c8:	e7b1      	b.n	801902e <__sflush_r+0x1a>
 80190ca:	89a3      	ldrh	r3, [r4, #12]
 80190cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190d0:	81a3      	strh	r3, [r4, #12]
 80190d2:	e7ad      	b.n	8019030 <__sflush_r+0x1c>
 80190d4:	690f      	ldr	r7, [r1, #16]
 80190d6:	2f00      	cmp	r7, #0
 80190d8:	d0a9      	beq.n	801902e <__sflush_r+0x1a>
 80190da:	0793      	lsls	r3, r2, #30
 80190dc:	680e      	ldr	r6, [r1, #0]
 80190de:	bf08      	it	eq
 80190e0:	694b      	ldreq	r3, [r1, #20]
 80190e2:	600f      	str	r7, [r1, #0]
 80190e4:	bf18      	it	ne
 80190e6:	2300      	movne	r3, #0
 80190e8:	eba6 0807 	sub.w	r8, r6, r7
 80190ec:	608b      	str	r3, [r1, #8]
 80190ee:	f1b8 0f00 	cmp.w	r8, #0
 80190f2:	dd9c      	ble.n	801902e <__sflush_r+0x1a>
 80190f4:	6a21      	ldr	r1, [r4, #32]
 80190f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80190f8:	4643      	mov	r3, r8
 80190fa:	463a      	mov	r2, r7
 80190fc:	4628      	mov	r0, r5
 80190fe:	47b0      	blx	r6
 8019100:	2800      	cmp	r0, #0
 8019102:	dc06      	bgt.n	8019112 <__sflush_r+0xfe>
 8019104:	89a3      	ldrh	r3, [r4, #12]
 8019106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801910a:	81a3      	strh	r3, [r4, #12]
 801910c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019110:	e78e      	b.n	8019030 <__sflush_r+0x1c>
 8019112:	4407      	add	r7, r0
 8019114:	eba8 0800 	sub.w	r8, r8, r0
 8019118:	e7e9      	b.n	80190ee <__sflush_r+0xda>
 801911a:	bf00      	nop
 801911c:	20400001 	.word	0x20400001

08019120 <_fflush_r>:
 8019120:	b538      	push	{r3, r4, r5, lr}
 8019122:	690b      	ldr	r3, [r1, #16]
 8019124:	4605      	mov	r5, r0
 8019126:	460c      	mov	r4, r1
 8019128:	b913      	cbnz	r3, 8019130 <_fflush_r+0x10>
 801912a:	2500      	movs	r5, #0
 801912c:	4628      	mov	r0, r5
 801912e:	bd38      	pop	{r3, r4, r5, pc}
 8019130:	b118      	cbz	r0, 801913a <_fflush_r+0x1a>
 8019132:	6983      	ldr	r3, [r0, #24]
 8019134:	b90b      	cbnz	r3, 801913a <_fflush_r+0x1a>
 8019136:	f000 f887 	bl	8019248 <__sinit>
 801913a:	4b14      	ldr	r3, [pc, #80]	; (801918c <_fflush_r+0x6c>)
 801913c:	429c      	cmp	r4, r3
 801913e:	d11b      	bne.n	8019178 <_fflush_r+0x58>
 8019140:	686c      	ldr	r4, [r5, #4]
 8019142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d0ef      	beq.n	801912a <_fflush_r+0xa>
 801914a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801914c:	07d0      	lsls	r0, r2, #31
 801914e:	d404      	bmi.n	801915a <_fflush_r+0x3a>
 8019150:	0599      	lsls	r1, r3, #22
 8019152:	d402      	bmi.n	801915a <_fflush_r+0x3a>
 8019154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019156:	f000 f915 	bl	8019384 <__retarget_lock_acquire_recursive>
 801915a:	4628      	mov	r0, r5
 801915c:	4621      	mov	r1, r4
 801915e:	f7ff ff59 	bl	8019014 <__sflush_r>
 8019162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019164:	07da      	lsls	r2, r3, #31
 8019166:	4605      	mov	r5, r0
 8019168:	d4e0      	bmi.n	801912c <_fflush_r+0xc>
 801916a:	89a3      	ldrh	r3, [r4, #12]
 801916c:	059b      	lsls	r3, r3, #22
 801916e:	d4dd      	bmi.n	801912c <_fflush_r+0xc>
 8019170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019172:	f000 f908 	bl	8019386 <__retarget_lock_release_recursive>
 8019176:	e7d9      	b.n	801912c <_fflush_r+0xc>
 8019178:	4b05      	ldr	r3, [pc, #20]	; (8019190 <_fflush_r+0x70>)
 801917a:	429c      	cmp	r4, r3
 801917c:	d101      	bne.n	8019182 <_fflush_r+0x62>
 801917e:	68ac      	ldr	r4, [r5, #8]
 8019180:	e7df      	b.n	8019142 <_fflush_r+0x22>
 8019182:	4b04      	ldr	r3, [pc, #16]	; (8019194 <_fflush_r+0x74>)
 8019184:	429c      	cmp	r4, r3
 8019186:	bf08      	it	eq
 8019188:	68ec      	ldreq	r4, [r5, #12]
 801918a:	e7da      	b.n	8019142 <_fflush_r+0x22>
 801918c:	0802fc7c 	.word	0x0802fc7c
 8019190:	0802fc9c 	.word	0x0802fc9c
 8019194:	0802fc5c 	.word	0x0802fc5c

08019198 <std>:
 8019198:	2300      	movs	r3, #0
 801919a:	b510      	push	{r4, lr}
 801919c:	4604      	mov	r4, r0
 801919e:	e9c0 3300 	strd	r3, r3, [r0]
 80191a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80191a6:	6083      	str	r3, [r0, #8]
 80191a8:	8181      	strh	r1, [r0, #12]
 80191aa:	6643      	str	r3, [r0, #100]	; 0x64
 80191ac:	81c2      	strh	r2, [r0, #14]
 80191ae:	6183      	str	r3, [r0, #24]
 80191b0:	4619      	mov	r1, r3
 80191b2:	2208      	movs	r2, #8
 80191b4:	305c      	adds	r0, #92	; 0x5c
 80191b6:	f7ff fce7 	bl	8018b88 <memset>
 80191ba:	4b05      	ldr	r3, [pc, #20]	; (80191d0 <std+0x38>)
 80191bc:	6263      	str	r3, [r4, #36]	; 0x24
 80191be:	4b05      	ldr	r3, [pc, #20]	; (80191d4 <std+0x3c>)
 80191c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80191c2:	4b05      	ldr	r3, [pc, #20]	; (80191d8 <std+0x40>)
 80191c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80191c6:	4b05      	ldr	r3, [pc, #20]	; (80191dc <std+0x44>)
 80191c8:	6224      	str	r4, [r4, #32]
 80191ca:	6323      	str	r3, [r4, #48]	; 0x30
 80191cc:	bd10      	pop	{r4, pc}
 80191ce:	bf00      	nop
 80191d0:	08019d8d 	.word	0x08019d8d
 80191d4:	08019daf 	.word	0x08019daf
 80191d8:	08019de7 	.word	0x08019de7
 80191dc:	08019e0b 	.word	0x08019e0b

080191e0 <_cleanup_r>:
 80191e0:	4901      	ldr	r1, [pc, #4]	; (80191e8 <_cleanup_r+0x8>)
 80191e2:	f000 b8af 	b.w	8019344 <_fwalk_reent>
 80191e6:	bf00      	nop
 80191e8:	08019121 	.word	0x08019121

080191ec <__sfmoreglue>:
 80191ec:	b570      	push	{r4, r5, r6, lr}
 80191ee:	1e4a      	subs	r2, r1, #1
 80191f0:	2568      	movs	r5, #104	; 0x68
 80191f2:	4355      	muls	r5, r2
 80191f4:	460e      	mov	r6, r1
 80191f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80191fa:	f7ff fd1d 	bl	8018c38 <_malloc_r>
 80191fe:	4604      	mov	r4, r0
 8019200:	b140      	cbz	r0, 8019214 <__sfmoreglue+0x28>
 8019202:	2100      	movs	r1, #0
 8019204:	e9c0 1600 	strd	r1, r6, [r0]
 8019208:	300c      	adds	r0, #12
 801920a:	60a0      	str	r0, [r4, #8]
 801920c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019210:	f7ff fcba 	bl	8018b88 <memset>
 8019214:	4620      	mov	r0, r4
 8019216:	bd70      	pop	{r4, r5, r6, pc}

08019218 <__sfp_lock_acquire>:
 8019218:	4801      	ldr	r0, [pc, #4]	; (8019220 <__sfp_lock_acquire+0x8>)
 801921a:	f000 b8b3 	b.w	8019384 <__retarget_lock_acquire_recursive>
 801921e:	bf00      	nop
 8019220:	2004bfbc 	.word	0x2004bfbc

08019224 <__sfp_lock_release>:
 8019224:	4801      	ldr	r0, [pc, #4]	; (801922c <__sfp_lock_release+0x8>)
 8019226:	f000 b8ae 	b.w	8019386 <__retarget_lock_release_recursive>
 801922a:	bf00      	nop
 801922c:	2004bfbc 	.word	0x2004bfbc

08019230 <__sinit_lock_acquire>:
 8019230:	4801      	ldr	r0, [pc, #4]	; (8019238 <__sinit_lock_acquire+0x8>)
 8019232:	f000 b8a7 	b.w	8019384 <__retarget_lock_acquire_recursive>
 8019236:	bf00      	nop
 8019238:	2004bfb7 	.word	0x2004bfb7

0801923c <__sinit_lock_release>:
 801923c:	4801      	ldr	r0, [pc, #4]	; (8019244 <__sinit_lock_release+0x8>)
 801923e:	f000 b8a2 	b.w	8019386 <__retarget_lock_release_recursive>
 8019242:	bf00      	nop
 8019244:	2004bfb7 	.word	0x2004bfb7

08019248 <__sinit>:
 8019248:	b510      	push	{r4, lr}
 801924a:	4604      	mov	r4, r0
 801924c:	f7ff fff0 	bl	8019230 <__sinit_lock_acquire>
 8019250:	69a3      	ldr	r3, [r4, #24]
 8019252:	b11b      	cbz	r3, 801925c <__sinit+0x14>
 8019254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019258:	f7ff bff0 	b.w	801923c <__sinit_lock_release>
 801925c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019260:	6523      	str	r3, [r4, #80]	; 0x50
 8019262:	4b13      	ldr	r3, [pc, #76]	; (80192b0 <__sinit+0x68>)
 8019264:	4a13      	ldr	r2, [pc, #76]	; (80192b4 <__sinit+0x6c>)
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	62a2      	str	r2, [r4, #40]	; 0x28
 801926a:	42a3      	cmp	r3, r4
 801926c:	bf04      	itt	eq
 801926e:	2301      	moveq	r3, #1
 8019270:	61a3      	streq	r3, [r4, #24]
 8019272:	4620      	mov	r0, r4
 8019274:	f000 f820 	bl	80192b8 <__sfp>
 8019278:	6060      	str	r0, [r4, #4]
 801927a:	4620      	mov	r0, r4
 801927c:	f000 f81c 	bl	80192b8 <__sfp>
 8019280:	60a0      	str	r0, [r4, #8]
 8019282:	4620      	mov	r0, r4
 8019284:	f000 f818 	bl	80192b8 <__sfp>
 8019288:	2200      	movs	r2, #0
 801928a:	60e0      	str	r0, [r4, #12]
 801928c:	2104      	movs	r1, #4
 801928e:	6860      	ldr	r0, [r4, #4]
 8019290:	f7ff ff82 	bl	8019198 <std>
 8019294:	68a0      	ldr	r0, [r4, #8]
 8019296:	2201      	movs	r2, #1
 8019298:	2109      	movs	r1, #9
 801929a:	f7ff ff7d 	bl	8019198 <std>
 801929e:	68e0      	ldr	r0, [r4, #12]
 80192a0:	2202      	movs	r2, #2
 80192a2:	2112      	movs	r1, #18
 80192a4:	f7ff ff78 	bl	8019198 <std>
 80192a8:	2301      	movs	r3, #1
 80192aa:	61a3      	str	r3, [r4, #24]
 80192ac:	e7d2      	b.n	8019254 <__sinit+0xc>
 80192ae:	bf00      	nop
 80192b0:	0802fc58 	.word	0x0802fc58
 80192b4:	080191e1 	.word	0x080191e1

080192b8 <__sfp>:
 80192b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ba:	4607      	mov	r7, r0
 80192bc:	f7ff ffac 	bl	8019218 <__sfp_lock_acquire>
 80192c0:	4b1e      	ldr	r3, [pc, #120]	; (801933c <__sfp+0x84>)
 80192c2:	681e      	ldr	r6, [r3, #0]
 80192c4:	69b3      	ldr	r3, [r6, #24]
 80192c6:	b913      	cbnz	r3, 80192ce <__sfp+0x16>
 80192c8:	4630      	mov	r0, r6
 80192ca:	f7ff ffbd 	bl	8019248 <__sinit>
 80192ce:	3648      	adds	r6, #72	; 0x48
 80192d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80192d4:	3b01      	subs	r3, #1
 80192d6:	d503      	bpl.n	80192e0 <__sfp+0x28>
 80192d8:	6833      	ldr	r3, [r6, #0]
 80192da:	b30b      	cbz	r3, 8019320 <__sfp+0x68>
 80192dc:	6836      	ldr	r6, [r6, #0]
 80192de:	e7f7      	b.n	80192d0 <__sfp+0x18>
 80192e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80192e4:	b9d5      	cbnz	r5, 801931c <__sfp+0x64>
 80192e6:	4b16      	ldr	r3, [pc, #88]	; (8019340 <__sfp+0x88>)
 80192e8:	60e3      	str	r3, [r4, #12]
 80192ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80192ee:	6665      	str	r5, [r4, #100]	; 0x64
 80192f0:	f000 f847 	bl	8019382 <__retarget_lock_init_recursive>
 80192f4:	f7ff ff96 	bl	8019224 <__sfp_lock_release>
 80192f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80192fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019300:	6025      	str	r5, [r4, #0]
 8019302:	61a5      	str	r5, [r4, #24]
 8019304:	2208      	movs	r2, #8
 8019306:	4629      	mov	r1, r5
 8019308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801930c:	f7ff fc3c 	bl	8018b88 <memset>
 8019310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019318:	4620      	mov	r0, r4
 801931a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801931c:	3468      	adds	r4, #104	; 0x68
 801931e:	e7d9      	b.n	80192d4 <__sfp+0x1c>
 8019320:	2104      	movs	r1, #4
 8019322:	4638      	mov	r0, r7
 8019324:	f7ff ff62 	bl	80191ec <__sfmoreglue>
 8019328:	4604      	mov	r4, r0
 801932a:	6030      	str	r0, [r6, #0]
 801932c:	2800      	cmp	r0, #0
 801932e:	d1d5      	bne.n	80192dc <__sfp+0x24>
 8019330:	f7ff ff78 	bl	8019224 <__sfp_lock_release>
 8019334:	230c      	movs	r3, #12
 8019336:	603b      	str	r3, [r7, #0]
 8019338:	e7ee      	b.n	8019318 <__sfp+0x60>
 801933a:	bf00      	nop
 801933c:	0802fc58 	.word	0x0802fc58
 8019340:	ffff0001 	.word	0xffff0001

08019344 <_fwalk_reent>:
 8019344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019348:	4606      	mov	r6, r0
 801934a:	4688      	mov	r8, r1
 801934c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019350:	2700      	movs	r7, #0
 8019352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019356:	f1b9 0901 	subs.w	r9, r9, #1
 801935a:	d505      	bpl.n	8019368 <_fwalk_reent+0x24>
 801935c:	6824      	ldr	r4, [r4, #0]
 801935e:	2c00      	cmp	r4, #0
 8019360:	d1f7      	bne.n	8019352 <_fwalk_reent+0xe>
 8019362:	4638      	mov	r0, r7
 8019364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019368:	89ab      	ldrh	r3, [r5, #12]
 801936a:	2b01      	cmp	r3, #1
 801936c:	d907      	bls.n	801937e <_fwalk_reent+0x3a>
 801936e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019372:	3301      	adds	r3, #1
 8019374:	d003      	beq.n	801937e <_fwalk_reent+0x3a>
 8019376:	4629      	mov	r1, r5
 8019378:	4630      	mov	r0, r6
 801937a:	47c0      	blx	r8
 801937c:	4307      	orrs	r7, r0
 801937e:	3568      	adds	r5, #104	; 0x68
 8019380:	e7e9      	b.n	8019356 <_fwalk_reent+0x12>

08019382 <__retarget_lock_init_recursive>:
 8019382:	4770      	bx	lr

08019384 <__retarget_lock_acquire_recursive>:
 8019384:	4770      	bx	lr

08019386 <__retarget_lock_release_recursive>:
 8019386:	4770      	bx	lr

08019388 <__swhatbuf_r>:
 8019388:	b570      	push	{r4, r5, r6, lr}
 801938a:	460e      	mov	r6, r1
 801938c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019390:	2900      	cmp	r1, #0
 8019392:	b096      	sub	sp, #88	; 0x58
 8019394:	4614      	mov	r4, r2
 8019396:	461d      	mov	r5, r3
 8019398:	da07      	bge.n	80193aa <__swhatbuf_r+0x22>
 801939a:	2300      	movs	r3, #0
 801939c:	602b      	str	r3, [r5, #0]
 801939e:	89b3      	ldrh	r3, [r6, #12]
 80193a0:	061a      	lsls	r2, r3, #24
 80193a2:	d410      	bmi.n	80193c6 <__swhatbuf_r+0x3e>
 80193a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80193a8:	e00e      	b.n	80193c8 <__swhatbuf_r+0x40>
 80193aa:	466a      	mov	r2, sp
 80193ac:	f000 fd54 	bl	8019e58 <_fstat_r>
 80193b0:	2800      	cmp	r0, #0
 80193b2:	dbf2      	blt.n	801939a <__swhatbuf_r+0x12>
 80193b4:	9a01      	ldr	r2, [sp, #4]
 80193b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80193ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80193be:	425a      	negs	r2, r3
 80193c0:	415a      	adcs	r2, r3
 80193c2:	602a      	str	r2, [r5, #0]
 80193c4:	e7ee      	b.n	80193a4 <__swhatbuf_r+0x1c>
 80193c6:	2340      	movs	r3, #64	; 0x40
 80193c8:	2000      	movs	r0, #0
 80193ca:	6023      	str	r3, [r4, #0]
 80193cc:	b016      	add	sp, #88	; 0x58
 80193ce:	bd70      	pop	{r4, r5, r6, pc}

080193d0 <__smakebuf_r>:
 80193d0:	898b      	ldrh	r3, [r1, #12]
 80193d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80193d4:	079d      	lsls	r5, r3, #30
 80193d6:	4606      	mov	r6, r0
 80193d8:	460c      	mov	r4, r1
 80193da:	d507      	bpl.n	80193ec <__smakebuf_r+0x1c>
 80193dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80193e0:	6023      	str	r3, [r4, #0]
 80193e2:	6123      	str	r3, [r4, #16]
 80193e4:	2301      	movs	r3, #1
 80193e6:	6163      	str	r3, [r4, #20]
 80193e8:	b002      	add	sp, #8
 80193ea:	bd70      	pop	{r4, r5, r6, pc}
 80193ec:	ab01      	add	r3, sp, #4
 80193ee:	466a      	mov	r2, sp
 80193f0:	f7ff ffca 	bl	8019388 <__swhatbuf_r>
 80193f4:	9900      	ldr	r1, [sp, #0]
 80193f6:	4605      	mov	r5, r0
 80193f8:	4630      	mov	r0, r6
 80193fa:	f7ff fc1d 	bl	8018c38 <_malloc_r>
 80193fe:	b948      	cbnz	r0, 8019414 <__smakebuf_r+0x44>
 8019400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019404:	059a      	lsls	r2, r3, #22
 8019406:	d4ef      	bmi.n	80193e8 <__smakebuf_r+0x18>
 8019408:	f023 0303 	bic.w	r3, r3, #3
 801940c:	f043 0302 	orr.w	r3, r3, #2
 8019410:	81a3      	strh	r3, [r4, #12]
 8019412:	e7e3      	b.n	80193dc <__smakebuf_r+0xc>
 8019414:	4b0d      	ldr	r3, [pc, #52]	; (801944c <__smakebuf_r+0x7c>)
 8019416:	62b3      	str	r3, [r6, #40]	; 0x28
 8019418:	89a3      	ldrh	r3, [r4, #12]
 801941a:	6020      	str	r0, [r4, #0]
 801941c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019420:	81a3      	strh	r3, [r4, #12]
 8019422:	9b00      	ldr	r3, [sp, #0]
 8019424:	6163      	str	r3, [r4, #20]
 8019426:	9b01      	ldr	r3, [sp, #4]
 8019428:	6120      	str	r0, [r4, #16]
 801942a:	b15b      	cbz	r3, 8019444 <__smakebuf_r+0x74>
 801942c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019430:	4630      	mov	r0, r6
 8019432:	f000 fd23 	bl	8019e7c <_isatty_r>
 8019436:	b128      	cbz	r0, 8019444 <__smakebuf_r+0x74>
 8019438:	89a3      	ldrh	r3, [r4, #12]
 801943a:	f023 0303 	bic.w	r3, r3, #3
 801943e:	f043 0301 	orr.w	r3, r3, #1
 8019442:	81a3      	strh	r3, [r4, #12]
 8019444:	89a0      	ldrh	r0, [r4, #12]
 8019446:	4305      	orrs	r5, r0
 8019448:	81a5      	strh	r5, [r4, #12]
 801944a:	e7cd      	b.n	80193e8 <__smakebuf_r+0x18>
 801944c:	080191e1 	.word	0x080191e1

08019450 <__malloc_lock>:
 8019450:	4801      	ldr	r0, [pc, #4]	; (8019458 <__malloc_lock+0x8>)
 8019452:	f7ff bf97 	b.w	8019384 <__retarget_lock_acquire_recursive>
 8019456:	bf00      	nop
 8019458:	2004bfb8 	.word	0x2004bfb8

0801945c <__malloc_unlock>:
 801945c:	4801      	ldr	r0, [pc, #4]	; (8019464 <__malloc_unlock+0x8>)
 801945e:	f7ff bf92 	b.w	8019386 <__retarget_lock_release_recursive>
 8019462:	bf00      	nop
 8019464:	2004bfb8 	.word	0x2004bfb8

08019468 <__ssputs_r>:
 8019468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801946c:	688e      	ldr	r6, [r1, #8]
 801946e:	429e      	cmp	r6, r3
 8019470:	4682      	mov	sl, r0
 8019472:	460c      	mov	r4, r1
 8019474:	4690      	mov	r8, r2
 8019476:	461f      	mov	r7, r3
 8019478:	d838      	bhi.n	80194ec <__ssputs_r+0x84>
 801947a:	898a      	ldrh	r2, [r1, #12]
 801947c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019480:	d032      	beq.n	80194e8 <__ssputs_r+0x80>
 8019482:	6825      	ldr	r5, [r4, #0]
 8019484:	6909      	ldr	r1, [r1, #16]
 8019486:	eba5 0901 	sub.w	r9, r5, r1
 801948a:	6965      	ldr	r5, [r4, #20]
 801948c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019494:	3301      	adds	r3, #1
 8019496:	444b      	add	r3, r9
 8019498:	106d      	asrs	r5, r5, #1
 801949a:	429d      	cmp	r5, r3
 801949c:	bf38      	it	cc
 801949e:	461d      	movcc	r5, r3
 80194a0:	0553      	lsls	r3, r2, #21
 80194a2:	d531      	bpl.n	8019508 <__ssputs_r+0xa0>
 80194a4:	4629      	mov	r1, r5
 80194a6:	f7ff fbc7 	bl	8018c38 <_malloc_r>
 80194aa:	4606      	mov	r6, r0
 80194ac:	b950      	cbnz	r0, 80194c4 <__ssputs_r+0x5c>
 80194ae:	230c      	movs	r3, #12
 80194b0:	f8ca 3000 	str.w	r3, [sl]
 80194b4:	89a3      	ldrh	r3, [r4, #12]
 80194b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194ba:	81a3      	strh	r3, [r4, #12]
 80194bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194c4:	6921      	ldr	r1, [r4, #16]
 80194c6:	464a      	mov	r2, r9
 80194c8:	f7ff fb50 	bl	8018b6c <memcpy>
 80194cc:	89a3      	ldrh	r3, [r4, #12]
 80194ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80194d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194d6:	81a3      	strh	r3, [r4, #12]
 80194d8:	6126      	str	r6, [r4, #16]
 80194da:	6165      	str	r5, [r4, #20]
 80194dc:	444e      	add	r6, r9
 80194de:	eba5 0509 	sub.w	r5, r5, r9
 80194e2:	6026      	str	r6, [r4, #0]
 80194e4:	60a5      	str	r5, [r4, #8]
 80194e6:	463e      	mov	r6, r7
 80194e8:	42be      	cmp	r6, r7
 80194ea:	d900      	bls.n	80194ee <__ssputs_r+0x86>
 80194ec:	463e      	mov	r6, r7
 80194ee:	4632      	mov	r2, r6
 80194f0:	6820      	ldr	r0, [r4, #0]
 80194f2:	4641      	mov	r1, r8
 80194f4:	f000 fce4 	bl	8019ec0 <memmove>
 80194f8:	68a3      	ldr	r3, [r4, #8]
 80194fa:	6822      	ldr	r2, [r4, #0]
 80194fc:	1b9b      	subs	r3, r3, r6
 80194fe:	4432      	add	r2, r6
 8019500:	60a3      	str	r3, [r4, #8]
 8019502:	6022      	str	r2, [r4, #0]
 8019504:	2000      	movs	r0, #0
 8019506:	e7db      	b.n	80194c0 <__ssputs_r+0x58>
 8019508:	462a      	mov	r2, r5
 801950a:	f000 fcf3 	bl	8019ef4 <_realloc_r>
 801950e:	4606      	mov	r6, r0
 8019510:	2800      	cmp	r0, #0
 8019512:	d1e1      	bne.n	80194d8 <__ssputs_r+0x70>
 8019514:	6921      	ldr	r1, [r4, #16]
 8019516:	4650      	mov	r0, sl
 8019518:	f7ff fb3e 	bl	8018b98 <_free_r>
 801951c:	e7c7      	b.n	80194ae <__ssputs_r+0x46>
	...

08019520 <_svfiprintf_r>:
 8019520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019524:	4698      	mov	r8, r3
 8019526:	898b      	ldrh	r3, [r1, #12]
 8019528:	061b      	lsls	r3, r3, #24
 801952a:	b09d      	sub	sp, #116	; 0x74
 801952c:	4607      	mov	r7, r0
 801952e:	460d      	mov	r5, r1
 8019530:	4614      	mov	r4, r2
 8019532:	d50e      	bpl.n	8019552 <_svfiprintf_r+0x32>
 8019534:	690b      	ldr	r3, [r1, #16]
 8019536:	b963      	cbnz	r3, 8019552 <_svfiprintf_r+0x32>
 8019538:	2140      	movs	r1, #64	; 0x40
 801953a:	f7ff fb7d 	bl	8018c38 <_malloc_r>
 801953e:	6028      	str	r0, [r5, #0]
 8019540:	6128      	str	r0, [r5, #16]
 8019542:	b920      	cbnz	r0, 801954e <_svfiprintf_r+0x2e>
 8019544:	230c      	movs	r3, #12
 8019546:	603b      	str	r3, [r7, #0]
 8019548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801954c:	e0d1      	b.n	80196f2 <_svfiprintf_r+0x1d2>
 801954e:	2340      	movs	r3, #64	; 0x40
 8019550:	616b      	str	r3, [r5, #20]
 8019552:	2300      	movs	r3, #0
 8019554:	9309      	str	r3, [sp, #36]	; 0x24
 8019556:	2320      	movs	r3, #32
 8019558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801955c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019560:	2330      	movs	r3, #48	; 0x30
 8019562:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801970c <_svfiprintf_r+0x1ec>
 8019566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801956a:	f04f 0901 	mov.w	r9, #1
 801956e:	4623      	mov	r3, r4
 8019570:	469a      	mov	sl, r3
 8019572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019576:	b10a      	cbz	r2, 801957c <_svfiprintf_r+0x5c>
 8019578:	2a25      	cmp	r2, #37	; 0x25
 801957a:	d1f9      	bne.n	8019570 <_svfiprintf_r+0x50>
 801957c:	ebba 0b04 	subs.w	fp, sl, r4
 8019580:	d00b      	beq.n	801959a <_svfiprintf_r+0x7a>
 8019582:	465b      	mov	r3, fp
 8019584:	4622      	mov	r2, r4
 8019586:	4629      	mov	r1, r5
 8019588:	4638      	mov	r0, r7
 801958a:	f7ff ff6d 	bl	8019468 <__ssputs_r>
 801958e:	3001      	adds	r0, #1
 8019590:	f000 80aa 	beq.w	80196e8 <_svfiprintf_r+0x1c8>
 8019594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019596:	445a      	add	r2, fp
 8019598:	9209      	str	r2, [sp, #36]	; 0x24
 801959a:	f89a 3000 	ldrb.w	r3, [sl]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	f000 80a2 	beq.w	80196e8 <_svfiprintf_r+0x1c8>
 80195a4:	2300      	movs	r3, #0
 80195a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80195aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195ae:	f10a 0a01 	add.w	sl, sl, #1
 80195b2:	9304      	str	r3, [sp, #16]
 80195b4:	9307      	str	r3, [sp, #28]
 80195b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80195ba:	931a      	str	r3, [sp, #104]	; 0x68
 80195bc:	4654      	mov	r4, sl
 80195be:	2205      	movs	r2, #5
 80195c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195c4:	4851      	ldr	r0, [pc, #324]	; (801970c <_svfiprintf_r+0x1ec>)
 80195c6:	f7e6 fe83 	bl	80002d0 <memchr>
 80195ca:	9a04      	ldr	r2, [sp, #16]
 80195cc:	b9d8      	cbnz	r0, 8019606 <_svfiprintf_r+0xe6>
 80195ce:	06d0      	lsls	r0, r2, #27
 80195d0:	bf44      	itt	mi
 80195d2:	2320      	movmi	r3, #32
 80195d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195d8:	0711      	lsls	r1, r2, #28
 80195da:	bf44      	itt	mi
 80195dc:	232b      	movmi	r3, #43	; 0x2b
 80195de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195e2:	f89a 3000 	ldrb.w	r3, [sl]
 80195e6:	2b2a      	cmp	r3, #42	; 0x2a
 80195e8:	d015      	beq.n	8019616 <_svfiprintf_r+0xf6>
 80195ea:	9a07      	ldr	r2, [sp, #28]
 80195ec:	4654      	mov	r4, sl
 80195ee:	2000      	movs	r0, #0
 80195f0:	f04f 0c0a 	mov.w	ip, #10
 80195f4:	4621      	mov	r1, r4
 80195f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195fa:	3b30      	subs	r3, #48	; 0x30
 80195fc:	2b09      	cmp	r3, #9
 80195fe:	d94e      	bls.n	801969e <_svfiprintf_r+0x17e>
 8019600:	b1b0      	cbz	r0, 8019630 <_svfiprintf_r+0x110>
 8019602:	9207      	str	r2, [sp, #28]
 8019604:	e014      	b.n	8019630 <_svfiprintf_r+0x110>
 8019606:	eba0 0308 	sub.w	r3, r0, r8
 801960a:	fa09 f303 	lsl.w	r3, r9, r3
 801960e:	4313      	orrs	r3, r2
 8019610:	9304      	str	r3, [sp, #16]
 8019612:	46a2      	mov	sl, r4
 8019614:	e7d2      	b.n	80195bc <_svfiprintf_r+0x9c>
 8019616:	9b03      	ldr	r3, [sp, #12]
 8019618:	1d19      	adds	r1, r3, #4
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	9103      	str	r1, [sp, #12]
 801961e:	2b00      	cmp	r3, #0
 8019620:	bfbb      	ittet	lt
 8019622:	425b      	neglt	r3, r3
 8019624:	f042 0202 	orrlt.w	r2, r2, #2
 8019628:	9307      	strge	r3, [sp, #28]
 801962a:	9307      	strlt	r3, [sp, #28]
 801962c:	bfb8      	it	lt
 801962e:	9204      	strlt	r2, [sp, #16]
 8019630:	7823      	ldrb	r3, [r4, #0]
 8019632:	2b2e      	cmp	r3, #46	; 0x2e
 8019634:	d10c      	bne.n	8019650 <_svfiprintf_r+0x130>
 8019636:	7863      	ldrb	r3, [r4, #1]
 8019638:	2b2a      	cmp	r3, #42	; 0x2a
 801963a:	d135      	bne.n	80196a8 <_svfiprintf_r+0x188>
 801963c:	9b03      	ldr	r3, [sp, #12]
 801963e:	1d1a      	adds	r2, r3, #4
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	9203      	str	r2, [sp, #12]
 8019644:	2b00      	cmp	r3, #0
 8019646:	bfb8      	it	lt
 8019648:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801964c:	3402      	adds	r4, #2
 801964e:	9305      	str	r3, [sp, #20]
 8019650:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801971c <_svfiprintf_r+0x1fc>
 8019654:	7821      	ldrb	r1, [r4, #0]
 8019656:	2203      	movs	r2, #3
 8019658:	4650      	mov	r0, sl
 801965a:	f7e6 fe39 	bl	80002d0 <memchr>
 801965e:	b140      	cbz	r0, 8019672 <_svfiprintf_r+0x152>
 8019660:	2340      	movs	r3, #64	; 0x40
 8019662:	eba0 000a 	sub.w	r0, r0, sl
 8019666:	fa03 f000 	lsl.w	r0, r3, r0
 801966a:	9b04      	ldr	r3, [sp, #16]
 801966c:	4303      	orrs	r3, r0
 801966e:	3401      	adds	r4, #1
 8019670:	9304      	str	r3, [sp, #16]
 8019672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019676:	4826      	ldr	r0, [pc, #152]	; (8019710 <_svfiprintf_r+0x1f0>)
 8019678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801967c:	2206      	movs	r2, #6
 801967e:	f7e6 fe27 	bl	80002d0 <memchr>
 8019682:	2800      	cmp	r0, #0
 8019684:	d038      	beq.n	80196f8 <_svfiprintf_r+0x1d8>
 8019686:	4b23      	ldr	r3, [pc, #140]	; (8019714 <_svfiprintf_r+0x1f4>)
 8019688:	bb1b      	cbnz	r3, 80196d2 <_svfiprintf_r+0x1b2>
 801968a:	9b03      	ldr	r3, [sp, #12]
 801968c:	3307      	adds	r3, #7
 801968e:	f023 0307 	bic.w	r3, r3, #7
 8019692:	3308      	adds	r3, #8
 8019694:	9303      	str	r3, [sp, #12]
 8019696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019698:	4433      	add	r3, r6
 801969a:	9309      	str	r3, [sp, #36]	; 0x24
 801969c:	e767      	b.n	801956e <_svfiprintf_r+0x4e>
 801969e:	fb0c 3202 	mla	r2, ip, r2, r3
 80196a2:	460c      	mov	r4, r1
 80196a4:	2001      	movs	r0, #1
 80196a6:	e7a5      	b.n	80195f4 <_svfiprintf_r+0xd4>
 80196a8:	2300      	movs	r3, #0
 80196aa:	3401      	adds	r4, #1
 80196ac:	9305      	str	r3, [sp, #20]
 80196ae:	4619      	mov	r1, r3
 80196b0:	f04f 0c0a 	mov.w	ip, #10
 80196b4:	4620      	mov	r0, r4
 80196b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196ba:	3a30      	subs	r2, #48	; 0x30
 80196bc:	2a09      	cmp	r2, #9
 80196be:	d903      	bls.n	80196c8 <_svfiprintf_r+0x1a8>
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d0c5      	beq.n	8019650 <_svfiprintf_r+0x130>
 80196c4:	9105      	str	r1, [sp, #20]
 80196c6:	e7c3      	b.n	8019650 <_svfiprintf_r+0x130>
 80196c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80196cc:	4604      	mov	r4, r0
 80196ce:	2301      	movs	r3, #1
 80196d0:	e7f0      	b.n	80196b4 <_svfiprintf_r+0x194>
 80196d2:	ab03      	add	r3, sp, #12
 80196d4:	9300      	str	r3, [sp, #0]
 80196d6:	462a      	mov	r2, r5
 80196d8:	4b0f      	ldr	r3, [pc, #60]	; (8019718 <_svfiprintf_r+0x1f8>)
 80196da:	a904      	add	r1, sp, #16
 80196dc:	4638      	mov	r0, r7
 80196de:	f3af 8000 	nop.w
 80196e2:	1c42      	adds	r2, r0, #1
 80196e4:	4606      	mov	r6, r0
 80196e6:	d1d6      	bne.n	8019696 <_svfiprintf_r+0x176>
 80196e8:	89ab      	ldrh	r3, [r5, #12]
 80196ea:	065b      	lsls	r3, r3, #25
 80196ec:	f53f af2c 	bmi.w	8019548 <_svfiprintf_r+0x28>
 80196f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196f2:	b01d      	add	sp, #116	; 0x74
 80196f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196f8:	ab03      	add	r3, sp, #12
 80196fa:	9300      	str	r3, [sp, #0]
 80196fc:	462a      	mov	r2, r5
 80196fe:	4b06      	ldr	r3, [pc, #24]	; (8019718 <_svfiprintf_r+0x1f8>)
 8019700:	a904      	add	r1, sp, #16
 8019702:	4638      	mov	r0, r7
 8019704:	f000 f9d4 	bl	8019ab0 <_printf_i>
 8019708:	e7eb      	b.n	80196e2 <_svfiprintf_r+0x1c2>
 801970a:	bf00      	nop
 801970c:	0802fcbc 	.word	0x0802fcbc
 8019710:	0802fcc6 	.word	0x0802fcc6
 8019714:	00000000 	.word	0x00000000
 8019718:	08019469 	.word	0x08019469
 801971c:	0802fcc2 	.word	0x0802fcc2

08019720 <__sfputc_r>:
 8019720:	6893      	ldr	r3, [r2, #8]
 8019722:	3b01      	subs	r3, #1
 8019724:	2b00      	cmp	r3, #0
 8019726:	b410      	push	{r4}
 8019728:	6093      	str	r3, [r2, #8]
 801972a:	da08      	bge.n	801973e <__sfputc_r+0x1e>
 801972c:	6994      	ldr	r4, [r2, #24]
 801972e:	42a3      	cmp	r3, r4
 8019730:	db01      	blt.n	8019736 <__sfputc_r+0x16>
 8019732:	290a      	cmp	r1, #10
 8019734:	d103      	bne.n	801973e <__sfputc_r+0x1e>
 8019736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801973a:	f7ff bbab 	b.w	8018e94 <__swbuf_r>
 801973e:	6813      	ldr	r3, [r2, #0]
 8019740:	1c58      	adds	r0, r3, #1
 8019742:	6010      	str	r0, [r2, #0]
 8019744:	7019      	strb	r1, [r3, #0]
 8019746:	4608      	mov	r0, r1
 8019748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801974c:	4770      	bx	lr

0801974e <__sfputs_r>:
 801974e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019750:	4606      	mov	r6, r0
 8019752:	460f      	mov	r7, r1
 8019754:	4614      	mov	r4, r2
 8019756:	18d5      	adds	r5, r2, r3
 8019758:	42ac      	cmp	r4, r5
 801975a:	d101      	bne.n	8019760 <__sfputs_r+0x12>
 801975c:	2000      	movs	r0, #0
 801975e:	e007      	b.n	8019770 <__sfputs_r+0x22>
 8019760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019764:	463a      	mov	r2, r7
 8019766:	4630      	mov	r0, r6
 8019768:	f7ff ffda 	bl	8019720 <__sfputc_r>
 801976c:	1c43      	adds	r3, r0, #1
 801976e:	d1f3      	bne.n	8019758 <__sfputs_r+0xa>
 8019770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019774 <_vfiprintf_r>:
 8019774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019778:	460d      	mov	r5, r1
 801977a:	b09d      	sub	sp, #116	; 0x74
 801977c:	4614      	mov	r4, r2
 801977e:	4698      	mov	r8, r3
 8019780:	4606      	mov	r6, r0
 8019782:	b118      	cbz	r0, 801978c <_vfiprintf_r+0x18>
 8019784:	6983      	ldr	r3, [r0, #24]
 8019786:	b90b      	cbnz	r3, 801978c <_vfiprintf_r+0x18>
 8019788:	f7ff fd5e 	bl	8019248 <__sinit>
 801978c:	4b89      	ldr	r3, [pc, #548]	; (80199b4 <_vfiprintf_r+0x240>)
 801978e:	429d      	cmp	r5, r3
 8019790:	d11b      	bne.n	80197ca <_vfiprintf_r+0x56>
 8019792:	6875      	ldr	r5, [r6, #4]
 8019794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019796:	07d9      	lsls	r1, r3, #31
 8019798:	d405      	bmi.n	80197a6 <_vfiprintf_r+0x32>
 801979a:	89ab      	ldrh	r3, [r5, #12]
 801979c:	059a      	lsls	r2, r3, #22
 801979e:	d402      	bmi.n	80197a6 <_vfiprintf_r+0x32>
 80197a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197a2:	f7ff fdef 	bl	8019384 <__retarget_lock_acquire_recursive>
 80197a6:	89ab      	ldrh	r3, [r5, #12]
 80197a8:	071b      	lsls	r3, r3, #28
 80197aa:	d501      	bpl.n	80197b0 <_vfiprintf_r+0x3c>
 80197ac:	692b      	ldr	r3, [r5, #16]
 80197ae:	b9eb      	cbnz	r3, 80197ec <_vfiprintf_r+0x78>
 80197b0:	4629      	mov	r1, r5
 80197b2:	4630      	mov	r0, r6
 80197b4:	f7ff fbc0 	bl	8018f38 <__swsetup_r>
 80197b8:	b1c0      	cbz	r0, 80197ec <_vfiprintf_r+0x78>
 80197ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80197bc:	07dc      	lsls	r4, r3, #31
 80197be:	d50e      	bpl.n	80197de <_vfiprintf_r+0x6a>
 80197c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80197c4:	b01d      	add	sp, #116	; 0x74
 80197c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ca:	4b7b      	ldr	r3, [pc, #492]	; (80199b8 <_vfiprintf_r+0x244>)
 80197cc:	429d      	cmp	r5, r3
 80197ce:	d101      	bne.n	80197d4 <_vfiprintf_r+0x60>
 80197d0:	68b5      	ldr	r5, [r6, #8]
 80197d2:	e7df      	b.n	8019794 <_vfiprintf_r+0x20>
 80197d4:	4b79      	ldr	r3, [pc, #484]	; (80199bc <_vfiprintf_r+0x248>)
 80197d6:	429d      	cmp	r5, r3
 80197d8:	bf08      	it	eq
 80197da:	68f5      	ldreq	r5, [r6, #12]
 80197dc:	e7da      	b.n	8019794 <_vfiprintf_r+0x20>
 80197de:	89ab      	ldrh	r3, [r5, #12]
 80197e0:	0598      	lsls	r0, r3, #22
 80197e2:	d4ed      	bmi.n	80197c0 <_vfiprintf_r+0x4c>
 80197e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197e6:	f7ff fdce 	bl	8019386 <__retarget_lock_release_recursive>
 80197ea:	e7e9      	b.n	80197c0 <_vfiprintf_r+0x4c>
 80197ec:	2300      	movs	r3, #0
 80197ee:	9309      	str	r3, [sp, #36]	; 0x24
 80197f0:	2320      	movs	r3, #32
 80197f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80197fa:	2330      	movs	r3, #48	; 0x30
 80197fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80199c0 <_vfiprintf_r+0x24c>
 8019800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019804:	f04f 0901 	mov.w	r9, #1
 8019808:	4623      	mov	r3, r4
 801980a:	469a      	mov	sl, r3
 801980c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019810:	b10a      	cbz	r2, 8019816 <_vfiprintf_r+0xa2>
 8019812:	2a25      	cmp	r2, #37	; 0x25
 8019814:	d1f9      	bne.n	801980a <_vfiprintf_r+0x96>
 8019816:	ebba 0b04 	subs.w	fp, sl, r4
 801981a:	d00b      	beq.n	8019834 <_vfiprintf_r+0xc0>
 801981c:	465b      	mov	r3, fp
 801981e:	4622      	mov	r2, r4
 8019820:	4629      	mov	r1, r5
 8019822:	4630      	mov	r0, r6
 8019824:	f7ff ff93 	bl	801974e <__sfputs_r>
 8019828:	3001      	adds	r0, #1
 801982a:	f000 80aa 	beq.w	8019982 <_vfiprintf_r+0x20e>
 801982e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019830:	445a      	add	r2, fp
 8019832:	9209      	str	r2, [sp, #36]	; 0x24
 8019834:	f89a 3000 	ldrb.w	r3, [sl]
 8019838:	2b00      	cmp	r3, #0
 801983a:	f000 80a2 	beq.w	8019982 <_vfiprintf_r+0x20e>
 801983e:	2300      	movs	r3, #0
 8019840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019848:	f10a 0a01 	add.w	sl, sl, #1
 801984c:	9304      	str	r3, [sp, #16]
 801984e:	9307      	str	r3, [sp, #28]
 8019850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019854:	931a      	str	r3, [sp, #104]	; 0x68
 8019856:	4654      	mov	r4, sl
 8019858:	2205      	movs	r2, #5
 801985a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801985e:	4858      	ldr	r0, [pc, #352]	; (80199c0 <_vfiprintf_r+0x24c>)
 8019860:	f7e6 fd36 	bl	80002d0 <memchr>
 8019864:	9a04      	ldr	r2, [sp, #16]
 8019866:	b9d8      	cbnz	r0, 80198a0 <_vfiprintf_r+0x12c>
 8019868:	06d1      	lsls	r1, r2, #27
 801986a:	bf44      	itt	mi
 801986c:	2320      	movmi	r3, #32
 801986e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019872:	0713      	lsls	r3, r2, #28
 8019874:	bf44      	itt	mi
 8019876:	232b      	movmi	r3, #43	; 0x2b
 8019878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801987c:	f89a 3000 	ldrb.w	r3, [sl]
 8019880:	2b2a      	cmp	r3, #42	; 0x2a
 8019882:	d015      	beq.n	80198b0 <_vfiprintf_r+0x13c>
 8019884:	9a07      	ldr	r2, [sp, #28]
 8019886:	4654      	mov	r4, sl
 8019888:	2000      	movs	r0, #0
 801988a:	f04f 0c0a 	mov.w	ip, #10
 801988e:	4621      	mov	r1, r4
 8019890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019894:	3b30      	subs	r3, #48	; 0x30
 8019896:	2b09      	cmp	r3, #9
 8019898:	d94e      	bls.n	8019938 <_vfiprintf_r+0x1c4>
 801989a:	b1b0      	cbz	r0, 80198ca <_vfiprintf_r+0x156>
 801989c:	9207      	str	r2, [sp, #28]
 801989e:	e014      	b.n	80198ca <_vfiprintf_r+0x156>
 80198a0:	eba0 0308 	sub.w	r3, r0, r8
 80198a4:	fa09 f303 	lsl.w	r3, r9, r3
 80198a8:	4313      	orrs	r3, r2
 80198aa:	9304      	str	r3, [sp, #16]
 80198ac:	46a2      	mov	sl, r4
 80198ae:	e7d2      	b.n	8019856 <_vfiprintf_r+0xe2>
 80198b0:	9b03      	ldr	r3, [sp, #12]
 80198b2:	1d19      	adds	r1, r3, #4
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	9103      	str	r1, [sp, #12]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	bfbb      	ittet	lt
 80198bc:	425b      	neglt	r3, r3
 80198be:	f042 0202 	orrlt.w	r2, r2, #2
 80198c2:	9307      	strge	r3, [sp, #28]
 80198c4:	9307      	strlt	r3, [sp, #28]
 80198c6:	bfb8      	it	lt
 80198c8:	9204      	strlt	r2, [sp, #16]
 80198ca:	7823      	ldrb	r3, [r4, #0]
 80198cc:	2b2e      	cmp	r3, #46	; 0x2e
 80198ce:	d10c      	bne.n	80198ea <_vfiprintf_r+0x176>
 80198d0:	7863      	ldrb	r3, [r4, #1]
 80198d2:	2b2a      	cmp	r3, #42	; 0x2a
 80198d4:	d135      	bne.n	8019942 <_vfiprintf_r+0x1ce>
 80198d6:	9b03      	ldr	r3, [sp, #12]
 80198d8:	1d1a      	adds	r2, r3, #4
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	9203      	str	r2, [sp, #12]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	bfb8      	it	lt
 80198e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80198e6:	3402      	adds	r4, #2
 80198e8:	9305      	str	r3, [sp, #20]
 80198ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80199d0 <_vfiprintf_r+0x25c>
 80198ee:	7821      	ldrb	r1, [r4, #0]
 80198f0:	2203      	movs	r2, #3
 80198f2:	4650      	mov	r0, sl
 80198f4:	f7e6 fcec 	bl	80002d0 <memchr>
 80198f8:	b140      	cbz	r0, 801990c <_vfiprintf_r+0x198>
 80198fa:	2340      	movs	r3, #64	; 0x40
 80198fc:	eba0 000a 	sub.w	r0, r0, sl
 8019900:	fa03 f000 	lsl.w	r0, r3, r0
 8019904:	9b04      	ldr	r3, [sp, #16]
 8019906:	4303      	orrs	r3, r0
 8019908:	3401      	adds	r4, #1
 801990a:	9304      	str	r3, [sp, #16]
 801990c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019910:	482c      	ldr	r0, [pc, #176]	; (80199c4 <_vfiprintf_r+0x250>)
 8019912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019916:	2206      	movs	r2, #6
 8019918:	f7e6 fcda 	bl	80002d0 <memchr>
 801991c:	2800      	cmp	r0, #0
 801991e:	d03f      	beq.n	80199a0 <_vfiprintf_r+0x22c>
 8019920:	4b29      	ldr	r3, [pc, #164]	; (80199c8 <_vfiprintf_r+0x254>)
 8019922:	bb1b      	cbnz	r3, 801996c <_vfiprintf_r+0x1f8>
 8019924:	9b03      	ldr	r3, [sp, #12]
 8019926:	3307      	adds	r3, #7
 8019928:	f023 0307 	bic.w	r3, r3, #7
 801992c:	3308      	adds	r3, #8
 801992e:	9303      	str	r3, [sp, #12]
 8019930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019932:	443b      	add	r3, r7
 8019934:	9309      	str	r3, [sp, #36]	; 0x24
 8019936:	e767      	b.n	8019808 <_vfiprintf_r+0x94>
 8019938:	fb0c 3202 	mla	r2, ip, r2, r3
 801993c:	460c      	mov	r4, r1
 801993e:	2001      	movs	r0, #1
 8019940:	e7a5      	b.n	801988e <_vfiprintf_r+0x11a>
 8019942:	2300      	movs	r3, #0
 8019944:	3401      	adds	r4, #1
 8019946:	9305      	str	r3, [sp, #20]
 8019948:	4619      	mov	r1, r3
 801994a:	f04f 0c0a 	mov.w	ip, #10
 801994e:	4620      	mov	r0, r4
 8019950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019954:	3a30      	subs	r2, #48	; 0x30
 8019956:	2a09      	cmp	r2, #9
 8019958:	d903      	bls.n	8019962 <_vfiprintf_r+0x1ee>
 801995a:	2b00      	cmp	r3, #0
 801995c:	d0c5      	beq.n	80198ea <_vfiprintf_r+0x176>
 801995e:	9105      	str	r1, [sp, #20]
 8019960:	e7c3      	b.n	80198ea <_vfiprintf_r+0x176>
 8019962:	fb0c 2101 	mla	r1, ip, r1, r2
 8019966:	4604      	mov	r4, r0
 8019968:	2301      	movs	r3, #1
 801996a:	e7f0      	b.n	801994e <_vfiprintf_r+0x1da>
 801996c:	ab03      	add	r3, sp, #12
 801996e:	9300      	str	r3, [sp, #0]
 8019970:	462a      	mov	r2, r5
 8019972:	4b16      	ldr	r3, [pc, #88]	; (80199cc <_vfiprintf_r+0x258>)
 8019974:	a904      	add	r1, sp, #16
 8019976:	4630      	mov	r0, r6
 8019978:	f3af 8000 	nop.w
 801997c:	4607      	mov	r7, r0
 801997e:	1c78      	adds	r0, r7, #1
 8019980:	d1d6      	bne.n	8019930 <_vfiprintf_r+0x1bc>
 8019982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019984:	07d9      	lsls	r1, r3, #31
 8019986:	d405      	bmi.n	8019994 <_vfiprintf_r+0x220>
 8019988:	89ab      	ldrh	r3, [r5, #12]
 801998a:	059a      	lsls	r2, r3, #22
 801998c:	d402      	bmi.n	8019994 <_vfiprintf_r+0x220>
 801998e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019990:	f7ff fcf9 	bl	8019386 <__retarget_lock_release_recursive>
 8019994:	89ab      	ldrh	r3, [r5, #12]
 8019996:	065b      	lsls	r3, r3, #25
 8019998:	f53f af12 	bmi.w	80197c0 <_vfiprintf_r+0x4c>
 801999c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801999e:	e711      	b.n	80197c4 <_vfiprintf_r+0x50>
 80199a0:	ab03      	add	r3, sp, #12
 80199a2:	9300      	str	r3, [sp, #0]
 80199a4:	462a      	mov	r2, r5
 80199a6:	4b09      	ldr	r3, [pc, #36]	; (80199cc <_vfiprintf_r+0x258>)
 80199a8:	a904      	add	r1, sp, #16
 80199aa:	4630      	mov	r0, r6
 80199ac:	f000 f880 	bl	8019ab0 <_printf_i>
 80199b0:	e7e4      	b.n	801997c <_vfiprintf_r+0x208>
 80199b2:	bf00      	nop
 80199b4:	0802fc7c 	.word	0x0802fc7c
 80199b8:	0802fc9c 	.word	0x0802fc9c
 80199bc:	0802fc5c 	.word	0x0802fc5c
 80199c0:	0802fcbc 	.word	0x0802fcbc
 80199c4:	0802fcc6 	.word	0x0802fcc6
 80199c8:	00000000 	.word	0x00000000
 80199cc:	0801974f 	.word	0x0801974f
 80199d0:	0802fcc2 	.word	0x0802fcc2

080199d4 <_printf_common>:
 80199d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199d8:	4616      	mov	r6, r2
 80199da:	4699      	mov	r9, r3
 80199dc:	688a      	ldr	r2, [r1, #8]
 80199de:	690b      	ldr	r3, [r1, #16]
 80199e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80199e4:	4293      	cmp	r3, r2
 80199e6:	bfb8      	it	lt
 80199e8:	4613      	movlt	r3, r2
 80199ea:	6033      	str	r3, [r6, #0]
 80199ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80199f0:	4607      	mov	r7, r0
 80199f2:	460c      	mov	r4, r1
 80199f4:	b10a      	cbz	r2, 80199fa <_printf_common+0x26>
 80199f6:	3301      	adds	r3, #1
 80199f8:	6033      	str	r3, [r6, #0]
 80199fa:	6823      	ldr	r3, [r4, #0]
 80199fc:	0699      	lsls	r1, r3, #26
 80199fe:	bf42      	ittt	mi
 8019a00:	6833      	ldrmi	r3, [r6, #0]
 8019a02:	3302      	addmi	r3, #2
 8019a04:	6033      	strmi	r3, [r6, #0]
 8019a06:	6825      	ldr	r5, [r4, #0]
 8019a08:	f015 0506 	ands.w	r5, r5, #6
 8019a0c:	d106      	bne.n	8019a1c <_printf_common+0x48>
 8019a0e:	f104 0a19 	add.w	sl, r4, #25
 8019a12:	68e3      	ldr	r3, [r4, #12]
 8019a14:	6832      	ldr	r2, [r6, #0]
 8019a16:	1a9b      	subs	r3, r3, r2
 8019a18:	42ab      	cmp	r3, r5
 8019a1a:	dc26      	bgt.n	8019a6a <_printf_common+0x96>
 8019a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019a20:	1e13      	subs	r3, r2, #0
 8019a22:	6822      	ldr	r2, [r4, #0]
 8019a24:	bf18      	it	ne
 8019a26:	2301      	movne	r3, #1
 8019a28:	0692      	lsls	r2, r2, #26
 8019a2a:	d42b      	bmi.n	8019a84 <_printf_common+0xb0>
 8019a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a30:	4649      	mov	r1, r9
 8019a32:	4638      	mov	r0, r7
 8019a34:	47c0      	blx	r8
 8019a36:	3001      	adds	r0, #1
 8019a38:	d01e      	beq.n	8019a78 <_printf_common+0xa4>
 8019a3a:	6823      	ldr	r3, [r4, #0]
 8019a3c:	68e5      	ldr	r5, [r4, #12]
 8019a3e:	6832      	ldr	r2, [r6, #0]
 8019a40:	f003 0306 	and.w	r3, r3, #6
 8019a44:	2b04      	cmp	r3, #4
 8019a46:	bf08      	it	eq
 8019a48:	1aad      	subeq	r5, r5, r2
 8019a4a:	68a3      	ldr	r3, [r4, #8]
 8019a4c:	6922      	ldr	r2, [r4, #16]
 8019a4e:	bf0c      	ite	eq
 8019a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a54:	2500      	movne	r5, #0
 8019a56:	4293      	cmp	r3, r2
 8019a58:	bfc4      	itt	gt
 8019a5a:	1a9b      	subgt	r3, r3, r2
 8019a5c:	18ed      	addgt	r5, r5, r3
 8019a5e:	2600      	movs	r6, #0
 8019a60:	341a      	adds	r4, #26
 8019a62:	42b5      	cmp	r5, r6
 8019a64:	d11a      	bne.n	8019a9c <_printf_common+0xc8>
 8019a66:	2000      	movs	r0, #0
 8019a68:	e008      	b.n	8019a7c <_printf_common+0xa8>
 8019a6a:	2301      	movs	r3, #1
 8019a6c:	4652      	mov	r2, sl
 8019a6e:	4649      	mov	r1, r9
 8019a70:	4638      	mov	r0, r7
 8019a72:	47c0      	blx	r8
 8019a74:	3001      	adds	r0, #1
 8019a76:	d103      	bne.n	8019a80 <_printf_common+0xac>
 8019a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a80:	3501      	adds	r5, #1
 8019a82:	e7c6      	b.n	8019a12 <_printf_common+0x3e>
 8019a84:	18e1      	adds	r1, r4, r3
 8019a86:	1c5a      	adds	r2, r3, #1
 8019a88:	2030      	movs	r0, #48	; 0x30
 8019a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a8e:	4422      	add	r2, r4
 8019a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a98:	3302      	adds	r3, #2
 8019a9a:	e7c7      	b.n	8019a2c <_printf_common+0x58>
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	4622      	mov	r2, r4
 8019aa0:	4649      	mov	r1, r9
 8019aa2:	4638      	mov	r0, r7
 8019aa4:	47c0      	blx	r8
 8019aa6:	3001      	adds	r0, #1
 8019aa8:	d0e6      	beq.n	8019a78 <_printf_common+0xa4>
 8019aaa:	3601      	adds	r6, #1
 8019aac:	e7d9      	b.n	8019a62 <_printf_common+0x8e>
	...

08019ab0 <_printf_i>:
 8019ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ab4:	460c      	mov	r4, r1
 8019ab6:	4691      	mov	r9, r2
 8019ab8:	7e27      	ldrb	r7, [r4, #24]
 8019aba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019abc:	2f78      	cmp	r7, #120	; 0x78
 8019abe:	4680      	mov	r8, r0
 8019ac0:	469a      	mov	sl, r3
 8019ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ac6:	d807      	bhi.n	8019ad8 <_printf_i+0x28>
 8019ac8:	2f62      	cmp	r7, #98	; 0x62
 8019aca:	d80a      	bhi.n	8019ae2 <_printf_i+0x32>
 8019acc:	2f00      	cmp	r7, #0
 8019ace:	f000 80d8 	beq.w	8019c82 <_printf_i+0x1d2>
 8019ad2:	2f58      	cmp	r7, #88	; 0x58
 8019ad4:	f000 80a3 	beq.w	8019c1e <_printf_i+0x16e>
 8019ad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ae0:	e03a      	b.n	8019b58 <_printf_i+0xa8>
 8019ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019ae6:	2b15      	cmp	r3, #21
 8019ae8:	d8f6      	bhi.n	8019ad8 <_printf_i+0x28>
 8019aea:	a001      	add	r0, pc, #4	; (adr r0, 8019af0 <_printf_i+0x40>)
 8019aec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019af0:	08019b49 	.word	0x08019b49
 8019af4:	08019b5d 	.word	0x08019b5d
 8019af8:	08019ad9 	.word	0x08019ad9
 8019afc:	08019ad9 	.word	0x08019ad9
 8019b00:	08019ad9 	.word	0x08019ad9
 8019b04:	08019ad9 	.word	0x08019ad9
 8019b08:	08019b5d 	.word	0x08019b5d
 8019b0c:	08019ad9 	.word	0x08019ad9
 8019b10:	08019ad9 	.word	0x08019ad9
 8019b14:	08019ad9 	.word	0x08019ad9
 8019b18:	08019ad9 	.word	0x08019ad9
 8019b1c:	08019c69 	.word	0x08019c69
 8019b20:	08019b8d 	.word	0x08019b8d
 8019b24:	08019c4b 	.word	0x08019c4b
 8019b28:	08019ad9 	.word	0x08019ad9
 8019b2c:	08019ad9 	.word	0x08019ad9
 8019b30:	08019c8b 	.word	0x08019c8b
 8019b34:	08019ad9 	.word	0x08019ad9
 8019b38:	08019b8d 	.word	0x08019b8d
 8019b3c:	08019ad9 	.word	0x08019ad9
 8019b40:	08019ad9 	.word	0x08019ad9
 8019b44:	08019c53 	.word	0x08019c53
 8019b48:	680b      	ldr	r3, [r1, #0]
 8019b4a:	1d1a      	adds	r2, r3, #4
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	600a      	str	r2, [r1, #0]
 8019b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b58:	2301      	movs	r3, #1
 8019b5a:	e0a3      	b.n	8019ca4 <_printf_i+0x1f4>
 8019b5c:	6825      	ldr	r5, [r4, #0]
 8019b5e:	6808      	ldr	r0, [r1, #0]
 8019b60:	062e      	lsls	r6, r5, #24
 8019b62:	f100 0304 	add.w	r3, r0, #4
 8019b66:	d50a      	bpl.n	8019b7e <_printf_i+0xce>
 8019b68:	6805      	ldr	r5, [r0, #0]
 8019b6a:	600b      	str	r3, [r1, #0]
 8019b6c:	2d00      	cmp	r5, #0
 8019b6e:	da03      	bge.n	8019b78 <_printf_i+0xc8>
 8019b70:	232d      	movs	r3, #45	; 0x2d
 8019b72:	426d      	negs	r5, r5
 8019b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b78:	485e      	ldr	r0, [pc, #376]	; (8019cf4 <_printf_i+0x244>)
 8019b7a:	230a      	movs	r3, #10
 8019b7c:	e019      	b.n	8019bb2 <_printf_i+0x102>
 8019b7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019b82:	6805      	ldr	r5, [r0, #0]
 8019b84:	600b      	str	r3, [r1, #0]
 8019b86:	bf18      	it	ne
 8019b88:	b22d      	sxthne	r5, r5
 8019b8a:	e7ef      	b.n	8019b6c <_printf_i+0xbc>
 8019b8c:	680b      	ldr	r3, [r1, #0]
 8019b8e:	6825      	ldr	r5, [r4, #0]
 8019b90:	1d18      	adds	r0, r3, #4
 8019b92:	6008      	str	r0, [r1, #0]
 8019b94:	0628      	lsls	r0, r5, #24
 8019b96:	d501      	bpl.n	8019b9c <_printf_i+0xec>
 8019b98:	681d      	ldr	r5, [r3, #0]
 8019b9a:	e002      	b.n	8019ba2 <_printf_i+0xf2>
 8019b9c:	0669      	lsls	r1, r5, #25
 8019b9e:	d5fb      	bpl.n	8019b98 <_printf_i+0xe8>
 8019ba0:	881d      	ldrh	r5, [r3, #0]
 8019ba2:	4854      	ldr	r0, [pc, #336]	; (8019cf4 <_printf_i+0x244>)
 8019ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8019ba6:	bf0c      	ite	eq
 8019ba8:	2308      	moveq	r3, #8
 8019baa:	230a      	movne	r3, #10
 8019bac:	2100      	movs	r1, #0
 8019bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019bb2:	6866      	ldr	r6, [r4, #4]
 8019bb4:	60a6      	str	r6, [r4, #8]
 8019bb6:	2e00      	cmp	r6, #0
 8019bb8:	bfa2      	ittt	ge
 8019bba:	6821      	ldrge	r1, [r4, #0]
 8019bbc:	f021 0104 	bicge.w	r1, r1, #4
 8019bc0:	6021      	strge	r1, [r4, #0]
 8019bc2:	b90d      	cbnz	r5, 8019bc8 <_printf_i+0x118>
 8019bc4:	2e00      	cmp	r6, #0
 8019bc6:	d04d      	beq.n	8019c64 <_printf_i+0x1b4>
 8019bc8:	4616      	mov	r6, r2
 8019bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8019bce:	fb03 5711 	mls	r7, r3, r1, r5
 8019bd2:	5dc7      	ldrb	r7, [r0, r7]
 8019bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019bd8:	462f      	mov	r7, r5
 8019bda:	42bb      	cmp	r3, r7
 8019bdc:	460d      	mov	r5, r1
 8019bde:	d9f4      	bls.n	8019bca <_printf_i+0x11a>
 8019be0:	2b08      	cmp	r3, #8
 8019be2:	d10b      	bne.n	8019bfc <_printf_i+0x14c>
 8019be4:	6823      	ldr	r3, [r4, #0]
 8019be6:	07df      	lsls	r7, r3, #31
 8019be8:	d508      	bpl.n	8019bfc <_printf_i+0x14c>
 8019bea:	6923      	ldr	r3, [r4, #16]
 8019bec:	6861      	ldr	r1, [r4, #4]
 8019bee:	4299      	cmp	r1, r3
 8019bf0:	bfde      	ittt	le
 8019bf2:	2330      	movle	r3, #48	; 0x30
 8019bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019bf8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8019bfc:	1b92      	subs	r2, r2, r6
 8019bfe:	6122      	str	r2, [r4, #16]
 8019c00:	f8cd a000 	str.w	sl, [sp]
 8019c04:	464b      	mov	r3, r9
 8019c06:	aa03      	add	r2, sp, #12
 8019c08:	4621      	mov	r1, r4
 8019c0a:	4640      	mov	r0, r8
 8019c0c:	f7ff fee2 	bl	80199d4 <_printf_common>
 8019c10:	3001      	adds	r0, #1
 8019c12:	d14c      	bne.n	8019cae <_printf_i+0x1fe>
 8019c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c18:	b004      	add	sp, #16
 8019c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c1e:	4835      	ldr	r0, [pc, #212]	; (8019cf4 <_printf_i+0x244>)
 8019c20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019c24:	6823      	ldr	r3, [r4, #0]
 8019c26:	680e      	ldr	r6, [r1, #0]
 8019c28:	061f      	lsls	r7, r3, #24
 8019c2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8019c2e:	600e      	str	r6, [r1, #0]
 8019c30:	d514      	bpl.n	8019c5c <_printf_i+0x1ac>
 8019c32:	07d9      	lsls	r1, r3, #31
 8019c34:	bf44      	itt	mi
 8019c36:	f043 0320 	orrmi.w	r3, r3, #32
 8019c3a:	6023      	strmi	r3, [r4, #0]
 8019c3c:	b91d      	cbnz	r5, 8019c46 <_printf_i+0x196>
 8019c3e:	6823      	ldr	r3, [r4, #0]
 8019c40:	f023 0320 	bic.w	r3, r3, #32
 8019c44:	6023      	str	r3, [r4, #0]
 8019c46:	2310      	movs	r3, #16
 8019c48:	e7b0      	b.n	8019bac <_printf_i+0xfc>
 8019c4a:	6823      	ldr	r3, [r4, #0]
 8019c4c:	f043 0320 	orr.w	r3, r3, #32
 8019c50:	6023      	str	r3, [r4, #0]
 8019c52:	2378      	movs	r3, #120	; 0x78
 8019c54:	4828      	ldr	r0, [pc, #160]	; (8019cf8 <_printf_i+0x248>)
 8019c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019c5a:	e7e3      	b.n	8019c24 <_printf_i+0x174>
 8019c5c:	065e      	lsls	r6, r3, #25
 8019c5e:	bf48      	it	mi
 8019c60:	b2ad      	uxthmi	r5, r5
 8019c62:	e7e6      	b.n	8019c32 <_printf_i+0x182>
 8019c64:	4616      	mov	r6, r2
 8019c66:	e7bb      	b.n	8019be0 <_printf_i+0x130>
 8019c68:	680b      	ldr	r3, [r1, #0]
 8019c6a:	6826      	ldr	r6, [r4, #0]
 8019c6c:	6960      	ldr	r0, [r4, #20]
 8019c6e:	1d1d      	adds	r5, r3, #4
 8019c70:	600d      	str	r5, [r1, #0]
 8019c72:	0635      	lsls	r5, r6, #24
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	d501      	bpl.n	8019c7c <_printf_i+0x1cc>
 8019c78:	6018      	str	r0, [r3, #0]
 8019c7a:	e002      	b.n	8019c82 <_printf_i+0x1d2>
 8019c7c:	0671      	lsls	r1, r6, #25
 8019c7e:	d5fb      	bpl.n	8019c78 <_printf_i+0x1c8>
 8019c80:	8018      	strh	r0, [r3, #0]
 8019c82:	2300      	movs	r3, #0
 8019c84:	6123      	str	r3, [r4, #16]
 8019c86:	4616      	mov	r6, r2
 8019c88:	e7ba      	b.n	8019c00 <_printf_i+0x150>
 8019c8a:	680b      	ldr	r3, [r1, #0]
 8019c8c:	1d1a      	adds	r2, r3, #4
 8019c8e:	600a      	str	r2, [r1, #0]
 8019c90:	681e      	ldr	r6, [r3, #0]
 8019c92:	6862      	ldr	r2, [r4, #4]
 8019c94:	2100      	movs	r1, #0
 8019c96:	4630      	mov	r0, r6
 8019c98:	f7e6 fb1a 	bl	80002d0 <memchr>
 8019c9c:	b108      	cbz	r0, 8019ca2 <_printf_i+0x1f2>
 8019c9e:	1b80      	subs	r0, r0, r6
 8019ca0:	6060      	str	r0, [r4, #4]
 8019ca2:	6863      	ldr	r3, [r4, #4]
 8019ca4:	6123      	str	r3, [r4, #16]
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019cac:	e7a8      	b.n	8019c00 <_printf_i+0x150>
 8019cae:	6923      	ldr	r3, [r4, #16]
 8019cb0:	4632      	mov	r2, r6
 8019cb2:	4649      	mov	r1, r9
 8019cb4:	4640      	mov	r0, r8
 8019cb6:	47d0      	blx	sl
 8019cb8:	3001      	adds	r0, #1
 8019cba:	d0ab      	beq.n	8019c14 <_printf_i+0x164>
 8019cbc:	6823      	ldr	r3, [r4, #0]
 8019cbe:	079b      	lsls	r3, r3, #30
 8019cc0:	d413      	bmi.n	8019cea <_printf_i+0x23a>
 8019cc2:	68e0      	ldr	r0, [r4, #12]
 8019cc4:	9b03      	ldr	r3, [sp, #12]
 8019cc6:	4298      	cmp	r0, r3
 8019cc8:	bfb8      	it	lt
 8019cca:	4618      	movlt	r0, r3
 8019ccc:	e7a4      	b.n	8019c18 <_printf_i+0x168>
 8019cce:	2301      	movs	r3, #1
 8019cd0:	4632      	mov	r2, r6
 8019cd2:	4649      	mov	r1, r9
 8019cd4:	4640      	mov	r0, r8
 8019cd6:	47d0      	blx	sl
 8019cd8:	3001      	adds	r0, #1
 8019cda:	d09b      	beq.n	8019c14 <_printf_i+0x164>
 8019cdc:	3501      	adds	r5, #1
 8019cde:	68e3      	ldr	r3, [r4, #12]
 8019ce0:	9903      	ldr	r1, [sp, #12]
 8019ce2:	1a5b      	subs	r3, r3, r1
 8019ce4:	42ab      	cmp	r3, r5
 8019ce6:	dcf2      	bgt.n	8019cce <_printf_i+0x21e>
 8019ce8:	e7eb      	b.n	8019cc2 <_printf_i+0x212>
 8019cea:	2500      	movs	r5, #0
 8019cec:	f104 0619 	add.w	r6, r4, #25
 8019cf0:	e7f5      	b.n	8019cde <_printf_i+0x22e>
 8019cf2:	bf00      	nop
 8019cf4:	0802fccd 	.word	0x0802fccd
 8019cf8:	0802fcde 	.word	0x0802fcde

08019cfc <_putc_r>:
 8019cfc:	b570      	push	{r4, r5, r6, lr}
 8019cfe:	460d      	mov	r5, r1
 8019d00:	4614      	mov	r4, r2
 8019d02:	4606      	mov	r6, r0
 8019d04:	b118      	cbz	r0, 8019d0e <_putc_r+0x12>
 8019d06:	6983      	ldr	r3, [r0, #24]
 8019d08:	b90b      	cbnz	r3, 8019d0e <_putc_r+0x12>
 8019d0a:	f7ff fa9d 	bl	8019248 <__sinit>
 8019d0e:	4b1c      	ldr	r3, [pc, #112]	; (8019d80 <_putc_r+0x84>)
 8019d10:	429c      	cmp	r4, r3
 8019d12:	d124      	bne.n	8019d5e <_putc_r+0x62>
 8019d14:	6874      	ldr	r4, [r6, #4]
 8019d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d18:	07d8      	lsls	r0, r3, #31
 8019d1a:	d405      	bmi.n	8019d28 <_putc_r+0x2c>
 8019d1c:	89a3      	ldrh	r3, [r4, #12]
 8019d1e:	0599      	lsls	r1, r3, #22
 8019d20:	d402      	bmi.n	8019d28 <_putc_r+0x2c>
 8019d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d24:	f7ff fb2e 	bl	8019384 <__retarget_lock_acquire_recursive>
 8019d28:	68a3      	ldr	r3, [r4, #8]
 8019d2a:	3b01      	subs	r3, #1
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	60a3      	str	r3, [r4, #8]
 8019d30:	da05      	bge.n	8019d3e <_putc_r+0x42>
 8019d32:	69a2      	ldr	r2, [r4, #24]
 8019d34:	4293      	cmp	r3, r2
 8019d36:	db1c      	blt.n	8019d72 <_putc_r+0x76>
 8019d38:	b2eb      	uxtb	r3, r5
 8019d3a:	2b0a      	cmp	r3, #10
 8019d3c:	d019      	beq.n	8019d72 <_putc_r+0x76>
 8019d3e:	6823      	ldr	r3, [r4, #0]
 8019d40:	1c5a      	adds	r2, r3, #1
 8019d42:	6022      	str	r2, [r4, #0]
 8019d44:	701d      	strb	r5, [r3, #0]
 8019d46:	b2ed      	uxtb	r5, r5
 8019d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d4a:	07da      	lsls	r2, r3, #31
 8019d4c:	d405      	bmi.n	8019d5a <_putc_r+0x5e>
 8019d4e:	89a3      	ldrh	r3, [r4, #12]
 8019d50:	059b      	lsls	r3, r3, #22
 8019d52:	d402      	bmi.n	8019d5a <_putc_r+0x5e>
 8019d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d56:	f7ff fb16 	bl	8019386 <__retarget_lock_release_recursive>
 8019d5a:	4628      	mov	r0, r5
 8019d5c:	bd70      	pop	{r4, r5, r6, pc}
 8019d5e:	4b09      	ldr	r3, [pc, #36]	; (8019d84 <_putc_r+0x88>)
 8019d60:	429c      	cmp	r4, r3
 8019d62:	d101      	bne.n	8019d68 <_putc_r+0x6c>
 8019d64:	68b4      	ldr	r4, [r6, #8]
 8019d66:	e7d6      	b.n	8019d16 <_putc_r+0x1a>
 8019d68:	4b07      	ldr	r3, [pc, #28]	; (8019d88 <_putc_r+0x8c>)
 8019d6a:	429c      	cmp	r4, r3
 8019d6c:	bf08      	it	eq
 8019d6e:	68f4      	ldreq	r4, [r6, #12]
 8019d70:	e7d1      	b.n	8019d16 <_putc_r+0x1a>
 8019d72:	4629      	mov	r1, r5
 8019d74:	4622      	mov	r2, r4
 8019d76:	4630      	mov	r0, r6
 8019d78:	f7ff f88c 	bl	8018e94 <__swbuf_r>
 8019d7c:	4605      	mov	r5, r0
 8019d7e:	e7e3      	b.n	8019d48 <_putc_r+0x4c>
 8019d80:	0802fc7c 	.word	0x0802fc7c
 8019d84:	0802fc9c 	.word	0x0802fc9c
 8019d88:	0802fc5c 	.word	0x0802fc5c

08019d8c <__sread>:
 8019d8c:	b510      	push	{r4, lr}
 8019d8e:	460c      	mov	r4, r1
 8019d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d94:	f000 f8d4 	bl	8019f40 <_read_r>
 8019d98:	2800      	cmp	r0, #0
 8019d9a:	bfab      	itete	ge
 8019d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8019da0:	181b      	addge	r3, r3, r0
 8019da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019da6:	bfac      	ite	ge
 8019da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8019daa:	81a3      	strhlt	r3, [r4, #12]
 8019dac:	bd10      	pop	{r4, pc}

08019dae <__swrite>:
 8019dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019db2:	461f      	mov	r7, r3
 8019db4:	898b      	ldrh	r3, [r1, #12]
 8019db6:	05db      	lsls	r3, r3, #23
 8019db8:	4605      	mov	r5, r0
 8019dba:	460c      	mov	r4, r1
 8019dbc:	4616      	mov	r6, r2
 8019dbe:	d505      	bpl.n	8019dcc <__swrite+0x1e>
 8019dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dc4:	2302      	movs	r3, #2
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	f000 f868 	bl	8019e9c <_lseek_r>
 8019dcc:	89a3      	ldrh	r3, [r4, #12]
 8019dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019dd6:	81a3      	strh	r3, [r4, #12]
 8019dd8:	4632      	mov	r2, r6
 8019dda:	463b      	mov	r3, r7
 8019ddc:	4628      	mov	r0, r5
 8019dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019de2:	f000 b817 	b.w	8019e14 <_write_r>

08019de6 <__sseek>:
 8019de6:	b510      	push	{r4, lr}
 8019de8:	460c      	mov	r4, r1
 8019dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dee:	f000 f855 	bl	8019e9c <_lseek_r>
 8019df2:	1c43      	adds	r3, r0, #1
 8019df4:	89a3      	ldrh	r3, [r4, #12]
 8019df6:	bf15      	itete	ne
 8019df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8019dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019e02:	81a3      	strheq	r3, [r4, #12]
 8019e04:	bf18      	it	ne
 8019e06:	81a3      	strhne	r3, [r4, #12]
 8019e08:	bd10      	pop	{r4, pc}

08019e0a <__sclose>:
 8019e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e0e:	f000 b813 	b.w	8019e38 <_close_r>
	...

08019e14 <_write_r>:
 8019e14:	b538      	push	{r3, r4, r5, lr}
 8019e16:	4d07      	ldr	r5, [pc, #28]	; (8019e34 <_write_r+0x20>)
 8019e18:	4604      	mov	r4, r0
 8019e1a:	4608      	mov	r0, r1
 8019e1c:	4611      	mov	r1, r2
 8019e1e:	2200      	movs	r2, #0
 8019e20:	602a      	str	r2, [r5, #0]
 8019e22:	461a      	mov	r2, r3
 8019e24:	f7e9 fa55 	bl	80032d2 <_write>
 8019e28:	1c43      	adds	r3, r0, #1
 8019e2a:	d102      	bne.n	8019e32 <_write_r+0x1e>
 8019e2c:	682b      	ldr	r3, [r5, #0]
 8019e2e:	b103      	cbz	r3, 8019e32 <_write_r+0x1e>
 8019e30:	6023      	str	r3, [r4, #0]
 8019e32:	bd38      	pop	{r3, r4, r5, pc}
 8019e34:	2004bfc0 	.word	0x2004bfc0

08019e38 <_close_r>:
 8019e38:	b538      	push	{r3, r4, r5, lr}
 8019e3a:	4d06      	ldr	r5, [pc, #24]	; (8019e54 <_close_r+0x1c>)
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	4604      	mov	r4, r0
 8019e40:	4608      	mov	r0, r1
 8019e42:	602b      	str	r3, [r5, #0]
 8019e44:	f7e9 fa61 	bl	800330a <_close>
 8019e48:	1c43      	adds	r3, r0, #1
 8019e4a:	d102      	bne.n	8019e52 <_close_r+0x1a>
 8019e4c:	682b      	ldr	r3, [r5, #0]
 8019e4e:	b103      	cbz	r3, 8019e52 <_close_r+0x1a>
 8019e50:	6023      	str	r3, [r4, #0]
 8019e52:	bd38      	pop	{r3, r4, r5, pc}
 8019e54:	2004bfc0 	.word	0x2004bfc0

08019e58 <_fstat_r>:
 8019e58:	b538      	push	{r3, r4, r5, lr}
 8019e5a:	4d07      	ldr	r5, [pc, #28]	; (8019e78 <_fstat_r+0x20>)
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	4604      	mov	r4, r0
 8019e60:	4608      	mov	r0, r1
 8019e62:	4611      	mov	r1, r2
 8019e64:	602b      	str	r3, [r5, #0]
 8019e66:	f7e9 fa5c 	bl	8003322 <_fstat>
 8019e6a:	1c43      	adds	r3, r0, #1
 8019e6c:	d102      	bne.n	8019e74 <_fstat_r+0x1c>
 8019e6e:	682b      	ldr	r3, [r5, #0]
 8019e70:	b103      	cbz	r3, 8019e74 <_fstat_r+0x1c>
 8019e72:	6023      	str	r3, [r4, #0]
 8019e74:	bd38      	pop	{r3, r4, r5, pc}
 8019e76:	bf00      	nop
 8019e78:	2004bfc0 	.word	0x2004bfc0

08019e7c <_isatty_r>:
 8019e7c:	b538      	push	{r3, r4, r5, lr}
 8019e7e:	4d06      	ldr	r5, [pc, #24]	; (8019e98 <_isatty_r+0x1c>)
 8019e80:	2300      	movs	r3, #0
 8019e82:	4604      	mov	r4, r0
 8019e84:	4608      	mov	r0, r1
 8019e86:	602b      	str	r3, [r5, #0]
 8019e88:	f7e9 fa5b 	bl	8003342 <_isatty>
 8019e8c:	1c43      	adds	r3, r0, #1
 8019e8e:	d102      	bne.n	8019e96 <_isatty_r+0x1a>
 8019e90:	682b      	ldr	r3, [r5, #0]
 8019e92:	b103      	cbz	r3, 8019e96 <_isatty_r+0x1a>
 8019e94:	6023      	str	r3, [r4, #0]
 8019e96:	bd38      	pop	{r3, r4, r5, pc}
 8019e98:	2004bfc0 	.word	0x2004bfc0

08019e9c <_lseek_r>:
 8019e9c:	b538      	push	{r3, r4, r5, lr}
 8019e9e:	4d07      	ldr	r5, [pc, #28]	; (8019ebc <_lseek_r+0x20>)
 8019ea0:	4604      	mov	r4, r0
 8019ea2:	4608      	mov	r0, r1
 8019ea4:	4611      	mov	r1, r2
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	602a      	str	r2, [r5, #0]
 8019eaa:	461a      	mov	r2, r3
 8019eac:	f7e9 fa54 	bl	8003358 <_lseek>
 8019eb0:	1c43      	adds	r3, r0, #1
 8019eb2:	d102      	bne.n	8019eba <_lseek_r+0x1e>
 8019eb4:	682b      	ldr	r3, [r5, #0]
 8019eb6:	b103      	cbz	r3, 8019eba <_lseek_r+0x1e>
 8019eb8:	6023      	str	r3, [r4, #0]
 8019eba:	bd38      	pop	{r3, r4, r5, pc}
 8019ebc:	2004bfc0 	.word	0x2004bfc0

08019ec0 <memmove>:
 8019ec0:	4288      	cmp	r0, r1
 8019ec2:	b510      	push	{r4, lr}
 8019ec4:	eb01 0402 	add.w	r4, r1, r2
 8019ec8:	d902      	bls.n	8019ed0 <memmove+0x10>
 8019eca:	4284      	cmp	r4, r0
 8019ecc:	4623      	mov	r3, r4
 8019ece:	d807      	bhi.n	8019ee0 <memmove+0x20>
 8019ed0:	1e43      	subs	r3, r0, #1
 8019ed2:	42a1      	cmp	r1, r4
 8019ed4:	d008      	beq.n	8019ee8 <memmove+0x28>
 8019ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019ede:	e7f8      	b.n	8019ed2 <memmove+0x12>
 8019ee0:	4402      	add	r2, r0
 8019ee2:	4601      	mov	r1, r0
 8019ee4:	428a      	cmp	r2, r1
 8019ee6:	d100      	bne.n	8019eea <memmove+0x2a>
 8019ee8:	bd10      	pop	{r4, pc}
 8019eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019ef2:	e7f7      	b.n	8019ee4 <memmove+0x24>

08019ef4 <_realloc_r>:
 8019ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ef6:	4607      	mov	r7, r0
 8019ef8:	4614      	mov	r4, r2
 8019efa:	460e      	mov	r6, r1
 8019efc:	b921      	cbnz	r1, 8019f08 <_realloc_r+0x14>
 8019efe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f02:	4611      	mov	r1, r2
 8019f04:	f7fe be98 	b.w	8018c38 <_malloc_r>
 8019f08:	b922      	cbnz	r2, 8019f14 <_realloc_r+0x20>
 8019f0a:	f7fe fe45 	bl	8018b98 <_free_r>
 8019f0e:	4625      	mov	r5, r4
 8019f10:	4628      	mov	r0, r5
 8019f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f14:	f000 f826 	bl	8019f64 <_malloc_usable_size_r>
 8019f18:	42a0      	cmp	r0, r4
 8019f1a:	d20f      	bcs.n	8019f3c <_realloc_r+0x48>
 8019f1c:	4621      	mov	r1, r4
 8019f1e:	4638      	mov	r0, r7
 8019f20:	f7fe fe8a 	bl	8018c38 <_malloc_r>
 8019f24:	4605      	mov	r5, r0
 8019f26:	2800      	cmp	r0, #0
 8019f28:	d0f2      	beq.n	8019f10 <_realloc_r+0x1c>
 8019f2a:	4631      	mov	r1, r6
 8019f2c:	4622      	mov	r2, r4
 8019f2e:	f7fe fe1d 	bl	8018b6c <memcpy>
 8019f32:	4631      	mov	r1, r6
 8019f34:	4638      	mov	r0, r7
 8019f36:	f7fe fe2f 	bl	8018b98 <_free_r>
 8019f3a:	e7e9      	b.n	8019f10 <_realloc_r+0x1c>
 8019f3c:	4635      	mov	r5, r6
 8019f3e:	e7e7      	b.n	8019f10 <_realloc_r+0x1c>

08019f40 <_read_r>:
 8019f40:	b538      	push	{r3, r4, r5, lr}
 8019f42:	4d07      	ldr	r5, [pc, #28]	; (8019f60 <_read_r+0x20>)
 8019f44:	4604      	mov	r4, r0
 8019f46:	4608      	mov	r0, r1
 8019f48:	4611      	mov	r1, r2
 8019f4a:	2200      	movs	r2, #0
 8019f4c:	602a      	str	r2, [r5, #0]
 8019f4e:	461a      	mov	r2, r3
 8019f50:	f7e9 f9a2 	bl	8003298 <_read>
 8019f54:	1c43      	adds	r3, r0, #1
 8019f56:	d102      	bne.n	8019f5e <_read_r+0x1e>
 8019f58:	682b      	ldr	r3, [r5, #0]
 8019f5a:	b103      	cbz	r3, 8019f5e <_read_r+0x1e>
 8019f5c:	6023      	str	r3, [r4, #0]
 8019f5e:	bd38      	pop	{r3, r4, r5, pc}
 8019f60:	2004bfc0 	.word	0x2004bfc0

08019f64 <_malloc_usable_size_r>:
 8019f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f68:	1f18      	subs	r0, r3, #4
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	bfbc      	itt	lt
 8019f6e:	580b      	ldrlt	r3, [r1, r0]
 8019f70:	18c0      	addlt	r0, r0, r3
 8019f72:	4770      	bx	lr

08019f74 <sqrtf>:
 8019f74:	b508      	push	{r3, lr}
 8019f76:	ed2d 8b02 	vpush	{d8}
 8019f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8019f7e:	f000 f81f 	bl	8019fc0 <__ieee754_sqrtf>
 8019f82:	4b0d      	ldr	r3, [pc, #52]	; (8019fb8 <sqrtf+0x44>)
 8019f84:	f993 3000 	ldrsb.w	r3, [r3]
 8019f88:	3301      	adds	r3, #1
 8019f8a:	d011      	beq.n	8019fb0 <sqrtf+0x3c>
 8019f8c:	eeb4 8a48 	vcmp.f32	s16, s16
 8019f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f94:	d60c      	bvs.n	8019fb0 <sqrtf+0x3c>
 8019f96:	eddf 8a09 	vldr	s17, [pc, #36]	; 8019fbc <sqrtf+0x48>
 8019f9a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fa2:	d505      	bpl.n	8019fb0 <sqrtf+0x3c>
 8019fa4:	f7fe fda8 	bl	8018af8 <__errno>
 8019fa8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019fac:	2321      	movs	r3, #33	; 0x21
 8019fae:	6003      	str	r3, [r0, #0]
 8019fb0:	ecbd 8b02 	vpop	{d8}
 8019fb4:	bd08      	pop	{r3, pc}
 8019fb6:	bf00      	nop
 8019fb8:	200000b4 	.word	0x200000b4
 8019fbc:	00000000 	.word	0x00000000

08019fc0 <__ieee754_sqrtf>:
 8019fc0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019fc4:	4770      	bx	lr
	...

08019fc8 <_init>:
 8019fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fca:	bf00      	nop
 8019fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019fce:	bc08      	pop	{r3}
 8019fd0:	469e      	mov	lr, r3
 8019fd2:	4770      	bx	lr

08019fd4 <_fini>:
 8019fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fd6:	bf00      	nop
 8019fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019fda:	bc08      	pop	{r3}
 8019fdc:	469e      	mov	lr, r3
 8019fde:	4770      	bx	lr
