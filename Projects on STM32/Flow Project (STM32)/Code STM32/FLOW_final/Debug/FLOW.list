
FLOW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c904  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016210  0801cad4  0801cad4  0002cad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032ce4  08032ce4  000500e4  2**0
                  CONTENTS
  4 .ARM          00000008  08032ce4  08032ce4  00042ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032cec  08032cec  000500e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032cec  08032cec  00042cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08032cf0  08032cf0  00042cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08032cf4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004ddb8  200000e8  08032dd8  000500e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2004dea0  08032dd8  0005dea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000519a1  00000000  00000000  00050114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a8e1  00000000  00000000  000a1ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003728  00000000  00000000  000ac398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000032f0  00000000  00000000  000afac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a1fa  00000000  00000000  000b2db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004b9e6  00000000  00000000  000ecfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012973e  00000000  00000000  00138990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  002620ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f000  00000000  00000000  00262190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003a35  00000000  00000000  00271190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cabc 	.word	0x0801cabc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	0801cabc 	.word	0x0801cabc

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2uiz>:
 8000c1c:	004a      	lsls	r2, r1, #1
 8000c1e:	d211      	bcs.n	8000c44 <__aeabi_d2uiz+0x28>
 8000c20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c24:	d211      	bcs.n	8000c4a <__aeabi_d2uiz+0x2e>
 8000c26:	d50d      	bpl.n	8000c44 <__aeabi_d2uiz+0x28>
 8000c28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c30:	d40e      	bmi.n	8000c50 <__aeabi_d2uiz+0x34>
 8000c32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	4770      	bx	lr
 8000c44:	f04f 0000 	mov.w	r0, #0
 8000c48:	4770      	bx	lr
 8000c4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4e:	d102      	bne.n	8000c56 <__aeabi_d2uiz+0x3a>
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	4770      	bx	lr
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2f>:
 8000c5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c64:	bf24      	itt	cs
 8000c66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6e:	d90d      	bls.n	8000c8c <__aeabi_d2f+0x30>
 8000c70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c90:	d121      	bne.n	8000cd6 <__aeabi_d2f+0x7a>
 8000c92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c96:	bfbc      	itt	lt
 8000c98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	4770      	bxlt	lr
 8000c9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ca2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca6:	f1c2 0218 	rsb	r2, r2, #24
 8000caa:	f1c2 0c20 	rsb	ip, r2, #32
 8000cae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb6:	bf18      	it	ne
 8000cb8:	f040 0001 	orrne.w	r0, r0, #1
 8000cbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc8:	ea40 000c 	orr.w	r0, r0, ip
 8000ccc:	fa23 f302 	lsr.w	r3, r3, r2
 8000cd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd4:	e7cc      	b.n	8000c70 <__aeabi_d2f+0x14>
 8000cd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cda:	d107      	bne.n	8000cec <__aeabi_d2f+0x90>
 8000cdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ce0:	bf1e      	ittt	ne
 8000ce2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cea:	4770      	bxne	lr
 8000cec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <__aeabi_uldivmod>:
 8000cfc:	b953      	cbnz	r3, 8000d14 <__aeabi_uldivmod+0x18>
 8000cfe:	b94a      	cbnz	r2, 8000d14 <__aeabi_uldivmod+0x18>
 8000d00:	2900      	cmp	r1, #0
 8000d02:	bf08      	it	eq
 8000d04:	2800      	cmpeq	r0, #0
 8000d06:	bf1c      	itt	ne
 8000d08:	f04f 31ff 	movne.w	r1, #4294967295
 8000d0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d10:	f000 b96e 	b.w	8000ff0 <__aeabi_idiv0>
 8000d14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d1c:	f000 f806 	bl	8000d2c <__udivmoddi4>
 8000d20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d28:	b004      	add	sp, #16
 8000d2a:	4770      	bx	lr

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d30:	9d08      	ldr	r5, [sp, #32]
 8000d32:	4604      	mov	r4, r0
 8000d34:	468c      	mov	ip, r1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f040 8083 	bne.w	8000e42 <__udivmoddi4+0x116>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d947      	bls.n	8000dd2 <__udivmoddi4+0xa6>
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	b142      	cbz	r2, 8000d5a <__udivmoddi4+0x2e>
 8000d48:	f1c2 0020 	rsb	r0, r2, #32
 8000d4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d50:	4091      	lsls	r1, r2
 8000d52:	4097      	lsls	r7, r2
 8000d54:	ea40 0c01 	orr.w	ip, r0, r1
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5e:	0c23      	lsrs	r3, r4, #16
 8000d60:	fbbc f6f8 	udiv	r6, ip, r8
 8000d64:	fa1f fe87 	uxth.w	lr, r7
 8000d68:	fb08 c116 	mls	r1, r8, r6, ip
 8000d6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d70:	fb06 f10e 	mul.w	r1, r6, lr
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x60>
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 8119 	bcs.w	8000fb4 <__udivmoddi4+0x288>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 8116 	bls.w	8000fb4 <__udivmoddi4+0x288>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	443b      	add	r3, r7
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	f080 8105 	bcs.w	8000fb8 <__udivmoddi4+0x28c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8102 	bls.w	8000fb8 <__udivmoddi4+0x28c>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbc:	eba4 040e 	sub.w	r4, r4, lr
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa0>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	b902      	cbnz	r2, 8000dd6 <__udivmoddi4+0xaa>
 8000dd4:	deff      	udf	#255	; 0xff
 8000dd6:	fab2 f282 	clz	r2, r2
 8000dda:	2a00      	cmp	r2, #0
 8000ddc:	d150      	bne.n	8000e80 <__udivmoddi4+0x154>
 8000dde:	1bcb      	subs	r3, r1, r7
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	fa1f f887 	uxth.w	r8, r7
 8000de8:	2601      	movs	r6, #1
 8000dea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dee:	0c21      	lsrs	r1, r4, #16
 8000df0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0xe4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0xe2>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	f200 80e9 	bhi.w	8000fe0 <__udivmoddi4+0x2b4>
 8000e0e:	4684      	mov	ip, r0
 8000e10:	1ac9      	subs	r1, r1, r3
 8000e12:	b2a3      	uxth	r3, r4
 8000e14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e20:	fb08 f800 	mul.w	r8, r8, r0
 8000e24:	45a0      	cmp	r8, r4
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0x10c>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x10a>
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	f200 80d9 	bhi.w	8000fe8 <__udivmoddi4+0x2bc>
 8000e36:	4618      	mov	r0, r3
 8000e38:	eba4 0408 	sub.w	r4, r4, r8
 8000e3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e40:	e7bf      	b.n	8000dc2 <__udivmoddi4+0x96>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d909      	bls.n	8000e5a <__udivmoddi4+0x12e>
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	f000 80b1 	beq.w	8000fae <__udivmoddi4+0x282>
 8000e4c:	2600      	movs	r6, #0
 8000e4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e52:	4630      	mov	r0, r6
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	fab3 f683 	clz	r6, r3
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d14a      	bne.n	8000ef8 <__udivmoddi4+0x1cc>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d302      	bcc.n	8000e6c <__udivmoddi4+0x140>
 8000e66:	4282      	cmp	r2, r0
 8000e68:	f200 80b8 	bhi.w	8000fdc <__udivmoddi4+0x2b0>
 8000e6c:	1a84      	subs	r4, r0, r2
 8000e6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e72:	2001      	movs	r0, #1
 8000e74:	468c      	mov	ip, r1
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	d0a8      	beq.n	8000dcc <__udivmoddi4+0xa0>
 8000e7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0xa0>
 8000e80:	f1c2 0320 	rsb	r3, r2, #32
 8000e84:	fa20 f603 	lsr.w	r6, r0, r3
 8000e88:	4097      	lsls	r7, r2
 8000e8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e92:	40d9      	lsrs	r1, r3
 8000e94:	4330      	orrs	r0, r6
 8000e96:	0c03      	lsrs	r3, r0, #16
 8000e98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea8:	fb06 f108 	mul.w	r1, r6, r8
 8000eac:	4299      	cmp	r1, r3
 8000eae:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb2:	d909      	bls.n	8000ec8 <__udivmoddi4+0x19c>
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eba:	f080 808d 	bcs.w	8000fd8 <__udivmoddi4+0x2ac>
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	f240 808a 	bls.w	8000fd8 <__udivmoddi4+0x2ac>
 8000ec4:	3e02      	subs	r6, #2
 8000ec6:	443b      	add	r3, r7
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	b281      	uxth	r1, r0
 8000ecc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb00 f308 	mul.w	r3, r0, r8
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x1c4>
 8000ee0:	1879      	adds	r1, r7, r1
 8000ee2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee6:	d273      	bcs.n	8000fd0 <__udivmoddi4+0x2a4>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d971      	bls.n	8000fd0 <__udivmoddi4+0x2a4>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4439      	add	r1, r7
 8000ef0:	1acb      	subs	r3, r1, r3
 8000ef2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef6:	e778      	b.n	8000dea <__udivmoddi4+0xbe>
 8000ef8:	f1c6 0c20 	rsb	ip, r6, #32
 8000efc:	fa03 f406 	lsl.w	r4, r3, r6
 8000f00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f04:	431c      	orrs	r4, r3
 8000f06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f16:	431f      	orrs	r7, r3
 8000f18:	0c3b      	lsrs	r3, r7, #16
 8000f1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1e:	fa1f f884 	uxth.w	r8, r4
 8000f22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2e:	458a      	cmp	sl, r1
 8000f30:	fa02 f206 	lsl.w	r2, r2, r6
 8000f34:	fa00 f306 	lsl.w	r3, r0, r6
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x220>
 8000f3a:	1861      	adds	r1, r4, r1
 8000f3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f40:	d248      	bcs.n	8000fd4 <__udivmoddi4+0x2a8>
 8000f42:	458a      	cmp	sl, r1
 8000f44:	d946      	bls.n	8000fd4 <__udivmoddi4+0x2a8>
 8000f46:	f1a9 0902 	sub.w	r9, r9, #2
 8000f4a:	4421      	add	r1, r4
 8000f4c:	eba1 010a 	sub.w	r1, r1, sl
 8000f50:	b2bf      	uxth	r7, r7
 8000f52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5e:	fb00 f808 	mul.w	r8, r0, r8
 8000f62:	45b8      	cmp	r8, r7
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x24a>
 8000f66:	19e7      	adds	r7, r4, r7
 8000f68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f6c:	d22e      	bcs.n	8000fcc <__udivmoddi4+0x2a0>
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d92c      	bls.n	8000fcc <__udivmoddi4+0x2a0>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4427      	add	r7, r4
 8000f76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f7a:	eba7 0708 	sub.w	r7, r7, r8
 8000f7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f82:	454f      	cmp	r7, r9
 8000f84:	46c6      	mov	lr, r8
 8000f86:	4649      	mov	r1, r9
 8000f88:	d31a      	bcc.n	8000fc0 <__udivmoddi4+0x294>
 8000f8a:	d017      	beq.n	8000fbc <__udivmoddi4+0x290>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x27a>
 8000f8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f92:	eb67 0701 	sbc.w	r7, r7, r1
 8000f96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f9a:	40f2      	lsrs	r2, r6
 8000f9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa0:	40f7      	lsrs	r7, r6
 8000fa2:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	462e      	mov	r6, r5
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	e70b      	b.n	8000dcc <__udivmoddi4+0xa0>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	e6e9      	b.n	8000d8c <__udivmoddi4+0x60>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	e6fd      	b.n	8000db8 <__udivmoddi4+0x8c>
 8000fbc:	4543      	cmp	r3, r8
 8000fbe:	d2e5      	bcs.n	8000f8c <__udivmoddi4+0x260>
 8000fc0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc4:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc8:	3801      	subs	r0, #1
 8000fca:	e7df      	b.n	8000f8c <__udivmoddi4+0x260>
 8000fcc:	4608      	mov	r0, r1
 8000fce:	e7d2      	b.n	8000f76 <__udivmoddi4+0x24a>
 8000fd0:	4660      	mov	r0, ip
 8000fd2:	e78d      	b.n	8000ef0 <__udivmoddi4+0x1c4>
 8000fd4:	4681      	mov	r9, r0
 8000fd6:	e7b9      	b.n	8000f4c <__udivmoddi4+0x220>
 8000fd8:	4666      	mov	r6, ip
 8000fda:	e775      	b.n	8000ec8 <__udivmoddi4+0x19c>
 8000fdc:	4630      	mov	r0, r6
 8000fde:	e74a      	b.n	8000e76 <__udivmoddi4+0x14a>
 8000fe0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe4:	4439      	add	r1, r7
 8000fe6:	e713      	b.n	8000e10 <__udivmoddi4+0xe4>
 8000fe8:	3802      	subs	r0, #2
 8000fea:	443c      	add	r4, r7
 8000fec:	e724      	b.n	8000e38 <__udivmoddi4+0x10c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8

	//uiDisplayBasic();

	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000ffe:	4a36      	ldr	r2, [pc, #216]	; (80010d8 <audioLoop+0xe0>)
 8001000:	2100      	movs	r1, #0
 8001002:	4836      	ldr	r0, [pc, #216]	; (80010dc <audioLoop+0xe4>)
 8001004:	f01a fab8 	bl	801b578 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001008:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <audioLoop+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

	arm_rfft_fast_init_f32(&FFTStruct, FFTLength);
 800100e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001012:	4834      	ldr	r0, [pc, #208]	; (80010e4 <audioLoop+0xec>)
 8001014:	f019 f976 	bl	801a304 <arm_rfft_fast_init_f32>

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <audioLoop+0xf0>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001026:	4931      	ldr	r1, [pc, #196]	; (80010ec <audioLoop+0xf4>)
 8001028:	4831      	ldr	r0, [pc, #196]	; (80010f0 <audioLoop+0xf8>)
 800102a:	f005 f827 	bl	800607c <start_Audio_Processing>

	/* main audio loop */
	while (1) {

		accumulateInputLevels();
 800102e:	f000 f86f 	bl	8001110 <accumulateInputLevels>
		count++;
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <audioLoop+0xfc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <audioLoop+0xfc>)
 800103a:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <audioLoop+0xfc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b13      	cmp	r3, #19
 8001042:	dd2a      	ble.n	800109a <audioLoop+0xa2>
			count = 0;
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <audioLoop+0xfc>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
			inputLevelLavr = inputLevelL * 0.05;
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <audioLoop+0x100>)
 800104c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001050:	a31f      	add	r3, pc, #124	; (adr r3, 80010d0 <audioLoop+0xd8>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fb47 	bl	80006e8 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4927      	ldr	r1, [pc, #156]	; (80010fc <audioLoop+0x104>)
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelRavr = inputLevelR * 0.05;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <audioLoop+0x108>)
 8001066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106a:	a319      	add	r3, pc, #100	; (adr r3, 80010d0 <audioLoop+0xd8>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fb3a 	bl	80006e8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4922      	ldr	r1, [pc, #136]	; (8001104 <audioLoop+0x10c>)
 800107a:	e9c1 2300 	strd	r2, r3, [r1]
			//osSignalSet(uiTaskHandle, 0x0002);
			//uiDisplayInputLevel(inputLevelL, inputLevelR);
			inputLevelL = 0.;
 800107e:	491e      	ldr	r1, [pc, #120]	; (80010f8 <audioLoop+0x100>)
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 800108c:	491c      	ldr	r1, [pc, #112]	; (8001100 <audioLoop+0x108>)
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
		}

		osSignalWait (0x0002, osWaitForever);
 800109a:	463b      	mov	r3, r7
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	2102      	movs	r1, #2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f016 f990 	bl	80173c8 <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 1st half block */
		processAudio(buf_output, buf_input);
 80010a8:	4910      	ldr	r1, [pc, #64]	; (80010ec <audioLoop+0xf4>)
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <audioLoop+0xf8>)
 80010ac:	f000 f990 	bl	80013d0 <processAudio>

		osSignalWait (0x0001, osWaitForever);
 80010b0:	463b      	mov	r3, r7
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f016 f985 	bl	80173c8 <osSignalWait>
		//while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
		//	asm("NOP");
		//}
		//audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <audioLoop+0x110>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <audioLoop+0x114>)
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f981 	bl	80013d0 <processAudio>
		accumulateInputLevels();
 80010ce:	e7ae      	b.n	800102e <audioLoop+0x36>
 80010d0:	9999999a 	.word	0x9999999a
 80010d4:	3fa99999 	.word	0x3fa99999
 80010d8:	0004e200 	.word	0x0004e200
 80010dc:	c0096000 	.word	0xc0096000
 80010e0:	2000cdd8 	.word	0x2000cdd8
 80010e4:	200095b0 	.word	0x200095b0
 80010e8:	2000d008 	.word	0x2000d008
 80010ec:	200085b0 	.word	0x200085b0
 80010f0:	2000a5c8 	.word	0x2000a5c8
 80010f4:	20000104 	.word	0x20000104
 80010f8:	20000110 	.word	0x20000110
 80010fc:	2000cdc8 	.word	0x2000cdc8
 8001100:	20000118 	.word	0x20000118
 8001104:	2000cdd0 	.word	0x2000cdd0
 8001108:	20000004 	.word	0x20000004
 800110c:	20000000 	.word	0x20000000

08001110 <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	e016      	b.n	800114e <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 8001120:	4a3e      	ldr	r2, [pc, #248]	; (800121c <accumulateInputLevels+0x10c>)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001128:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 800112a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	dd05      	ble.n	800113e <accumulateInputLevels+0x2e>
			lvl += v;
 8001132:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e004      	b.n	8001148 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 800113e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	3302      	adds	r3, #2
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001154:	d3e4      	bcc.n	8001120 <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff fa4c 	bl	80005f4 <__aeabi_ui2d>
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <accumulateInputLevels+0x110>)
 8001162:	f7ff fbeb 	bl	800093c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <accumulateInputLevels+0x114>)
 8001174:	f7ff fbe2 	bl	800093c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <accumulateInputLevels+0x118>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff f8f9 	bl	800037c <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4926      	ldr	r1, [pc, #152]	; (8001228 <accumulateInputLevels+0x118>)
 8001190:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001198:	2301      	movs	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	e016      	b.n	80011cc <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <accumulateInputLevels+0x10c>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011a6:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 80011a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dd05      	ble.n	80011bc <accumulateInputLevels+0xac>
			lvl += v;
 80011b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e004      	b.n	80011c6 <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 80011bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3302      	adds	r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011d2:	d3e4      	bcc.n	800119e <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff fa0d 	bl	80005f4 <__aeabi_ui2d>
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <accumulateInputLevels+0x110>)
 80011e0:	f7ff fbac 	bl	800093c <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <accumulateInputLevels+0x114>)
 80011f2:	f7ff fba3 	bl	800093c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <accumulateInputLevels+0x11c>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff f8ba 	bl	800037c <__adddf3>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <accumulateInputLevels+0x11c>)
 800120e:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200085b0 	.word	0x200085b0
 8001220:	40a00000 	.word	0x40a00000
 8001224:	40e00000 	.word	0x40e00000
 8001228:	20000110 	.word	0x20000110
 800122c:	20000118 	.word	0x20000118

08001230 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_FULL;
	osSignalSet(defaultTaskHandle, 0x0001);
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_SAI_RxCpltCallback+0x1c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f016 f882 	bl	8017348 <osSignalSet>
	return;
 8001244:	bf00      	nop
}
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000ce60 	.word	0x2000ce60

08001250 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	//audio_rec_buffer_state = BUFFER_OFFSET_HALF;
	osSignalSet(defaultTaskHandle, 0x0002);
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_SAI_RxHalfCpltCallback+0x1c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2102      	movs	r1, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f016 f872 	bl	8017348 <osSignalSet>
	return;
 8001264:	bf00      	nop
}
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000ce60 	.word	0x2000ce60

08001270 <readFromAudioScratch>:
// --------------------------- Audio scratch buffer ---------------------------

/**
 * Read a sample from the audio scratch buffer in SDRAM at position "pos"
 */
static float readFromAudioScratch(int pos) {
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <readFromAudioScratch+0x2c>)
 800127a:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
	return *(__IO float*) pSdramAddress;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	ee07 3a90 	vmov	s15, r3

}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	c0096000 	.word	0xc0096000

080012a0 <writeToAudioScratch>:

/**
 * Write the given value to the audio scratch buffer in SDRAM at position "pos"
 */
static void writeToAudioScratch(float val, int pos) {
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012aa:	6038      	str	r0, [r7, #0]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <writeToAudioScratch+0x2c>)
 80012ae:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
	*(__IO float*) pSdramAddress = val;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]

}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	c0096000 	.word	0xc0096000

080012d0 <printTabfrequence>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim5;
extern TIM_HandleTypeDef htim12;

static void printTabfrequence(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af02      	add	r7, sp, #8
	char index1[10];
	char index2[10];
	for(int k=0;k<9;k++){
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e059      	b.n	8001390 <printTabfrequence+0xc0>
		uint32_t x =floor(tab[k]);
 80012dc:	4a38      	ldr	r2, [pc, #224]	; (80013c0 <printTabfrequence+0xf0>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f9a6 	bl	8000638 <__aeabi_f2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	ec43 2b10 	vmov	d0, r2, r3
 80012f4:	f01b fb38 	bl	801c968 <floor>
 80012f8:	ec53 2b10 	vmov	r2, r3, d0
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc8c 	bl	8000c1c <__aeabi_d2uiz>
 8001304:	4603      	mov	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
		sprintf(index1, "%lu dB  ",x);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	492d      	ldr	r1, [pc, #180]	; (80013c4 <printTabfrequence+0xf4>)
 8001310:	4618      	mov	r0, r3
 8001312:	f01a fa97 	bl	801b844 <siprintf>
		sprintf(index2, " %luHz ",40*k*5,56);
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	22c8      	movs	r2, #200	; 0xc8
 800131a:	fb02 f203 	mul.w	r2, r2, r3
 800131e:	4638      	mov	r0, r7
 8001320:	2338      	movs	r3, #56	; 0x38
 8001322:	4929      	ldr	r1, [pc, #164]	; (80013c8 <printTabfrequence+0xf8>)
 8001324:	f01a fa8e 	bl	801b844 <siprintf>
		LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8001328:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800132c:	f004 fa0e 	bl	800574c <LCD_SetStrokeColor>

		LCD_DrawString(50*k+30,100,(uint8_t *)index1, LEFT_MODE, true);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	b29b      	uxth	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4413      	add	r3, r2
 800133a:	461a      	mov	r2, r3
 800133c:	0091      	lsls	r1, r2, #2
 800133e:	461a      	mov	r2, r3
 8001340:	460b      	mov	r3, r1
 8001342:	4413      	add	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	b29b      	uxth	r3, r3
 8001348:	331e      	adds	r3, #30
 800134a:	b298      	uxth	r0, r3
 800134c:	f107 020c 	add.w	r2, r7, #12
 8001350:	2301      	movs	r3, #1
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2303      	movs	r3, #3
 8001356:	2164      	movs	r1, #100	; 0x64
 8001358:	f004 fade 	bl	8005918 <LCD_DrawString>
		LCD_DrawString(48.5*k,115,(uint8_t *)index2, LEFT_MODE, true);
 800135c:	69f8      	ldr	r0, [r7, #28]
 800135e:	f7ff f959 	bl	8000614 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <printTabfrequence+0xfc>)
 8001368:	f7ff f9be 	bl	80006e8 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fc52 	bl	8000c1c <__aeabi_d2uiz>
 8001378:	4603      	mov	r3, r0
 800137a:	b298      	uxth	r0, r3
 800137c:	463a      	mov	r2, r7
 800137e:	2301      	movs	r3, #1
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2303      	movs	r3, #3
 8001384:	2173      	movs	r1, #115	; 0x73
 8001386:	f004 fac7 	bl	8005918 <LCD_DrawString>
	for(int k=0;k<9;k++){
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3301      	adds	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b08      	cmp	r3, #8
 8001394:	dda2      	ble.n	80012dc <printTabfrequence+0xc>

	}

	sprintf(index2, " %luHz ",40*9*5,56);
 8001396:	4638      	mov	r0, r7
 8001398:	2338      	movs	r3, #56	; 0x38
 800139a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800139e:	490a      	ldr	r1, [pc, #40]	; (80013c8 <printTabfrequence+0xf8>)
 80013a0:	f01a fa50 	bl	801b844 <siprintf>
	LCD_DrawString(48*9,115,(uint8_t *)index2, LEFT_MODE, true);
 80013a4:	463a      	mov	r2, r7
 80013a6:	2301      	movs	r3, #1
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2303      	movs	r3, #3
 80013ac:	2173      	movs	r1, #115	; 0x73
 80013ae:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 80013b2:	f004 fab1 	bl	8005918 <LCD_DrawString>
}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000120 	.word	0x20000120
 80013c4:	0801cae8 	.word	0x0801cae8
 80013c8:	0801caf4 	.word	0x0801caf4
 80013cc:	40484000 	.word	0x40484000

080013d0 <processAudio>:





static void processAudio(int16_t *out, int16_t *in) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	//pulse of the magnets and figures
	Figure1();
 80013da:	f000 fad9 	bl	8001990 <Figure1>
		Figure0();
		PreviousFigure=0;
		break;
	}
*/
	ChangePulseTime();
 80013de:	f000 fa59 	bl	8001894 <ChangePulseTime>
	//End of the part for the magnets and figures

	LED_On(); // for oscilloscope measurements...
 80013e2:	f004 f841 	bl	8005468 <LED_On>

	/* 16KHz -> 1000ms*16 = 1s*/
	int delay = (int) 16 * delayMs;
 80013e6:	4b80      	ldr	r3, [pc, #512]	; (80015e8 <processAudio+0x218>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
	float32_t max=0;
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
	int index=0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]

	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013fc:	e09c      	b.n	8001538 <processAudio+0x168>

		//modulo AUDIO_SCRATCH_SIZE
		if(posScratch>AUDIO_SCRATCH_SIZE-1){
 80013fe:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <processAudio+0x21c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7b      	ldr	r2, [pc, #492]	; (80015f0 <processAudio+0x220>)
 8001404:	4293      	cmp	r3, r2
 8001406:	dd02      	ble.n	800140e <processAudio+0x3e>
			posScratch=0;
 8001408:	4b78      	ldr	r3, [pc, #480]	; (80015ec <processAudio+0x21c>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
		}

		if(fillScratch<delay){
 800140e:	4b79      	ldr	r3, [pc, #484]	; (80015f4 <processAudio+0x224>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	429a      	cmp	r2, r3
 8001416:	dd32      	ble.n	800147e <processAudio+0xae>
			writeToAudioScratch((float)in[n],posScratch);
 8001418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <processAudio+0x21c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	f7ff ff33 	bl	80012a0 <writeToAudioScratch>
			posScratch+=1;
 800143a:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <processAudio+0x21c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	4a6a      	ldr	r2, [pc, #424]	; (80015ec <processAudio+0x21c>)
 8001442:	6013      	str	r3, [r2, #0]
			out[n] = (in[n]*volume)/100;
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	4413      	add	r3, r2
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	461a      	mov	r2, r3
 8001452:	4b69      	ldr	r3, [pc, #420]	; (80015f8 <processAudio+0x228>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	fb03 f302 	mul.w	r3, r3, r2
 800145a:	4a68      	ldr	r2, [pc, #416]	; (80015fc <processAudio+0x22c>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	1152      	asrs	r2, r2, #5
 8001462:	17db      	asrs	r3, r3, #31
 8001464:	1ad1      	subs	r1, r2, r3
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	b20a      	sxth	r2, r1
 8001470:	801a      	strh	r2, [r3, #0]
			fillScratch+=1;
 8001472:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <processAudio+0x224>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a5e      	ldr	r2, [pc, #376]	; (80015f4 <processAudio+0x224>)
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e059      	b.n	8001532 <processAudio+0x162>
		}else{
			int j = posScratch-delay;
 800147e:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <processAudio+0x21c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28

			if(j<0){
 8001488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148a:	2b00      	cmp	r3, #0
 800148c:	da03      	bge.n	8001496 <processAudio+0xc6>
				j=j+AUDIO_SCRATCH_SIZE;
 800148e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001490:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <processAudio+0x230>)
 8001492:	4413      	add	r3, r2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			/* old:  */
			int16_t old = (int16_t) readFromAudioScratch(j);
 8001496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001498:	f7ff feea 	bl	8001270 <readFromAudioScratch>
 800149c:	eef0 7a40 	vmov.f32	s15, s0
 80014a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a4:	ee17 3a90 	vmov	r3, s15
 80014a8:	81fb      	strh	r3, [r7, #14]

			float new = in[n]+(float)old/100*(delayFeed);
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8001604 <processAudio+0x234>
 80014ce:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80014d2:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <processAudio+0x238>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	edc7 7a02 	vstr	s15, [r7, #8]
			writeToAudioScratch((float)new,posScratch);
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <processAudio+0x21c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80014f4:	f7ff fed4 	bl	80012a0 <writeToAudioScratch>
			posScratch+=1;
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <processAudio+0x21c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a3b      	ldr	r2, [pc, #236]	; (80015ec <processAudio+0x21c>)
 8001500:	6013      	str	r3, [r2, #0]
			out[n]= (new*volume)/100;
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <processAudio+0x228>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001516:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001604 <processAudio+0x234>
 800151a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152a:	ee17 2a90 	vmov	r2, s15
 800152e:	b212      	sxth	r2, r2
 8001530:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001534:	3301      	adds	r3, #1
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153e:	f4ff af5e 	bcc.w	80013fe <processAudio+0x2e>
		}
	}
	/* array copy */
	for(int i=0;i<FFTLength;i++){
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	e016      	b.n	8001576 <processAudio+0x1a6>
		FFTInput[i]=(float32_t) out[i]/32738;
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800160c <processAudio+0x23c>
 8001560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001564:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <processAudio+0x240>)
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<FFTLength;i++){
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	3301      	adds	r3, #1
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	dbe4      	blt.n	8001548 <processAudio+0x178>
	}
		/* fft -> dB fft */
	arm_rfft_fast_f32(&FFTStruct,FFTInput,FFTOutput,0);
 800157e:	2300      	movs	r3, #0
 8001580:	4a24      	ldr	r2, [pc, #144]	; (8001614 <processAudio+0x244>)
 8001582:	4923      	ldr	r1, [pc, #140]	; (8001610 <processAudio+0x240>)
 8001584:	4824      	ldr	r0, [pc, #144]	; (8001618 <processAudio+0x248>)
 8001586:	f018 ff71 	bl	801a46c <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(FFTOutput,FFTOutputMag,FFTLength/2);
 800158a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158e:	4923      	ldr	r1, [pc, #140]	; (800161c <processAudio+0x24c>)
 8001590:	4820      	ldr	r0, [pc, #128]	; (8001614 <processAudio+0x244>)
 8001592:	f019 fbcf 	bl	801ad34 <arm_cmplx_mag_f32>
	printdB(max);
	*/


		/*Alternative par intervalle*/
	 for (int i=0;i<9;i++){ //Atténuer les valeurs de nos intervalles
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	e01b      	b.n	80015d4 <processAudio+0x204>
			 tab[i]=tab[i]/1.05;
 800159c:	4a20      	ldr	r2, [pc, #128]	; (8001620 <processAudio+0x250>)
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f846 	bl	8000638 <__aeabi_f2d>
 80015ac:	a30c      	add	r3, pc, #48	; (adr r3, 80015e0 <processAudio+0x210>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f9c3 	bl	800093c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fb4d 	bl	8000c5c <__aeabi_d2f>
 80015c2:	4602      	mov	r2, r0
 80015c4:	4916      	ldr	r1, [pc, #88]	; (8001620 <processAudio+0x250>)
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	601a      	str	r2, [r3, #0]
	 for (int i=0;i<9;i++){ //Atténuer les valeurs de nos intervalles
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	3301      	adds	r3, #1
 80015d2:	623b      	str	r3, [r7, #32]
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	dde0      	ble.n	800159c <processAudio+0x1cc>
		 }
	 for (int i=0;i<360;i++){
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e048      	b.n	8001672 <processAudio+0x2a2>
 80015e0:	cccccccd 	.word	0xcccccccd
 80015e4:	3ff0cccc 	.word	0x3ff0cccc
 80015e8:	200003d4 	.word	0x200003d4
 80015ec:	20000108 	.word	0x20000108
 80015f0:	000270ff 	.word	0x000270ff
 80015f4:	2000010c 	.word	0x2000010c
 80015f8:	2000002c 	.word	0x2000002c
 80015fc:	51eb851f 	.word	0x51eb851f
 8001600:	00027100 	.word	0x00027100
 8001604:	42c80000 	.word	0x42c80000
 8001608:	200003d8 	.word	0x200003d8
 800160c:	46ffc400 	.word	0x46ffc400
 8001610:	200095c8 	.word	0x200095c8
 8001614:	2000bdc8 	.word	0x2000bdc8
 8001618:	200095b0 	.word	0x200095b0
 800161c:	2000b5c8 	.word	0x2000b5c8
 8001620:	20000120 	.word	0x20000120
		 tab[i/40]=tab[i/40]+FFTOutputMag[i]/40;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4a44      	ldr	r2, [pc, #272]	; (8001738 <processAudio+0x368>)
 8001628:	fb82 1203 	smull	r1, r2, r2, r3
 800162c:	1112      	asrs	r2, r2, #4
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <processAudio+0x36c>)
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	4a40      	ldr	r2, [pc, #256]	; (8001740 <processAudio+0x370>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	edd3 6a00 	vldr	s13, [r3]
 8001648:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001744 <processAudio+0x374>
 800164c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4a39      	ldr	r2, [pc, #228]	; (8001738 <processAudio+0x368>)
 8001654:	fb82 1203 	smull	r1, r2, r2, r3
 8001658:	1112      	asrs	r2, r2, #4
 800165a:	17db      	asrs	r3, r3, #31
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	4a36      	ldr	r2, [pc, #216]	; (800173c <processAudio+0x36c>)
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	edc3 7a00 	vstr	s15, [r3]
	 for (int i=0;i<360;i++){
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3301      	adds	r3, #1
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001678:	dbd4      	blt.n	8001624 <processAudio+0x254>
	 }

	 printTabfrequence();
 800167a:	f7ff fe29 	bl	80012d0 <printTabfrequence>

	  Magnet1=tab[0];
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <processAudio+0x36c>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001688:	ee17 2a90 	vmov	r2, s15
 800168c:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <processAudio+0x378>)
 800168e:	601a      	str	r2, [r3, #0]
	  Magnet2=tab[1];
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <processAudio+0x36c>)
 8001692:	edd3 7a01 	vldr	s15, [r3, #4]
 8001696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169a:	ee17 2a90 	vmov	r2, s15
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <processAudio+0x37c>)
 80016a0:	601a      	str	r2, [r3, #0]
	  Magnet3=tab[2];
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <processAudio+0x36c>)
 80016a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ac:	ee17 2a90 	vmov	r2, s15
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <processAudio+0x380>)
 80016b2:	601a      	str	r2, [r3, #0]
	  Magnet4=tab[3];
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <processAudio+0x36c>)
 80016b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016be:	ee17 2a90 	vmov	r2, s15
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <processAudio+0x384>)
 80016c4:	601a      	str	r2, [r3, #0]
      Magnet5=tab[4];
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <processAudio+0x36c>)
 80016c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <processAudio+0x388>)
 80016d6:	601a      	str	r2, [r3, #0]
	  Magnet6=tab[5];
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <processAudio+0x36c>)
 80016da:	edd3 7a05 	vldr	s15, [r3, #20]
 80016de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e2:	ee17 2a90 	vmov	r2, s15
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <processAudio+0x38c>)
 80016e8:	601a      	str	r2, [r3, #0]
	  Magnet7=tab[6];
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <processAudio+0x36c>)
 80016ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80016f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f4:	ee17 2a90 	vmov	r2, s15
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <processAudio+0x390>)
 80016fa:	601a      	str	r2, [r3, #0]
	  Magnet8=tab[7];
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <processAudio+0x36c>)
 80016fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001706:	ee17 2a90 	vmov	r2, s15
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <processAudio+0x394>)
 800170c:	601a      	str	r2, [r3, #0]
	  Magnet9=tab[8];
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <processAudio+0x36c>)
 8001710:	edd3 7a08 	vldr	s15, [r3, #32]
 8001714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001718:	ee17 2a90 	vmov	r2, s15
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <processAudio+0x398>)
 800171e:	601a      	str	r2, [r3, #0]


	osSignalSet(uiTaskHandle, 0x0001);
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <processAudio+0x39c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	4618      	mov	r0, r3
 8001728:	f015 fe0e 	bl	8017348 <osSignalSet>





	LED_Off();
 800172c:	f003 fea8 	bl	8005480 <LED_Off>
}
 8001730:	bf00      	nop
 8001732:	3730      	adds	r7, #48	; 0x30
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	66666667 	.word	0x66666667
 800173c:	20000120 	.word	0x20000120
 8001740:	2000b5c8 	.word	0x2000b5c8
 8001744:	42200000 	.word	0x42200000
 8001748:	20000144 	.word	0x20000144
 800174c:	20000148 	.word	0x20000148
 8001750:	2000014c 	.word	0x2000014c
 8001754:	20000150 	.word	0x20000150
 8001758:	20000154 	.word	0x20000154
 800175c:	20000158 	.word	0x20000158
 8001760:	2000015c 	.word	0x2000015c
 8001764:	20000160 	.word	0x20000160
 8001768:	20000164 	.word	0x20000164
 800176c:	2000d22c 	.word	0x2000d22c

08001770 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80017b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <vApplicationGetIdleTaskMemory+0x30>)
 80017ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000170 	.word	0x20000170
 80017d4:	200001c8 	.word	0x200001c8

080017d8 <SetPulse>:

extern int PreviousFigure;//indicate the previous figure executed
extern int StepFig; //indicates the current step of the figure depending the MaxStepFigX
extern int EnableChangeFig ; //indicate if the Figure can change

void SetPulse(int indice_aimant, int rapport_cyclique){ //rapport_cyclique en pourcentage
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	if(PulseTime==0){
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <SetPulse+0x90>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d136      	bne.n	8001858 <SetPulse+0x80>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d82a      	bhi.n	8001848 <SetPulse+0x70>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <SetPulse+0x20>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001809 	.word	0x08001809
 80017fc:	08001819 	.word	0x08001819
 8001800:	08001829 	.word	0x08001829
 8001804:	08001839 	.word	0x08001839
		switch(indice_aimant){
		case 1 : htim1.Instance->CCR1=rapport_cyclique;PulseMagnet1=rapport_cyclique;break;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <SetPulse+0x94>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
 8001810:	4a17      	ldr	r2, [pc, #92]	; (8001870 <SetPulse+0x98>)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e020      	b.n	800185a <SetPulse+0x82>
		case 2 : htim2.Instance->CCR1=rapport_cyclique;PulseMagnet2=rapport_cyclique;break;
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <SetPulse+0x9c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	635a      	str	r2, [r3, #52]	; 0x34
 8001820:	4a15      	ldr	r2, [pc, #84]	; (8001878 <SetPulse+0xa0>)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e018      	b.n	800185a <SetPulse+0x82>
		case 3 : htim3.Instance->CCR1=rapport_cyclique;PulseMagnet3=rapport_cyclique;break;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <SetPulse+0xa4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	635a      	str	r2, [r3, #52]	; 0x34
 8001830:	4a13      	ldr	r2, [pc, #76]	; (8001880 <SetPulse+0xa8>)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e010      	b.n	800185a <SetPulse+0x82>
		case 4 : htim5.Instance->CCR4=rapport_cyclique;PulseMagnet4=rapport_cyclique;break;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <SetPulse+0xac>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <SetPulse+0xb0>)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e008      	b.n	800185a <SetPulse+0x82>
		default : htim12.Instance->CCR1=rapport_cyclique;PulseMagnet5=rapport_cyclique;break;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <SetPulse+0xb4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <SetPulse+0xb8>)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e000      	b.n	800185a <SetPulse+0x82>
		}
	}
 8001858:	bf00      	nop
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000168 	.word	0x20000168
 800186c:	2000d460 	.word	0x2000d460
 8001870:	20000008 	.word	0x20000008
 8001874:	2000d5d0 	.word	0x2000d5d0
 8001878:	2000000c 	.word	0x2000000c
 800187c:	2000d230 	.word	0x2000d230
 8001880:	20000010 	.word	0x20000010
 8001884:	2000d1e0 	.word	0x2000d1e0
 8001888:	20000014 	.word	0x20000014
 800188c:	2000d61c 	.word	0x2000d61c
 8001890:	20000018 	.word	0x20000018

08001894 <ChangePulseTime>:

void ChangePulseTime(){ //allow to change the pulse only if equal to 0
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	if(PulseTime==MaxPulseTime){
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <ChangePulseTime+0x28>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b0a      	cmp	r3, #10
 800189e:	d103      	bne.n	80018a8 <ChangePulseTime+0x14>
		PulseTime=0;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <ChangePulseTime+0x28>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
	}else{
		PulseTime++;
	}
}
 80018a6:	e004      	b.n	80018b2 <ChangePulseTime+0x1e>
		PulseTime++;
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <ChangePulseTime+0x28>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a03      	ldr	r2, [pc, #12]	; (80018bc <ChangePulseTime+0x28>)
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	20000168 	.word	0x20000168

080018c0 <ChangeFigure>:

void ChangeFigure(int x){
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	if(EnableChangeFig){
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <ChangeFigure+0x30>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <ChangeFigure+0x24>
		StepFig=0;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <ChangeFigure+0x34>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
		PreviousFigure=Figure;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <ChangeFigure+0x38>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <ChangeFigure+0x3c>)
 80018dc:	6013      	str	r3, [r2, #0]
		Figure=x;
 80018de:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <ChangeFigure+0x38>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6013      	str	r3, [r2, #0]
	}
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	20000024 	.word	0x20000024
 80018f4:	2000016c 	.word	0x2000016c
 80018f8:	2000001c 	.word	0x2000001c
 80018fc:	20000020 	.word	0x20000020

08001900 <ChangeEnable>:

void ChangeEnable(){
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
	int MaxStepFig;
	switch(Figure){
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <ChangeEnable+0x84>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b06      	cmp	r3, #6
 800190c:	d822      	bhi.n	8001954 <ChangeEnable+0x54>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <ChangeEnable+0x14>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001931 	.word	0x08001931
 8001918:	08001937 	.word	0x08001937
 800191c:	0800193d 	.word	0x0800193d
 8001920:	08001943 	.word	0x08001943
 8001924:	08001949 	.word	0x08001949
 8001928:	08001955 	.word	0x08001955
 800192c:	0800194f 	.word	0x0800194f
	case 0 : MaxStepFig = MaxStepFig0; break;
 8001930:	2304      	movs	r3, #4
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e011      	b.n	800195a <ChangeEnable+0x5a>
	case 1 : MaxStepFig = MaxStepFig1; break;
 8001936:	2305      	movs	r3, #5
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	e00e      	b.n	800195a <ChangeEnable+0x5a>
	case 2 : MaxStepFig = MaxStepFig2; break;
 800193c:	2305      	movs	r3, #5
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	e00b      	b.n	800195a <ChangeEnable+0x5a>
	case 3 : MaxStepFig = MaxStepFig3; break;
 8001942:	2305      	movs	r3, #5
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e008      	b.n	800195a <ChangeEnable+0x5a>
	case 4 : MaxStepFig = MaxStepFig4; break;
 8001948:	2305      	movs	r3, #5
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	e005      	b.n	800195a <ChangeEnable+0x5a>
	case 6 : MaxStepFig = MaxStepFig6; break;
 800194e:	2302      	movs	r3, #2
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	e002      	b.n	800195a <ChangeEnable+0x5a>
	default : MaxStepFig = MaxStepFig5; break; //on met 5 en default car c'est le MaxStepFig le plus grand
 8001954:	230e      	movs	r3, #14
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	bf00      	nop
	}
	if(StepFig>MaxStepFig){
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <ChangeEnable+0x88>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	da06      	bge.n	8001972 <ChangeEnable+0x72>
		EnableChangeFig=1;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <ChangeEnable+0x8c>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
		StepFig=0;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <ChangeEnable+0x88>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
	}else{
		EnableChangeFig=0;
	}
}
 8001970:	e002      	b.n	8001978 <ChangeEnable+0x78>
		EnableChangeFig=0;
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <ChangeEnable+0x8c>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	2000001c 	.word	0x2000001c
 8001988:	2000016c 	.word	0x2000016c
 800198c:	20000024 	.word	0x20000024

08001990 <Figure1>:
		SetPulse(5,0);
		StepFig++;
	}
}

void Figure1(){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	switch(StepFig){ //only Magnet3 (D3) is magnetic
 8001994:	4b43      	ldr	r3, [pc, #268]	; (8001aa4 <Figure1+0x114>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b04      	cmp	r3, #4
 800199a:	d86f      	bhi.n	8001a7c <Figure1+0xec>
 800199c:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <Figure1+0x14>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019b9 	.word	0x080019b9
 80019a8:	080019ed 	.word	0x080019ed
 80019ac:	08001a11 	.word	0x08001a11
 80019b0:	08001a35 	.word	0x08001a35
 80019b4:	08001a59 	.word	0x08001a59
	case 0 :
		SetPulse(3,100);
 80019b8:	2164      	movs	r1, #100	; 0x64
 80019ba:	2003      	movs	r0, #3
 80019bc:	f7ff ff0c 	bl	80017d8 <SetPulse>
		SetPulse(1,0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff ff08 	bl	80017d8 <SetPulse>
		SetPulse(2,0);
 80019c8:	2100      	movs	r1, #0
 80019ca:	2002      	movs	r0, #2
 80019cc:	f7ff ff04 	bl	80017d8 <SetPulse>
		SetPulse(4,0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	2004      	movs	r0, #4
 80019d4:	f7ff ff00 	bl	80017d8 <SetPulse>
		SetPulse(5,0);
 80019d8:	2100      	movs	r1, #0
 80019da:	2005      	movs	r0, #5
 80019dc:	f7ff fefc 	bl	80017d8 <SetPulse>
		StepFig++;
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <Figure1+0x114>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <Figure1+0x114>)
 80019e8:	6013      	str	r3, [r2, #0]
		break;
 80019ea:	e059      	b.n	8001aa0 <Figure1+0x110>
	case 1 :
		SetPulse(1,100);
 80019ec:	2164      	movs	r1, #100	; 0x64
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fef2 	bl	80017d8 <SetPulse>
		SetPulse(2,100);
 80019f4:	2164      	movs	r1, #100	; 0x64
 80019f6:	2002      	movs	r0, #2
 80019f8:	f7ff feee 	bl	80017d8 <SetPulse>
		SetPulse(3,75);
 80019fc:	214b      	movs	r1, #75	; 0x4b
 80019fe:	2003      	movs	r0, #3
 8001a00:	f7ff feea 	bl	80017d8 <SetPulse>
		StepFig++;
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <Figure1+0x114>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <Figure1+0x114>)
 8001a0c:	6013      	str	r3, [r2, #0]
		break;
 8001a0e:	e047      	b.n	8001aa0 <Figure1+0x110>
	case 2 :
		SetPulse(1,100);
 8001a10:	2164      	movs	r1, #100	; 0x64
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff fee0 	bl	80017d8 <SetPulse>
		SetPulse(2,75);
 8001a18:	214b      	movs	r1, #75	; 0x4b
 8001a1a:	2002      	movs	r0, #2
 8001a1c:	f7ff fedc 	bl	80017d8 <SetPulse>
		SetPulse(3,50);
 8001a20:	2132      	movs	r1, #50	; 0x32
 8001a22:	2003      	movs	r0, #3
 8001a24:	f7ff fed8 	bl	80017d8 <SetPulse>
		StepFig++;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <Figure1+0x114>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <Figure1+0x114>)
 8001a30:	6013      	str	r3, [r2, #0]
		break;
 8001a32:	e035      	b.n	8001aa0 <Figure1+0x110>
	case 3 :
		SetPulse(1,100);
 8001a34:	2164      	movs	r1, #100	; 0x64
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7ff fece 	bl	80017d8 <SetPulse>
		SetPulse(2,50);
 8001a3c:	2132      	movs	r1, #50	; 0x32
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f7ff feca 	bl	80017d8 <SetPulse>
		SetPulse(3,25);
 8001a44:	2119      	movs	r1, #25
 8001a46:	2003      	movs	r0, #3
 8001a48:	f7ff fec6 	bl	80017d8 <SetPulse>
		StepFig++;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <Figure1+0x114>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <Figure1+0x114>)
 8001a54:	6013      	str	r3, [r2, #0]
		break;
 8001a56:	e023      	b.n	8001aa0 <Figure1+0x110>
	case 4 :
		SetPulse(1,100);
 8001a58:	2164      	movs	r1, #100	; 0x64
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff febc 	bl	80017d8 <SetPulse>
		SetPulse(2,25);
 8001a60:	2119      	movs	r1, #25
 8001a62:	2002      	movs	r0, #2
 8001a64:	f7ff feb8 	bl	80017d8 <SetPulse>
		SetPulse(3,0);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f7ff feb4 	bl	80017d8 <SetPulse>
		StepFig++;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <Figure1+0x114>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <Figure1+0x114>)
 8001a78:	6013      	str	r3, [r2, #0]
		break;
 8001a7a:	e011      	b.n	8001aa0 <Figure1+0x110>
	default : //only Magnet1 (D10) is magnetic
		SetPulse(1,100);
 8001a7c:	2164      	movs	r1, #100	; 0x64
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff feaa 	bl	80017d8 <SetPulse>
		SetPulse(2,0);
 8001a84:	2100      	movs	r1, #0
 8001a86:	2002      	movs	r0, #2
 8001a88:	f7ff fea6 	bl	80017d8 <SetPulse>
		SetPulse(3,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2003      	movs	r0, #3
 8001a90:	f7ff fea2 	bl	80017d8 <SetPulse>
		StepFig++;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <Figure1+0x114>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a02      	ldr	r2, [pc, #8]	; (8001aa4 <Figure1+0x114>)
 8001a9c:	6013      	str	r3, [r2, #0]
		break;
 8001a9e:	bf00      	nop
	}
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000016c 	.word	0x2000016c

08001aa8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001aac:	f3bf 8f4f 	dsb	sy
}
 8001ab0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ab2:	f3bf 8f6f 	isb	sy
}
 8001ab6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <SCB_EnableICache+0x48>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac0:	f3bf 8f4f 	dsb	sy
}
 8001ac4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ac6:	f3bf 8f6f 	isb	sy
}
 8001aca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <SCB_EnableICache+0x48>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <SCB_EnableICache+0x48>)
 8001ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad8:	f3bf 8f4f 	dsb	sy
}
 8001adc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ade:	f3bf 8f6f 	isb	sy
}
 8001ae2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001af8:	f3bf 8f4f 	dsb	sy
}
 8001afc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001afe:	f3bf 8f6f 	isb	sy
}
 8001b02:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <SCB_InvalidateICache+0x30>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0c:	f3bf 8f4f 	dsb	sy
}
 8001b10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b12:	f3bf 8f6f 	isb	sy
}
 8001b16:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <SCB_EnableDCache+0x84>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b36:	f3bf 8f4f 	dsb	sy
}
 8001b3a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <SCB_EnableDCache+0x84>)
 8001b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b42:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0b5b      	lsrs	r3, r3, #13
 8001b48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b4c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b56:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001b60:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b66:	4911      	ldr	r1, [pc, #68]	; (8001bac <SCB_EnableDCache+0x84>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	60ba      	str	r2, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1ef      	bne.n	8001b58 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1e5a      	subs	r2, r3, #1
 8001b7c:	60fa      	str	r2, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e5      	bne.n	8001b4e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b82:	f3bf 8f4f 	dsb	sy
}
 8001b86:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <SCB_EnableDCache+0x84>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <SCB_EnableDCache+0x84>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b94:	f3bf 8f4f 	dsb	sy
}
 8001b98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b9a:	f3bf 8f6f 	isb	sy
}
 8001b9e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <SCB_InvalidateDCache+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001bbe:	f3bf 8f4f 	dsb	sy
}
 8001bc2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <SCB_InvalidateDCache+0x74>)
 8001bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bca:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0b5b      	lsrs	r3, r3, #13
 8001bd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001bd4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bde:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001be8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001bee:	490d      	ldr	r1, [pc, #52]	; (8001c24 <SCB_InvalidateDCache+0x74>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	60ba      	str	r2, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ef      	bne.n	8001be0 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	60fa      	str	r2, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e5      	bne.n	8001bd6 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c0a:	f3bf 8f4f 	dsb	sy
}
 8001c0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c10:	f3bf 8f6f 	isb	sy
}
 8001c14:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 8001c2e:	f7ff ffbf 	bl	8001bb0 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001c32:	f7ff ff5f 	bl	8001af4 <SCB_InvalidateICache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c36:	f005 ff9e 	bl	8007b76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3a:	f000 f8a1 	bl	8001d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c3e:	f001 f947 	bl	8002ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c42:	f001 f883 	bl	8002d4c <MX_DMA_Init>
  MX_ADC3_Init();
 8001c46:	f000 f95b 	bl	8001f00 <MX_ADC3_Init>
  MX_CRC_Init();
 8001c4a:	f000 f9ab 	bl	8001fa4 <MX_CRC_Init>
  MX_DCMI_Init();
 8001c4e:	f000 f9cb 	bl	8001fe8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001c52:	f000 f9fd 	bl	8002050 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c56:	f001 f8e7 	bl	8002e28 <MX_FMC_Init>
  MX_I2C1_Init();
 8001c5a:	f000 fa2b 	bl	80020b4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c5e:	f000 fa69 	bl	8002134 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c62:	f000 faa7 	bl	80021b4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001c66:	f000 fb29 	bl	80022bc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001c6a:	f000 fb69 	bl	8002340 <MX_RTC_Init>
  MX_SAI2_Init();
 8001c6e:	f000 fc0d 	bl	800248c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001c72:	f000 fcc7 	bl	8002604 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001c76:	f000 fce5 	bl	8002644 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8001c7a:	f000 fd13 	bl	80026a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c7e:	f000 fdbd 	bl	80027fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c82:	f000 fe3d 	bl	8002900 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001c86:	f000 fed3 	bl	8002a30 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001c8a:	f000 ff49 	bl	8002b20 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001c8e:	f000 ff9b 	bl	8002bc8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001c92:	f000 fffb 	bl	8002c8c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001c96:	f001 f829 	bl	8002cec <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001c9a:	f012 fea3 	bl	80149e4 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001c9e:	f013 f8f1 	bl	8014e84 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

	MPU_Init();
 8001ca2:	f004 fe53 	bl	800694c <MPU_Init>

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	482b      	ldr	r0, [pc, #172]	; (8001d58 <main+0x130>)
 8001caa:	f00f fb1f 	bl	80112ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001cae:	2100      	movs	r1, #0
 8001cb0:	482a      	ldr	r0, [pc, #168]	; (8001d5c <main+0x134>)
 8001cb2:	f00f fb1b 	bl	80112ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	4828      	ldr	r0, [pc, #160]	; (8001d5c <main+0x134>)
 8001cba:	f00f fb17 	bl	80112ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4827      	ldr	r0, [pc, #156]	; (8001d60 <main+0x138>)
 8001cc2:	f00f fb13 	bl	80112ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	4825      	ldr	r0, [pc, #148]	; (8001d60 <main+0x138>)
 8001cca:	f00f fb0f 	bl	80112ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001cce:	2108      	movs	r1, #8
 8001cd0:	4823      	ldr	r0, [pc, #140]	; (8001d60 <main+0x138>)
 8001cd2:	f00f fb0b 	bl	80112ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8001cd6:	210c      	movs	r1, #12
 8001cd8:	4821      	ldr	r0, [pc, #132]	; (8001d60 <main+0x138>)
 8001cda:	f00f fb07 	bl	80112ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);
 8001cde:	210c      	movs	r1, #12
 8001ce0:	4820      	ldr	r0, [pc, #128]	; (8001d64 <main+0x13c>)
 8001ce2:	f00f fb03 	bl	80112ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	481f      	ldr	r0, [pc, #124]	; (8001d68 <main+0x140>)
 8001cea:	f00f faff 	bl	80112ec <HAL_TIM_PWM_Start>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8001cee:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001cf2:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001cf6:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001cf8:	f004 fab4 	bl	8006264 <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001cfc:	481b      	ldr	r0, [pc, #108]	; (8001d6c <main+0x144>)
 8001cfe:	f019 fd89 	bl	801b814 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8001d02:	f7ff fed1 	bl	8001aa8 <SCB_EnableICache>
	SCB_EnableDCache();
 8001d06:	f7ff ff0f 	bl	8001b28 <SCB_EnableDCache>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <main+0x148>)
 8001d0c:	f107 041c 	add.w	r4, r7, #28
 8001d10:	461d      	mov	r5, r3
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f015 faaf 	bl	8017288 <osThreadCreate>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <main+0x14c>)
 8001d2e:	6013      	str	r3, [r2, #0]

  /* definition and creation of uiTask */
  osThreadDef(uiTask, startUITask, osPriorityLow, 0, 1024);
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <main+0x150>)
 8001d32:	463c      	mov	r4, r7
 8001d34:	461d      	mov	r5, r3
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 8001d42:	463b      	mov	r3, r7
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f015 fa9e 	bl	8017288 <osThreadCreate>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <main+0x154>)
 8001d50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d52:	f015 fa76 	bl	8017242 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001d56:	e7fe      	b.n	8001d56 <main+0x12e>
 8001d58:	2000d460 	.word	0x2000d460
 8001d5c:	2000d5d0 	.word	0x2000d5d0
 8001d60:	2000d230 	.word	0x2000d230
 8001d64:	2000d1e0 	.word	0x2000d1e0
 8001d68:	2000d61c 	.word	0x2000d61c
 8001d6c:	0801cb10 	.word	0x0801cb10
 8001d70:	0801cb28 	.word	0x0801cb28
 8001d74:	2000ce60 	.word	0x2000ce60
 8001d78:	0801cb44 	.word	0x0801cb44
 8001d7c:	2000d22c 	.word	0x2000d22c

08001d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0b4      	sub	sp, #208	; 0xd0
 8001d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d8a:	2230      	movs	r2, #48	; 0x30
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f019 fbf2 	bl	801b578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	2284      	movs	r2, #132	; 0x84
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f019 fbe3 	bl	801b578 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001db2:	f00a fe3b 	bl	800ca2c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <SystemClock_Config+0x174>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a4e      	ldr	r2, [pc, #312]	; (8001ef4 <SystemClock_Config+0x174>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <SystemClock_Config+0x174>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dce:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <SystemClock_Config+0x178>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <SystemClock_Config+0x178>)
 8001dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <SystemClock_Config+0x178>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001de6:	2309      	movs	r3, #9
 8001de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e08:	2319      	movs	r3, #25
 8001e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001e0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e1c:	2309      	movs	r3, #9
 8001e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f00b fe24 	bl	800da74 <HAL_RCC_OscConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e32:	f001 fab5 	bl	80033a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e36:	f00a fe09 	bl	800ca4c <HAL_PWREx_EnableOverDrive>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e40:	f001 faae 	bl	80033a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e44:	230f      	movs	r3, #15
 8001e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001e66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e6a:	2106      	movs	r1, #6
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f00c f8a5 	bl	800dfbc <HAL_RCC_ClockConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001e78:	f001 fa92 	bl	80033a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <SystemClock_Config+0x17c>)
 8001e7e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001e80:	2364      	movs	r3, #100	; 0x64
 8001e82:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001e90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e94:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001e96:	2305      	movs	r3, #5
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001eca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00c fa75 	bl	800e3cc <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8001ee8:	f001 fa5a 	bl	80033a0 <Error_Handler>
  }
}
 8001eec:	bf00      	nop
 8001eee:	37d0      	adds	r7, #208	; 0xd0
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	01b14868 	.word	0x01b14868

08001f00 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f14:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <MX_ADC3_Init+0x9c>)
 8001f16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f42:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <MX_ADC3_Init+0xa0>)
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f62:	f005 fe59 	bl	8007c18 <HAL_ADC_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f6c:	f001 fa18 	bl	80033a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f70:	2304      	movs	r3, #4
 8001f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_ADC3_Init+0x98>)
 8001f82:	f005 fe8d 	bl	8007ca0 <HAL_ADC_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f8c:	f001 fa08 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000d324 	.word	0x2000d324
 8001f9c:	40012200 	.word	0x40012200
 8001fa0:	0f000001 	.word	0x0f000001

08001fa4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <MX_CRC_Init+0x3c>)
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <MX_CRC_Init+0x40>)
 8001fac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_CRC_Init+0x3c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MX_CRC_Init+0x3c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_CRC_Init+0x3c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_CRC_Init+0x3c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_CRC_Init+0x3c>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <MX_CRC_Init+0x3c>)
 8001fce:	f006 fa3b 	bl	8008448 <HAL_CRC_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001fd8:	f001 f9e2 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	2000d0d8 	.word	0x2000d0d8
 8001fe4:	40023000 	.word	0x40023000

08001fe8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_DCMI_Init+0x60>)
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <MX_DCMI_Init+0x64>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_DCMI_Init+0x60>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <MX_DCMI_Init+0x60>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_DCMI_Init+0x60>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_DCMI_Init+0x60>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_DCMI_Init+0x60>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <MX_DCMI_Init+0x60>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_DCMI_Init+0x60>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <MX_DCMI_Init+0x60>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_DCMI_Init+0x60>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <MX_DCMI_Init+0x60>)
 800202a:	2200      	movs	r2, #0
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_DCMI_Init+0x60>)
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_DCMI_Init+0x60>)
 8002036:	f006 faf1 	bl	800861c <HAL_DCMI_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002040:	f001 f9ae 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000d36c 	.word	0x2000d36c
 800204c:	50050000 	.word	0x50050000

08002050 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_DMA2D_Init+0x5c>)
 8002056:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <MX_DMA2D_Init+0x60>)
 8002058:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_DMA2D_Init+0x5c>)
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <MX_DMA2D_Init+0x5c>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <MX_DMA2D_Init+0x5c>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_DMA2D_Init+0x5c>)
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_DMA2D_Init+0x5c>)
 8002074:	2200      	movs	r2, #0
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <MX_DMA2D_Init+0x5c>)
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <MX_DMA2D_Init+0x5c>)
 8002080:	2200      	movs	r2, #0
 8002082:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002084:	4809      	ldr	r0, [pc, #36]	; (80020ac <MX_DMA2D_Init+0x5c>)
 8002086:	f007 f829 	bl	80090dc <HAL_DMA2D_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002090:	f001 f986 	bl	80033a0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002094:	2101      	movs	r1, #1
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_DMA2D_Init+0x5c>)
 8002098:	f007 fa8e 	bl	80095b8 <HAL_DMA2D_ConfigLayer>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80020a2:	f001 f97d 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000d590 	.word	0x2000d590
 80020b0:	4002b000 	.word	0x4002b000

080020b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_I2C1_Init+0x74>)
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <MX_I2C1_Init+0x78>)
 80020bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_I2C1_Init+0x74>)
 80020c0:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <MX_I2C1_Init+0x7c>)
 80020c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_I2C1_Init+0x74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_I2C1_Init+0x74>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_I2C1_Init+0x74>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_I2C1_Init+0x74>)
 80020d8:	2200      	movs	r2, #0
 80020da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_I2C1_Init+0x74>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_I2C1_Init+0x74>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_I2C1_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ee:	480e      	ldr	r0, [pc, #56]	; (8002128 <MX_I2C1_Init+0x74>)
 80020f0:	f009 fc1c 	bl	800b92c <HAL_I2C_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020fa:	f001 f951 	bl	80033a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020fe:	2100      	movs	r1, #0
 8002100:	4809      	ldr	r0, [pc, #36]	; (8002128 <MX_I2C1_Init+0x74>)
 8002102:	f00a f91d 	bl	800c340 <HAL_I2CEx_ConfigAnalogFilter>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800210c:	f001 f948 	bl	80033a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002110:	2100      	movs	r1, #0
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_I2C1_Init+0x74>)
 8002114:	f00a f95f 	bl	800c3d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800211e:	f001 f93f 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000d08c 	.word	0x2000d08c
 800212c:	40005400 	.word	0x40005400
 8002130:	00c0eaff 	.word	0x00c0eaff

08002134 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MX_I2C3_Init+0x74>)
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <MX_I2C3_Init+0x78>)
 800213c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <MX_I2C3_Init+0x7c>)
 8002142:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_I2C3_Init+0x74>)
 800214c:	2201      	movs	r2, #1
 800214e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <MX_I2C3_Init+0x74>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_I2C3_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800216e:	480e      	ldr	r0, [pc, #56]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002170:	f009 fbdc 	bl	800b92c <HAL_I2C_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800217a:	f001 f911 	bl	80033a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800217e:	2100      	movs	r1, #0
 8002180:	4809      	ldr	r0, [pc, #36]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002182:	f00a f8dd 	bl	800c340 <HAL_I2CEx_ConfigAnalogFilter>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800218c:	f001 f908 	bl	80033a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002190:	2100      	movs	r1, #0
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_I2C3_Init+0x74>)
 8002194:	f00a f91f 	bl	800c3d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800219e:	f001 f8ff 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000ce64 	.word	0x2000ce64
 80021ac:	40005c00 	.word	0x40005c00
 80021b0:	00c0eaff 	.word	0x00c0eaff

080021b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2234      	movs	r2, #52	; 0x34
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f019 f9d9 	bl	801b578 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021c8:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <MX_LTDC_Init+0x104>)
 80021ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021d2:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021de:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80021e4:	4b33      	ldr	r3, [pc, #204]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021e6:	2228      	movs	r2, #40	; 0x28
 80021e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80021ea:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021ec:	2209      	movs	r2, #9
 80021ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021f2:	2235      	movs	r2, #53	; 0x35
 80021f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021f8:	220b      	movs	r2, #11
 80021fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <MX_LTDC_Init+0x100>)
 80021fe:	f240 2215 	movw	r2, #533	; 0x215
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <MX_LTDC_Init+0x100>)
 8002206:	f240 121b 	movw	r2, #283	; 0x11b
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <MX_LTDC_Init+0x100>)
 800220e:	f240 2235 	movw	r2, #565	; 0x235
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <MX_LTDC_Init+0x100>)
 8002216:	f240 121d 	movw	r2, #285	; 0x11d
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <MX_LTDC_Init+0x100>)
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <MX_LTDC_Init+0x100>)
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <MX_LTDC_Init+0x100>)
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002234:	481f      	ldr	r0, [pc, #124]	; (80022b4 <MX_LTDC_Init+0x100>)
 8002236:	f00a f91b 	bl	800c470 <HAL_LTDC_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002240:	f001 f8ae 	bl	80033a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002248:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800224c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002252:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002256:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002258:	2302      	movs	r3, #2
 800225a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800225c:	23ff      	movs	r3, #255	; 0xff
 800225e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002264:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002268:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800226a:	2307      	movs	r3, #7
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800226e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002274:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800227a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <MX_LTDC_Init+0x100>)
 800229a:	f00a f9b9 	bl	800c610 <HAL_LTDC_ConfigLayer>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80022a4:	f001 f87c 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 80022a8:	f003 fa06 	bl	80056b8 <LCD_Init>

  /* USER CODE END LTDC_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	3738      	adds	r7, #56	; 0x38
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	2000d27c 	.word	0x2000d27c
 80022b8:	40016800 	.word	0x40016800

080022bc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <MX_QUADSPI_Init+0x80>)
 80022c4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022ce:	2204      	movs	r2, #4
 80022d0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022d4:	2210      	movs	r2, #16
 80022d6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022da:	2218      	movs	r2, #24
 80022dc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022e0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80022e4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80022f8:	480f      	ldr	r0, [pc, #60]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 80022fa:	f00a fbf7 	bl	800caec <HAL_QSPI_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002304:	f001 f84c 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8002308:	480b      	ldr	r0, [pc, #44]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 800230a:	f003 fd7f 	bl	8005e0c <DISCO_QSPI_ResetMemory>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_QUADSPI_Init+0x5c>
 8002314:	f001 f844 	bl	80033a0 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8002318:	4807      	ldr	r0, [pc, #28]	; (8002338 <MX_QUADSPI_Init+0x7c>)
 800231a:	f003 fdb9 	bl	8005e90 <DISCO_QSPI_DummyCyclesCfg>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_QUADSPI_Init+0x6c>
 8002324:	f001 f83c 	bl	80033a0 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8002328:	f003 fd3e 	bl	8005da8 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 800232c:	205c      	movs	r0, #92	; 0x5c
 800232e:	f006 f801 	bl	8008334 <HAL_NVIC_DisableIRQ>


  /* USER CODE END QUADSPI_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000d69c 	.word	0x2000d69c
 800233c:	a0001000 	.word	0xa0001000

08002340 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b092      	sub	sp, #72	; 0x48
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]
 8002356:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800235c:	463b      	mov	r3, r7
 800235e:	222c      	movs	r2, #44	; 0x2c
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f019 f908 	bl	801b578 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <MX_RTC_Init+0x144>)
 800236a:	4a47      	ldr	r2, [pc, #284]	; (8002488 <MX_RTC_Init+0x148>)
 800236c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800236e:	4b45      	ldr	r3, [pc, #276]	; (8002484 <MX_RTC_Init+0x144>)
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <MX_RTC_Init+0x144>)
 8002376:	227f      	movs	r2, #127	; 0x7f
 8002378:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <MX_RTC_Init+0x144>)
 800237c:	22ff      	movs	r2, #255	; 0xff
 800237e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002380:	4b40      	ldr	r3, [pc, #256]	; (8002484 <MX_RTC_Init+0x144>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <MX_RTC_Init+0x144>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800238c:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <MX_RTC_Init+0x144>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002392:	483c      	ldr	r0, [pc, #240]	; (8002484 <MX_RTC_Init+0x144>)
 8002394:	f00c fd4e 	bl	800ee34 <HAL_RTC_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800239e:	f000 ffff 	bl	80033a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023c0:	2201      	movs	r2, #1
 80023c2:	4619      	mov	r1, r3
 80023c4:	482f      	ldr	r0, [pc, #188]	; (8002484 <MX_RTC_Init+0x144>)
 80023c6:	f00c fdc7 	bl	800ef58 <HAL_RTC_SetTime>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80023d0:	f000 ffe6 	bl	80033a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80023da:	2301      	movs	r3, #1
 80023dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80023ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f0:	2201      	movs	r2, #1
 80023f2:	4619      	mov	r1, r3
 80023f4:	4823      	ldr	r0, [pc, #140]	; (8002484 <MX_RTC_Init+0x144>)
 80023f6:	f00c fe6d 	bl	800f0d4 <HAL_RTC_SetDate>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8002400:	f000 ffce 	bl	80033a0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002404:	2300      	movs	r3, #0
 8002406:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002408:	2300      	movs	r3, #0
 800240a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800240c:	2300      	movs	r3, #0
 800240e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002410:	2300      	movs	r3, #0
 8002412:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800242e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002434:	463b      	mov	r3, r7
 8002436:	2201      	movs	r2, #1
 8002438:	4619      	mov	r1, r3
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <MX_RTC_Init+0x144>)
 800243c:	f00c fef2 	bl	800f224 <HAL_RTC_SetAlarm>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8002446:	f000 ffab 	bl	80033a0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800244a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002450:	463b      	mov	r3, r7
 8002452:	2201      	movs	r2, #1
 8002454:	4619      	mov	r1, r3
 8002456:	480b      	ldr	r0, [pc, #44]	; (8002484 <MX_RTC_Init+0x144>)
 8002458:	f00c fee4 	bl	800f224 <HAL_RTC_SetAlarm>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8002462:	f000 ff9d 	bl	80033a0 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002466:	2202      	movs	r2, #2
 8002468:	2100      	movs	r1, #0
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <MX_RTC_Init+0x144>)
 800246c:	f00d f864 	bl	800f538 <HAL_RTCEx_SetTimeStamp>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8002476:	f000 ff93 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	3748      	adds	r7, #72	; 0x48
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000d440 	.word	0x2000d440
 8002488:	40002800 	.word	0x40002800

0800248c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002490:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <MX_SAI2_Init+0x168>)
 8002492:	4a59      	ldr	r2, [pc, #356]	; (80025f8 <MX_SAI2_Init+0x16c>)
 8002494:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002496:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <MX_SAI2_Init+0x168>)
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <MX_SAI2_Init+0x168>)
 800249e:	2200      	movs	r2, #0
 80024a0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 80024a2:	4b54      	ldr	r3, [pc, #336]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80024a8:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80024ae:	4b51      	ldr	r3, [pc, #324]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80024b4:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c0:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80024c2:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80024c8:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024d0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80024d4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80024d6:	4b47      	ldr	r3, [pc, #284]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80024dc:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024de:	2200      	movs	r2, #0
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80024e2:	4b44      	ldr	r3, [pc, #272]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024f0:	2240      	movs	r2, #64	; 0x40
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80024f4:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024f6:	2220      	movs	r2, #32
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <MX_SAI2_Init+0x168>)
 80024fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002500:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002502:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <MX_SAI2_Init+0x168>)
 8002504:	2200      	movs	r2, #0
 8002506:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002508:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <MX_SAI2_Init+0x168>)
 800250a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800250e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002510:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <MX_SAI2_Init+0x168>)
 8002512:	2200      	movs	r2, #0
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <MX_SAI2_Init+0x168>)
 8002518:	2200      	movs	r2, #0
 800251a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <MX_SAI2_Init+0x168>)
 800251e:	2204      	movs	r2, #4
 8002520:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <MX_SAI2_Init+0x168>)
 8002524:	2205      	movs	r2, #5
 8002526:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002528:	4832      	ldr	r0, [pc, #200]	; (80025f4 <MX_SAI2_Init+0x168>)
 800252a:	f00d f85b 	bl	800f5e4 <HAL_SAI_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_SAI2_Init+0xac>
  {
    Error_Handler();
 8002534:	f000 ff34 	bl	80033a0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002538:	4b30      	ldr	r3, [pc, #192]	; (80025fc <MX_SAI2_Init+0x170>)
 800253a:	4a31      	ldr	r2, [pc, #196]	; (8002600 <MX_SAI2_Init+0x174>)
 800253c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800253e:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <MX_SAI2_Init+0x170>)
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <MX_SAI2_Init+0x170>)
 8002546:	2203      	movs	r2, #3
 8002548:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800254a:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <MX_SAI2_Init+0x170>)
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <MX_SAI2_Init+0x170>)
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <MX_SAI2_Init+0x170>)
 8002558:	2201      	movs	r2, #1
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <MX_SAI2_Init+0x170>)
 800255e:	2201      	movs	r2, #1
 8002560:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <MX_SAI2_Init+0x170>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002568:	4b24      	ldr	r3, [pc, #144]	; (80025fc <MX_SAI2_Init+0x170>)
 800256a:	2201      	movs	r2, #1
 800256c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <MX_SAI2_Init+0x170>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <MX_SAI2_Init+0x170>)
 8002576:	2200      	movs	r2, #0
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <MX_SAI2_Init+0x170>)
 800257c:	2200      	movs	r2, #0
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <MX_SAI2_Init+0x170>)
 8002582:	2200      	movs	r2, #0
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 64;
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <MX_SAI2_Init+0x170>)
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <MX_SAI2_Init+0x170>)
 800258e:	2220      	movs	r2, #32
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <MX_SAI2_Init+0x170>)
 8002594:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002598:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <MX_SAI2_Init+0x170>)
 800259c:	2200      	movs	r2, #0
 800259e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <MX_SAI2_Init+0x170>)
 80025a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025a6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <MX_SAI2_Init+0x170>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <MX_SAI2_Init+0x170>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 4;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_SAI2_Init+0x170>)
 80025b6:	2204      	movs	r2, #4
 80025b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <MX_SAI2_Init+0x170>)
 80025bc:	220a      	movs	r2, #10
 80025be:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80025c0:	480e      	ldr	r0, [pc, #56]	; (80025fc <MX_SAI2_Init+0x170>)
 80025c2:	f00d f80f 	bl	800f5e4 <HAL_SAI_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_SAI2_Init+0x144>
  {
    Error_Handler();
 80025cc:	f000 fee8 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_SAI2_Init+0x168>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <MX_SAI2_Init+0x168>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025de:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_SAI2_Init+0x170>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <MX_SAI2_Init+0x170>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025ee:	601a      	str	r2, [r3, #0]

  /* USER CODE END SAI2_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000d008 	.word	0x2000d008
 80025f8:	40015c04 	.word	0x40015c04
 80025fc:	2000cddc 	.word	0x2000cddc
 8002600:	40015c24 	.word	0x40015c24

08002604 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_SDMMC1_SD_Init+0x38>)
 800260a:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <MX_SDMMC1_SD_Init+0x3c>)
 800260c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_SDMMC1_SD_Init+0x38>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_SDMMC1_SD_Init+0x38>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_SDMMC1_SD_Init+0x38>)
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_SDMMC1_SD_Init+0x38>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <MX_SDMMC1_SD_Init+0x38>)
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <MX_SDMMC1_SD_Init+0x38>)
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	2000d15c 	.word	0x2000d15c
 8002640:	40012c00 	.word	0x40012c00

08002644 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 800264a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800264e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 8002652:	2200      	movs	r2, #0
 8002654:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 800266a:	2200      	movs	r2, #0
 800266c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 8002688:	2200      	movs	r2, #0
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800268c:	4804      	ldr	r0, [pc, #16]	; (80026a0 <MX_SPDIFRX_Init+0x5c>)
 800268e:	f00e fc9f 	bl	8010fd0 <HAL_SPDIFRX_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002698:	f000 fe82 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2000cfbc 	.word	0x2000cfbc

080026a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b09a      	sub	sp, #104	; 0x68
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
 80026d4:	615a      	str	r2, [r3, #20]
 80026d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	222c      	movs	r2, #44	; 0x2c
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f018 ff4a 	bl	801b578 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <MX_TIM1_Init+0x150>)
 80026e6:	4a44      	ldr	r2, [pc, #272]	; (80027f8 <MX_TIM1_Init+0x154>)
 80026e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1999;
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <MX_TIM1_Init+0x150>)
 80026ec:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80026f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <MX_TIM1_Init+0x150>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80026f8:	4b3e      	ldr	r3, [pc, #248]	; (80027f4 <MX_TIM1_Init+0x150>)
 80026fa:	2263      	movs	r2, #99	; 0x63
 80026fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <MX_TIM1_Init+0x150>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <MX_TIM1_Init+0x150>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270a:	4b3a      	ldr	r3, [pc, #232]	; (80027f4 <MX_TIM1_Init+0x150>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002710:	4838      	ldr	r0, [pc, #224]	; (80027f4 <MX_TIM1_Init+0x150>)
 8002712:	f00e fcb9 	bl	8011088 <HAL_TIM_Base_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800271c:	f000 fe40 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002724:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002726:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800272a:	4619      	mov	r1, r3
 800272c:	4831      	ldr	r0, [pc, #196]	; (80027f4 <MX_TIM1_Init+0x150>)
 800272e:	f00f f907 	bl	8011940 <HAL_TIM_ConfigClockSource>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002738:	f000 fe32 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800273c:	482d      	ldr	r0, [pc, #180]	; (80027f4 <MX_TIM1_Init+0x150>)
 800273e:	f00e fd73 	bl	8011228 <HAL_TIM_PWM_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002748:	f000 fe2a 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002758:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800275c:	4619      	mov	r1, r3
 800275e:	4825      	ldr	r0, [pc, #148]	; (80027f4 <MX_TIM1_Init+0x150>)
 8002760:	f00f fd9a 	bl	8012298 <HAL_TIMEx_MasterConfigSynchronization>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800276a:	f000 fe19 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276e:	2360      	movs	r3, #96	; 0x60
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8002772:	2332      	movs	r3, #50	; 0x32
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002776:	2300      	movs	r3, #0
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800277a:	2300      	movs	r3, #0
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800278a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800278e:	2200      	movs	r2, #0
 8002790:	4619      	mov	r1, r3
 8002792:	4818      	ldr	r0, [pc, #96]	; (80027f4 <MX_TIM1_Init+0x150>)
 8002794:	f00e ffc4 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800279e:	f000 fdff 	bl	80033a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4807      	ldr	r0, [pc, #28]	; (80027f4 <MX_TIM1_Init+0x150>)
 80027d8:	f00f fdec 	bl	80123b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80027e2:	f000 fddd 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027e6:	4803      	ldr	r0, [pc, #12]	; (80027f4 <MX_TIM1_Init+0x150>)
 80027e8:	f001 fb1e 	bl	8003e28 <HAL_TIM_MspPostInit>

}
 80027ec:	bf00      	nop
 80027ee:	3768      	adds	r7, #104	; 0x68
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	2000d460 	.word	0x2000d460
 80027f8:	40010000 	.word	0x40010000

080027fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	; 0x38
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281c:	463b      	mov	r3, r7
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	615a      	str	r2, [r3, #20]
 800282c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800282e:	4b33      	ldr	r3, [pc, #204]	; (80028fc <MX_TIM2_Init+0x100>)
 8002830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002834:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8002836:	4b31      	ldr	r3, [pc, #196]	; (80028fc <MX_TIM2_Init+0x100>)
 8002838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800283c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283e:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <MX_TIM2_Init+0x100>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <MX_TIM2_Init+0x100>)
 8002846:	2263      	movs	r2, #99	; 0x63
 8002848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <MX_TIM2_Init+0x100>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <MX_TIM2_Init+0x100>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002856:	4829      	ldr	r0, [pc, #164]	; (80028fc <MX_TIM2_Init+0x100>)
 8002858:	f00e fc16 	bl	8011088 <HAL_TIM_Base_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002862:	f000 fd9d 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800286c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002870:	4619      	mov	r1, r3
 8002872:	4822      	ldr	r0, [pc, #136]	; (80028fc <MX_TIM2_Init+0x100>)
 8002874:	f00f f864 	bl	8011940 <HAL_TIM_ConfigClockSource>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800287e:	f000 fd8f 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002882:	481e      	ldr	r0, [pc, #120]	; (80028fc <MX_TIM2_Init+0x100>)
 8002884:	f00e fcd0 	bl	8011228 <HAL_TIM_PWM_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800288e:	f000 fd87 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	4816      	ldr	r0, [pc, #88]	; (80028fc <MX_TIM2_Init+0x100>)
 80028a2:	f00f fcf9 	bl	8012298 <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80028ac:	f000 fd78 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b0:	2360      	movs	r3, #96	; 0x60
 80028b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80028b4:	2332      	movs	r3, #50	; 0x32
 80028b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	2200      	movs	r2, #0
 80028c4:	4619      	mov	r1, r3
 80028c6:	480d      	ldr	r0, [pc, #52]	; (80028fc <MX_TIM2_Init+0x100>)
 80028c8:	f00e ff2a 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80028d2:	f000 fd65 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d6:	463b      	mov	r3, r7
 80028d8:	2204      	movs	r2, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4807      	ldr	r0, [pc, #28]	; (80028fc <MX_TIM2_Init+0x100>)
 80028de:	f00e ff1f 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80028e8:	f000 fd5a 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <MX_TIM2_Init+0x100>)
 80028ee:	f001 fa9b 	bl	8003e28 <HAL_TIM_MspPostInit>

}
 80028f2:	bf00      	nop
 80028f4:	3738      	adds	r7, #56	; 0x38
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000d5d0 	.word	0x2000d5d0

08002900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	; 0x38
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	615a      	str	r2, [r3, #20]
 8002930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002932:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <MX_TIM3_Init+0x128>)
 8002934:	4a3d      	ldr	r2, [pc, #244]	; (8002a2c <MX_TIM3_Init+0x12c>)
 8002936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <MX_TIM3_Init+0x128>)
 800293a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800293e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002940:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <MX_TIM3_Init+0x128>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002946:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <MX_TIM3_Init+0x128>)
 8002948:	2263      	movs	r2, #99	; 0x63
 800294a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294c:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <MX_TIM3_Init+0x128>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002952:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <MX_TIM3_Init+0x128>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002958:	4833      	ldr	r0, [pc, #204]	; (8002a28 <MX_TIM3_Init+0x128>)
 800295a:	f00e fb95 	bl	8011088 <HAL_TIM_Base_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002964:	f000 fd1c 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800296e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002972:	4619      	mov	r1, r3
 8002974:	482c      	ldr	r0, [pc, #176]	; (8002a28 <MX_TIM3_Init+0x128>)
 8002976:	f00e ffe3 	bl	8011940 <HAL_TIM_ConfigClockSource>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002980:	f000 fd0e 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002984:	4828      	ldr	r0, [pc, #160]	; (8002a28 <MX_TIM3_Init+0x128>)
 8002986:	f00e fc4f 	bl	8011228 <HAL_TIM_PWM_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002990:	f000 fd06 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4821      	ldr	r0, [pc, #132]	; (8002a28 <MX_TIM3_Init+0x128>)
 80029a4:	f00f fc78 	bl	8012298 <HAL_TIMEx_MasterConfigSynchronization>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80029ae:	f000 fcf7 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b2:	2360      	movs	r3, #96	; 0x60
 80029b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80029b6:	2332      	movs	r3, #50	; 0x32
 80029b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c2:	463b      	mov	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4817      	ldr	r0, [pc, #92]	; (8002a28 <MX_TIM3_Init+0x128>)
 80029ca:	f00e fea9 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80029d4:	f000 fce4 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029d8:	463b      	mov	r3, r7
 80029da:	2204      	movs	r2, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4812      	ldr	r0, [pc, #72]	; (8002a28 <MX_TIM3_Init+0x128>)
 80029e0:	f00e fe9e 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80029ea:	f000 fcd9 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ee:	463b      	mov	r3, r7
 80029f0:	2208      	movs	r2, #8
 80029f2:	4619      	mov	r1, r3
 80029f4:	480c      	ldr	r0, [pc, #48]	; (8002a28 <MX_TIM3_Init+0x128>)
 80029f6:	f00e fe93 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002a00:	f000 fcce 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a04:	463b      	mov	r3, r7
 8002a06:	220c      	movs	r2, #12
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4807      	ldr	r0, [pc, #28]	; (8002a28 <MX_TIM3_Init+0x128>)
 8002a0c:	f00e fe88 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002a16:	f000 fcc3 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a1a:	4803      	ldr	r0, [pc, #12]	; (8002a28 <MX_TIM3_Init+0x128>)
 8002a1c:	f001 fa04 	bl	8003e28 <HAL_TIM_MspPostInit>

}
 8002a20:	bf00      	nop
 8002a22:	3738      	adds	r7, #56	; 0x38
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000d230 	.word	0x2000d230
 8002a2c:	40000400 	.word	0x40000400

08002a30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a50:	463b      	mov	r3, r7
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	611a      	str	r2, [r3, #16]
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002a64:	4a2d      	ldr	r2, [pc, #180]	; (8002b1c <MX_TIM5_Init+0xec>)
 8002a66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002a6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002a78:	2263      	movs	r2, #99	; 0x63
 8002a7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a88:	4823      	ldr	r0, [pc, #140]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002a8a:	f00e fafd 	bl	8011088 <HAL_TIM_Base_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002a94:	f000 fc84 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	481c      	ldr	r0, [pc, #112]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002aa6:	f00e ff4b 	bl	8011940 <HAL_TIM_ConfigClockSource>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002ab0:	f000 fc76 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002ab4:	4818      	ldr	r0, [pc, #96]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002ab6:	f00e fbb7 	bl	8011228 <HAL_TIM_PWM_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002ac0:	f000 fc6e 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4811      	ldr	r0, [pc, #68]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002ad4:	f00f fbe0 	bl	8012298 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002ade:	f000 fc5f 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae2:	2360      	movs	r3, #96	; 0x60
 8002ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8002ae6:	2332      	movs	r3, #50	; 0x32
 8002ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002af2:	463b      	mov	r3, r7
 8002af4:	220c      	movs	r2, #12
 8002af6:	4619      	mov	r1, r3
 8002af8:	4807      	ldr	r0, [pc, #28]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002afa:	f00e fe11 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002b04:	f000 fc4c 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b08:	4803      	ldr	r0, [pc, #12]	; (8002b18 <MX_TIM5_Init+0xe8>)
 8002b0a:	f001 f98d 	bl	8003e28 <HAL_TIM_MspPostInit>

}
 8002b0e:	bf00      	nop
 8002b10:	3738      	adds	r7, #56	; 0x38
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000d1e0 	.word	0x2000d1e0
 8002b1c:	40000c00 	.word	0x40000c00

08002b20 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <MX_TIM8_Init+0xa4>)
 8002b42:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b56:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b6a:	4815      	ldr	r0, [pc, #84]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b6c:	f00e fa8c 	bl	8011088 <HAL_TIM_Base_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002b76:	f000 fc13 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b80:	f107 0310 	add.w	r3, r7, #16
 8002b84:	4619      	mov	r1, r3
 8002b86:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002b88:	f00e feda 	bl	8011940 <HAL_TIM_ConfigClockSource>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002b92:	f000 fc05 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <MX_TIM8_Init+0xa0>)
 8002ba8:	f00f fb76 	bl	8012298 <HAL_TIMEx_MasterConfigSynchronization>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002bb2:	f000 fbf5 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000cf10 	.word	0x2000cf10
 8002bc4:	40010400 	.word	0x40010400

08002bc8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bce:	f107 0320 	add.w	r3, r7, #32
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	611a      	str	r2, [r3, #16]
 8002bea:	615a      	str	r2, [r3, #20]
 8002bec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <MX_TIM12_Init+0xc0>)
 8002bf2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 999;
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002bf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bfa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfc:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002c04:	2263      	movs	r2, #99	; 0x63
 8002c06:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c08:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002c14:	481b      	ldr	r0, [pc, #108]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002c16:	f00e fa37 	bl	8011088 <HAL_TIM_Base_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002c20:	f000 fbbe 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c28:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002c2a:	f107 0320 	add.w	r3, r7, #32
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4814      	ldr	r0, [pc, #80]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002c32:	f00e fe85 	bl	8011940 <HAL_TIM_ConfigClockSource>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002c3c:	f000 fbb0 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c40:	4810      	ldr	r0, [pc, #64]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002c42:	f00e faf1 	bl	8011228 <HAL_TIM_PWM_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002c4c:	f000 fba8 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c50:	2360      	movs	r3, #96	; 0x60
 8002c52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002c54:	2332      	movs	r3, #50	; 0x32
 8002c56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	4619      	mov	r1, r3
 8002c66:	4807      	ldr	r0, [pc, #28]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002c68:	f00e fd5a 	bl	8011720 <HAL_TIM_PWM_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002c72:	f000 fb95 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002c76:	4803      	ldr	r0, [pc, #12]	; (8002c84 <MX_TIM12_Init+0xbc>)
 8002c78:	f001 f8d6 	bl	8003e28 <HAL_TIM_MspPostInit>

}
 8002c7c:	bf00      	nop
 8002c7e:	3730      	adds	r7, #48	; 0x30
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000d61c 	.word	0x2000d61c
 8002c88:	40001800 	.word	0x40001800

08002c8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <MX_USART1_UART_Init+0x5c>)
 8002c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_USART1_UART_Init+0x58>)
 8002cd0:	f00f fc0c 	bl	80124ec <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cda:	f000 fb61 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000d3bc 	.word	0x2000d3bc
 8002ce8:	40011000 	.word	0x40011000

08002cec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002cf2:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <MX_USART6_UART_Init+0x5c>)
 8002cf4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cfc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d04:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d12:	220c      	movs	r2, #12
 8002d14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d2e:	4805      	ldr	r0, [pc, #20]	; (8002d44 <MX_USART6_UART_Init+0x58>)
 8002d30:	f00f fbdc 	bl	80124ec <HAL_UART_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002d3a:	f000 fb31 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000d50c 	.word	0x2000d50c
 8002d48:	40011400 	.word	0x40011400

08002d4c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <MX_DMA_Init+0xd0>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <MX_DMA_Init+0xd0>)
 8002d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <MX_DMA_Init+0xd0>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <MX_DMA_Init+0xd8>)
 8002d6e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d82:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d92:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d94:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d9a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002d9c:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002da4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da8:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002dac:	2204      	movs	r2, #4
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002db2:	2203      	movs	r2, #3
 8002db4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002dc2:	4817      	ldr	r0, [pc, #92]	; (8002e20 <MX_DMA_Init+0xd4>)
 8002dc4:	f005 fd74 	bl	80088b0 <HAL_DMA_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 8002dce:	f000 fae7 	bl	80033a0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	2038      	movs	r0, #56	; 0x38
 8002dd8:	f005 fa82 	bl	80082e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ddc:	2038      	movs	r0, #56	; 0x38
 8002dde:	f005 fa9b 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2105      	movs	r1, #5
 8002de6:	2039      	movs	r0, #57	; 0x39
 8002de8:	f005 fa7a 	bl	80082e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002dec:	2039      	movs	r0, #57	; 0x39
 8002dee:	f005 fa93 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2105      	movs	r1, #5
 8002df6:	203c      	movs	r0, #60	; 0x3c
 8002df8:	f005 fa72 	bl	80082e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002dfc:	203c      	movs	r0, #60	; 0x3c
 8002dfe:	f005 fa8b 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2105      	movs	r1, #5
 8002e06:	2046      	movs	r0, #70	; 0x46
 8002e08:	f005 fa6a 	bl	80082e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002e0c:	2046      	movs	r0, #70	; 0x46
 8002e0e:	f005 fa83 	bl	8008318 <HAL_NVIC_EnableIRQ>

}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	2000ceb0 	.word	0x2000ceb0
 8002e24:	40026410 	.word	0x40026410

08002e28 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
 8002e3c:	615a      	str	r2, [r3, #20]
 8002e3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <MX_FMC_Init+0xa4>)
 8002e44:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002e52:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e54:	2204      	movs	r2, #4
 8002e56:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e78:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002e90:	2304      	movs	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002e94:	2307      	movs	r3, #7
 8002e96:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <MX_FMC_Init+0xa0>)
 8002eaa:	f00e f812 	bl	8010ed2 <HAL_SDRAM_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002eb4:	f000 fa74 	bl	80033a0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002eb8:	f240 6003 	movw	r0, #1539	; 0x603
 8002ebc:	f003 f972 	bl	80061a4 <DISCO_SDRAM_Initialization_sequence>

  /* USER CODE END FMC_Init 2 */
}
 8002ec0:	bf00      	nop
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000d668 	.word	0x2000d668
 8002ecc:	a0000140 	.word	0xa0000140

08002ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b090      	sub	sp, #64	; 0x40
 8002ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ee6:	4baf      	ldr	r3, [pc, #700]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4aae      	ldr	r2, [pc, #696]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002eec:	f043 0310 	orr.w	r3, r3, #16
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4bac      	ldr	r3, [pc, #688]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002efe:	4ba9      	ldr	r3, [pc, #676]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4aa8      	ldr	r2, [pc, #672]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4ba6      	ldr	r3, [pc, #664]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	4ba3      	ldr	r3, [pc, #652]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4aa2      	ldr	r2, [pc, #648]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4ba0      	ldr	r3, [pc, #640]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2e:	4b9d      	ldr	r3, [pc, #628]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a9c      	ldr	r2, [pc, #624]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f34:	f043 0308 	orr.w	r3, r3, #8
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b9a      	ldr	r3, [pc, #616]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f46:	4b97      	ldr	r3, [pc, #604]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a96      	ldr	r2, [pc, #600]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	4b91      	ldr	r3, [pc, #580]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a90      	ldr	r2, [pc, #576]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b8e      	ldr	r3, [pc, #568]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002f76:	4b8b      	ldr	r3, [pc, #556]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a8a      	ldr	r2, [pc, #552]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f8e:	4b85      	ldr	r3, [pc, #532]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a84      	ldr	r2, [pc, #528]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a7e      	ldr	r2, [pc, #504]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fbe:	4b79      	ldr	r3, [pc, #484]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a78      	ldr	r2, [pc, #480]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fc4:	f043 0320 	orr.w	r3, r3, #32
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a72      	ldr	r2, [pc, #456]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <MX_GPIO_Init+0x2d4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	486d      	ldr	r0, [pc, #436]	; (80031a8 <MX_GPIO_Init+0x2d8>)
 8002ff4:	f006 fede 	bl	8009db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	210e      	movs	r1, #14
 8002ffc:	486b      	ldr	r0, [pc, #428]	; (80031ac <MX_GPIO_Init+0x2dc>)
 8002ffe:	f006 fed9 	bl	8009db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003002:	2201      	movs	r2, #1
 8003004:	2108      	movs	r1, #8
 8003006:	486a      	ldr	r0, [pc, #424]	; (80031b0 <MX_GPIO_Init+0x2e0>)
 8003008:	f006 fed4 	bl	8009db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800300c:	2201      	movs	r2, #1
 800300e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003012:	4866      	ldr	r0, [pc, #408]	; (80031ac <MX_GPIO_Init+0x2dc>)
 8003014:	f006 fece 	bl	8009db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800301e:	4865      	ldr	r0, [pc, #404]	; (80031b4 <MX_GPIO_Init+0x2e4>)
 8003020:	f006 fec8 	bl	8009db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003024:	2200      	movs	r2, #0
 8003026:	21c8      	movs	r1, #200	; 0xc8
 8003028:	4863      	ldr	r0, [pc, #396]	; (80031b8 <MX_GPIO_Init+0x2e8>)
 800302a:	f006 fec3 	bl	8009db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800302e:	2308      	movs	r3, #8
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003032:	2300      	movs	r3, #0
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800303a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800303e:	4619      	mov	r1, r3
 8003040:	485e      	ldr	r0, [pc, #376]	; (80031bc <MX_GPIO_Init+0x2ec>)
 8003042:	f006 fbe7 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003046:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003054:	2303      	movs	r3, #3
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003058:	230b      	movs	r3, #11
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800305c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003060:	4619      	mov	r1, r3
 8003062:	4855      	ldr	r0, [pc, #340]	; (80031b8 <MX_GPIO_Init+0x2e8>)
 8003064:	f006 fbd6 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003068:	f643 4323 	movw	r3, #15395	; 0x3c23
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003076:	2303      	movs	r3, #3
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800307a:	230a      	movs	r3, #10
 800307c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003082:	4619      	mov	r1, r3
 8003084:	484e      	ldr	r0, [pc, #312]	; (80031c0 <MX_GPIO_Init+0x2f0>)
 8003086:	f006 fbc5 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800308a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003090:	2300      	movs	r3, #0
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800309c:	4619      	mov	r1, r3
 800309e:	4849      	ldr	r0, [pc, #292]	; (80031c4 <MX_GPIO_Init+0x2f4>)
 80030a0:	f006 fbb8 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80030a4:	2340      	movs	r3, #64	; 0x40
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80030a8:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <MX_GPIO_Init+0x2f8>)
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80030b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b4:	4619      	mov	r1, r3
 80030b6:	483c      	ldr	r0, [pc, #240]	; (80031a8 <MX_GPIO_Init+0x2d8>)
 80030b8:	f006 fbac 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80030bc:	2320      	movs	r3, #32
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c0:	2301      	movs	r3, #1
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80030cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030d0:	4619      	mov	r1, r3
 80030d2:	4835      	ldr	r0, [pc, #212]	; (80031a8 <MX_GPIO_Init+0x2d8>)
 80030d4:	f006 fb9e 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80030d8:	f241 030e 	movw	r3, #4110	; 0x100e
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	2301      	movs	r3, #1
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ee:	4619      	mov	r1, r3
 80030f0:	482e      	ldr	r0, [pc, #184]	; (80031ac <MX_GPIO_Init+0x2dc>)
 80030f2:	f006 fb8f 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80030f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030fc:	2300      	movs	r3, #0
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003108:	4619      	mov	r1, r3
 800310a:	4830      	ldr	r0, [pc, #192]	; (80031cc <MX_GPIO_Init+0x2fc>)
 800310c:	f006 fb82 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003110:	2308      	movs	r3, #8
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003114:	2301      	movs	r3, #1
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2300      	movs	r3, #0
 800311e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003124:	4619      	mov	r1, r3
 8003126:	4822      	ldr	r0, [pc, #136]	; (80031b0 <MX_GPIO_Init+0x2e0>)
 8003128:	f006 fb74 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800312c:	2310      	movs	r3, #16
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003130:	2300      	movs	r3, #0
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800313c:	4619      	mov	r1, r3
 800313e:	481a      	ldr	r0, [pc, #104]	; (80031a8 <MX_GPIO_Init+0x2d8>)
 8003140:	f006 fb68 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003144:	f248 0304 	movw	r3, #32772	; 0x8004
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314a:	2300      	movs	r3, #0
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003156:	4619      	mov	r1, r3
 8003158:	4816      	ldr	r0, [pc, #88]	; (80031b4 <MX_GPIO_Init+0x2e4>)
 800315a:	f006 fb5b 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800315e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003164:	2301      	movs	r3, #1
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003174:	4619      	mov	r1, r3
 8003176:	480f      	ldr	r0, [pc, #60]	; (80031b4 <MX_GPIO_Init+0x2e4>)
 8003178:	f006 fb4c 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 800317c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003182:	2300      	movs	r3, #0
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800318e:	4619      	mov	r1, r3
 8003190:	4806      	ldr	r0, [pc, #24]	; (80031ac <MX_GPIO_Init+0x2dc>)
 8003192:	f006 fb3f 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <MX_GPIO_Init+0x300>)
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e017      	b.n	80031d4 <MX_GPIO_Init+0x304>
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40020c00 	.word	0x40020c00
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40022800 	.word	0x40022800
 80031b4:	40021c00 	.word	0x40021c00
 80031b8:	40021800 	.word	0x40021800
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40020400 	.word	0x40020400
 80031c4:	40022400 	.word	0x40022400
 80031c8:	10120000 	.word	0x10120000
 80031cc:	40020800 	.word	0x40020800
 80031d0:	10110000 	.word	0x10110000
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80031d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031da:	4619      	mov	r1, r3
 80031dc:	4844      	ldr	r0, [pc, #272]	; (80032f0 <MX_GPIO_Init+0x420>)
 80031de:	f006 fb19 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80031e2:	2310      	movs	r3, #16
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ee:	2303      	movs	r3, #3
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031f2:	230a      	movs	r3, #10
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80031f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031fa:	4619      	mov	r1, r3
 80031fc:	483d      	ldr	r0, [pc, #244]	; (80032f4 <MX_GPIO_Init+0x424>)
 80031fe:	f006 fb09 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003202:	23c8      	movs	r3, #200	; 0xc8
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003206:	2301      	movs	r3, #1
 8003208:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003216:	4619      	mov	r1, r3
 8003218:	4837      	ldr	r0, [pc, #220]	; (80032f8 <MX_GPIO_Init+0x428>)
 800321a:	f006 fafb 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800321e:	2305      	movs	r3, #5
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322a:	2303      	movs	r3, #3
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800322e:	230a      	movs	r3, #10
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003236:	4619      	mov	r1, r3
 8003238:	4830      	ldr	r0, [pc, #192]	; (80032fc <MX_GPIO_Init+0x42c>)
 800323a:	f006 faeb 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800323e:	2332      	movs	r3, #50	; 0x32
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	2303      	movs	r3, #3
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800324e:	230b      	movs	r3, #11
 8003250:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003256:	4619      	mov	r1, r3
 8003258:	4828      	ldr	r0, [pc, #160]	; (80032fc <MX_GPIO_Init+0x42c>)
 800325a:	f006 fadb 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800325e:	2304      	movs	r3, #4
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003262:	2300      	movs	r3, #0
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800326e:	4619      	mov	r1, r3
 8003270:	4821      	ldr	r0, [pc, #132]	; (80032f8 <MX_GPIO_Init+0x428>)
 8003272:	f006 facf 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003276:	2386      	movs	r3, #134	; 0x86
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003286:	230b      	movs	r3, #11
 8003288:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800328e:	4619      	mov	r1, r3
 8003290:	481b      	ldr	r0, [pc, #108]	; (8003300 <MX_GPIO_Init+0x430>)
 8003292:	f006 fabf 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003296:	2328      	movs	r3, #40	; 0x28
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80032a6:	230a      	movs	r3, #10
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ae:	4619      	mov	r1, r3
 80032b0:	4813      	ldr	r0, [pc, #76]	; (8003300 <MX_GPIO_Init+0x430>)
 80032b2:	f006 faaf 	bl	8009814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80032b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032c8:	2305      	movs	r3, #5
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d0:	4619      	mov	r1, r3
 80032d2:	480c      	ldr	r0, [pc, #48]	; (8003304 <MX_GPIO_Init+0x434>)
 80032d4:	f006 fa9e 	bl	8009814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80032d8:	2200      	movs	r2, #0
 80032da:	2105      	movs	r1, #5
 80032dc:	2028      	movs	r0, #40	; 0x28
 80032de:	f004 ffff 	bl	80082e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032e2:	2028      	movs	r0, #40	; 0x28
 80032e4:	f005 f818 	bl	8008318 <HAL_NVIC_EnableIRQ>

}
 80032e8:	bf00      	nop
 80032ea:	3740      	adds	r7, #64	; 0x40
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40021c00 	.word	0x40021c00
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40020800 	.word	0x40020800
 8003300:	40020000 	.word	0x40020000
 8003304:	40020400 	.word	0x40020400

08003308 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	printf(msg);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f018 f9e3 	bl	801b6dc <iprintf>
	printf("\n");
 8003316:	200a      	movs	r0, #10
 8003318:	f018 f9f8 	bl	801b70c <putchar>
	Error_Handler();
 800331c:	f000 f840 	bl	80033a0 <Error_Handler>
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8003330:	f016 fcf2 	bl	8019d18 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 8003334:	4803      	ldr	r0, [pc, #12]	; (8003344 <StartDefaultTask+0x1c>)
 8003336:	f018 fa6d 	bl	801b814 <puts>
	audioLoop();
 800333a:	f7fd fe5d 	bl	8000ff8 <audioLoop>
	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
	for(;;)
 8003342:	e7fe      	b.n	8003342 <StartDefaultTask+0x1a>
 8003344:	0801cb60 	.word	0x0801cb60

08003348 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN startUITask */

	osDelay(200);
 8003350:	20c8      	movs	r0, #200	; 0xc8
 8003352:	f013 ffe5 	bl	8017320 <osDelay>
	printf("StartLedTask\n");
 8003356:	4808      	ldr	r0, [pc, #32]	; (8003378 <startUITask+0x30>)
 8003358:	f018 fa5c 	bl	801b814 <puts>
	uiDisplayBasic();
 800335c:	f001 fa20 	bl	80047a0 <uiDisplayBasic>
	/* Infinite loop */
	for(;;)
	{
		osSignalWait (0x0001, osWaitForever);
 8003360:	463b      	mov	r3, r7
 8003362:	f04f 32ff 	mov.w	r2, #4294967295
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f014 f82d 	bl	80173c8 <osSignalWait>
		uiDisplaySpectrum();
 800336e:	f002 f821 	bl	80053b4 <uiDisplaySpectrum>

		uiSliderDelay();
 8003372:	f001 facd 	bl	8004910 <uiSliderDelay>
		osSignalWait (0x0001, osWaitForever);
 8003376:	e7f3      	b.n	8003360 <startUITask+0x18>
 8003378:	0801cb74 	.word	0x0801cb74

0800337c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800338e:	f004 fbff 	bl	8007b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40001000 	.word	0x40001000

080033a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 80033a4:	f002 f878 	bl	8005498 <LED_Toggle>
		HAL_Delay(100);
 80033a8:	2064      	movs	r0, #100	; 0x64
 80033aa:	f004 fc11 	bl	8007bd0 <HAL_Delay>
		LED_Toggle();
 80033ae:	e7f9      	b.n	80033a4 <Error_Handler+0x4>

080033b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_MspInit+0x4c>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a10      	ldr	r2, [pc, #64]	; (80033fc <HAL_MspInit+0x4c>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_MspInit+0x4c>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_MspInit+0x4c>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_MspInit+0x4c>)
 80033d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_MspInit+0x4c>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	210f      	movs	r1, #15
 80033ea:	f06f 0001 	mvn.w	r0, #1
 80033ee:	f004 ff77 	bl	80082e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_ADC_MspInit+0xa4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d13c      	bne.n	800349c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003422:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 8003428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800343a:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 8003440:	f043 0320 	orr.w	r3, r3, #32
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_ADC_MspInit+0xa8>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800346a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800346e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003470:	2303      	movs	r3, #3
 8003472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	4619      	mov	r1, r3
 800347e:	480b      	ldr	r0, [pc, #44]	; (80034ac <HAL_ADC_MspInit+0xac>)
 8003480:	f006 f9c8 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003484:	2301      	movs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003488:	2303      	movs	r3, #3
 800348a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	4619      	mov	r1, r3
 8003496:	4806      	ldr	r0, [pc, #24]	; (80034b0 <HAL_ADC_MspInit+0xb0>)
 8003498:	f006 f9bc 	bl	8009814 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800349c:	bf00      	nop
 800349e:	3728      	adds	r7, #40	; 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40012200 	.word	0x40012200
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40021400 	.word	0x40021400
 80034b0:	40020000 	.word	0x40020000

080034b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <HAL_CRC_MspInit+0x38>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10b      	bne.n	80034de <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_CRC_MspInit+0x3c>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_CRC_MspInit+0x3c>)
 80034cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_CRC_MspInit+0x3c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40023000 	.word	0x40023000
 80034f0:	40023800 	.word	0x40023800

080034f4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08e      	sub	sp, #56	; 0x38
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6c      	ldr	r2, [pc, #432]	; (80036c4 <HAL_DCMI_MspInit+0x1d0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f040 80d2 	bne.w	80036bc <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003518:	4b6b      	ldr	r3, [pc, #428]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	4a6a      	ldr	r2, [pc, #424]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6353      	str	r3, [r2, #52]	; 0x34
 8003524:	4b68      	ldr	r3, [pc, #416]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003530:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4a64      	ldr	r2, [pc, #400]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003536:	f043 0310 	orr.w	r3, r3, #16
 800353a:	6313      	str	r3, [r2, #48]	; 0x30
 800353c:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003548:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800354e:	f043 0308 	orr.w	r3, r3, #8
 8003552:	6313      	str	r3, [r2, #48]	; 0x30
 8003554:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	4a58      	ldr	r2, [pc, #352]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800356a:	6313      	str	r3, [r2, #48]	; 0x30
 800356c:	4b56      	ldr	r3, [pc, #344]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003582:	6313      	str	r3, [r2, #48]	; 0x30
 8003584:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003590:	4b4d      	ldr	r3, [pc, #308]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4a4c      	ldr	r2, [pc, #304]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6313      	str	r3, [r2, #48]	; 0x30
 800359c:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_DCMI_MspInit+0x1d4>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80035a8:	2360      	movs	r3, #96	; 0x60
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b4:	2300      	movs	r3, #0
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80035b8:	230d      	movs	r3, #13
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c0:	4619      	mov	r1, r3
 80035c2:	4842      	ldr	r0, [pc, #264]	; (80036cc <HAL_DCMI_MspInit+0x1d8>)
 80035c4:	f006 f926 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80035c8:	2308      	movs	r3, #8
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80035d8:	230d      	movs	r3, #13
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e0:	4619      	mov	r1, r3
 80035e2:	483b      	ldr	r0, [pc, #236]	; (80036d0 <HAL_DCMI_MspInit+0x1dc>)
 80035e4:	f006 f916 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80035e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80035fa:	230d      	movs	r3, #13
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003602:	4619      	mov	r1, r3
 8003604:	4833      	ldr	r0, [pc, #204]	; (80036d4 <HAL_DCMI_MspInit+0x1e0>)
 8003606:	f006 f905 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800360a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003618:	2300      	movs	r3, #0
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800361c:	230d      	movs	r3, #13
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003624:	4619      	mov	r1, r3
 8003626:	482c      	ldr	r0, [pc, #176]	; (80036d8 <HAL_DCMI_MspInit+0x1e4>)
 8003628:	f006 f8f4 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800362c:	2350      	movs	r3, #80	; 0x50
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	2302      	movs	r3, #2
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003638:	2300      	movs	r3, #0
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800363c:	230d      	movs	r3, #13
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003644:	4619      	mov	r1, r3
 8003646:	4825      	ldr	r0, [pc, #148]	; (80036dc <HAL_DCMI_MspInit+0x1e8>)
 8003648:	f006 f8e4 	bl	8009814 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800364c:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 800364e:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <HAL_DCMI_MspInit+0x1f0>)
 8003650:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8003652:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 8003654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003658:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8003666:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 8003668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800366c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800366e:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 8003670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003674:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 8003678:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800367c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 8003680:	2200      	movs	r2, #0
 8003682:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 8003686:	2200      	movs	r2, #0
 8003688:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 800368c:	2200      	movs	r2, #0
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8003690:	4813      	ldr	r0, [pc, #76]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 8003692:	f005 f90d 	bl	80088b0 <HAL_DMA_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 800369c:	f7ff fe80 	bl	80033a0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 80036a4:	649a      	str	r2, [r3, #72]	; 0x48
 80036a6:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_DCMI_MspInit+0x1ec>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2105      	movs	r1, #5
 80036b0:	204e      	movs	r0, #78	; 0x4e
 80036b2:	f004 fe15 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80036b6:	204e      	movs	r0, #78	; 0x4e
 80036b8:	f004 fe2e 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80036bc:	bf00      	nop
 80036be:	3738      	adds	r7, #56	; 0x38
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	50050000 	.word	0x50050000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021800 	.word	0x40021800
 80036d8:	40021c00 	.word	0x40021c00
 80036dc:	40020000 	.word	0x40020000
 80036e0:	2000d0fc 	.word	0x2000d0fc
 80036e4:	40026428 	.word	0x40026428

080036e8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <HAL_DMA2D_MspInit+0x44>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d113      	bne.n	8003722 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_DMA2D_MspInit+0x48>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <HAL_DMA2D_MspInit+0x48>)
 8003700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_DMA2D_MspInit+0x48>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2105      	movs	r1, #5
 8003716:	205a      	movs	r0, #90	; 0x5a
 8003718:	f004 fde2 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800371c:	205a      	movs	r0, #90	; 0x5a
 800371e:	f004 fdfb 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	4002b000 	.word	0x4002b000
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	; 0x30
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2f      	ldr	r2, [pc, #188]	; (8003810 <HAL_I2C_MspInit+0xdc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d129      	bne.n	80037aa <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003756:	4b2f      	ldr	r3, [pc, #188]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 800375c:	f043 0302 	orr.w	r3, r3, #2
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800376e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003774:	2312      	movs	r3, #18
 8003776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003778:	2301      	movs	r3, #1
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377c:	2300      	movs	r3, #0
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003780:	2304      	movs	r3, #4
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003784:	f107 031c 	add.w	r3, r7, #28
 8003788:	4619      	mov	r1, r3
 800378a:	4823      	ldr	r0, [pc, #140]	; (8003818 <HAL_I2C_MspInit+0xe4>)
 800378c:	f006 f842 	bl	8009814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003790:	4b20      	ldr	r3, [pc, #128]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 8003796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800379a:	6413      	str	r3, [r2, #64]	; 0x40
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80037a8:	e02d      	b.n	8003806 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_I2C_MspInit+0xe8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d128      	bne.n	8003806 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	4a16      	ldr	r2, [pc, #88]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 80037ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037be:	6313      	str	r3, [r2, #48]	; 0x30
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80037cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80037d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037d2:	2312      	movs	r3, #18
 80037d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037d6:	2301      	movs	r3, #1
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037da:	2303      	movs	r3, #3
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037de:	2304      	movs	r3, #4
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037e2:	f107 031c 	add.w	r3, r7, #28
 80037e6:	4619      	mov	r1, r3
 80037e8:	480d      	ldr	r0, [pc, #52]	; (8003820 <HAL_I2C_MspInit+0xec>)
 80037ea:	f006 f813 	bl	8009814 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a08      	ldr	r2, [pc, #32]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 80037f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_I2C_MspInit+0xe0>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
}
 8003806:	bf00      	nop
 8003808:	3730      	adds	r7, #48	; 0x30
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40005400 	.word	0x40005400
 8003814:	40023800 	.word	0x40023800
 8003818:	40020400 	.word	0x40020400
 800381c:	40005c00 	.word	0x40005c00
 8003820:	40021c00 	.word	0x40021c00

08003824 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <HAL_I2C_MspDeInit+0x64>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d110      	bne.n	8003858 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_I2C_MspDeInit+0x68>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <HAL_I2C_MspDeInit+0x68>)
 800383c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003840:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003846:	4812      	ldr	r0, [pc, #72]	; (8003890 <HAL_I2C_MspDeInit+0x6c>)
 8003848:	f006 f990 	bl	8009b6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 800384c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003850:	480f      	ldr	r0, [pc, #60]	; (8003890 <HAL_I2C_MspDeInit+0x6c>)
 8003852:	f006 f98b 	bl	8009b6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003856:	e013      	b.n	8003880 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <HAL_I2C_MspDeInit+0x70>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d10e      	bne.n	8003880 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <HAL_I2C_MspDeInit+0x68>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <HAL_I2C_MspDeInit+0x68>)
 8003868:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800386e:	2180      	movs	r1, #128	; 0x80
 8003870:	4809      	ldr	r0, [pc, #36]	; (8003898 <HAL_I2C_MspDeInit+0x74>)
 8003872:	f006 f97b 	bl	8009b6c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800387a:	4807      	ldr	r0, [pc, #28]	; (8003898 <HAL_I2C_MspDeInit+0x74>)
 800387c:	f006 f976 	bl	8009b6c <HAL_GPIO_DeInit>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40005400 	.word	0x40005400
 800388c:	40023800 	.word	0x40023800
 8003890:	40020400 	.word	0x40020400
 8003894:	40005c00 	.word	0x40005c00
 8003898:	40021c00 	.word	0x40021c00

0800389c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08e      	sub	sp, #56	; 0x38
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a51      	ldr	r2, [pc, #324]	; (8003a00 <HAL_LTDC_MspInit+0x164>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	f040 809b 	bne.w	80039f6 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80038c0:	4b50      	ldr	r3, [pc, #320]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	4a4f      	ldr	r2, [pc, #316]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ca:	6453      	str	r3, [r2, #68]	; 0x44
 80038cc:	4b4d      	ldr	r3, [pc, #308]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038d8:	4b4a      	ldr	r3, [pc, #296]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4a49      	ldr	r2, [pc, #292]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038de:	f043 0310 	orr.w	r3, r3, #16
 80038e2:	6313      	str	r3, [r2, #48]	; 0x30
 80038e4:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80038f0:	4b44      	ldr	r3, [pc, #272]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	4a43      	ldr	r2, [pc, #268]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fa:	6313      	str	r3, [r2, #48]	; 0x30
 80038fc:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003908:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	4a3d      	ldr	r2, [pc, #244]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 800390e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003912:	6313      	str	r3, [r2, #48]	; 0x30
 8003914:	4b3b      	ldr	r3, [pc, #236]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003920:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4a37      	ldr	r2, [pc, #220]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 8003926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392a:	6313      	str	r3, [r2, #48]	; 0x30
 800392c:	4b35      	ldr	r3, [pc, #212]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	6313      	str	r3, [r2, #48]	; 0x30
 8003944:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_LTDC_MspInit+0x168>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003950:	2310      	movs	r3, #16
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395c:	2300      	movs	r3, #0
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003960:	230e      	movs	r3, #14
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003968:	4619      	mov	r1, r3
 800396a:	4827      	ldr	r0, [pc, #156]	; (8003a08 <HAL_LTDC_MspInit+0x16c>)
 800396c:	f005 ff52 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003970:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	2302      	movs	r3, #2
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	2300      	movs	r3, #0
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397e:	2300      	movs	r3, #0
 8003980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003982:	230e      	movs	r3, #14
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398a:	4619      	mov	r1, r3
 800398c:	481f      	ldr	r0, [pc, #124]	; (8003a0c <HAL_LTDC_MspInit+0x170>)
 800398e:	f005 ff41 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003992:	23f7      	movs	r3, #247	; 0xf7
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003996:	2302      	movs	r3, #2
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	2300      	movs	r3, #0
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	2300      	movs	r3, #0
 80039a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039a2:	230e      	movs	r3, #14
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80039a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039aa:	4619      	mov	r1, r3
 80039ac:	4818      	ldr	r0, [pc, #96]	; (8003a10 <HAL_LTDC_MspInit+0x174>)
 80039ae:	f005 ff31 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80039b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80039c4:	2309      	movs	r3, #9
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039cc:	4619      	mov	r1, r3
 80039ce:	4811      	ldr	r0, [pc, #68]	; (8003a14 <HAL_LTDC_MspInit+0x178>)
 80039d0:	f005 ff20 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80039d4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039e6:	230e      	movs	r3, #14
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ee:	4619      	mov	r1, r3
 80039f0:	4809      	ldr	r0, [pc, #36]	; (8003a18 <HAL_LTDC_MspInit+0x17c>)
 80039f2:	f005 ff0f 	bl	8009814 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80039f6:	bf00      	nop
 80039f8:	3738      	adds	r7, #56	; 0x38
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40016800 	.word	0x40016800
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40022400 	.word	0x40022400
 8003a10:	40022800 	.word	0x40022800
 8003a14:	40021800 	.word	0x40021800
 8003a18:	40022000 	.word	0x40022000

08003a1c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	; 0x30
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 031c 	add.w	r3, r7, #28
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3f      	ldr	r2, [pc, #252]	; (8003b38 <HAL_QSPI_MspInit+0x11c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d178      	bne.n	8003b30 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	4a3e      	ldr	r2, [pc, #248]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a44:	f043 0302 	orr.w	r3, r3, #2
 8003a48:	6393      	str	r3, [r2, #56]	; 0x38
 8003a4a:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a56:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a38      	ldr	r2, [pc, #224]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a5c:	f043 0310 	orr.w	r3, r3, #16
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6e:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a86:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_QSPI_MspInit+0x120>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003aae:	2309      	movs	r3, #9
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003ab2:	f107 031c 	add.w	r3, r7, #28
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4821      	ldr	r0, [pc, #132]	; (8003b40 <HAL_QSPI_MspInit+0x124>)
 8003aba:	f005 feab 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003abe:	2340      	movs	r3, #64	; 0x40
 8003ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aca:	2303      	movs	r3, #3
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003ace:	230a      	movs	r3, #10
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	481a      	ldr	r0, [pc, #104]	; (8003b44 <HAL_QSPI_MspInit+0x128>)
 8003ada:	f005 fe9b 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ade:	2304      	movs	r3, #4
 8003ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aea:	2303      	movs	r3, #3
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003aee:	2309      	movs	r3, #9
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	4619      	mov	r1, r3
 8003af8:	4812      	ldr	r0, [pc, #72]	; (8003b44 <HAL_QSPI_MspInit+0x128>)
 8003afa:	f005 fe8b 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003afe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b10:	2309      	movs	r3, #9
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b14:	f107 031c 	add.w	r3, r7, #28
 8003b18:	4619      	mov	r1, r3
 8003b1a:	480b      	ldr	r0, [pc, #44]	; (8003b48 <HAL_QSPI_MspInit+0x12c>)
 8003b1c:	f005 fe7a 	bl	8009814 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2105      	movs	r1, #5
 8003b24:	205c      	movs	r0, #92	; 0x5c
 8003b26:	f004 fbdb 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003b2a:	205c      	movs	r0, #92	; 0x5c
 8003b2c:	f004 fbf4 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003b30:	bf00      	nop
 8003b32:	3730      	adds	r7, #48	; 0x30
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	a0001000 	.word	0xa0001000
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40020400 	.word	0x40020400
 8003b48:	40020c00 	.word	0x40020c00

08003b4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_RTC_MspInit+0x2c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d105      	bne.n	8003b6a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <HAL_RTC_MspInit+0x30>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a06      	ldr	r2, [pc, #24]	; (8003b7c <HAL_RTC_MspInit+0x30>)
 8003b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40002800 	.word	0x40002800
 8003b7c:	40023800 	.word	0x40023800

08003b80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <HAL_SD_MspInit+0xb4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d144      	bne.n	8003c2c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003ba2:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bac:	6453      	str	r3, [r2, #68]	; 0x44
 8003bae:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bba:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd2:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003bd8:	f043 0308 	orr.w	r3, r3, #8
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <HAL_SD_MspInit+0xb8>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003bea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003bee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003bfc:	230c      	movs	r3, #12
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	4619      	mov	r1, r3
 8003c06:	480d      	ldr	r0, [pc, #52]	; (8003c3c <HAL_SD_MspInit+0xbc>)
 8003c08:	f005 fe04 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c10:	2302      	movs	r3, #2
 8003c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4619      	mov	r1, r3
 8003c26:	4806      	ldr	r0, [pc, #24]	; (8003c40 <HAL_SD_MspInit+0xc0>)
 8003c28:	f005 fdf4 	bl	8009814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003c2c:	bf00      	nop
 8003c2e:	3728      	adds	r7, #40	; 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	40020c00 	.word	0x40020c00

08003c44 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003c64:	d127      	bne.n	8003cb6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4a0f      	ldr	r2, [pc, #60]	; (8003cc0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003c84:	f043 0308 	orr.w	r3, r3, #8
 8003c88:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4804      	ldr	r0, [pc, #16]	; (8003cc4 <HAL_SPDIFRX_MspInit+0x80>)
 8003cb2:	f005 fdaf 	bl	8009814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003cb6:	bf00      	nop
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40020c00 	.word	0x40020c00

08003cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a4e      	ldr	r2, [pc, #312]	; (8003e10 <HAL_TIM_Base_MspInit+0x148>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d114      	bne.n	8003d04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cda:	4b4e      	ldr	r3, [pc, #312]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	4a4d      	ldr	r2, [pc, #308]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce6:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2105      	movs	r1, #5
 8003cf6:	2018      	movs	r0, #24
 8003cf8:	f004 faf2 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003cfc:	2018      	movs	r0, #24
 8003cfe:	f004 fb0b 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003d02:	e080      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d114      	bne.n	8003d38 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d0e:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	4a40      	ldr	r2, [pc, #256]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2105      	movs	r1, #5
 8003d2a:	201c      	movs	r0, #28
 8003d2c:	f004 fad8 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d30:	201c      	movs	r0, #28
 8003d32:	f004 faf1 	bl	8008318 <HAL_NVIC_EnableIRQ>
}
 8003d36:	e066      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM3)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a36      	ldr	r2, [pc, #216]	; (8003e18 <HAL_TIM_Base_MspInit+0x150>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d114      	bne.n	8003d6c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d42:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a33      	ldr	r2, [pc, #204]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2105      	movs	r1, #5
 8003d5e:	201d      	movs	r0, #29
 8003d60:	f004 fabe 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d64:	201d      	movs	r0, #29
 8003d66:	f004 fad7 	bl	8008318 <HAL_NVIC_EnableIRQ>
}
 8003d6a:	e04c      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM5)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2a      	ldr	r2, [pc, #168]	; (8003e1c <HAL_TIM_Base_MspInit+0x154>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d114      	bne.n	8003da0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d76:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2105      	movs	r1, #5
 8003d92:	2032      	movs	r0, #50	; 0x32
 8003d94:	f004 faa4 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003d98:	2032      	movs	r0, #50	; 0x32
 8003d9a:	f004 fabd 	bl	8008318 <HAL_NVIC_EnableIRQ>
}
 8003d9e:	e032      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM8)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_TIM_Base_MspInit+0x158>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d114      	bne.n	8003dd4 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003db0:	f043 0302 	orr.w	r3, r3, #2
 8003db4:	6453      	str	r3, [r2, #68]	; 0x44
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2105      	movs	r1, #5
 8003dc6:	202b      	movs	r0, #43	; 0x2b
 8003dc8:	f004 fa8a 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003dcc:	202b      	movs	r0, #43	; 0x2b
 8003dce:	f004 faa3 	bl	8008318 <HAL_NVIC_EnableIRQ>
}
 8003dd2:	e018      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x13e>
  else if(htim_base->Instance==TIM12)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <HAL_TIM_Base_MspInit+0x15c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d113      	bne.n	8003e06 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_TIM_Base_MspInit+0x14c>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003df6:	2200      	movs	r2, #0
 8003df8:	2105      	movs	r1, #5
 8003dfa:	202b      	movs	r0, #43	; 0x2b
 8003dfc:	f004 fa70 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003e00:	202b      	movs	r0, #43	; 0x2b
 8003e02:	f004 fa89 	bl	8008318 <HAL_NVIC_EnableIRQ>
}
 8003e06:	bf00      	nop
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40001800 	.word	0x40001800

08003e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08c      	sub	sp, #48	; 0x30
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	f107 031c 	add.w	r3, r7, #28
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a56      	ldr	r2, [pc, #344]	; (8003fa0 <HAL_TIM_MspPostInit+0x178>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d11d      	bne.n	8003e86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4a:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	4a55      	ldr	r2, [pc, #340]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6313      	str	r3, [r2, #48]	; 0x30
 8003e56:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e70:	2300      	movs	r3, #0
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e74:	2301      	movs	r3, #1
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003e78:	f107 031c 	add.w	r3, r7, #28
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	484a      	ldr	r0, [pc, #296]	; (8003fa8 <HAL_TIM_MspPostInit+0x180>)
 8003e80:	f005 fcc8 	bl	8009814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003e84:	e087      	b.n	8003f96 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d11d      	bne.n	8003ecc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e90:	4b44      	ldr	r3, [pc, #272]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	4a43      	ldr	r2, [pc, #268]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9c:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003ebe:	f107 031c 	add.w	r3, r7, #28
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4838      	ldr	r0, [pc, #224]	; (8003fa8 <HAL_TIM_MspPostInit+0x180>)
 8003ec6:	f005 fca5 	bl	8009814 <HAL_GPIO_Init>
}
 8003eca:	e064      	b.n	8003f96 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a36      	ldr	r2, [pc, #216]	; (8003fac <HAL_TIM_MspPostInit+0x184>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d11c      	bne.n	8003f10 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed6:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	4a32      	ldr	r2, [pc, #200]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003eee:	2310      	movs	r3, #16
 8003ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003efe:	2302      	movs	r3, #2
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003f02:	f107 031c 	add.w	r3, r7, #28
 8003f06:	4619      	mov	r1, r3
 8003f08:	4829      	ldr	r0, [pc, #164]	; (8003fb0 <HAL_TIM_MspPostInit+0x188>)
 8003f0a:	f005 fc83 	bl	8009814 <HAL_GPIO_Init>
}
 8003f0e:	e042      	b.n	8003f96 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a27      	ldr	r2, [pc, #156]	; (8003fb4 <HAL_TIM_MspPostInit+0x18c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d11c      	bne.n	8003f54 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	6313      	str	r3, [r2, #48]	; 0x30
 8003f26:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f36:	2302      	movs	r3, #2
 8003f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f42:	2302      	movs	r3, #2
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003f46:	f107 031c 	add.w	r3, r7, #28
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	481a      	ldr	r0, [pc, #104]	; (8003fb8 <HAL_TIM_MspPostInit+0x190>)
 8003f4e:	f005 fc61 	bl	8009814 <HAL_GPIO_Init>
}
 8003f52:	e020      	b.n	8003f96 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_TIM_MspPostInit+0x194>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d11b      	bne.n	8003f96 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f68:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_TIM_MspPostInit+0x17c>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f82:	2300      	movs	r3, #0
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003f86:	2309      	movs	r3, #9
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003f8a:	f107 031c 	add.w	r3, r7, #28
 8003f8e:	4619      	mov	r1, r3
 8003f90:	480b      	ldr	r0, [pc, #44]	; (8003fc0 <HAL_TIM_MspPostInit+0x198>)
 8003f92:	f005 fc3f 	bl	8009814 <HAL_GPIO_Init>
}
 8003f96:	bf00      	nop
 8003f98:	3730      	adds	r7, #48	; 0x30
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40020000 	.word	0x40020000
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40020400 	.word	0x40020400
 8003fb4:	40000c00 	.word	0x40000c00
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	40001800 	.word	0x40001800
 8003fc0:	40021c00 	.word	0x40021c00

08003fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fcc:	f107 031c 	add.w	r3, r7, #28
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a3c      	ldr	r2, [pc, #240]	; (80040d4 <HAL_UART_MspInit+0x110>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d145      	bne.n	8004072 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fe6:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a3b      	ldr	r2, [pc, #236]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8003fec:	f043 0310 	orr.w	r3, r3, #16
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffe:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8004004:	f043 0302 	orr.w	r3, r3, #2
 8004008:	6313      	str	r3, [r2, #48]	; 0x30
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <HAL_UART_MspInit+0x114>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004016:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <HAL_UART_MspInit+0x114>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	2300      	movs	r3, #0
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800403e:	2307      	movs	r3, #7
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004042:	f107 031c 	add.w	r3, r7, #28
 8004046:	4619      	mov	r1, r3
 8004048:	4824      	ldr	r0, [pc, #144]	; (80040dc <HAL_UART_MspInit+0x118>)
 800404a:	f005 fbe3 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800404e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004060:	2307      	movs	r3, #7
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004064:	f107 031c 	add.w	r3, r7, #28
 8004068:	4619      	mov	r1, r3
 800406a:	481d      	ldr	r0, [pc, #116]	; (80040e0 <HAL_UART_MspInit+0x11c>)
 800406c:	f005 fbd2 	bl	8009814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004070:	e02c      	b.n	80040cc <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_UART_MspInit+0x120>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d127      	bne.n	80040cc <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <HAL_UART_MspInit+0x114>)
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8004082:	f043 0320 	orr.w	r3, r3, #32
 8004086:	6453      	str	r3, [r2, #68]	; 0x44
 8004088:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <HAL_UART_MspInit+0x114>)
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <HAL_UART_MspInit+0x114>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <HAL_UART_MspInit+0x114>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	6313      	str	r3, [r2, #48]	; 0x30
 80040a0:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <HAL_UART_MspInit+0x114>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80040ac:	23c0      	movs	r3, #192	; 0xc0
 80040ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b0:	2302      	movs	r3, #2
 80040b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040bc:	2308      	movs	r3, #8
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c0:	f107 031c 	add.w	r3, r7, #28
 80040c4:	4619      	mov	r1, r3
 80040c6:	4808      	ldr	r0, [pc, #32]	; (80040e8 <HAL_UART_MspInit+0x124>)
 80040c8:	f005 fba4 	bl	8009814 <HAL_GPIO_Init>
}
 80040cc:	bf00      	nop
 80040ce:	3730      	adds	r7, #48	; 0x30
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40011000 	.word	0x40011000
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40020400 	.word	0x40020400
 80040e0:	40020000 	.word	0x40020000
 80040e4:	40011400 	.word	0x40011400
 80040e8:	40020800 	.word	0x40020800

080040ec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004100:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_FMC_MspInit+0x10c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d173      	bne.n	80041f0 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8004108:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <HAL_FMC_MspInit+0x10c>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800410e:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_FMC_MspInit+0x110>)
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	4a3a      	ldr	r2, [pc, #232]	; (80041fc <HAL_FMC_MspInit+0x110>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6393      	str	r3, [r2, #56]	; 0x38
 800411a:	4b38      	ldr	r3, [pc, #224]	; (80041fc <HAL_FMC_MspInit+0x110>)
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004126:	f64f 7383 	movw	r3, #65411	; 0xff83
 800412a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004134:	2303      	movs	r3, #3
 8004136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004138:	230c      	movs	r3, #12
 800413a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800413c:	1d3b      	adds	r3, r7, #4
 800413e:	4619      	mov	r1, r3
 8004140:	482f      	ldr	r0, [pc, #188]	; (8004200 <HAL_FMC_MspInit+0x114>)
 8004142:	f005 fb67 	bl	8009814 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004146:	f248 1333 	movw	r3, #33075	; 0x8133
 800414a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414c:	2302      	movs	r3, #2
 800414e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004154:	2303      	movs	r3, #3
 8004156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004158:	230c      	movs	r3, #12
 800415a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4828      	ldr	r0, [pc, #160]	; (8004204 <HAL_FMC_MspInit+0x118>)
 8004162:	f005 fb57 	bl	8009814 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004166:	f24c 7303 	movw	r3, #50947	; 0xc703
 800416a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416c:	2302      	movs	r3, #2
 800416e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004174:	2303      	movs	r3, #3
 8004176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004178:	230c      	movs	r3, #12
 800417a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	4619      	mov	r1, r3
 8004180:	4821      	ldr	r0, [pc, #132]	; (8004208 <HAL_FMC_MspInit+0x11c>)
 8004182:	f005 fb47 	bl	8009814 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004186:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800418a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004194:	2303      	movs	r3, #3
 8004196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004198:	230c      	movs	r3, #12
 800419a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	481a      	ldr	r0, [pc, #104]	; (800420c <HAL_FMC_MspInit+0x120>)
 80041a2:	f005 fb37 	bl	8009814 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80041a6:	2328      	movs	r3, #40	; 0x28
 80041a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041b6:	230c      	movs	r3, #12
 80041b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4814      	ldr	r0, [pc, #80]	; (8004210 <HAL_FMC_MspInit+0x124>)
 80041c0:	f005 fb28 	bl	8009814 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80041c4:	2308      	movs	r3, #8
 80041c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c8:	2302      	movs	r3, #2
 80041ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d0:	2303      	movs	r3, #3
 80041d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041d4:	230c      	movs	r3, #12
 80041d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	480d      	ldr	r0, [pc, #52]	; (8004214 <HAL_FMC_MspInit+0x128>)
 80041de:	f005 fb19 	bl	8009814 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <HAL_FMC_MspInit+0x12c>)
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <HAL_FMC_MspInit+0x130>)
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <HAL_FMC_MspInit+0x130>)
 80041ea:	4a0b      	ldr	r2, [pc, #44]	; (8004218 <HAL_FMC_MspInit+0x12c>)
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
 80041ee:	e000      	b.n	80041f2 <HAL_FMC_MspInit+0x106>
    return;
 80041f0:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200003c8 	.word	0x200003c8
 80041fc:	40023800 	.word	0x40023800
 8004200:	40021000 	.word	0x40021000
 8004204:	40021800 	.word	0x40021800
 8004208:	40020c00 	.word	0x40020c00
 800420c:	40021400 	.word	0x40021400
 8004210:	40021c00 	.word	0x40021c00
 8004214:	40020800 	.word	0x40020800
 8004218:	2000d668 	.word	0x2000d668
 800421c:	2000ceb0 	.word	0x2000ceb0

08004220 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004228:	f7ff ff60 	bl	80040ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a6f      	ldr	r2, [pc, #444]	; (8004400 <HAL_SAI_MspInit+0x1cc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d175      	bne.n	8004332 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004246:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_SAI_MspInit+0x1d0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10b      	bne.n	8004266 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800424e:	4b6e      	ldr	r3, [pc, #440]	; (8004408 <HAL_SAI_MspInit+0x1d4>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	4a6d      	ldr	r2, [pc, #436]	; (8004408 <HAL_SAI_MspInit+0x1d4>)
 8004254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004258:	6453      	str	r3, [r2, #68]	; 0x44
 800425a:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <HAL_SAI_MspInit+0x1d4>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004266:	4b67      	ldr	r3, [pc, #412]	; (8004404 <HAL_SAI_MspInit+0x1d0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3301      	adds	r3, #1
 800426c:	4a65      	ldr	r2, [pc, #404]	; (8004404 <HAL_SAI_MspInit+0x1d0>)
 800426e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8004270:	2310      	movs	r3, #16
 8004272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004274:	2302      	movs	r3, #2
 8004276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427c:	2303      	movs	r3, #3
 800427e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004280:	230a      	movs	r3, #10
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4619      	mov	r1, r3
 800428a:	4860      	ldr	r0, [pc, #384]	; (800440c <HAL_SAI_MspInit+0x1d8>)
 800428c:	f005 fac2 	bl	8009814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004290:	23e0      	movs	r3, #224	; 0xe0
 8004292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004294:	2302      	movs	r3, #2
 8004296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800429c:	2302      	movs	r3, #2
 800429e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80042a0:	230a      	movs	r3, #10
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	4619      	mov	r1, r3
 80042aa:	4858      	ldr	r0, [pc, #352]	; (800440c <HAL_SAI_MspInit+0x1d8>)
 80042ac:	f005 fab2 	bl	8009814 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80042b0:	4b57      	ldr	r3, [pc, #348]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042b2:	4a58      	ldr	r2, [pc, #352]	; (8004414 <HAL_SAI_MspInit+0x1e0>)
 80042b4:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80042b6:	4b56      	ldr	r3, [pc, #344]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042b8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80042bc:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042be:	4b54      	ldr	r3, [pc, #336]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042c0:	2240      	movs	r2, #64	; 0x40
 80042c2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c4:	4b52      	ldr	r3, [pc, #328]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80042ca:	4b51      	ldr	r3, [pc, #324]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042d0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042d2:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042da:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042e0:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80042e2:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 80042ea:	4b49      	ldr	r3, [pc, #292]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042f0:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042f4:	2204      	movs	r2, #4
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80042f8:	4b45      	ldr	r3, [pc, #276]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 80042fa:	2203      	movs	r2, #3
 80042fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80042fe:	4b44      	ldr	r3, [pc, #272]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 8004300:	2200      	movs	r2, #0
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800430a:	4841      	ldr	r0, [pc, #260]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 800430c:	f004 fad0 	bl	80088b0 <HAL_DMA_Init>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8004316:	f7ff f843 	bl	80033a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 800431e:	671a      	str	r2, [r3, #112]	; 0x70
 8004320:	4a3b      	ldr	r2, [pc, #236]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a39      	ldr	r2, [pc, #228]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 800432a:	66da      	str	r2, [r3, #108]	; 0x6c
 800432c:	4a38      	ldr	r2, [pc, #224]	; (8004410 <HAL_SAI_MspInit+0x1dc>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a38      	ldr	r2, [pc, #224]	; (8004418 <HAL_SAI_MspInit+0x1e4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d15c      	bne.n	80043f6 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800433c:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_SAI_MspInit+0x1d0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004344:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_SAI_MspInit+0x1d4>)
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <HAL_SAI_MspInit+0x1d4>)
 800434a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800434e:	6453      	str	r3, [r2, #68]	; 0x44
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_SAI_MspInit+0x1d4>)
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_SAI_MspInit+0x1d0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a28      	ldr	r2, [pc, #160]	; (8004404 <HAL_SAI_MspInit+0x1d0>)
 8004364:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800436a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	2302      	movs	r3, #2
 800436e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004374:	2302      	movs	r3, #2
 8004376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004378:	230a      	movs	r3, #10
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4619      	mov	r1, r3
 8004382:	4826      	ldr	r0, [pc, #152]	; (800441c <HAL_SAI_MspInit+0x1e8>)
 8004384:	f005 fa46 	bl	8009814 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 800438a:	4a26      	ldr	r2, [pc, #152]	; (8004424 <HAL_SAI_MspInit+0x1f0>)
 800438c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 800439c:	2200      	movs	r2, #0
 800439e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80043a0:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043a6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043ae:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043b6:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80043b8:	4b19      	ldr	r3, [pc, #100]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043be:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80043c0:	4b17      	ldr	r3, [pc, #92]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043c6:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80043ce:	4814      	ldr	r0, [pc, #80]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043d0:	f004 fa6e 	bl	80088b0 <HAL_DMA_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 80043da:	f7fe ffe1 	bl	80033a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a0f      	ldr	r2, [pc, #60]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043e2:	671a      	str	r2, [r3, #112]	; 0x70
 80043e4:	4a0e      	ldr	r2, [pc, #56]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80043f0:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <HAL_SAI_MspInit+0x1ec>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80043f6:	bf00      	nop
 80043f8:	3728      	adds	r7, #40	; 0x28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40015c04 	.word	0x40015c04
 8004404:	200003cc 	.word	0x200003cc
 8004408:	40023800 	.word	0x40023800
 800440c:	40022000 	.word	0x40022000
 8004410:	2000d4ac 	.word	0x2000d4ac
 8004414:	40026470 	.word	0x40026470
 8004418:	40015c24 	.word	0x40015c24
 800441c:	40021800 	.word	0x40021800
 8004420:	2000cf5c 	.word	0x2000cf5c
 8004424:	400264b8 	.word	0x400264b8

08004428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08c      	sub	sp, #48	; 0x30
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004438:	2200      	movs	r2, #0
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	2036      	movs	r0, #54	; 0x36
 800443e:	f003 ff4f 	bl	80082e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004442:	2036      	movs	r0, #54	; 0x36
 8004444:	f003 ff68 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004448:	4b1f      	ldr	r3, [pc, #124]	; (80044c8 <HAL_InitTick+0xa0>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <HAL_InitTick+0xa0>)
 800444e:	f043 0310 	orr.w	r3, r3, #16
 8004452:	6413      	str	r3, [r2, #64]	; 0x40
 8004454:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <HAL_InitTick+0xa0>)
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004460:	f107 0210 	add.w	r2, r7, #16
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f009 ff7c 	bl	800e368 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004470:	f009 ff52 	bl	800e318 <HAL_RCC_GetPCLK1Freq>
 8004474:	4603      	mov	r3, r0
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <HAL_InitTick+0xa4>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0c9b      	lsrs	r3, r3, #18
 8004484:	3b01      	subs	r3, #1
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_InitTick+0xa8>)
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HAL_InitTick+0xac>)
 800448c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HAL_InitTick+0xa8>)
 8004490:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004494:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004496:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <HAL_InitTick+0xa8>)
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <HAL_InitTick+0xa8>)
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_InitTick+0xa8>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80044a8:	4809      	ldr	r0, [pc, #36]	; (80044d0 <HAL_InitTick+0xa8>)
 80044aa:	f00c fded 	bl	8011088 <HAL_TIM_Base_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d104      	bne.n	80044be <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80044b4:	4806      	ldr	r0, [pc, #24]	; (80044d0 <HAL_InitTick+0xa8>)
 80044b6:	f00c fe3f 	bl	8011138 <HAL_TIM_Base_Start_IT>
 80044ba:	4603      	mov	r3, r0
 80044bc:	e000      	b.n	80044c0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3730      	adds	r7, #48	; 0x30
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	431bde83 	.word	0x431bde83
 80044d0:	2000d6e8 	.word	0x2000d6e8
 80044d4:	40001000 	.word	0x40001000

080044d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044dc:	e7fe      	b.n	80044dc <NMI_Handler+0x4>

080044de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044e2:	e7fe      	b.n	80044e2 <HardFault_Handler+0x4>

080044e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044e8:	e7fe      	b.n	80044e8 <MemManage_Handler+0x4>

080044ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044ee:	e7fe      	b.n	80044ee <BusFault_Handler+0x4>

080044f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044f4:	e7fe      	b.n	80044f4 <UsageFault_Handler+0x4>

080044f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044f6:	b480      	push	{r7}
 80044f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800450a:	f00c ffe9 	bl	80114e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	2000d460 	.word	0x2000d460

08004518 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800451c:	4802      	ldr	r0, [pc, #8]	; (8004528 <TIM2_IRQHandler+0x10>)
 800451e:	f00c ffdf 	bl	80114e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2000d5d0 	.word	0x2000d5d0

0800452c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <TIM3_IRQHandler+0x10>)
 8004532:	f00c ffd5 	bl	80114e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	2000d230 	.word	0x2000d230

08004540 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004544:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004548:	f005 fc68 	bl	8009e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800454c:	bf00      	nop
 800454e:	bd80      	pop	{r7, pc}

08004550 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004554:	4803      	ldr	r0, [pc, #12]	; (8004564 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8004556:	f00c ffc3 	bl	80114e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800455a:	4803      	ldr	r0, [pc, #12]	; (8004568 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800455c:	f00c ffc0 	bl	80114e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004560:	bf00      	nop
 8004562:	bd80      	pop	{r7, pc}
 8004564:	2000cf10 	.word	0x2000cf10
 8004568:	2000d61c 	.word	0x2000d61c

0800456c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <TIM5_IRQHandler+0x10>)
 8004572:	f00c ffb5 	bl	80114e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	2000d1e0 	.word	0x2000d1e0

08004580 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <TIM6_DAC_IRQHandler+0x10>)
 8004586:	f00c ffab 	bl	80114e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2000d6e8 	.word	0x2000d6e8

08004594 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <DMA2_Stream0_IRQHandler+0x10>)
 800459a:	f004 fb29 	bl	8008bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2000ceb0 	.word	0x2000ceb0

080045a8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <DMA2_Stream1_IRQHandler+0x10>)
 80045ae:	f004 fb1f 	bl	8008bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	2000d0fc 	.word	0x2000d0fc

080045bc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80045c0:	4802      	ldr	r0, [pc, #8]	; (80045cc <DMA2_Stream4_IRQHandler+0x10>)
 80045c2:	f004 fb15 	bl	8008bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	2000d4ac 	.word	0x2000d4ac

080045d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80045d4:	4802      	ldr	r0, [pc, #8]	; (80045e0 <OTG_FS_IRQHandler+0x10>)
 80045d6:	f005 feaf 	bl	800a338 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	2004db8c 	.word	0x2004db8c

080045e4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80045e8:	4802      	ldr	r0, [pc, #8]	; (80045f4 <DMA2_Stream7_IRQHandler+0x10>)
 80045ea:	f004 fb01 	bl	8008bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	2000cf5c 	.word	0x2000cf5c

080045f8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80045fc:	4802      	ldr	r0, [pc, #8]	; (8004608 <DCMI_IRQHandler+0x10>)
 80045fe:	f004 f887 	bl	8008710 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2000d36c 	.word	0x2000d36c

0800460c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004610:	4802      	ldr	r0, [pc, #8]	; (800461c <DMA2D_IRQHandler+0x10>)
 8004612:	f004 fec1 	bl	8009398 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	2000d590 	.word	0x2000d590

08004620 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8004624:	4802      	ldr	r0, [pc, #8]	; (8004630 <QUADSPI_IRQHandler+0x10>)
 8004626:	f008 fadd 	bl	800cbe4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	2000d69c 	.word	0x2000d69c

08004634 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e00a      	b.n	800465c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004646:	f3af 8000 	nop.w
 800464a:	4601      	mov	r1, r0
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	60ba      	str	r2, [r7, #8]
 8004652:	b2ca      	uxtb	r2, r1
 8004654:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	3301      	adds	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	dbf0      	blt.n	8004646 <_read+0x12>
	}

return len;
 8004664:	687b      	ldr	r3, [r7, #4]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e009      	b.n	8004694 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	60ba      	str	r2, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 ff0f 	bl	80054ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	3301      	adds	r3, #1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	dbf1      	blt.n	8004680 <_write+0x12>
	}
	return len;
 800469c:	687b      	ldr	r3, [r7, #4]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <_close>:

int _close(int file)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
	return -1;
 80046ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046ce:	605a      	str	r2, [r3, #4]
	return 0;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <_isatty>:

int _isatty(int file)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
	return 1;
 80046e6:	2301      	movs	r3, #1
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
	return 0;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004718:	4a14      	ldr	r2, [pc, #80]	; (800476c <_sbrk+0x5c>)
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <_sbrk+0x60>)
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004724:	4b13      	ldr	r3, [pc, #76]	; (8004774 <_sbrk+0x64>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <_sbrk+0x64>)
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <_sbrk+0x68>)
 8004730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <_sbrk+0x64>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4413      	add	r3, r2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	429a      	cmp	r2, r3
 800473e:	d207      	bcs.n	8004750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004740:	f016 fed2 	bl	801b4e8 <__errno>
 8004744:	4603      	mov	r3, r0
 8004746:	220c      	movs	r2, #12
 8004748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
 800474e:	e009      	b.n	8004764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004750:	4b08      	ldr	r3, [pc, #32]	; (8004774 <_sbrk+0x64>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <_sbrk+0x64>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	4a05      	ldr	r2, [pc, #20]	; (8004774 <_sbrk+0x64>)
 8004760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20050000 	.word	0x20050000
 8004770:	00000400 	.word	0x00000400
 8004774:	200003d0 	.word	0x200003d0
 8004778:	2004dea0 	.word	0x2004dea0

0800477c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <SystemInit+0x20>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	4a05      	ldr	r2, [pc, #20]	; (800479c <SystemInit+0x20>)
 8004788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800478c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <uiDisplayBasic>:
int time = 0;

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
 80047aa:	f001 f86d 	bl	8005888 <LCD_Clear>

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 80047ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80047b2:	f000 ffcb 	bl	800574c <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ba:	f000 fff7 	bl	80057ac <LCD_SetBackColor>
	LCD_SetFont(&Font16);
 80047be:	4849      	ldr	r0, [pc, #292]	; (80048e4 <uiDisplayBasic+0x144>)
 80047c0:	f001 f80c 	bl	80057dc <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "FLOW", CENTER_MODE, true);
 80047c4:	2301      	movs	r3, #1
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2301      	movs	r3, #1
 80047ca:	4a47      	ldr	r2, [pc, #284]	; (80048e8 <uiDisplayBasic+0x148>)
 80047cc:	2100      	movs	r1, #0
 80047ce:	2000      	movs	r0, #0
 80047d0:	f001 f8a2 	bl	8005918 <LCD_DrawString>

	/* delay range */
	//LCD_DrawRect(60,20,360,30);
	LCD_DrawRect(60,20,40,30);
 80047d4:	231e      	movs	r3, #30
 80047d6:	2228      	movs	r2, #40	; 0x28
 80047d8:	2114      	movs	r1, #20
 80047da:	203c      	movs	r0, #60	; 0x3c
 80047dc:	f001 f932 	bl	8005a44 <LCD_DrawRect>
	LCD_DrawRect(110,20,40,30);
 80047e0:	231e      	movs	r3, #30
 80047e2:	2228      	movs	r2, #40	; 0x28
 80047e4:	2114      	movs	r1, #20
 80047e6:	206e      	movs	r0, #110	; 0x6e
 80047e8:	f001 f92c 	bl	8005a44 <LCD_DrawRect>
	LCD_DrawRect(160,20,40,30);
 80047ec:	231e      	movs	r3, #30
 80047ee:	2228      	movs	r2, #40	; 0x28
 80047f0:	2114      	movs	r1, #20
 80047f2:	20a0      	movs	r0, #160	; 0xa0
 80047f4:	f001 f926 	bl	8005a44 <LCD_DrawRect>
	LCD_DrawRect(210,20,40,30);
 80047f8:	231e      	movs	r3, #30
 80047fa:	2228      	movs	r2, #40	; 0x28
 80047fc:	2114      	movs	r1, #20
 80047fe:	20d2      	movs	r0, #210	; 0xd2
 8004800:	f001 f920 	bl	8005a44 <LCD_DrawRect>
	LCD_DrawRect(260,20,40,30);
 8004804:	231e      	movs	r3, #30
 8004806:	2228      	movs	r2, #40	; 0x28
 8004808:	2114      	movs	r1, #20
 800480a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800480e:	f001 f919 	bl	8005a44 <LCD_DrawRect>
	LCD_DrawRect(310,20,40,30);
 8004812:	231e      	movs	r3, #30
 8004814:	2228      	movs	r2, #40	; 0x28
 8004816:	2114      	movs	r1, #20
 8004818:	f44f 709b 	mov.w	r0, #310	; 0x136
 800481c:	f001 f912 	bl	8005a44 <LCD_DrawRect>
	LCD_DrawRect(360,20,40,30);
 8004820:	231e      	movs	r3, #30
 8004822:	2228      	movs	r2, #40	; 0x28
 8004824:	2114      	movs	r1, #20
 8004826:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800482a:	f001 f90b 	bl	8005a44 <LCD_DrawRect>

	/* Init Vol, Delay, Feed */
	LCD_SetFont(&Font12);
 800482e:	482f      	ldr	r0, [pc, #188]	; (80048ec <uiDisplayBasic+0x14c>)
 8004830:	f000 ffd4 	bl	80057dc <LCD_SetFont>

	//LCD_DrawString(LCD_SCREEN_WIDTH,60,(uint8_t *) "0  ", LEFT_MODE, true);
	//LCD_DrawString(200,60,(uint8_t *) "Figure", LEFT_MODE, true);
	switch(Figure){
 8004834:	4b2e      	ldr	r3, [pc, #184]	; (80048f0 <uiDisplayBasic+0x150>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b06      	cmp	r3, #6
 800483a:	d850      	bhi.n	80048de <uiDisplayBasic+0x13e>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <uiDisplayBasic+0xa4>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004861 	.word	0x08004861
 8004848:	08004873 	.word	0x08004873
 800484c:	08004885 	.word	0x08004885
 8004850:	08004897 	.word	0x08004897
 8004854:	080048a9 	.word	0x080048a9
 8004858:	080048bb 	.word	0x080048bb
 800485c:	080048cd 	.word	0x080048cd
	case 0 : LCD_DrawString(200,60,(uint8_t *) "Figure 0", LEFT_MODE, true);break;
 8004860:	2301      	movs	r3, #1
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2303      	movs	r3, #3
 8004866:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <uiDisplayBasic+0x154>)
 8004868:	213c      	movs	r1, #60	; 0x3c
 800486a:	20c8      	movs	r0, #200	; 0xc8
 800486c:	f001 f854 	bl	8005918 <LCD_DrawString>
 8004870:	e035      	b.n	80048de <uiDisplayBasic+0x13e>
	case 1 : LCD_DrawString(200,60,(uint8_t *) "Figure 1", LEFT_MODE, true);break;
 8004872:	2301      	movs	r3, #1
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	2303      	movs	r3, #3
 8004878:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <uiDisplayBasic+0x158>)
 800487a:	213c      	movs	r1, #60	; 0x3c
 800487c:	20c8      	movs	r0, #200	; 0xc8
 800487e:	f001 f84b 	bl	8005918 <LCD_DrawString>
 8004882:	e02c      	b.n	80048de <uiDisplayBasic+0x13e>
	case 2 : LCD_DrawString(200,60,(uint8_t *) "Figure 2", LEFT_MODE, true);break;
 8004884:	2301      	movs	r3, #1
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2303      	movs	r3, #3
 800488a:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <uiDisplayBasic+0x15c>)
 800488c:	213c      	movs	r1, #60	; 0x3c
 800488e:	20c8      	movs	r0, #200	; 0xc8
 8004890:	f001 f842 	bl	8005918 <LCD_DrawString>
 8004894:	e023      	b.n	80048de <uiDisplayBasic+0x13e>
	case 3 : LCD_DrawString(200,60,(uint8_t *) "Figure 3", LEFT_MODE, true);break;
 8004896:	2301      	movs	r3, #1
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	2303      	movs	r3, #3
 800489c:	4a18      	ldr	r2, [pc, #96]	; (8004900 <uiDisplayBasic+0x160>)
 800489e:	213c      	movs	r1, #60	; 0x3c
 80048a0:	20c8      	movs	r0, #200	; 0xc8
 80048a2:	f001 f839 	bl	8005918 <LCD_DrawString>
 80048a6:	e01a      	b.n	80048de <uiDisplayBasic+0x13e>
	case 4 : LCD_DrawString(200,60,(uint8_t *) "Figure 4", LEFT_MODE, true);break;
 80048a8:	2301      	movs	r3, #1
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2303      	movs	r3, #3
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <uiDisplayBasic+0x164>)
 80048b0:	213c      	movs	r1, #60	; 0x3c
 80048b2:	20c8      	movs	r0, #200	; 0xc8
 80048b4:	f001 f830 	bl	8005918 <LCD_DrawString>
 80048b8:	e011      	b.n	80048de <uiDisplayBasic+0x13e>
	case 5 : LCD_DrawString(200,60,(uint8_t *) "Figure 5", LEFT_MODE, true);break;
 80048ba:	2301      	movs	r3, #1
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	2303      	movs	r3, #3
 80048c0:	4a11      	ldr	r2, [pc, #68]	; (8004908 <uiDisplayBasic+0x168>)
 80048c2:	213c      	movs	r1, #60	; 0x3c
 80048c4:	20c8      	movs	r0, #200	; 0xc8
 80048c6:	f001 f827 	bl	8005918 <LCD_DrawString>
 80048ca:	e008      	b.n	80048de <uiDisplayBasic+0x13e>
	case 6 : LCD_DrawString(200,60,(uint8_t *) "Figure 6", LEFT_MODE, true);break;
 80048cc:	2301      	movs	r3, #1
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2303      	movs	r3, #3
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <uiDisplayBasic+0x16c>)
 80048d4:	213c      	movs	r1, #60	; 0x3c
 80048d6:	20c8      	movs	r0, #200	; 0xc8
 80048d8:	f001 f81e 	bl	8005918 <LCD_DrawString>
 80048dc:	bf00      	nop
	}
}
 80048de:	bf00      	nop
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000040 	.word	0x20000040
 80048e8:	0801cb84 	.word	0x0801cb84
 80048ec:	20000038 	.word	0x20000038
 80048f0:	2000001c 	.word	0x2000001c
 80048f4:	0801cb8c 	.word	0x0801cb8c
 80048f8:	0801cb98 	.word	0x0801cb98
 80048fc:	0801cba4 	.word	0x0801cba4
 8004900:	0801cbb0 	.word	0x0801cbb0
 8004904:	0801cbbc 	.word	0x0801cbbc
 8004908:	0801cbc8 	.word	0x0801cbc8
 800490c:	0801cbd4 	.word	0x0801cbd4

08004910 <uiSliderDelay>:
}

/*
 * Range for delay value
 */
void uiSliderDelay(){
 8004910:	b580      	push	{r7, lr}
 8004912:	b098      	sub	sp, #96	; 0x60
 8004914:	af02      	add	r7, sp, #8
	TS_StateTypeDef  TS_State;

	TS_GetState(&TS_State);
 8004916:	463b      	mov	r3, r7
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fcad 	bl	8006278 <TS_GetState>

	/* detect touch event */
	if(TS_State.touchDetected){
 800491e:	783b      	ldrb	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8530 	beq.w	8005386 <uiSliderDelay+0xa76>

				/* Get X and Y position of the touch post calibrated */
				uint16_t xt = TS_State.touchX[0];
 8004926:	887b      	ldrh	r3, [r7, #2]
 8004928:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				uint16_t yt = TS_State.touchY[0];
 800492c:	89bb      	ldrh	r3, [r7, #12]
 800492e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				/* Init position and size of elements */
				int xSquare0 = 60;
 8004932:	233c      	movs	r3, #60	; 0x3c
 8004934:	653b      	str	r3, [r7, #80]	; 0x50
				int xSquare1 = 110;
 8004936:	236e      	movs	r3, #110	; 0x6e
 8004938:	64fb      	str	r3, [r7, #76]	; 0x4c
				int xSquare2 = 160;
 800493a:	23a0      	movs	r3, #160	; 0xa0
 800493c:	64bb      	str	r3, [r7, #72]	; 0x48
				int xSquare3 = 210;
 800493e:	23d2      	movs	r3, #210	; 0xd2
 8004940:	647b      	str	r3, [r7, #68]	; 0x44
				int xSquare4 = 260;
 8004942:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004946:	643b      	str	r3, [r7, #64]	; 0x40
				int xSquare5 =310;
 8004948:	f44f 739b 	mov.w	r3, #310	; 0x136
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
				int xSquare6 = 360;
 800494e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004952:	63bb      	str	r3, [r7, #56]	; 0x38
				int y = 20;
 8004954:	2314      	movs	r3, #20
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
				int w = 40;
 8004958:	2328      	movs	r3, #40	; 0x28
 800495a:	633b      	str	r3, [r7, #48]	; 0x30
				int h = 30;
 800495c:	231e      	movs	r3, #30
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
//					LCD_FillRect(x+1,y+1,xt-x,h-1);
					/* WHITE Bar for update */
//					LCD_SetFillColor(LCD_COLOR_WHITE);
//					LCD_FillRect(xt,y+1,w+x-xt,h-1);
//				}
				ChangeEnable();
 8004960:	f7fc ffce 	bl	8001900 <ChangeEnable>
				if(EnableChangeFig){
 8004964:	4b57      	ldr	r3, [pc, #348]	; (8004ac4 <uiSliderDelay+0x1b4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 84b8 	beq.w	80052de <uiSliderDelay+0x9ce>
					if(xt>xSquare0 && xt<xSquare0+w && yt>y && yt<y+h){
 800496e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004972:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004974:	429a      	cmp	r2, r3
 8004976:	f280 80ab 	bge.w	8004ad0 <uiSliderDelay+0x1c0>
 800497a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800497e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	440b      	add	r3, r1
 8004984:	429a      	cmp	r2, r3
 8004986:	f280 80a3 	bge.w	8004ad0 <uiSliderDelay+0x1c0>
 800498a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800498e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004990:	429a      	cmp	r2, r3
 8004992:	f280 809d 	bge.w	8004ad0 <uiSliderDelay+0x1c0>
 8004996:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800499a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	440b      	add	r3, r1
 80049a0:	429a      	cmp	r2, r3
 80049a2:	f280 8095 	bge.w	8004ad0 <uiSliderDelay+0x1c0>
						ChangeFigure(0);
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fc ff8a 	bl	80018c0 <ChangeFigure>
						if(Figure==0){
 80049ac:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <uiSliderDelay+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 8494 	bne.w	80052de <uiSliderDelay+0x9ce>
							LCD_SetFillColor(LCD_COLOR_RED);
 80049b6:	4845      	ldr	r0, [pc, #276]	; (8004acc <uiSliderDelay+0x1bc>)
 80049b8:	f000 fee0 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare0+1,y+1,w-1,h-1);
 80049bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	b298      	uxth	r0, r3
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3301      	adds	r3, #1
 80049ca:	b299      	uxth	r1, r3
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f001 f8a4 	bl	8005b28 <LCD_FillRect>
							LCD_SetFillColor(LCD_COLOR_WHITE);
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	f000 feca 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare1+1,y+1,w-1,h-1);
 80049e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	b298      	uxth	r0, r3
 80049f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	b299      	uxth	r1, r3
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f001 f88e 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare2+1,y+1,w-1,h-1);
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3301      	adds	r3, #1
 8004a12:	b298      	uxth	r0, r3
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	b299      	uxth	r1, r3
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f001 f87c 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare3+1,y+1,w-1,h-1);
 8004a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3301      	adds	r3, #1
 8004a36:	b298      	uxth	r0, r3
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	b299      	uxth	r1, r3
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f001 f86a 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare4+1,y+1,w-1,h-1);
 8004a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	b298      	uxth	r0, r3
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3301      	adds	r3, #1
 8004a62:	b299      	uxth	r1, r3
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f001 f858 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare5+1,y+1,w-1,h-1);
 8004a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	b298      	uxth	r0, r3
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3301      	adds	r3, #1
 8004a86:	b299      	uxth	r1, r3
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f001 f846 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare6+1,y+1,w-1,h-1);
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	b298      	uxth	r0, r3
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	b299      	uxth	r1, r3
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f001 f834 	bl	8005b28 <LCD_FillRect>
						if(Figure==0){
 8004ac0:	f000 bc0d 	b.w	80052de <uiSliderDelay+0x9ce>
 8004ac4:	20000024 	.word	0x20000024
 8004ac8:	2000001c 	.word	0x2000001c
 8004acc:	ffff0000 	.word	0xffff0000
						}

					}else if(xt>xSquare1 && xt<xSquare1+w && yt>y && yt<y+h){
 8004ad0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	f280 80a4 	bge.w	8004c24 <uiSliderDelay+0x314>
 8004adc:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004ae0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	440b      	add	r3, r1
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	f280 809c 	bge.w	8004c24 <uiSliderDelay+0x314>
 8004aec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af2:	429a      	cmp	r2, r3
 8004af4:	f280 8096 	bge.w	8004c24 <uiSliderDelay+0x314>
 8004af8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004afc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	440b      	add	r3, r1
 8004b02:	429a      	cmp	r2, r3
 8004b04:	f280 808e 	bge.w	8004c24 <uiSliderDelay+0x314>
						ChangeFigure(1);
 8004b08:	2001      	movs	r0, #1
 8004b0a:	f7fc fed9 	bl	80018c0 <ChangeFigure>
						if(Figure==1){
 8004b0e:	4b9a      	ldr	r3, [pc, #616]	; (8004d78 <uiSliderDelay+0x468>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f040 83e3 	bne.w	80052de <uiSliderDelay+0x9ce>
							LCD_SetFillColor(LCD_COLOR_RED);
 8004b18:	4898      	ldr	r0, [pc, #608]	; (8004d7c <uiSliderDelay+0x46c>)
 8004b1a:	f000 fe2f 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare1+1,y+1,w-1,h-1);
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3301      	adds	r3, #1
 8004b24:	b298      	uxth	r0, r3
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	b299      	uxth	r1, r3
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f000 fff3 	bl	8005b28 <LCD_FillRect>
							LCD_SetFillColor(LCD_COLOR_WHITE);
 8004b42:	f04f 30ff 	mov.w	r0, #4294967295
 8004b46:	f000 fe19 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare0+1,y+1,w-1,h-1);
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	b298      	uxth	r0, r3
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	b299      	uxth	r1, r3
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f000 ffdd 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare2+1,y+1,w-1,h-1);
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	b298      	uxth	r0, r3
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	b299      	uxth	r1, r3
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f000 ffcb 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare3+1,y+1,w-1,h-1);
 8004b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	b298      	uxth	r0, r3
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b299      	uxth	r1, r3
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f000 ffb9 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare4+1,y+1,w-1,h-1);
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	b298      	uxth	r0, r3
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	b299      	uxth	r1, r3
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f000 ffa7 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare5+1,y+1,w-1,h-1);
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	b298      	uxth	r0, r3
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	b299      	uxth	r1, r3
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f000 ff95 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare6+1,y+1,w-1,h-1);
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	b298      	uxth	r0, r3
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	b299      	uxth	r1, r3
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f000 ff83 	bl	8005b28 <LCD_FillRect>
						if(Figure==1){
 8004c22:	e35c      	b.n	80052de <uiSliderDelay+0x9ce>
						}

					}else if(xt>xSquare2 && xt<xSquare2+w && yt>y && yt<y+h){
 8004c24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	f280 80a8 	bge.w	8004d80 <uiSliderDelay+0x470>
 8004c30:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004c34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	440b      	add	r3, r1
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	f280 80a0 	bge.w	8004d80 <uiSliderDelay+0x470>
 8004c40:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c46:	429a      	cmp	r2, r3
 8004c48:	f280 809a 	bge.w	8004d80 <uiSliderDelay+0x470>
 8004c4c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004c50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	440b      	add	r3, r1
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f280 8092 	bge.w	8004d80 <uiSliderDelay+0x470>
						ChangeFigure(2);
 8004c5c:	2002      	movs	r0, #2
 8004c5e:	f7fc fe2f 	bl	80018c0 <ChangeFigure>
						if(Figure==2){
 8004c62:	4b45      	ldr	r3, [pc, #276]	; (8004d78 <uiSliderDelay+0x468>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	f040 8339 	bne.w	80052de <uiSliderDelay+0x9ce>
							LCD_SetFillColor(LCD_COLOR_RED);
 8004c6c:	4843      	ldr	r0, [pc, #268]	; (8004d7c <uiSliderDelay+0x46c>)
 8004c6e:	f000 fd85 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare2+1,y+1,w-1,h-1);
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3301      	adds	r3, #1
 8004c78:	b298      	uxth	r0, r3
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	b299      	uxth	r1, r3
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f000 ff49 	bl	8005b28 <LCD_FillRect>
							LCD_SetFillColor(LCD_COLOR_WHITE);
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9a:	f000 fd6f 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare0+1,y+1,w-1,h-1);
 8004c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	b298      	uxth	r0, r3
 8004ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3301      	adds	r3, #1
 8004cac:	b299      	uxth	r1, r3
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f000 ff33 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare1+1,y+1,w-1,h-1);
 8004cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	b298      	uxth	r0, r3
 8004cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	b299      	uxth	r1, r3
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f000 ff21 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare3+1,y+1,w-1,h-1);
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	b298      	uxth	r0, r3
 8004cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	b299      	uxth	r1, r3
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f000 ff0f 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare4+1,y+1,w-1,h-1);
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	b298      	uxth	r0, r3
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3301      	adds	r3, #1
 8004d18:	b299      	uxth	r1, r3
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f000 fefd 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare5+1,y+1,w-1,h-1);
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3301      	adds	r3, #1
 8004d34:	b298      	uxth	r0, r3
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f000 feeb 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare6+1,y+1,w-1,h-1);
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3301      	adds	r3, #1
 8004d58:	b298      	uxth	r0, r3
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	b299      	uxth	r1, r3
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f000 fed9 	bl	8005b28 <LCD_FillRect>
						if(Figure==2){
 8004d76:	e2b2      	b.n	80052de <uiSliderDelay+0x9ce>
 8004d78:	2000001c 	.word	0x2000001c
 8004d7c:	ffff0000 	.word	0xffff0000
						}

					}else if(xt>xSquare3 && xt<xSquare3+w && yt>y && yt<y+h){
 8004d80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d86:	429a      	cmp	r2, r3
 8004d88:	f280 80a4 	bge.w	8004ed4 <uiSliderDelay+0x5c4>
 8004d8c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004d90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	440b      	add	r3, r1
 8004d96:	429a      	cmp	r2, r3
 8004d98:	f280 809c 	bge.w	8004ed4 <uiSliderDelay+0x5c4>
 8004d9c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da2:	429a      	cmp	r2, r3
 8004da4:	f280 8096 	bge.w	8004ed4 <uiSliderDelay+0x5c4>
 8004da8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004dac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	440b      	add	r3, r1
 8004db2:	429a      	cmp	r2, r3
 8004db4:	f280 808e 	bge.w	8004ed4 <uiSliderDelay+0x5c4>
						ChangeFigure(3);
 8004db8:	2003      	movs	r0, #3
 8004dba:	f7fc fd81 	bl	80018c0 <ChangeFigure>
						if(Figure==3){
 8004dbe:	4b9a      	ldr	r3, [pc, #616]	; (8005028 <uiSliderDelay+0x718>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	f040 828b 	bne.w	80052de <uiSliderDelay+0x9ce>
							LCD_SetFillColor(LCD_COLOR_RED);
 8004dc8:	4898      	ldr	r0, [pc, #608]	; (800502c <uiSliderDelay+0x71c>)
 8004dca:	f000 fcd7 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare3+1,y+1,w-1,h-1);
 8004dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b298      	uxth	r0, r3
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	b299      	uxth	r1, r3
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f000 fe9b 	bl	8005b28 <LCD_FillRect>
							LCD_SetFillColor(LCD_COLOR_WHITE);
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	f000 fcc1 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare0+1,y+1,w-1,h-1);
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	b298      	uxth	r0, r3
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3301      	adds	r3, #1
 8004e08:	b299      	uxth	r1, r3
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f000 fe85 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare2+1,y+1,w-1,h-1);
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3301      	adds	r3, #1
 8004e24:	b298      	uxth	r0, r3
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	b299      	uxth	r1, r3
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f000 fe73 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare1+1,y+1,w-1,h-1);
 8004e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3301      	adds	r3, #1
 8004e48:	b298      	uxth	r0, r3
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	b299      	uxth	r1, r3
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f000 fe61 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare4+1,y+1,w-1,h-1);
 8004e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	b298      	uxth	r0, r3
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3301      	adds	r3, #1
 8004e74:	b299      	uxth	r1, r3
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f000 fe4f 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare5+1,y+1,w-1,h-1);
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	b298      	uxth	r0, r3
 8004e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3301      	adds	r3, #1
 8004e98:	b299      	uxth	r1, r3
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f000 fe3d 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare6+1,y+1,w-1,h-1);
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b298      	uxth	r0, r3
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b299      	uxth	r1, r3
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f000 fe2b 	bl	8005b28 <LCD_FillRect>
						if(Figure==3){
 8004ed2:	e204      	b.n	80052de <uiSliderDelay+0x9ce>
						}

					}else if(xt>xSquare4 && xt<xSquare4+w && yt>y && yt<y+h){
 8004ed4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eda:	429a      	cmp	r2, r3
 8004edc:	f280 80a8 	bge.w	8005030 <uiSliderDelay+0x720>
 8004ee0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004ee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	440b      	add	r3, r1
 8004eea:	429a      	cmp	r2, r3
 8004eec:	f280 80a0 	bge.w	8005030 <uiSliderDelay+0x720>
 8004ef0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	f280 809a 	bge.w	8005030 <uiSliderDelay+0x720>
 8004efc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004f00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	440b      	add	r3, r1
 8004f06:	429a      	cmp	r2, r3
 8004f08:	f280 8092 	bge.w	8005030 <uiSliderDelay+0x720>
						ChangeFigure(4);
 8004f0c:	2004      	movs	r0, #4
 8004f0e:	f7fc fcd7 	bl	80018c0 <ChangeFigure>
						if(Figure==4){
 8004f12:	4b45      	ldr	r3, [pc, #276]	; (8005028 <uiSliderDelay+0x718>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	f040 81e1 	bne.w	80052de <uiSliderDelay+0x9ce>
							LCD_SetFillColor(LCD_COLOR_RED);
 8004f1c:	4843      	ldr	r0, [pc, #268]	; (800502c <uiSliderDelay+0x71c>)
 8004f1e:	f000 fc2d 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare4+1,y+1,w-1,h-1);
 8004f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	b298      	uxth	r0, r3
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	b299      	uxth	r1, r3
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f000 fdf1 	bl	8005b28 <LCD_FillRect>
							LCD_SetFillColor(LCD_COLOR_WHITE);
 8004f46:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4a:	f000 fc17 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare0+1,y+1,w-1,h-1);
 8004f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3301      	adds	r3, #1
 8004f54:	b298      	uxth	r0, r3
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	b299      	uxth	r1, r3
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f000 fddb 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare2+1,y+1,w-1,h-1);
 8004f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3301      	adds	r3, #1
 8004f78:	b298      	uxth	r0, r3
 8004f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	b299      	uxth	r1, r3
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f000 fdc9 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare3+1,y+1,w-1,h-1);
 8004f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	b298      	uxth	r0, r3
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	b299      	uxth	r1, r3
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f000 fdb7 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare1+1,y+1,w-1,h-1);
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	b298      	uxth	r0, r3
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	b299      	uxth	r1, r3
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f000 fda5 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare5+1,y+1,w-1,h-1);
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	b298      	uxth	r0, r3
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3301      	adds	r3, #1
 8004fec:	b299      	uxth	r1, r3
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f000 fd93 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare6+1,y+1,w-1,h-1);
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	b29b      	uxth	r3, r3
 8005006:	3301      	adds	r3, #1
 8005008:	b298      	uxth	r0, r3
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500c:	b29b      	uxth	r3, r3
 800500e:	3301      	adds	r3, #1
 8005010:	b299      	uxth	r1, r3
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29b      	uxth	r3, r3
 8005022:	f000 fd81 	bl	8005b28 <LCD_FillRect>
						if(Figure==4){
 8005026:	e15a      	b.n	80052de <uiSliderDelay+0x9ce>
 8005028:	2000001c 	.word	0x2000001c
 800502c:	ffff0000 	.word	0xffff0000
						}

					}else if(xt>xSquare5 && xt<xSquare5+w && yt>y && yt<y+h){
 8005030:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005036:	429a      	cmp	r2, r3
 8005038:	f280 80a8 	bge.w	800518c <uiSliderDelay+0x87c>
 800503c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8005040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	440b      	add	r3, r1
 8005046:	429a      	cmp	r2, r3
 8005048:	f280 80a0 	bge.w	800518c <uiSliderDelay+0x87c>
 800504c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005052:	429a      	cmp	r2, r3
 8005054:	f280 809a 	bge.w	800518c <uiSliderDelay+0x87c>
 8005058:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800505c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	440b      	add	r3, r1
 8005062:	429a      	cmp	r2, r3
 8005064:	f280 8092 	bge.w	800518c <uiSliderDelay+0x87c>
						ChangeFigure(5);
 8005068:	2005      	movs	r0, #5
 800506a:	f7fc fc29 	bl	80018c0 <ChangeFigure>
						if(Figure==5){
 800506e:	4b45      	ldr	r3, [pc, #276]	; (8005184 <uiSliderDelay+0x874>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b05      	cmp	r3, #5
 8005074:	f040 8133 	bne.w	80052de <uiSliderDelay+0x9ce>
							LCD_SetFillColor(LCD_COLOR_RED);
 8005078:	4843      	ldr	r0, [pc, #268]	; (8005188 <uiSliderDelay+0x878>)
 800507a:	f000 fb7f 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare5+1,y+1,w-1,h-1);
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	b29b      	uxth	r3, r3
 8005082:	3301      	adds	r3, #1
 8005084:	b298      	uxth	r0, r3
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	b29b      	uxth	r3, r3
 800508a:	3301      	adds	r3, #1
 800508c:	b299      	uxth	r1, r3
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29b      	uxth	r3, r3
 800509e:	f000 fd43 	bl	8005b28 <LCD_FillRect>
							LCD_SetFillColor(LCD_COLOR_WHITE);
 80050a2:	f04f 30ff 	mov.w	r0, #4294967295
 80050a6:	f000 fb69 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare0+1,y+1,w-1,h-1);
 80050aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3301      	adds	r3, #1
 80050b0:	b298      	uxth	r0, r3
 80050b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3301      	adds	r3, #1
 80050b8:	b299      	uxth	r1, r3
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f000 fd2d 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare2+1,y+1,w-1,h-1);
 80050ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3301      	adds	r3, #1
 80050d4:	b298      	uxth	r0, r3
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3301      	adds	r3, #1
 80050dc:	b299      	uxth	r1, r3
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f000 fd1b 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare3+1,y+1,w-1,h-1);
 80050f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3301      	adds	r3, #1
 80050f8:	b298      	uxth	r0, r3
 80050fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3301      	adds	r3, #1
 8005100:	b299      	uxth	r1, r3
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29b      	uxth	r3, r3
 8005112:	f000 fd09 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare4+1,y+1,w-1,h-1);
 8005116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005118:	b29b      	uxth	r3, r3
 800511a:	3301      	adds	r3, #1
 800511c:	b298      	uxth	r0, r3
 800511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005120:	b29b      	uxth	r3, r3
 8005122:	3301      	adds	r3, #1
 8005124:	b299      	uxth	r1, r3
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29b      	uxth	r3, r3
 8005136:	f000 fcf7 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare1+1,y+1,w-1,h-1);
 800513a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513c:	b29b      	uxth	r3, r3
 800513e:	3301      	adds	r3, #1
 8005140:	b298      	uxth	r0, r3
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	b29b      	uxth	r3, r3
 8005146:	3301      	adds	r3, #1
 8005148:	b299      	uxth	r1, r3
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29b      	uxth	r3, r3
 800515a:	f000 fce5 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare6+1,y+1,w-1,h-1);
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	b29b      	uxth	r3, r3
 8005162:	3301      	adds	r3, #1
 8005164:	b298      	uxth	r0, r3
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	b29b      	uxth	r3, r3
 800516a:	3301      	adds	r3, #1
 800516c:	b299      	uxth	r1, r3
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29b      	uxth	r3, r3
 800517e:	f000 fcd3 	bl	8005b28 <LCD_FillRect>
						if(Figure==5){
 8005182:	e0ac      	b.n	80052de <uiSliderDelay+0x9ce>
 8005184:	2000001c 	.word	0x2000001c
 8005188:	ffff0000 	.word	0xffff0000
						}

					}else if(xt>xSquare6 && xt<xSquare6+w && yt>y && yt<y+h){
 800518c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005192:	429a      	cmp	r2, r3
 8005194:	f280 80a3 	bge.w	80052de <uiSliderDelay+0x9ce>
 8005198:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800519c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	440b      	add	r3, r1
 80051a2:	429a      	cmp	r2, r3
 80051a4:	f280 809b 	bge.w	80052de <uiSliderDelay+0x9ce>
 80051a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80051ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ae:	429a      	cmp	r2, r3
 80051b0:	f280 8095 	bge.w	80052de <uiSliderDelay+0x9ce>
 80051b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80051b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	440b      	add	r3, r1
 80051be:	429a      	cmp	r2, r3
 80051c0:	f280 808d 	bge.w	80052de <uiSliderDelay+0x9ce>
						ChangeFigure(6);
 80051c4:	2006      	movs	r0, #6
 80051c6:	f7fc fb7b 	bl	80018c0 <ChangeFigure>
						if(Figure==6){
 80051ca:	4b71      	ldr	r3, [pc, #452]	; (8005390 <uiSliderDelay+0xa80>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	f040 8085 	bne.w	80052de <uiSliderDelay+0x9ce>
							LCD_SetFillColor(LCD_COLOR_RED);
 80051d4:	486f      	ldr	r0, [pc, #444]	; (8005394 <uiSliderDelay+0xa84>)
 80051d6:	f000 fad1 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare6+1,y+1,w-1,h-1);
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3301      	adds	r3, #1
 80051e0:	b298      	uxth	r0, r3
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3301      	adds	r3, #1
 80051e8:	b299      	uxth	r1, r3
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f000 fc95 	bl	8005b28 <LCD_FillRect>
							LCD_SetFillColor(LCD_COLOR_WHITE);
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	f000 fabb 	bl	800577c <LCD_SetFillColor>
							LCD_FillRect(xSquare0+1,y+1,w-1,h-1);
 8005206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005208:	b29b      	uxth	r3, r3
 800520a:	3301      	adds	r3, #1
 800520c:	b298      	uxth	r0, r3
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005210:	b29b      	uxth	r3, r3
 8005212:	3301      	adds	r3, #1
 8005214:	b299      	uxth	r1, r3
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29b      	uxth	r3, r3
 8005226:	f000 fc7f 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare2+1,y+1,w-1,h-1);
 800522a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522c:	b29b      	uxth	r3, r3
 800522e:	3301      	adds	r3, #1
 8005230:	b298      	uxth	r0, r3
 8005232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005234:	b29b      	uxth	r3, r3
 8005236:	3301      	adds	r3, #1
 8005238:	b299      	uxth	r1, r3
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	f000 fc6d 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare3+1,y+1,w-1,h-1);
 800524e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005250:	b29b      	uxth	r3, r3
 8005252:	3301      	adds	r3, #1
 8005254:	b298      	uxth	r0, r3
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005258:	b29b      	uxth	r3, r3
 800525a:	3301      	adds	r3, #1
 800525c:	b299      	uxth	r1, r3
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29b      	uxth	r3, r3
 800526e:	f000 fc5b 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare4+1,y+1,w-1,h-1);
 8005272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005274:	b29b      	uxth	r3, r3
 8005276:	3301      	adds	r3, #1
 8005278:	b298      	uxth	r0, r3
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	b29b      	uxth	r3, r3
 800527e:	3301      	adds	r3, #1
 8005280:	b299      	uxth	r1, r3
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29b      	uxth	r3, r3
 8005292:	f000 fc49 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare5+1,y+1,w-1,h-1);
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	b29b      	uxth	r3, r3
 800529a:	3301      	adds	r3, #1
 800529c:	b298      	uxth	r0, r3
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3301      	adds	r3, #1
 80052a4:	b299      	uxth	r1, r3
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f000 fc37 	bl	8005b28 <LCD_FillRect>
							LCD_FillRect(xSquare1+1,y+1,w-1,h-1);
 80052ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3301      	adds	r3, #1
 80052c0:	b298      	uxth	r0, r3
 80052c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3301      	adds	r3, #1
 80052c8:	b299      	uxth	r1, r3
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f000 fc25 	bl	8005b28 <LCD_FillRect>
						}

					}
				}
				switch(Figure){
 80052de:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <uiSliderDelay+0xa80>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b06      	cmp	r3, #6
 80052e4:	d850      	bhi.n	8005388 <uiSliderDelay+0xa78>
 80052e6:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <uiSliderDelay+0x9dc>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	08005309 	.word	0x08005309
 80052f0:	0800531b 	.word	0x0800531b
 80052f4:	0800532d 	.word	0x0800532d
 80052f8:	0800533f 	.word	0x0800533f
 80052fc:	08005351 	.word	0x08005351
 8005300:	08005363 	.word	0x08005363
 8005304:	08005375 	.word	0x08005375
				case 0 : LCD_DrawString(200,60,(uint8_t *) "Figure 0", LEFT_MODE, true);break;
 8005308:	2301      	movs	r3, #1
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2303      	movs	r3, #3
 800530e:	4a22      	ldr	r2, [pc, #136]	; (8005398 <uiSliderDelay+0xa88>)
 8005310:	213c      	movs	r1, #60	; 0x3c
 8005312:	20c8      	movs	r0, #200	; 0xc8
 8005314:	f000 fb00 	bl	8005918 <LCD_DrawString>
 8005318:	e036      	b.n	8005388 <uiSliderDelay+0xa78>
				case 1 : LCD_DrawString(200,60,(uint8_t *) "Figure 1", LEFT_MODE, true);break;
 800531a:	2301      	movs	r3, #1
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	2303      	movs	r3, #3
 8005320:	4a1e      	ldr	r2, [pc, #120]	; (800539c <uiSliderDelay+0xa8c>)
 8005322:	213c      	movs	r1, #60	; 0x3c
 8005324:	20c8      	movs	r0, #200	; 0xc8
 8005326:	f000 faf7 	bl	8005918 <LCD_DrawString>
 800532a:	e02d      	b.n	8005388 <uiSliderDelay+0xa78>
				case 2 : LCD_DrawString(200,60,(uint8_t *) "Figure 2", LEFT_MODE, true);break;
 800532c:	2301      	movs	r3, #1
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	2303      	movs	r3, #3
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <uiSliderDelay+0xa90>)
 8005334:	213c      	movs	r1, #60	; 0x3c
 8005336:	20c8      	movs	r0, #200	; 0xc8
 8005338:	f000 faee 	bl	8005918 <LCD_DrawString>
 800533c:	e024      	b.n	8005388 <uiSliderDelay+0xa78>
				case 3 : LCD_DrawString(200,60,(uint8_t *) "Figure 3", LEFT_MODE, true);break;
 800533e:	2301      	movs	r3, #1
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	2303      	movs	r3, #3
 8005344:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <uiSliderDelay+0xa94>)
 8005346:	213c      	movs	r1, #60	; 0x3c
 8005348:	20c8      	movs	r0, #200	; 0xc8
 800534a:	f000 fae5 	bl	8005918 <LCD_DrawString>
 800534e:	e01b      	b.n	8005388 <uiSliderDelay+0xa78>
				case 4 : LCD_DrawString(200,60,(uint8_t *) "Figure 4", LEFT_MODE, true);break;
 8005350:	2301      	movs	r3, #1
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2303      	movs	r3, #3
 8005356:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <uiSliderDelay+0xa98>)
 8005358:	213c      	movs	r1, #60	; 0x3c
 800535a:	20c8      	movs	r0, #200	; 0xc8
 800535c:	f000 fadc 	bl	8005918 <LCD_DrawString>
 8005360:	e012      	b.n	8005388 <uiSliderDelay+0xa78>
				case 5 : LCD_DrawString(200,60,(uint8_t *) "Figure 5", LEFT_MODE, true);break;
 8005362:	2301      	movs	r3, #1
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	2303      	movs	r3, #3
 8005368:	4a10      	ldr	r2, [pc, #64]	; (80053ac <uiSliderDelay+0xa9c>)
 800536a:	213c      	movs	r1, #60	; 0x3c
 800536c:	20c8      	movs	r0, #200	; 0xc8
 800536e:	f000 fad3 	bl	8005918 <LCD_DrawString>
 8005372:	e009      	b.n	8005388 <uiSliderDelay+0xa78>
				case 6 : LCD_DrawString(200,60,(uint8_t *) "Figure 6", LEFT_MODE, true);break;
 8005374:	2301      	movs	r3, #1
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2303      	movs	r3, #3
 800537a:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <uiSliderDelay+0xaa0>)
 800537c:	213c      	movs	r1, #60	; 0x3c
 800537e:	20c8      	movs	r0, #200	; 0xc8
 8005380:	f000 faca 	bl	8005918 <LCD_DrawString>
 8005384:	e000      	b.n	8005388 <uiSliderDelay+0xa78>
				}


	}
 8005386:	bf00      	nop
}
 8005388:	bf00      	nop
 800538a:	3758      	adds	r7, #88	; 0x58
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	2000001c 	.word	0x2000001c
 8005394:	ffff0000 	.word	0xffff0000
 8005398:	0801cb8c 	.word	0x0801cb8c
 800539c:	0801cb98 	.word	0x0801cb98
 80053a0:	0801cba4 	.word	0x0801cba4
 80053a4:	0801cbb0 	.word	0x0801cbb0
 80053a8:	0801cbbc 	.word	0x0801cbbc
 80053ac:	0801cbc8 	.word	0x0801cbc8
 80053b0:	0801cbd4 	.word	0x0801cbd4

080053b4 <uiDisplaySpectrum>:




uint32_t VAL;
void uiDisplaySpectrum() {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
	/* sweep reset */
	if(time>360){
 80053ba:	4b26      	ldr	r3, [pc, #152]	; (8005454 <uiDisplaySpectrum+0xa0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80053c2:	dd02      	ble.n	80053ca <uiDisplaySpectrum+0x16>
		time=0;
 80053c4:	4b23      	ldr	r3, [pc, #140]	; (8005454 <uiDisplaySpectrum+0xa0>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
	}
	/* sweep init position */
	uint16_t x=time+60;
 80053ca:	4b22      	ldr	r3, [pc, #136]	; (8005454 <uiDisplaySpectrum+0xa0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	333c      	adds	r3, #60	; 0x3c
 80053d2:	817b      	strh	r3, [r7, #10]
	uint16_t y=270;
 80053d4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80053d8:	813b      	strh	r3, [r7, #8]
	uint32_t color;

	/* run through mag values */
	for(int i=0;i<(256/2);i++){
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e02d      	b.n	800543c <uiDisplaySpectrum+0x88>
		/* Amplitude of frequency "i" */
		VAL = (uint32_t) (FFTOutputMag[i]*255);
 80053e0:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <uiDisplaySpectrum+0xa4>)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	edd3 7a00 	vldr	s15, [r3]
 80053ec:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800545c <uiDisplaySpectrum+0xa8>
 80053f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f8:	ee17 2a90 	vmov	r2, s15
 80053fc:	4b18      	ldr	r3, [pc, #96]	; (8005460 <uiDisplaySpectrum+0xac>)
 80053fe:	601a      	str	r2, [r3, #0]
		color=(uint32_t) 4278190080+(VAL);
 8005400:	4b17      	ldr	r3, [pc, #92]	; (8005460 <uiDisplaySpectrum+0xac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8005408:	607b      	str	r3, [r7, #4]

		/* shade of blue */
		LCD_DrawPixelColor(x,y-(i),(uint32_t) color);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	b29b      	uxth	r3, r3
 800540e:	893a      	ldrh	r2, [r7, #8]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	b299      	uxth	r1, r3
 8005414:	897b      	ldrh	r3, [r7, #10]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f9ef 	bl	80057fc <LCD_DrawPixelColor>
		/* tracking bar */
		LCD_DrawPixelColor(x+1,y-(i),(uint32_t) (4278190080+16753920));
 800541e:	897b      	ldrh	r3, [r7, #10]
 8005420:	3301      	adds	r3, #1
 8005422:	b298      	uxth	r0, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	b29b      	uxth	r3, r3
 8005428:	893a      	ldrh	r2, [r7, #8]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	b29b      	uxth	r3, r3
 800542e:	4a0d      	ldr	r2, [pc, #52]	; (8005464 <uiDisplaySpectrum+0xb0>)
 8005430:	4619      	mov	r1, r3
 8005432:	f000 f9e3 	bl	80057fc <LCD_DrawPixelColor>
	for(int i=0;i<(256/2);i++){
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b7f      	cmp	r3, #127	; 0x7f
 8005440:	ddce      	ble.n	80053e0 <uiDisplaySpectrum+0x2c>
	}
	/* new sweep position */
	time=time+1;
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <uiDisplaySpectrum+0xa0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a02      	ldr	r2, [pc, #8]	; (8005454 <uiDisplaySpectrum+0xa0>)
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	200003dc 	.word	0x200003dc
 8005458:	2000b5c8 	.word	0x2000b5c8
 800545c:	437f0000 	.word	0x437f0000
 8005460:	2000d734 	.word	0x2000d734
 8005464:	ffffa500 	.word	0xffffa500

08005468 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 800546c:	2201      	movs	r2, #1
 800546e:	2102      	movs	r1, #2
 8005470:	4802      	ldr	r0, [pc, #8]	; (800547c <LED_On+0x14>)
 8005472:	f004 fc9f 	bl	8009db4 <HAL_GPIO_WritePin>
}
 8005476:	bf00      	nop
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40022000 	.word	0x40022000

08005480 <LED_Off>:

void LED_Off(){
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8005484:	2200      	movs	r2, #0
 8005486:	2102      	movs	r1, #2
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <LED_Off+0x14>)
 800548a:	f004 fc93 	bl	8009db4 <HAL_GPIO_WritePin>
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40022000 	.word	0x40022000

08005498 <LED_Toggle>:

void LED_Toggle(){
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 800549c:	2102      	movs	r1, #2
 800549e:	4802      	ldr	r0, [pc, #8]	; (80054a8 <LED_Toggle+0x10>)
 80054a0:	f004 fca1 	bl	8009de6 <HAL_GPIO_TogglePin>

}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40022000 	.word	0x40022000

080054ac <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 80054b4:	1d39      	adds	r1, r7, #4
 80054b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ba:	2201      	movs	r2, #1
 80054bc:	4803      	ldr	r0, [pc, #12]	; (80054cc <__io_putchar+0x20>)
 80054be:	f00d f863 	bl	8012588 <HAL_UART_Transmit>
	return ch;
 80054c2:	687b      	ldr	r3, [r7, #4]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	2000d3bc 	.word	0x2000d3bc

080054d0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af04      	add	r7, sp, #16
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	4608      	mov	r0, r1
 80054da:	4611      	mov	r1, r2
 80054dc:	461a      	mov	r2, r3
 80054de:	4603      	mov	r3, r0
 80054e0:	72fb      	strb	r3, [r7, #11]
 80054e2:	460b      	mov	r3, r1
 80054e4:	813b      	strh	r3, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80054ee:	7afb      	ldrb	r3, [r7, #11]
 80054f0:	b299      	uxth	r1, r3
 80054f2:	88f8      	ldrh	r0, [r7, #6]
 80054f4:	893a      	ldrh	r2, [r7, #8]
 80054f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054fa:	9302      	str	r3, [sp, #8]
 80054fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	4603      	mov	r3, r0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f006 fbe4 	bl	800bcd4 <HAL_I2C_Mem_Read>
 800550c:	4603      	mov	r3, r0
 800550e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8005516:	7afb      	ldrb	r3, [r7, #11]
 8005518:	4619      	mov	r1, r3
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f832 	bl	8005584 <I2Cx_Error>
  }
  return status;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b08a      	sub	sp, #40	; 0x28
 800552e:	af04      	add	r7, sp, #16
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	4608      	mov	r0, r1
 8005534:	4611      	mov	r1, r2
 8005536:	461a      	mov	r2, r3
 8005538:	4603      	mov	r3, r0
 800553a:	72fb      	strb	r3, [r7, #11]
 800553c:	460b      	mov	r3, r1
 800553e:	813b      	strh	r3, [r7, #8]
 8005540:	4613      	mov	r3, r2
 8005542:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005548:	7afb      	ldrb	r3, [r7, #11]
 800554a:	b299      	uxth	r1, r3
 800554c:	88f8      	ldrh	r0, [r7, #6]
 800554e:	893a      	ldrh	r2, [r7, #8]
 8005550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005554:	9302      	str	r3, [sp, #8]
 8005556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4603      	mov	r3, r0
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f006 faa3 	bl	800baac <HAL_I2C_Mem_Write>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005570:	7afb      	ldrb	r3, [r7, #11]
 8005572:	4619      	mov	r1, r3
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f805 	bl	8005584 <I2Cx_Error>
  }
  return status;
 800557a:	7dfb      	ldrb	r3, [r7, #23]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f006 fa5b 	bl	800ba4c <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f006 f9c8 	bl	800b92c <HAL_I2C_Init>
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
 80055ae:	460b      	mov	r3, r1
 80055b0:	80bb      	strh	r3, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80055ba:	89fb      	ldrh	r3, [r7, #14]
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	b29b      	uxth	r3, r3
 80055c0:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80055c2:	89fb      	ldrh	r3, [r7, #14]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	b21a      	sxth	r2, r3
 80055ca:	887b      	ldrh	r3, [r7, #2]
 80055cc:	b21b      	sxth	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b21b      	sxth	r3, r3
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80055d6:	88ba      	ldrh	r2, [r7, #4]
 80055d8:	79f9      	ldrb	r1, [r7, #7]
 80055da:	2302      	movs	r3, #2
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	1cbb      	adds	r3, r7, #2
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	2302      	movs	r3, #2
 80055e4:	4803      	ldr	r0, [pc, #12]	; (80055f4 <AUDIO_I2C_Write+0x50>)
 80055e6:	f7ff ffa0 	bl	800552a <I2Cx_WriteMultiple>
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	2000ce64 	.word	0x2000ce64

080055f8 <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	4603      	mov	r3, r0
 8005600:	460a      	mov	r2, r1
 8005602:	71fb      	strb	r3, [r7, #7]
 8005604:	4613      	mov	r3, r2
 8005606:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	81bb      	strh	r3, [r7, #12]
 800560c:	2300      	movs	r3, #0
 800560e:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8005610:	88ba      	ldrh	r2, [r7, #4]
 8005612:	79f9      	ldrb	r1, [r7, #7]
 8005614:	2302      	movs	r3, #2
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	f107 030c 	add.w	r3, r7, #12
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	2302      	movs	r3, #2
 8005620:	480a      	ldr	r0, [pc, #40]	; (800564c <AUDIO_I2C_Read+0x54>)
 8005622:	f7ff ff55 	bl	80054d0 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8005626:	89bb      	ldrh	r3, [r7, #12]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800562c:	89bb      	ldrh	r3, [r7, #12]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	b29b      	uxth	r3, r3
 8005632:	b21a      	sxth	r2, r3
 8005634:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005638:	4313      	orrs	r3, r2
 800563a:	b21b      	sxth	r3, r3
 800563c:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 800563e:	89fb      	ldrh	r3, [r7, #14]
 8005640:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8005642:	89bb      	ldrh	r3, [r7, #12]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	2000ce64 	.word	0x2000ce64

08005650 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af02      	add	r7, sp, #8
 8005656:	4603      	mov	r3, r0
 8005658:	460a      	mov	r2, r1
 800565a:	71fb      	strb	r3, [r7, #7]
 800565c:	4613      	mov	r3, r2
 800565e:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	b29a      	uxth	r2, r3
 8005664:	2301      	movs	r3, #1
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	1dbb      	adds	r3, r7, #6
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2301      	movs	r3, #1
 800566e:	2170      	movs	r1, #112	; 0x70
 8005670:	4803      	ldr	r0, [pc, #12]	; (8005680 <TS_I2C_Write+0x30>)
 8005672:	f7ff ff5a 	bl	800552a <I2Cx_WriteMultiple>

}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	2000ce64 	.word	0x2000ce64

08005684 <TS_I2C_Read>:
/**
  * Reads a single control data from the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_I2C_Read(uint8_t Reg){
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af02      	add	r7, sp, #8
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]

  uint8_t read_value = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hi2c3, TS_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	b29a      	uxth	r2, r3
 8005696:	2301      	movs	r3, #1
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	f107 030f 	add.w	r3, r7, #15
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2301      	movs	r3, #1
 80056a2:	2170      	movs	r1, #112	; 0x70
 80056a4:	4803      	ldr	r0, [pc, #12]	; (80056b4 <TS_I2C_Read+0x30>)
 80056a6:	f7ff ff13 	bl	80054d0 <I2Cx_ReadMultiple>

  return read_value;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	2000ce64 	.word	0x2000ce64

080056b8 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <LCD_Init+0x44>)
 80056be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d002      	beq.n	80056ca <LCD_Init+0x12>
 80056c4:	480e      	ldr	r0, [pc, #56]	; (8005700 <LCD_Init+0x48>)
 80056c6:	f7fd fe1f 	bl	8003308 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 80056ca:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <LCD_Init+0x4c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	4619      	mov	r1, r3
 80056d2:	480a      	ldr	r0, [pc, #40]	; (80056fc <LCD_Init+0x44>)
 80056d4:	f006 ffda 	bl	800c68c <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 80056d8:	f000 f81a 	bl	8005710 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 80056dc:	480a      	ldr	r0, [pc, #40]	; (8005708 <LCD_Init+0x50>)
 80056de:	f000 f87d 	bl	80057dc <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295
 80056e6:	f000 f861 	bl	80057ac <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 80056ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80056ee:	f000 f82d 	bl	800574c <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 80056f2:	4806      	ldr	r0, [pc, #24]	; (800570c <LCD_Init+0x54>)
 80056f4:	f000 f842 	bl	800577c <LCD_SetFillColor>


}
 80056f8:	bf00      	nop
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	2000d27c 	.word	0x2000d27c
 8005700:	0801cbf0 	.word	0x0801cbf0
 8005704:	20000030 	.word	0x20000030
 8005708:	20000048 	.word	0x20000048
 800570c:	ffff0000 	.word	0xffff0000

08005710 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <LCD_DisplayOn+0x30>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <LCD_DisplayOn+0x30>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005724:	2201      	movs	r2, #1
 8005726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800572a:	4806      	ldr	r0, [pc, #24]	; (8005744 <LCD_DisplayOn+0x34>)
 800572c:	f004 fb42 	bl	8009db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005730:	2201      	movs	r2, #1
 8005732:	2108      	movs	r1, #8
 8005734:	4804      	ldr	r0, [pc, #16]	; (8005748 <LCD_DisplayOn+0x38>)
 8005736:	f004 fb3d 	bl	8009db4 <HAL_GPIO_WritePin>
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000d27c 	.word	0x2000d27c
 8005744:	40022000 	.word	0x40022000
 8005748:	40022800 	.word	0x40022800

0800574c <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8005754:	4a07      	ldr	r2, [pc, #28]	; (8005774 <LCD_SetStrokeColor+0x28>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <LCD_SetStrokeColor+0x28>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 faf4 	bl	8005d4c <ARGB888ToRGB565>
 8005764:	4603      	mov	r3, r0
 8005766:	461a      	mov	r2, r3
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <LCD_SetStrokeColor+0x2c>)
 800576a:	601a      	str	r2, [r3, #0]
#endif
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	200003e0 	.word	0x200003e0
 8005778:	200003ec 	.word	0x200003ec

0800577c <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8005784:	4a07      	ldr	r2, [pc, #28]	; (80057a4 <LCD_SetFillColor+0x28>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <LCD_SetFillColor+0x28>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fadc 	bl	8005d4c <ARGB888ToRGB565>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <LCD_SetFillColor+0x2c>)
 800579a:	601a      	str	r2, [r3, #0]
#endif
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	200003e4 	.word	0x200003e4
 80057a8:	200003f0 	.word	0x200003f0

080057ac <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 80057b4:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <LCD_SetBackColor+0x28>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <LCD_SetBackColor+0x28>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fac4 	bl	8005d4c <ARGB888ToRGB565>
 80057c4:	4603      	mov	r3, r0
 80057c6:	461a      	mov	r2, r3
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <LCD_SetBackColor+0x2c>)
 80057ca:	601a      	str	r2, [r3, #0]
#endif
}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	200003e8 	.word	0x200003e8
 80057d8:	200003f4 	.word	0x200003f4

080057dc <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <LCD_SetFont+0x1c>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6013      	str	r3, [r2, #0]
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	200003f8 	.word	0x200003f8

080057fc <LCD_DrawPixelColor>:
	__CleanDCache();

}

void LCD_DrawPixelColor(uint16_t Xpos, uint16_t Ypos, uint32_t Color8888)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	603a      	str	r2, [r7, #0]
 8005806:	80fb      	strh	r3, [r7, #6]
 8005808:	460b      	mov	r3, r1
 800580a:	80bb      	strh	r3, [r7, #4]
	LCD_SetStrokeColor(Color8888);
 800580c:	6838      	ldr	r0, [r7, #0]
 800580e:	f7ff ff9d 	bl	800574c <LCD_SetStrokeColor>
	__DrawPixel(Xpos, Ypos, STROKE_COLOR);
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <LCD_DrawPixelColor+0x40>)
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <LCD_DrawPixelColor+0x44>)
 8005818:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800581a:	88ba      	ldrh	r2, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	015b      	lsls	r3, r3, #5
 8005824:	461a      	mov	r2, r3
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	4413      	add	r3, r2
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	440b      	add	r3, r1
 800582e:	b282      	uxth	r2, r0
 8005830:	801a      	strh	r2, [r3, #0]
	__CleanDCache();

}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200003ec 	.word	0x200003ec
 8005840:	2000d27c 	.word	0x2000d27c

08005844 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	460a      	mov	r2, r1
 800584e:	80fb      	strh	r3, [r7, #6]
 8005850:	4613      	mov	r3, r2
 8005852:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <LCD_ErasePixel+0x3c>)
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <LCD_ErasePixel+0x40>)
 800585a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800585c:	88ba      	ldrh	r2, [r7, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	015b      	lsls	r3, r3, #5
 8005866:	461a      	mov	r2, r3
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	4413      	add	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	440b      	add	r3, r1
 8005870:	b282      	uxth	r2, r0
 8005872:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	200003f4 	.word	0x200003f4
 8005884:	2000d27c 	.word	0x2000d27c

08005888 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 800588e:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <LCD_Clear+0x28>)
 8005890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005892:	4618      	mov	r0, r3
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <LCD_Clear+0x2c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	2300      	movs	r3, #0
 800589c:	f44f 7288 	mov.w	r2, #272	; 0x110
 80058a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80058a4:	f000 fa1a 	bl	8005cdc <LL_FillBuffer>
}
 80058a8:	bf00      	nop
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	2000d27c 	.word	0x2000d27c
 80058b4:	200003e8 	.word	0x200003e8

080058b8 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4623      	mov	r3, r4
 80058c8:	80fb      	strh	r3, [r7, #6]
 80058ca:	4603      	mov	r3, r0
 80058cc:	80bb      	strh	r3, [r7, #4]
 80058ce:	460b      	mov	r3, r1
 80058d0:	70fb      	strb	r3, [r7, #3]
 80058d2:	4613      	mov	r3, r2
 80058d4:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 80058d6:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <LCD_DrawChar+0x5c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	3b20      	subs	r3, #32
 80058e0:	490c      	ldr	r1, [pc, #48]	; (8005914 <LCD_DrawChar+0x5c>)
 80058e2:	6809      	ldr	r1, [r1, #0]
 80058e4:	88c9      	ldrh	r1, [r1, #6]
 80058e6:	fb01 f103 	mul.w	r1, r1, r3
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <LCD_DrawChar+0x5c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	889b      	ldrh	r3, [r3, #4]
 80058f0:	3307      	adds	r3, #7
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	da00      	bge.n	80058f8 <LCD_DrawChar+0x40>
 80058f6:	3307      	adds	r3, #7
 80058f8:	10db      	asrs	r3, r3, #3
 80058fa:	fb03 f301 	mul.w	r3, r3, r1
 80058fe:	441a      	add	r2, r3
 8005900:	78bb      	ldrb	r3, [r7, #2]
 8005902:	88b9      	ldrh	r1, [r7, #4]
 8005904:	88f8      	ldrh	r0, [r7, #6]
 8005906:	f000 f941 	bl	8005b8c <DrawChar>

}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bd90      	pop	{r4, r7, pc}
 8005912:	bf00      	nop
 8005914:	200003f8 	.word	0x200003f8

08005918 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	60ba      	str	r2, [r7, #8]
 8005920:	461a      	mov	r2, r3
 8005922:	4603      	mov	r3, r0
 8005924:	81fb      	strh	r3, [r7, #14]
 8005926:	460b      	mov	r3, r1
 8005928:	81bb      	strh	r3, [r7, #12]
 800592a:	4613      	mov	r3, r2
 800592c:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 800592e:	2301      	movs	r3, #1
 8005930:	83fb      	strh	r3, [r7, #30]
 8005932:	2300      	movs	r3, #0
 8005934:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 8005942:	e002      	b.n	800594a <LCD_DrawString+0x32>
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	3301      	adds	r3, #1
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	617a      	str	r2, [r7, #20]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f6      	bne.n	8005944 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 8005956:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <LCD_DrawString+0x128>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	889b      	ldrh	r3, [r3, #4]
 800595c:	461a      	mov	r2, r3
 800595e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005962:	fb93 f3f2 	sdiv	r3, r3, r2
 8005966:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d014      	beq.n	8005998 <LCD_DrawString+0x80>
 800596e:	2b03      	cmp	r3, #3
 8005970:	dc23      	bgt.n	80059ba <LCD_DrawString+0xa2>
 8005972:	2b01      	cmp	r3, #1
 8005974:	d002      	beq.n	800597c <LCD_DrawString+0x64>
 8005976:	2b02      	cmp	r3, #2
 8005978:	d011      	beq.n	800599e <LCD_DrawString+0x86>
 800597a:	e01e      	b.n	80059ba <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <LCD_DrawString+0x128>)
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	8892      	ldrh	r2, [r2, #4]
 8005988:	fb02 f303 	mul.w	r3, r2, r3
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	89fb      	ldrh	r3, [r7, #14]
 8005992:	4413      	add	r3, r2
 8005994:	83fb      	strh	r3, [r7, #30]
		break;
 8005996:	e013      	b.n	80059c0 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8005998:	89fb      	ldrh	r3, [r7, #14]
 800599a:	83fb      	strh	r3, [r7, #30]
		break;
 800599c:	e010      	b.n	80059c0 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <LCD_DrawString+0x128>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	889b      	ldrh	r3, [r3, #4]
 80059ac:	fb12 f303 	smulbb	r3, r2, r3
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	89fb      	ldrh	r3, [r7, #14]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	83fb      	strh	r3, [r7, #30]
		break;
 80059b8:	e002      	b.n	80059c0 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 80059ba:	89fb      	ldrh	r3, [r7, #14]
 80059bc:	83fb      	strh	r3, [r7, #30]
		break;
 80059be:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 80059c0:	8bfb      	ldrh	r3, [r7, #30]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <LCD_DrawString+0xb6>
 80059c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da16      	bge.n	80059fc <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 80059ce:	2301      	movs	r3, #1
 80059d0:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80059d2:	e013      	b.n	80059fc <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	781a      	ldrb	r2, [r3, #0]
 80059d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059dc:	89b9      	ldrh	r1, [r7, #12]
 80059de:	8bf8      	ldrh	r0, [r7, #30]
 80059e0:	f7ff ff6a 	bl	80058b8 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 80059e4:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <LCD_DrawString+0x128>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	889a      	ldrh	r2, [r3, #4]
 80059ea:	8bfb      	ldrh	r3, [r7, #30]
 80059ec:	4413      	add	r3, r2
 80059ee:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60bb      	str	r3, [r7, #8]
		i++;
 80059f6:	8bbb      	ldrh	r3, [r7, #28]
 80059f8:	3301      	adds	r3, #1
 80059fa:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bf14      	ite	ne
 8005a04:	2301      	movne	r3, #1
 8005a06:	2300      	moveq	r3, #0
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	8bbb      	ldrh	r3, [r7, #28]
 8005a0c:	490c      	ldr	r1, [pc, #48]	; (8005a40 <LCD_DrawString+0x128>)
 8005a0e:	6809      	ldr	r1, [r1, #0]
 8005a10:	8889      	ldrh	r1, [r1, #4]
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	4908      	ldr	r1, [pc, #32]	; (8005a40 <LCD_DrawString+0x128>)
 8005a1e:	6809      	ldr	r1, [r1, #0]
 8005a20:	8889      	ldrh	r1, [r1, #4]
 8005a22:	428b      	cmp	r3, r1
 8005a24:	bfac      	ite	ge
 8005a26:	2301      	movge	r3, #1
 8005a28:	2300      	movlt	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1cf      	bne.n	80059d4 <LCD_DrawString+0xbc>
	}
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	200003f8 	.word	0x200003f8

08005a44 <LCD_DrawRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	4611      	mov	r1, r2
 8005a50:	461a      	mov	r2, r3
 8005a52:	4623      	mov	r3, r4
 8005a54:	80fb      	strh	r3, [r7, #6]
 8005a56:	4603      	mov	r3, r0
 8005a58:	80bb      	strh	r3, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	807b      	strh	r3, [r7, #2]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	803b      	strh	r3, [r7, #0]

	/* Draw horizontal lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), Width, 1, 0, StrokeColor);
 8005a62:	4b2f      	ldr	r3, [pc, #188]	; (8005b20 <LCD_DrawRect+0xdc>)
 8005a64:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005a66:	88ba      	ldrh	r2, [r7, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	015b      	lsls	r3, r3, #5
 8005a70:	461a      	mov	r2, r3
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	4413      	add	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	440b      	add	r3, r1
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	8879      	ldrh	r1, [r7, #2]
 8005a7e:	4b29      	ldr	r3, [pc, #164]	; (8005b24 <LCD_DrawRect+0xe0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	2201      	movs	r2, #1
 8005a88:	f000 f928 	bl	8005cdc <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, (Ypos+Height)), Width, 1, 0, StrokeColor);
 8005a8c:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <LCD_DrawRect+0xdc>)
 8005a8e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005a90:	88ba      	ldrh	r2, [r7, #4]
 8005a92:	883b      	ldrh	r3, [r7, #0]
 8005a94:	441a      	add	r2, r3
 8005a96:	4613      	mov	r3, r2
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	015b      	lsls	r3, r3, #5
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	440b      	add	r3, r1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	8879      	ldrh	r1, [r7, #2]
 8005aac:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <LCD_DrawRect+0xe0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f000 f911 	bl	8005cdc <LL_FillBuffer>

	/* Draw vertical lines */
	LL_FillBuffer((uint32_t *)__GetAddress(Xpos, Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 8005aba:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <LCD_DrawRect+0xdc>)
 8005abc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005abe:	88ba      	ldrh	r2, [r7, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	015b      	lsls	r3, r3, #5
 8005ac8:	461a      	mov	r2, r3
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	4413      	add	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	440b      	add	r3, r1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	883a      	ldrh	r2, [r7, #0]
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <LCD_DrawRect+0xe0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	f240 13df 	movw	r3, #479	; 0x1df
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	f000 f8fb 	bl	8005cdc <LL_FillBuffer>
	LL_FillBuffer((uint32_t *)__GetAddress((Xpos+Width), Ypos), 1, Height, (LCD_SCREEN_WIDTH - 1), StrokeColor);
 8005ae6:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <LCD_DrawRect+0xdc>)
 8005ae8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005aea:	88ba      	ldrh	r2, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	015b      	lsls	r3, r3, #5
 8005af4:	4618      	mov	r0, r3
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	887b      	ldrh	r3, [r7, #2]
 8005afa:	4413      	add	r3, r2
 8005afc:	4403      	add	r3, r0
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	440b      	add	r3, r1
 8005b02:	4618      	mov	r0, r3
 8005b04:	883a      	ldrh	r2, [r7, #0]
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <LCD_DrawRect+0xe0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	f240 13df 	movw	r3, #479	; 0x1df
 8005b10:	2101      	movs	r1, #1
 8005b12:	f000 f8e3 	bl	8005cdc <LL_FillBuffer>

	__CleanDCache();
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd90      	pop	{r4, r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	2000d27c 	.word	0x2000d27c
 8005b24:	200003e0 	.word	0x200003e0

08005b28 <LCD_FillRect>:
 * @param  Width: Rectangle width
 * @param  Height: Rectangle height
 * @retval None
 */
void LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	80fb      	strh	r3, [r7, #6]
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	80bb      	strh	r3, [r7, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	807b      	strh	r3, [r7, #2]
 8005b42:	4613      	mov	r3, r2
 8005b44:	803b      	strh	r3, [r7, #0]
	uint32_t  x_address = __GetAddress(Xpos, Ypos);
 8005b46:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <LCD_FillRect+0x5c>)
 8005b48:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005b4a:	88ba      	ldrh	r2, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	015b      	lsls	r3, r3, #5
 8005b54:	461a      	mov	r2, r3
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	4413      	add	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	440b      	add	r3, r1
 8005b5e:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	LL_FillBuffer((uint32_t *)x_address, Width, Height, (LCD_SCREEN_WIDTH - Width), FillColor);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	8879      	ldrh	r1, [r7, #2]
 8005b64:	883a      	ldrh	r2, [r7, #0]
 8005b66:	887b      	ldrh	r3, [r7, #2]
 8005b68:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8005b6c:	461c      	mov	r4, r3
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <LCD_FillRect+0x60>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	4623      	mov	r3, r4
 8005b76:	f000 f8b1 	bl	8005cdc <LL_FillBuffer>
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd90      	pop	{r4, r7, pc}
 8005b82:	bf00      	nop
 8005b84:	2000d27c 	.word	0x2000d27c
 8005b88:	200003e4 	.word	0x200003e4

08005b8c <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b08b      	sub	sp, #44	; 0x2c
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60ba      	str	r2, [r7, #8]
 8005b94:	461a      	mov	r2, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	81fb      	strh	r3, [r7, #14]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	81bb      	strh	r3, [r7, #12]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 8005baa:	4b49      	ldr	r3, [pc, #292]	; (8005cd0 <DrawChar+0x144>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	88db      	ldrh	r3, [r3, #6]
 8005bb0:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <DrawChar+0x144>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	889b      	ldrh	r3, [r3, #4]
 8005bb8:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 8005bba:	8b3b      	ldrh	r3, [r7, #24]
 8005bbc:	3307      	adds	r3, #7
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da00      	bge.n	8005bc4 <DrawChar+0x38>
 8005bc2:	3307      	adds	r3, #7
 8005bc4:	10db      	asrs	r3, r3, #3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	8b3b      	ldrh	r3, [r7, #24]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd8:	e070      	b.n	8005cbc <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005bda:	8b3b      	ldrh	r3, [r7, #24]
 8005bdc:	3307      	adds	r3, #7
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	da00      	bge.n	8005be4 <DrawChar+0x58>
 8005be2:	3307      	adds	r3, #7
 8005be4:	10db      	asrs	r3, r3, #3
 8005be6:	461a      	mov	r2, r3
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	fb03 f302 	mul.w	r3, r3, r2
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8005bf4:	8b3b      	ldrh	r3, [r7, #24]
 8005bf6:	3307      	adds	r3, #7
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	da00      	bge.n	8005bfe <DrawChar+0x72>
 8005bfc:	3307      	adds	r3, #7
 8005bfe:	10db      	asrs	r3, r3, #3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d002      	beq.n	8005c0a <DrawChar+0x7e>
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d004      	beq.n	8005c12 <DrawChar+0x86>
 8005c08:	e00c      	b.n	8005c24 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	61fb      	str	r3, [r7, #28]
			break;
 8005c10:	e016      	b.n	8005c40 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	3201      	adds	r2, #1
 8005c1c:	7812      	ldrb	r2, [r2, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	61fb      	str	r3, [r7, #28]
			break;
 8005c22:	e00d      	b.n	8005c40 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	041a      	lsls	r2, r3, #16
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	4313      	orrs	r3, r2
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	3202      	adds	r2, #2
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61fb      	str	r3, [r7, #28]
			break;
 8005c3e:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	623b      	str	r3, [r7, #32]
 8005c44:	e030      	b.n	8005ca8 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8005c46:	8b3a      	ldrh	r2, [r7, #24]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	4413      	add	r3, r2
 8005c50:	3b01      	subs	r3, #1
 8005c52:	2201      	movs	r2, #1
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d012      	beq.n	8005c88 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <DrawChar+0x148>)
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <DrawChar+0x14c>)
 8005c68:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005c6a:	89ba      	ldrh	r2, [r7, #12]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	015b      	lsls	r3, r3, #5
 8005c74:	461c      	mov	r4, r3
 8005c76:	89fa      	ldrh	r2, [r7, #14]
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	4423      	add	r3, r4
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	440b      	add	r3, r1
 8005c82:	b282      	uxth	r2, r0
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e00c      	b.n	8005ca2 <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d109      	bne.n	8005ca2 <DrawChar+0x116>
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	89fb      	ldrh	r3, [r7, #14]
 8005c94:	4413      	add	r3, r2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	89ba      	ldrh	r2, [r7, #12]
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fdd1 	bl	8005844 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	623b      	str	r3, [r7, #32]
 8005ca8:	8b3b      	ldrh	r3, [r7, #24]
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d3ca      	bcc.n	8005c46 <DrawChar+0xba>
			}
		}
		Ypos++;
 8005cb0:	89bb      	ldrh	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	3301      	adds	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
 8005cbc:	8b7b      	ldrh	r3, [r7, #26]
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d38a      	bcc.n	8005bda <DrawChar+0x4e>
	}

	__CleanDCache();
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop
 8005cc8:	372c      	adds	r7, #44	; 0x2c
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200003f8 	.word	0x200003f8
 8005cd4:	200003ec 	.word	0x200003ec
 8005cd8:	2000d27c 	.word	0x2000d27c

08005cdc <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 8005cea:	4b16      	ldr	r3, [pc, #88]	; (8005d44 <LL_FillBuffer+0x68>)
 8005cec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005cf0:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <LL_FillBuffer+0x68>)
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8005cf8:	4a12      	ldr	r2, [pc, #72]	; (8005d44 <LL_FillBuffer+0x68>)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <LL_FillBuffer+0x68>)
 8005d00:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <LL_FillBuffer+0x6c>)
 8005d02:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8005d04:	480f      	ldr	r0, [pc, #60]	; (8005d44 <LL_FillBuffer+0x68>)
 8005d06:	f003 f9e9 	bl	80090dc <HAL_DMA2D_Init>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d115      	bne.n	8005d3c <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8005d10:	2100      	movs	r1, #0
 8005d12:	480c      	ldr	r0, [pc, #48]	; (8005d44 <LL_FillBuffer+0x68>)
 8005d14:	f003 fc50 	bl	80095b8 <HAL_DMA2D_ConfigLayer>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10e      	bne.n	8005d3c <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	69b9      	ldr	r1, [r7, #24]
 8005d28:	4806      	ldr	r0, [pc, #24]	; (8005d44 <LL_FillBuffer+0x68>)
 8005d2a:	f003 fa21 	bl	8009170 <HAL_DMA2D_Start>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8005d34:	210a      	movs	r1, #10
 8005d36:	4803      	ldr	r0, [pc, #12]	; (8005d44 <LL_FillBuffer+0x68>)
 8005d38:	f003 fa45 	bl	80091c6 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	2000d590 	.word	0x2000d590
 8005d48:	4002b000 	.word	0x4002b000

08005d4c <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	0c1b      	lsrs	r3, r3, #16
 8005d58:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8005d64:	7d7b      	ldrb	r3, [r7, #21]
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8005d72:	7dbb      	ldrb	r3, [r7, #22]
 8005d74:	089b      	lsrs	r3, r3, #2
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	015b      	lsls	r3, r3, #5
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005d80:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	08db      	lsrs	r3, r3, #3
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	02db      	lsls	r3, r3, #11
 8005d8a:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8005d8c:	89fa      	ldrh	r2, [r7, #14]
 8005d8e:	8a3b      	ldrh	r3, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	8a7b      	ldrh	r3, [r7, #18]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	b29b      	uxth	r3, r3
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b090      	sub	sp, #64	; 0x40
 8005dac:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005db2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8005db4:	23eb      	movs	r3, #235	; 0xeb
 8005db6:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005db8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8005dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dc2:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005dc8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8005dce:	230a      	movs	r3, #10
 8005dd0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005de6:	463a      	mov	r2, r7
 8005de8:	f107 0308 	add.w	r3, r7, #8
 8005dec:	4619      	mov	r1, r3
 8005dee:	4806      	ldr	r0, [pc, #24]	; (8005e08 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8005df0:	f007 fac6 	bl	800d380 <HAL_QSPI_MemoryMapped>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3740      	adds	r7, #64	; 0x40
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	2000d69c 	.word	0x2000d69c

08005e0c <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b090      	sub	sp, #64	; 0x40
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e18:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8005e1a:	2366      	movs	r3, #102	; 0x66
 8005e1c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005e32:	2300      	movs	r3, #0
 8005e34:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e3a:	f107 0308 	add.w	r3, r7, #8
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f007 f88d 	bl	800cf64 <HAL_QSPI_Command>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e019      	b.n	8005e88 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8005e54:	2399      	movs	r3, #153	; 0x99
 8005e56:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e58:	f107 0308 	add.w	r3, r7, #8
 8005e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f007 f87e 	bl	800cf64 <HAL_QSPI_Command>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e00a      	b.n	8005e88 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e72:	f241 3188 	movw	r1, #5000	; 0x1388
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f8c7 	bl	800600a <QSPI_AutoPollingMemReady>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3740      	adds	r7, #64	; 0x40
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b094      	sub	sp, #80	; 0x50
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8005e9e:	2385      	movs	r3, #133	; 0x85
 8005ea0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005eaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ec4:	f107 0310 	add.w	r3, r7, #16
 8005ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f007 f848 	bl	800cf64 <HAL_QSPI_Command>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e048      	b.n	8005f70 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ede:	f107 030f 	add.w	r3, r7, #15
 8005ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f007 f930 	bl	800d14e <HAL_QSPI_Receive>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e03b      	b.n	8005f70 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f83d 	bl	8005f78 <QSPI_WriteEnable>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e033      	b.n	8005f70 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8005f08:	2381      	movs	r3, #129	; 0x81
 8005f0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	b25a      	sxtb	r2, r3
 8005f16:	23f0      	movs	r3, #240	; 0xf0
 8005f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1c:	fa93 f3a3 	rbit	r3, r3
 8005f20:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f24:	fab3 f383 	clz	r3, r3
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	230a      	movs	r3, #10
 8005f2e:	408b      	lsls	r3, r1
 8005f30:	b25b      	sxtb	r3, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b25b      	sxtb	r3, r3
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f3a:	f107 0310 	add.w	r3, r7, #16
 8005f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f007 f80d 	bl	800cf64 <HAL_QSPI_Command>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e00d      	b.n	8005f70 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f54:	f107 030f 	add.w	r3, r7, #15
 8005f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f007 f85e 	bl	800d020 <HAL_QSPI_Transmit>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3750      	adds	r7, #80	; 0x50
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b096      	sub	sp, #88	; 0x58
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f84:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8005f86:	2306      	movs	r3, #6
 8005f88:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fa6:	f107 0320 	add.w	r3, r7, #32
 8005faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f006 ffd7 	bl	800cf64 <HAL_QSPI_Command>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e020      	b.n	8006002 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005fd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005fd8:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8005fda:	2305      	movs	r3, #5
 8005fdc:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8005fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fe2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fe4:	f107 0208 	add.w	r2, r7, #8
 8005fe8:	f107 0120 	add.w	r1, r7, #32
 8005fec:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f007 f94e 	bl	800d292 <HAL_QSPI_AutoPolling>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3758      	adds	r7, #88	; 0x58
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b096      	sub	sp, #88	; 0x58
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006018:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800601a:	2305      	movs	r3, #5
 800601c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800601e:	2300      	movs	r3, #0
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006022:	2300      	movs	r3, #0
 8006024:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8006026:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800602a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006030:	2300      	movs	r3, #0
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006034:	2300      	movs	r3, #0
 8006036:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006038:	2300      	movs	r3, #0
 800603a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8006040:	2301      	movs	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8006048:	2301      	movs	r3, #1
 800604a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800604c:	2310      	movs	r3, #16
 800604e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006050:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006054:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8006056:	f107 0208 	add.w	r2, r7, #8
 800605a:	f107 0120 	add.w	r1, r7, #32
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f007 f916 	bl	800d292 <HAL_QSPI_AutoPolling>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3758      	adds	r7, #88	; 0x58
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006090:	d005      	beq.n	800609e <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8006092:	887b      	ldrh	r3, [r7, #2]
 8006094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006098:	d001      	beq.n	800609e <start_Audio_Processing+0x22>
		Error_Handler();
 800609a:	f7fd f981 	bl	80033a0 <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 800609e:	4b24      	ldr	r3, [pc, #144]	; (8006130 <start_Audio_Processing+0xb4>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	4a23      	ldr	r2, [pc, #140]	; (8006130 <start_Audio_Processing+0xb4>)
 80060a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060a8:	6453      	str	r3, [r2, #68]	; 0x44
 80060aa:	4b21      	ldr	r3, [pc, #132]	; (8006130 <start_Audio_Processing+0xb4>)
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 80060b6:	2034      	movs	r0, #52	; 0x34
 80060b8:	f001 fb7a 	bl	80077b0 <wm8994_ReadID>
 80060bc:	4603      	mov	r3, r0
 80060be:	f648 1294 	movw	r2, #35220	; 0x8994
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d001      	beq.n	80060ca <start_Audio_Processing+0x4e>
 80060c6:	f7fd f96b 	bl	80033a0 <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 80060ca:	2034      	movs	r0, #52	; 0x34
 80060cc:	f001 fcf2 	bl	8007ab4 <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 80060d0:	887b      	ldrh	r3, [r7, #2]
 80060d2:	f043 0302 	orr.w	r3, r3, #2
 80060d6:	b299      	uxth	r1, r3
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	2264      	movs	r2, #100	; 0x64
 80060dc:	2034      	movs	r0, #52	; 0x34
 80060de:	f000 fcad 	bl	8006a3c <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 80060e2:	887b      	ldrh	r3, [r7, #2]
 80060e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e8:	d104      	bne.n	80060f4 <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 80060ea:	214b      	movs	r1, #75	; 0x4b
 80060ec:	2034      	movs	r0, #52	; 0x34
 80060ee:	f001 fb6f 	bl	80077d0 <wm8994_SetVolume>
 80060f2:	e007      	b.n	8006104 <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80060f4:	887b      	ldrh	r3, [r7, #2]
 80060f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fa:	d103      	bne.n	8006104 <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 80060fc:	21c8      	movs	r1, #200	; 0xc8
 80060fe:	2034      	movs	r0, #52	; 0x34
 8006100:	f001 fb66 	bl	80077d0 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8006104:	2100      	movs	r1, #0
 8006106:	2034      	movs	r0, #52	; 0x34
 8006108:	f001 fc86 	bl	8007a18 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	b29b      	uxth	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	4807      	ldr	r0, [pc, #28]	; (8006134 <start_Audio_Processing+0xb8>)
 8006116:	f009 fc93 	bl	800fa40 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	b29b      	uxth	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	4805      	ldr	r0, [pc, #20]	; (8006138 <start_Audio_Processing+0xbc>)
 8006124:	f009 fbdc 	bl	800f8e0 <HAL_SAI_Transmit_DMA>

}
 8006128:	bf00      	nop
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40023800 	.word	0x40023800
 8006134:	2000cddc 	.word	0x2000cddc
 8006138:	2000d008 	.word	0x2000d008

0800613c <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <HAL_SAI_ErrorCallback+0x30>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d103      	bne.n	800617c <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8006174:	4808      	ldr	r0, [pc, #32]	; (8006198 <HAL_SAI_ErrorCallback+0x34>)
 8006176:	f015 fb4d 	bl	801b814 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 800617a:	e006      	b.n	800618a <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a07      	ldr	r2, [pc, #28]	; (800619c <HAL_SAI_ErrorCallback+0x38>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d102      	bne.n	800618a <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8006184:	4806      	ldr	r0, [pc, #24]	; (80061a0 <HAL_SAI_ErrorCallback+0x3c>)
 8006186:	f015 fb45 	bl	801b814 <puts>
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	2000d008 	.word	0x2000d008
 8006198:	0801cc40 	.word	0x0801cc40
 800619c:	2000cddc 	.word	0x2000cddc
 80061a0:	0801cc50 	.word	0x0801cc50

080061a4 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80061b0:	4b2a      	ldr	r3, [pc, #168]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80061b6:	4b29      	ldr	r3, [pc, #164]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061b8:	2210      	movs	r2, #16
 80061ba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80061bc:	4b27      	ldr	r3, [pc, #156]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061be:	2201      	movs	r2, #1
 80061c0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80061c2:	4b26      	ldr	r3, [pc, #152]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80061c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061cc:	4923      	ldr	r1, [pc, #140]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061ce:	4824      	ldr	r0, [pc, #144]	; (8006260 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80061d0:	f00a feb3 	bl	8010f3a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80061d4:	2001      	movs	r0, #1
 80061d6:	f001 fcfb 	bl	8007bd0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80061da:	4b20      	ldr	r3, [pc, #128]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061dc:	2202      	movs	r2, #2
 80061de:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061e2:	2210      	movs	r2, #16
 80061e4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80061e6:	4b1d      	ldr	r3, [pc, #116]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80061f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061f6:	4919      	ldr	r1, [pc, #100]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80061f8:	4819      	ldr	r0, [pc, #100]	; (8006260 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80061fa:	f00a fe9e 	bl	8010f3a <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80061fe:	4b17      	ldr	r3, [pc, #92]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8006200:	2203      	movs	r2, #3
 8006202:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006204:	4b15      	ldr	r3, [pc, #84]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8006206:	2210      	movs	r2, #16
 8006208:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800620c:	2208      	movs	r2, #8
 800620e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8006212:	2200      	movs	r2, #0
 8006214:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8006216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800621a:	4910      	ldr	r1, [pc, #64]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800621c:	4810      	ldr	r0, [pc, #64]	; (8006260 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 800621e:	f00a fe8c 	bl	8010f3a <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006222:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006226:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006228:	4b0c      	ldr	r3, [pc, #48]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800622a:	2204      	movs	r2, #4
 800622c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800622e:	4b0b      	ldr	r3, [pc, #44]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8006230:	2210      	movs	r2, #16
 8006232:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006234:	4b09      	ldr	r3, [pc, #36]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8006236:	2201      	movs	r2, #1
 8006238:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a07      	ldr	r2, [pc, #28]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800623e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8006240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006244:	4905      	ldr	r1, [pc, #20]	; (800625c <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8006246:	4806      	ldr	r0, [pc, #24]	; (8006260 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8006248:	f00a fe77 	bl	8010f3a <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	4804      	ldr	r0, [pc, #16]	; (8006260 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8006250:	f00a fe9e 	bl	8010f90 <HAL_SDRAM_ProgramRefreshRate>
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200003fc 	.word	0x200003fc
 8006260:	2000d668 	.word	0x2000d668

08006264 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8006268:	20c8      	movs	r0, #200	; 0xc8
 800626a:	f001 fcb1 	bl	8007bd0 <HAL_Delay>

	TS_DisableIT();
 800626e:	f000 fab7 	bl	80067e0 <TS_DisableIT>

}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <TS_GetState>:
 * @brief  Returns status and positions of the touch screen.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_GetState(TS_StateTypeDef *TS_State)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b096      	sub	sp, #88	; 0x58
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
	static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
	uint8_t ts_status = TS_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint16_t brute_x[TS_MAX_NB_TOUCH];
	uint16_t brute_y[TS_MAX_NB_TOUCH];
	uint16_t x_diff;
	uint16_t y_diff;
	uint32_t index;
	uint32_t weight = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
	uint32_t area = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
	uint32_t event = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]

	/* Read register FT5336_TD_STAT_REG to check number of touches detection */
	volatile uint8_t nbTouch = TS_I2C_Read(FT5336_TD_STAT_REG) & FT5336_TD_STAT_MASK;
 8006292:	2002      	movs	r0, #2
 8006294:	f7ff f9f6 	bl	8005684 <TS_I2C_Read>
 8006298:	4603      	mov	r3, r0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	73fb      	strb	r3, [r7, #15]

	if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH){
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b05      	cmp	r3, #5
 80062aa:	d901      	bls.n	80062b0 <TS_GetState+0x38>
		/* If invalid number of touch detected, set it to zero */
		nbTouch = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	73fb      	strb	r3, [r7, #15]
	}

	/* Update current number of active touches */
	currActiveTouchNb = nbTouch;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	4b95      	ldr	r3, [pc, #596]	; (800650c <TS_GetState+0x294>)
 80062b6:	701a      	strb	r2, [r3, #0]

	/* Reset current active touch index on which to work on */
	currActiveTouchIdx = 0;
 80062b8:	4b95      	ldr	r3, [pc, #596]	; (8006510 <TS_GetState+0x298>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]

	/* Check and update the number of touches active detected */
	TS_State->touchDetected = nbTouch; // ft5336_TS_DetectTouch();
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	701a      	strb	r2, [r3, #0]

	if(TS_State->touchDetected)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8118 	beq.w	8006500 <TS_GetState+0x288>
	{
		for(index=0; index < TS_State->touchDetected; index++)
 80062d0:	2300      	movs	r3, #0
 80062d2:	653b      	str	r3, [r7, #80]	; 0x50
 80062d4:	e107      	b.n	80064e6 <TS_GetState+0x26e>
		{
			/* Get each touch coordinates */
			TS_GetXY(&(brute_x[index]), &(brute_y[index]));
 80062d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80062da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	18d0      	adds	r0, r2, r3
 80062e0:	f107 021c 	add.w	r2, r7, #28
 80062e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	4413      	add	r3, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	f000 f990 	bl	8006610 <TS_GetXY>
				y[index] = 4096 - brute_y[index];
			}

			if(TS_ORIENTATION & TS_SWAP_XY)
			{
				y[index] = brute_x[index];
 80062f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062f8:	4413      	add	r3, r2
 80062fa:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80062fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006306:	440b      	add	r3, r1
 8006308:	f823 2c24 	strh.w	r2, [r3, #-36]
				x[index] = brute_y[index];
 800630c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006314:	4413      	add	r3, r2
 8006316:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800631a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006322:	440b      	add	r3, r1
 8006324:	f823 2c18 	strh.w	r2, [r3, #-24]
			}

			x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8006328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006330:	4413      	add	r3, r2
 8006332:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006336:	4619      	mov	r1, r3
 8006338:	4a76      	ldr	r2, [pc, #472]	; (8006514 <TS_GetState+0x29c>)
 800633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006340:	4299      	cmp	r1, r3
 8006342:	d90e      	bls.n	8006362 <TS_GetState+0xea>
 8006344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800634c:	4413      	add	r3, r2
 800634e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8006352:	4970      	ldr	r1, [pc, #448]	; (8006514 <TS_GetState+0x29c>)
 8006354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006356:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800635a:	b29b      	uxth	r3, r3
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	b29b      	uxth	r3, r3
 8006360:	e00d      	b.n	800637e <TS_GetState+0x106>
 8006362:	4a6c      	ldr	r2, [pc, #432]	; (8006514 <TS_GetState+0x29c>)
 8006364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800636a:	b29a      	uxth	r2, r3
 800636c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006374:	440b      	add	r3, r1
 8006376:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	b29b      	uxth	r3, r3
 800637e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8006382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800638a:	4413      	add	r3, r2
 800638c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8006390:	4619      	mov	r1, r3
 8006392:	4a61      	ldr	r2, [pc, #388]	; (8006518 <TS_GetState+0x2a0>)
 8006394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639a:	4299      	cmp	r1, r3
 800639c:	d90e      	bls.n	80063bc <TS_GetState+0x144>
 800639e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80063a6:	4413      	add	r3, r2
 80063a8:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80063ac:	495a      	ldr	r1, [pc, #360]	; (8006518 <TS_GetState+0x2a0>)
 80063ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	e00d      	b.n	80063d8 <TS_GetState+0x160>
 80063bc:	4a56      	ldr	r2, [pc, #344]	; (8006518 <TS_GetState+0x2a0>)
 80063be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80063ce:	440b      	add	r3, r1
 80063d0:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			if ((x_diff + y_diff) > 5)
 80063dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80063e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80063e4:	4413      	add	r3, r2
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	dd17      	ble.n	800641a <TS_GetState+0x1a2>
			{
				_x[index] = x[index];
 80063ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80063f2:	4413      	add	r3, r2
 80063f4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80063f8:	4619      	mov	r1, r3
 80063fa:	4a46      	ldr	r2, [pc, #280]	; (8006514 <TS_GetState+0x29c>)
 80063fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				_y[index] = y[index];
 8006402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800640a:	4413      	add	r3, r2
 800640c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8006410:	4619      	mov	r1, r3
 8006412:	4a41      	ldr	r2, [pc, #260]	; (8006518 <TS_GetState+0x2a0>)
 8006414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			TS_State->touchX[index] = x[index];
 800641a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006422:	4413      	add	r3, r2
 8006424:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	4413      	add	r3, r2
 8006430:	460a      	mov	r2, r1
 8006432:	805a      	strh	r2, [r3, #2]
			TS_State->touchY[index] = y[index];
 8006434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800643c:	4413      	add	r3, r2
 800643e:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006446:	3304      	adds	r3, #4
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	4413      	add	r3, r2
 800644c:	460a      	mov	r2, r1
 800644e:	809a      	strh	r2, [r3, #4]

			/* Get touch info related to the current touch */
			TS_GetTouchInfo(index, &weight, &area, &event);
 8006450:	f107 0310 	add.w	r3, r7, #16
 8006454:	f107 0214 	add.w	r2, r7, #20
 8006458:	f107 0118 	add.w	r1, r7, #24
 800645c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800645e:	f000 f9cf 	bl	8006800 <TS_GetTouchInfo>

			/* Update TS_State structure */
			TS_State->touchWeight[index] = weight;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	b2d9      	uxtb	r1, r3
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646a:	4413      	add	r3, r2
 800646c:	3316      	adds	r3, #22
 800646e:	460a      	mov	r2, r1
 8006470:	701a      	strb	r2, [r3, #0]
			TS_State->touchArea[index]   = area;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	b2d9      	uxtb	r1, r3
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647a:	4413      	add	r3, r2
 800647c:	3320      	adds	r3, #32
 800647e:	460a      	mov	r2, r1
 8006480:	701a      	strb	r2, [r3, #0]

			/* Remap touch event */
			switch(event)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b03      	cmp	r3, #3
 8006486:	d827      	bhi.n	80064d8 <TS_GetState+0x260>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <TS_GetState+0x218>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064af 	.word	0x080064af
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064cb 	.word	0x080064cb
			{
			case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
				TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a4:	4413      	add	r3, r2
 80064a6:	331b      	adds	r3, #27
 80064a8:	2201      	movs	r2, #1
 80064aa:	701a      	strb	r2, [r3, #0]
				break;
 80064ac:	e018      	b.n	80064e0 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
				TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064b2:	4413      	add	r3, r2
 80064b4:	331b      	adds	r3, #27
 80064b6:	2202      	movs	r2, #2
 80064b8:	701a      	strb	r2, [r3, #0]
				break;
 80064ba:	e011      	b.n	80064e0 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_CONTACT :
				TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c0:	4413      	add	r3, r2
 80064c2:	331b      	adds	r3, #27
 80064c4:	2203      	movs	r2, #3
 80064c6:	701a      	strb	r2, [r3, #0]
				break;
 80064c8:	e00a      	b.n	80064e0 <TS_GetState+0x268>
			case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
				TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ce:	4413      	add	r3, r2
 80064d0:	331b      	adds	r3, #27
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
				break;
 80064d6:	e003      	b.n	80064e0 <TS_GetState+0x268>
			default :
				ts_status = TS_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80064de:	bf00      	nop
		for(index=0; index < TS_State->touchDetected; index++)
 80064e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e2:	3301      	adds	r3, #1
 80064e4:	653b      	str	r3, [r7, #80]	; 0x50
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ee:	4293      	cmp	r3, r2
 80064f0:	f4ff aef1 	bcc.w	80062d6 <TS_GetState+0x5e>


		} /* of for(index=0; index < TS_State->touchDetected; index++) */

		/* Get gesture Id */
		ts_status = TS_Get_GestureId(TS_State);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f811 	bl	800651c <TS_Get_GestureId>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	} /* end of if(TS_State->touchDetected != 0) */

	return (ts_status);
 8006500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8006504:	4618      	mov	r0, r3
 8006506:	3758      	adds	r7, #88	; 0x58
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	2000040c 	.word	0x2000040c
 8006510:	2000040d 	.word	0x2000040d
 8006514:	20000410 	.word	0x20000410
 8006518:	20000424 	.word	0x20000424

0800651c <TS_Get_GestureId>:
 * @brief  Update gesture Id following a touch detected.
 * @param  TS_State: Pointer to touch screen current state structure
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	uint32_t gestureId = TS_I2C_Read(FT5336_GEST_ID_REG);
 8006524:	2001      	movs	r0, #1
 8006526:	f7ff f8ad 	bl	8005684 <TS_I2C_Read>
 800652a:	4603      	mov	r3, r0
 800652c:	60fb      	str	r3, [r7, #12]

	//ft5336_TS_GetGestureID(&gestureId);

	/* Remap gesture Id to a TS_GestureIdTypeDef value */
	switch(gestureId)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b49      	cmp	r3, #73	; 0x49
 8006532:	d061      	beq.n	80065f8 <TS_Get_GestureId+0xdc>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b49      	cmp	r3, #73	; 0x49
 8006538:	d862      	bhi.n	8006600 <TS_Get_GestureId+0xe4>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b1c      	cmp	r3, #28
 800653e:	d83f      	bhi.n	80065c0 <TS_Get_GestureId+0xa4>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b1c      	cmp	r3, #28
 8006544:	d85c      	bhi.n	8006600 <TS_Get_GestureId+0xe4>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <TS_Get_GestureId+0x30>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	080065c9 	.word	0x080065c9
 8006550:	08006601 	.word	0x08006601
 8006554:	08006601 	.word	0x08006601
 8006558:	08006601 	.word	0x08006601
 800655c:	08006601 	.word	0x08006601
 8006560:	08006601 	.word	0x08006601
 8006564:	08006601 	.word	0x08006601
 8006568:	08006601 	.word	0x08006601
 800656c:	08006601 	.word	0x08006601
 8006570:	08006601 	.word	0x08006601
 8006574:	08006601 	.word	0x08006601
 8006578:	08006601 	.word	0x08006601
 800657c:	08006601 	.word	0x08006601
 8006580:	08006601 	.word	0x08006601
 8006584:	08006601 	.word	0x08006601
 8006588:	08006601 	.word	0x08006601
 800658c:	080065d1 	.word	0x080065d1
 8006590:	08006601 	.word	0x08006601
 8006594:	08006601 	.word	0x08006601
 8006598:	08006601 	.word	0x08006601
 800659c:	080065d9 	.word	0x080065d9
 80065a0:	08006601 	.word	0x08006601
 80065a4:	08006601 	.word	0x08006601
 80065a8:	08006601 	.word	0x08006601
 80065ac:	080065e1 	.word	0x080065e1
 80065b0:	08006601 	.word	0x08006601
 80065b4:	08006601 	.word	0x08006601
 80065b8:	08006601 	.word	0x08006601
 80065bc:	080065e9 	.word	0x080065e9
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d014      	beq.n	80065f0 <TS_Get_GestureId+0xd4>
 80065c6:	e01b      	b.n	8006600 <TS_Get_GestureId+0xe4>
	{
	case FT5336_GEST_ID_NO_GESTURE :
		TS_State->gestureId = GEST_ID_NO_GESTURE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80065ce:	e019      	b.n	8006604 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_UP :
		TS_State->gestureId = GEST_ID_MOVE_UP;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80065d6:	e015      	b.n	8006604 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_RIGHT :
		TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80065de:	e011      	b.n	8006604 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_DOWN :
		TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2203      	movs	r2, #3
 80065e4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80065e6:	e00d      	b.n	8006604 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_MOVE_LEFT :
		TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2204      	movs	r2, #4
 80065ec:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80065ee:	e009      	b.n	8006604 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_IN :
		TS_State->gestureId = GEST_ID_ZOOM_IN;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2205      	movs	r2, #5
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80065f6:	e005      	b.n	8006604 <TS_Get_GestureId+0xe8>
	case FT5336_GEST_ID_ZOOM_OUT :
		TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2206      	movs	r2, #6
 80065fc:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80065fe:	e001      	b.n	8006604 <TS_Get_GestureId+0xe8>
	default :
		return TS_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <TS_Get_GestureId+0xea>
	} /* of switch(gestureId) */

	return TS_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
static void TS_GetXY(uint16_t *X, uint16_t *Y)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  volatile uint8_t ucReadData = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	72fb      	strb	r3, [r7, #11]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
  uint8_t regAddressXHigh = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	73bb      	strb	r3, [r7, #14]
  uint8_t regAddressYLow = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	737b      	strb	r3, [r7, #13]
  uint8_t regAddressYHigh = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	733b      	strb	r3, [r7, #12]

  if(currActiveTouchIdx < currActiveTouchNb)
 800662e:	4b69      	ldr	r3, [pc, #420]	; (80067d4 <TS_GetXY+0x1c4>)
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <TS_GetXY+0x1c8>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	f080 80c7 	bcs.w	80067ca <TS_GetXY+0x1ba>
  {
    switch(currActiveTouchIdx)
 800663c:	4b65      	ldr	r3, [pc, #404]	; (80067d4 <TS_GetXY+0x1c4>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b09      	cmp	r3, #9
 8006642:	d871      	bhi.n	8006728 <TS_GetXY+0x118>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <TS_GetXY+0x3c>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006675 	.word	0x08006675
 8006650:	08006687 	.word	0x08006687
 8006654:	08006699 	.word	0x08006699
 8006658:	080066ab 	.word	0x080066ab
 800665c:	080066bd 	.word	0x080066bd
 8006660:	080066cf 	.word	0x080066cf
 8006664:	080066e1 	.word	0x080066e1
 8006668:	080066f3 	.word	0x080066f3
 800666c:	08006705 	.word	0x08006705
 8006670:	08006717 	.word	0x08006717
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8006674:	2304      	movs	r3, #4
 8006676:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P1_XH_REG;
 8006678:	2303      	movs	r3, #3
 800667a:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P1_YL_REG;
 800667c:	2306      	movs	r3, #6
 800667e:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P1_YH_REG;
 8006680:	2305      	movs	r3, #5
 8006682:	733b      	strb	r3, [r7, #12]
      break;
 8006684:	e051      	b.n	800672a <TS_GetXY+0x11a>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8006686:	230a      	movs	r3, #10
 8006688:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P2_XH_REG;
 800668a:	2309      	movs	r3, #9
 800668c:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P2_YL_REG;
 800668e:	230c      	movs	r3, #12
 8006690:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P2_YH_REG;
 8006692:	230b      	movs	r3, #11
 8006694:	733b      	strb	r3, [r7, #12]
      break;
 8006696:	e048      	b.n	800672a <TS_GetXY+0x11a>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8006698:	2310      	movs	r3, #16
 800669a:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P3_XH_REG;
 800669c:	230f      	movs	r3, #15
 800669e:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P3_YL_REG;
 80066a0:	2312      	movs	r3, #18
 80066a2:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P3_YH_REG;
 80066a4:	2311      	movs	r3, #17
 80066a6:	733b      	strb	r3, [r7, #12]
      break;
 80066a8:	e03f      	b.n	800672a <TS_GetXY+0x11a>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80066aa:	2316      	movs	r3, #22
 80066ac:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P4_XH_REG;
 80066ae:	2315      	movs	r3, #21
 80066b0:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P4_YL_REG;
 80066b2:	2318      	movs	r3, #24
 80066b4:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P4_YH_REG;
 80066b6:	2317      	movs	r3, #23
 80066b8:	733b      	strb	r3, [r7, #12]
      break;
 80066ba:	e036      	b.n	800672a <TS_GetXY+0x11a>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80066bc:	231c      	movs	r3, #28
 80066be:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P5_XH_REG;
 80066c0:	231b      	movs	r3, #27
 80066c2:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P5_YL_REG;
 80066c4:	231e      	movs	r3, #30
 80066c6:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P5_YH_REG;
 80066c8:	231d      	movs	r3, #29
 80066ca:	733b      	strb	r3, [r7, #12]
      break;
 80066cc:	e02d      	b.n	800672a <TS_GetXY+0x11a>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80066ce:	2322      	movs	r3, #34	; 0x22
 80066d0:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P6_XH_REG;
 80066d2:	2321      	movs	r3, #33	; 0x21
 80066d4:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P6_YL_REG;
 80066d6:	2324      	movs	r3, #36	; 0x24
 80066d8:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P6_YH_REG;
 80066da:	2323      	movs	r3, #35	; 0x23
 80066dc:	733b      	strb	r3, [r7, #12]
      break;
 80066de:	e024      	b.n	800672a <TS_GetXY+0x11a>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80066e0:	2328      	movs	r3, #40	; 0x28
 80066e2:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P7_XH_REG;
 80066e4:	2327      	movs	r3, #39	; 0x27
 80066e6:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P7_YL_REG;
 80066e8:	232a      	movs	r3, #42	; 0x2a
 80066ea:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P7_YH_REG;
 80066ec:	2329      	movs	r3, #41	; 0x29
 80066ee:	733b      	strb	r3, [r7, #12]
      break;
 80066f0:	e01b      	b.n	800672a <TS_GetXY+0x11a>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80066f2:	232e      	movs	r3, #46	; 0x2e
 80066f4:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P8_XH_REG;
 80066f6:	232d      	movs	r3, #45	; 0x2d
 80066f8:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P8_YL_REG;
 80066fa:	2330      	movs	r3, #48	; 0x30
 80066fc:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P8_YH_REG;
 80066fe:	232f      	movs	r3, #47	; 0x2f
 8006700:	733b      	strb	r3, [r7, #12]
      break;
 8006702:	e012      	b.n	800672a <TS_GetXY+0x11a>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8006704:	2334      	movs	r3, #52	; 0x34
 8006706:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P9_XH_REG;
 8006708:	2333      	movs	r3, #51	; 0x33
 800670a:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P9_YL_REG;
 800670c:	2336      	movs	r3, #54	; 0x36
 800670e:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P9_YH_REG;
 8006710:	2335      	movs	r3, #53	; 0x35
 8006712:	733b      	strb	r3, [r7, #12]
      break;
 8006714:	e009      	b.n	800672a <TS_GetXY+0x11a>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8006716:	233a      	movs	r3, #58	; 0x3a
 8006718:	73fb      	strb	r3, [r7, #15]
      regAddressXHigh = FT5336_P10_XH_REG;
 800671a:	2339      	movs	r3, #57	; 0x39
 800671c:	73bb      	strb	r3, [r7, #14]
      regAddressYLow  = FT5336_P10_YL_REG;
 800671e:	233c      	movs	r3, #60	; 0x3c
 8006720:	737b      	strb	r3, [r7, #13]
      regAddressYHigh = FT5336_P10_YH_REG;
 8006722:	233b      	movs	r3, #59	; 0x3b
 8006724:	733b      	strb	r3, [r7, #12]
      break;
 8006726:	e000      	b.n	800672a <TS_GetXY+0x11a>

    default :
      break;
 8006728:	bf00      	nop

    } /* end switch(currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_I2C_Read(regAddressXLow);
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe ffa9 	bl	8005684 <TS_I2C_Read>
 8006732:	4603      	mov	r3, r0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	b29a      	uxth	r2, r3
 800673e:	4b27      	ldr	r3, [pc, #156]	; (80067dc <TS_GetXY+0x1cc>)
 8006740:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe ff9d 	bl	8005684 <TS_I2C_Read>
 800674a:	4603      	mov	r3, r0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8006750:	7afb      	ldrb	r3, [r7, #11]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800675a:	b21a      	sxth	r2, r3
 800675c:	4b1f      	ldr	r3, [pc, #124]	; (80067dc <TS_GetXY+0x1cc>)
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b21b      	sxth	r3, r3
 8006762:	4313      	orrs	r3, r2
 8006764:	b21b      	sxth	r3, r3
 8006766:	b29a      	uxth	r2, r3
 8006768:	4b1c      	ldr	r3, [pc, #112]	; (80067dc <TS_GetXY+0x1cc>)
 800676a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800676c:	4b1b      	ldr	r3, [pc, #108]	; (80067dc <TS_GetXY+0x1cc>)
 800676e:	881a      	ldrh	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_I2C_Read(regAddressYLow);
 8006774:	7b7b      	ldrb	r3, [r7, #13]
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe ff84 	bl	8005684 <TS_I2C_Read>
 800677c:	4603      	mov	r3, r0
 800677e:	b2db      	uxtb	r3, r3
 8006780:	72fb      	strb	r3, [r7, #11]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006782:	7afb      	ldrb	r3, [r7, #11]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	b29a      	uxth	r2, r3
 8006788:	4b14      	ldr	r3, [pc, #80]	; (80067dc <TS_GetXY+0x1cc>)
 800678a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_I2C_Read(regAddressYHigh);
 800678c:	7b3b      	ldrb	r3, [r7, #12]
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe ff78 	bl	8005684 <TS_I2C_Read>
 8006794:	4603      	mov	r3, r0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	72fb      	strb	r3, [r7, #11]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067a4:	b21a      	sxth	r2, r3
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <TS_GetXY+0x1cc>)
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b21b      	sxth	r3, r3
 80067ac:	4313      	orrs	r3, r2
 80067ae:	b21b      	sxth	r3, r3
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <TS_GetXY+0x1cc>)
 80067b4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <TS_GetXY+0x1cc>)
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	801a      	strh	r2, [r3, #0]

    currActiveTouchIdx++; /* next call will work on next touch */
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <TS_GetXY+0x1c4>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <TS_GetXY+0x1c4>)
 80067c8:	701a      	strb	r2, [r3, #0]

  } /* of if(currActiveTouchIdx < currActiveTouchNb) */
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	2000040d 	.word	0x2000040d
 80067d8:	2000040c 	.word	0x2000040c
 80067dc:	20000438 	.word	0x20000438

080067e0 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80067ea:	2300      	movs	r3, #0
 80067ec:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	4619      	mov	r1, r3
 80067f2:	20a4      	movs	r0, #164	; 0xa4
 80067f4:	f7fe ff2c 	bl	8005650 <TS_I2C_Write>
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <TS_GetTouchInfo>:
  * @param  pEvent  : Pointer to to get the event information of 'touchIdx'.

  * @retval None.
  */
static void TS_GetTouchInfo(uint32_t   touchIdx, uint32_t * pWeight, uint32_t * pArea, uint32_t * pEvent)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  volatile uint8_t ucReadData = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	757b      	strb	r3, [r7, #21]

  if(touchIdx < currActiveTouchNb)
 800681e:	4b4a      	ldr	r3, [pc, #296]	; (8006948 <TS_GetTouchInfo+0x148>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4293      	cmp	r3, r2
 8006828:	f080 8089 	bcs.w	800693e <TS_GetTouchInfo+0x13e>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b09      	cmp	r3, #9
 8006830:	d85c      	bhi.n	80068ec <TS_GetTouchInfo+0xec>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <TS_GetTouchInfo+0x38>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	08006861 	.word	0x08006861
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800687d 	.word	0x0800687d
 8006844:	0800688b 	.word	0x0800688b
 8006848:	08006899 	.word	0x08006899
 800684c:	080068a7 	.word	0x080068a7
 8006850:	080068b5 	.word	0x080068b5
 8006854:	080068c3 	.word	0x080068c3
 8006858:	080068d1 	.word	0x080068d1
 800685c:	080068df 	.word	0x080068df
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8006860:	2303      	movs	r3, #3
 8006862:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8006864:	2307      	movs	r3, #7
 8006866:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8006868:	2308      	movs	r3, #8
 800686a:	757b      	strb	r3, [r7, #21]
      break;
 800686c:	e03f      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800686e:	2309      	movs	r3, #9
 8006870:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8006872:	230d      	movs	r3, #13
 8006874:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8006876:	230e      	movs	r3, #14
 8006878:	757b      	strb	r3, [r7, #21]
      break;
 800687a:	e038      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 800687c:	230f      	movs	r3, #15
 800687e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8006880:	2313      	movs	r3, #19
 8006882:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8006884:	2314      	movs	r3, #20
 8006886:	757b      	strb	r3, [r7, #21]
      break;
 8006888:	e031      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800688a:	2315      	movs	r3, #21
 800688c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800688e:	2319      	movs	r3, #25
 8006890:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8006892:	231a      	movs	r3, #26
 8006894:	757b      	strb	r3, [r7, #21]
      break;
 8006896:	e02a      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8006898:	231b      	movs	r3, #27
 800689a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800689c:	231f      	movs	r3, #31
 800689e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80068a0:	2320      	movs	r3, #32
 80068a2:	757b      	strb	r3, [r7, #21]
      break;
 80068a4:	e023      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80068a6:	2321      	movs	r3, #33	; 0x21
 80068a8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80068aa:	2325      	movs	r3, #37	; 0x25
 80068ac:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80068ae:	2326      	movs	r3, #38	; 0x26
 80068b0:	757b      	strb	r3, [r7, #21]
      break;
 80068b2:	e01c      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80068b4:	2327      	movs	r3, #39	; 0x27
 80068b6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80068b8:	232b      	movs	r3, #43	; 0x2b
 80068ba:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80068bc:	232c      	movs	r3, #44	; 0x2c
 80068be:	757b      	strb	r3, [r7, #21]
      break;
 80068c0:	e015      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80068c2:	232d      	movs	r3, #45	; 0x2d
 80068c4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80068c6:	2331      	movs	r3, #49	; 0x31
 80068c8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80068ca:	2332      	movs	r3, #50	; 0x32
 80068cc:	757b      	strb	r3, [r7, #21]
      break;
 80068ce:	e00e      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80068d0:	2333      	movs	r3, #51	; 0x33
 80068d2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80068d4:	2337      	movs	r3, #55	; 0x37
 80068d6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80068d8:	2338      	movs	r3, #56	; 0x38
 80068da:	757b      	strb	r3, [r7, #21]
      break;
 80068dc:	e007      	b.n	80068ee <TS_GetTouchInfo+0xee>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80068de:	2339      	movs	r3, #57	; 0x39
 80068e0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80068e2:	233d      	movs	r3, #61	; 0x3d
 80068e4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80068e6:	233e      	movs	r3, #62	; 0x3e
 80068e8:	757b      	strb	r3, [r7, #21]
      break;
 80068ea:	e000      	b.n	80068ee <TS_GetTouchInfo+0xee>

    default :
      break;
 80068ec:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_I2C_Read(regAddressXHigh);
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe fec7 	bl	8005684 <TS_I2C_Read>
 80068f6:	4603      	mov	r3, r0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80068fc:	7d3b      	ldrb	r3, [r7, #20]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	119b      	asrs	r3, r3, #6
 8006902:	f003 0203 	and.w	r2, r3, #3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_I2C_Read(regAddressPWeight);
 800690a:	7dbb      	ldrb	r3, [r7, #22]
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe feb9 	bl	8005684 <TS_I2C_Read>
 8006912:	4603      	mov	r3, r0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8006918:	7d3b      	ldrb	r3, [r7, #20]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_I2C_Read(regAddressPMisc);
 8006922:	7d7b      	ldrb	r3, [r7, #21]
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe fead 	bl	8005684 <TS_I2C_Read>
 800692a:	4603      	mov	r3, r0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8006930:	7d3b      	ldrb	r3, [r7, #20]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	111b      	asrs	r3, r3, #4
 8006936:	f003 0204 	and.w	r2, r3, #4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < currActiveTouchNb) */
}
 800693e:	bf00      	nop
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	2000040c 	.word	0x2000040c

0800694c <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8006952:	f001 fcfd 	bl	8008350 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006956:	2301      	movs	r3, #1
 8006958:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 800695a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800695e:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8006960:	231b      	movs	r3, #27
 8006962:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006964:	2303      	movs	r3, #3
 8006966:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800696c:	2300      	movs	r3, #0
 800696e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8006970:	2300      	movs	r3, #0
 8006972:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8006974:	2302      	movs	r3, #2
 8006976:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8006978:	2300      	movs	r3, #0
 800697a:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800697c:	2300      	movs	r3, #0
 800697e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006980:	2300      	movs	r3, #0
 8006982:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006984:	463b      	mov	r3, r7
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fd1a 	bl	80083c0 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800698c:	2301      	movs	r3, #1
 800698e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8006990:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8006994:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8006996:	2317      	movs	r3, #23
 8006998:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800699a:	2303      	movs	r3, #3
 800699c:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80069aa:	2303      	movs	r3, #3
 80069ac:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80069b2:	2300      	movs	r3, #0
 80069b4:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80069ba:	463b      	mov	r3, r7
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 fcff 	bl	80083c0 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80069c2:	2301      	movs	r3, #1
 80069c4:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 80069c6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80069ca:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80069cc:	2316      	movs	r3, #22
 80069ce:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80069d0:	2303      	movs	r3, #3
 80069d2:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80069d8:	2301      	movs	r3, #1
 80069da:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80069dc:	2301      	movs	r3, #1
 80069de:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80069e8:	2300      	movs	r3, #0
 80069ea:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80069f0:	463b      	mov	r3, r7
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 fce4 	bl	80083c0 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80069f8:	2301      	movs	r3, #1
 80069fa:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 80069fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006a00:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8006a02:	2312      	movs	r3, #18
 8006a04:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8006a06:	2303      	movs	r3, #3
 8006a08:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8006a16:	2301      	movs	r3, #1
 8006a18:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006a26:	463b      	mov	r3, r7
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 fcc9 	bl	80083c0 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8006a2e:	2004      	movs	r0, #4
 8006a30:	f001 fca6 	bl	8008380 <HAL_MPU_Enable>

}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	4603      	mov	r3, r0
 8006a46:	81fb      	strh	r3, [r7, #14]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	81bb      	strh	r3, [r7, #12]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8006a54:	89bb      	ldrh	r3, [r7, #12]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8006a5a:	89bb      	ldrh	r3, [r7, #12]
 8006a5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a60:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8006a66:	89fb      	ldrh	r3, [r7, #14]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f83f 	bl	8007af4 <CODEC_IO_Write>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8006a80:	89fb      	ldrh	r3, [r7, #14]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2200      	movs	r2, #0
 8006a86:	f640 0117 	movw	r1, #2071	; 0x817
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 f832 	bl	8007af4 <CODEC_IO_Write>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8006a9a:	89fb      	ldrh	r3, [r7, #14]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 f825 	bl	8007af4 <CODEC_IO_Write>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	461a      	mov	r2, r3
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	226c      	movs	r2, #108	; 0x6c
 8006aba:	2139      	movs	r1, #57	; 0x39
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f819 	bl	8007af4 <CODEC_IO_Write>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8006acc:	8afb      	ldrh	r3, [r7, #22]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00c      	beq.n	8006aec <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8006ad2:	89fb      	ldrh	r3, [r7, #14]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2213      	movs	r2, #19
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f80a 	bl	8007af4 <CODEC_IO_Write>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	e00b      	b.n	8006b04 <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8006aec:	89fb      	ldrh	r3, [r7, #14]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2203      	movs	r2, #3
 8006af2:	2101      	movs	r1, #1
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fffd 	bl	8007af4 <CODEC_IO_Write>
 8006afa:	4603      	mov	r3, r0
 8006afc:	461a      	mov	r2, r3
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8006b04:	2032      	movs	r0, #50	; 0x32
 8006b06:	f001 f863 	bl	8007bd0 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8006b0a:	8b3b      	ldrh	r3, [r7, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 815f 	beq.w	8006dd0 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8006b12:	4bae      	ldr	r3, [pc, #696]	; (8006dcc <wm8994_Init+0x390>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8006b18:	8b3b      	ldrh	r3, [r7, #24]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	f000 808c 	beq.w	8006c38 <wm8994_Init+0x1fc>
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	f300 8111 	bgt.w	8006d48 <wm8994_Init+0x30c>
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d002      	beq.n	8006b30 <wm8994_Init+0xf4>
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d042      	beq.n	8006bb4 <wm8994_Init+0x178>
 8006b2e:	e10b      	b.n	8006d48 <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8006b30:	89fb      	ldrh	r3, [r7, #14]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f640 420c 	movw	r2, #3084	; 0xc0c
 8006b38:	2105      	movs	r1, #5
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 ffda 	bl	8007af4 <CODEC_IO_Write>
 8006b40:	4603      	mov	r3, r0
 8006b42:	461a      	mov	r2, r3
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	4413      	add	r3, r2
 8006b48:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8006b4a:	89fb      	ldrh	r3, [r7, #14]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f240 6101 	movw	r1, #1537	; 0x601
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 ffcd 	bl	8007af4 <CODEC_IO_Write>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8006b64:	89fb      	ldrh	r3, [r7, #14]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f240 6102 	movw	r1, #1538	; 0x602
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 ffc0 	bl	8007af4 <CODEC_IO_Write>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006b7e:	89fb      	ldrh	r3, [r7, #14]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2202      	movs	r2, #2
 8006b84:	f240 6104 	movw	r1, #1540	; 0x604
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 ffb3 	bl	8007af4 <CODEC_IO_Write>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4413      	add	r3, r2
 8006b96:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006b98:	89fb      	ldrh	r3, [r7, #14]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f240 6105 	movw	r1, #1541	; 0x605
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 ffa6 	bl	8007af4 <CODEC_IO_Write>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	61fb      	str	r3, [r7, #28]
      break;
 8006bb2:	e110      	b.n	8006dd6 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006bb4:	89fb      	ldrh	r3, [r7, #14]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	f240 3203 	movw	r2, #771	; 0x303
 8006bbc:	2105      	movs	r1, #5
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 ff98 	bl	8007af4 <CODEC_IO_Write>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006bce:	89fb      	ldrh	r3, [r7, #14]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f240 6101 	movw	r1, #1537	; 0x601
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 ff8b 	bl	8007af4 <CODEC_IO_Write>
 8006bde:	4603      	mov	r3, r0
 8006be0:	461a      	mov	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006be8:	89fb      	ldrh	r3, [r7, #14]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2201      	movs	r2, #1
 8006bee:	f240 6102 	movw	r1, #1538	; 0x602
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 ff7e 	bl	8007af4 <CODEC_IO_Write>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006c02:	89fb      	ldrh	r3, [r7, #14]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2200      	movs	r2, #0
 8006c08:	f240 6104 	movw	r1, #1540	; 0x604
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 ff71 	bl	8007af4 <CODEC_IO_Write>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4413      	add	r3, r2
 8006c1a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	f240 6105 	movw	r1, #1541	; 0x605
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ff64 	bl	8007af4 <CODEC_IO_Write>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	61fb      	str	r3, [r7, #28]
      break;
 8006c36:	e0ce      	b.n	8006dd6 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3e:	d141      	bne.n	8006cc4 <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006c40:	89fb      	ldrh	r3, [r7, #14]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006c48:	2105      	movs	r1, #5
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 ff52 	bl	8007af4 <CODEC_IO_Write>
 8006c50:	4603      	mov	r3, r0
 8006c52:	461a      	mov	r2, r3
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8006c5a:	89fb      	ldrh	r3, [r7, #14]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2203      	movs	r2, #3
 8006c60:	f240 6101 	movw	r1, #1537	; 0x601
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 ff45 	bl	8007af4 <CODEC_IO_Write>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8006c74:	89fb      	ldrh	r3, [r7, #14]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2203      	movs	r2, #3
 8006c7a:	f240 6102 	movw	r1, #1538	; 0x602
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 ff38 	bl	8007af4 <CODEC_IO_Write>
 8006c84:	4603      	mov	r3, r0
 8006c86:	461a      	mov	r2, r3
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8006c8e:	89fb      	ldrh	r3, [r7, #14]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2203      	movs	r2, #3
 8006c94:	f240 6104 	movw	r1, #1540	; 0x604
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 ff2b 	bl	8007af4 <CODEC_IO_Write>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8006ca8:	89fb      	ldrh	r3, [r7, #14]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2203      	movs	r2, #3
 8006cae:	f240 6105 	movw	r1, #1541	; 0x605
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ff1e 	bl	8007af4 <CODEC_IO_Write>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 8006cc2:	e088      	b.n	8006dd6 <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006cc4:	89fb      	ldrh	r3, [r7, #14]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006ccc:	2105      	movs	r1, #5
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 ff10 	bl	8007af4 <CODEC_IO_Write>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006cde:	89fb      	ldrh	r3, [r7, #14]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f240 6101 	movw	r1, #1537	; 0x601
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 ff03 	bl	8007af4 <CODEC_IO_Write>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006cf8:	89fb      	ldrh	r3, [r7, #14]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f240 6102 	movw	r1, #1538	; 0x602
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fef6 	bl	8007af4 <CODEC_IO_Write>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006d12:	89fb      	ldrh	r3, [r7, #14]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2202      	movs	r2, #2
 8006d18:	f240 6104 	movw	r1, #1540	; 0x604
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fee9 	bl	8007af4 <CODEC_IO_Write>
 8006d22:	4603      	mov	r3, r0
 8006d24:	461a      	mov	r2, r3
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006d2c:	89fb      	ldrh	r3, [r7, #14]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2202      	movs	r2, #2
 8006d32:	f240 6105 	movw	r1, #1541	; 0x605
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fedc 	bl	8007af4 <CODEC_IO_Write>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	461a      	mov	r2, r3
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	61fb      	str	r3, [r7, #28]
      break;
 8006d46:	e046      	b.n	8006dd6 <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f240 3203 	movw	r2, #771	; 0x303
 8006d50:	2105      	movs	r1, #5
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fece 	bl	8007af4 <CODEC_IO_Write>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006d62:	89fb      	ldrh	r3, [r7, #14]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2201      	movs	r2, #1
 8006d68:	f240 6101 	movw	r1, #1537	; 0x601
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fec1 	bl	8007af4 <CODEC_IO_Write>
 8006d72:	4603      	mov	r3, r0
 8006d74:	461a      	mov	r2, r3
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006d7c:	89fb      	ldrh	r3, [r7, #14]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2201      	movs	r2, #1
 8006d82:	f240 6102 	movw	r1, #1538	; 0x602
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 feb4 	bl	8007af4 <CODEC_IO_Write>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	4413      	add	r3, r2
 8006d94:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006d96:	89fb      	ldrh	r3, [r7, #14]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f240 6104 	movw	r1, #1540	; 0x604
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fea7 	bl	8007af4 <CODEC_IO_Write>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006db0:	89fb      	ldrh	r3, [r7, #14]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2200      	movs	r2, #0
 8006db6:	f240 6105 	movw	r1, #1541	; 0x605
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fe9a 	bl	8007af4 <CODEC_IO_Write>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	61fb      	str	r3, [r7, #28]
      break;
 8006dca:	e004      	b.n	8006dd6 <wm8994_Init+0x39a>
 8006dcc:	2000043c 	.word	0x2000043c
    }
  }
  else
  {
    outputEnabled = 0;
 8006dd0:	4b99      	ldr	r3, [pc, #612]	; (8007038 <wm8994_Init+0x5fc>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8006dd6:	8afb      	ldrh	r3, [r7, #22]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 81ab 	beq.w	8007134 <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 8006dde:	4b97      	ldr	r3, [pc, #604]	; (800703c <wm8994_Init+0x600>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8006de4:	8afb      	ldrh	r3, [r7, #22]
 8006de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dea:	f000 8129 	beq.w	8007040 <wm8994_Init+0x604>
 8006dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df2:	f300 819b 	bgt.w	800712c <wm8994_Init+0x6f0>
 8006df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dfa:	d05a      	beq.n	8006eb2 <wm8994_Init+0x476>
 8006dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e00:	f300 8194 	bgt.w	800712c <wm8994_Init+0x6f0>
 8006e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e08:	f000 80c6 	beq.w	8006f98 <wm8994_Init+0x55c>
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e10:	f040 818c 	bne.w	800712c <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8006e14:	89fb      	ldrh	r3, [r7, #14]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8006e1c:	2104      	movs	r1, #4
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fe68 	bl	8007af4 <CODEC_IO_Write>
 8006e24:	4603      	mov	r3, r0
 8006e26:	461a      	mov	r2, r3
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006e2e:	89fb      	ldrh	r3, [r7, #14]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	22db      	movs	r2, #219	; 0xdb
 8006e34:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fe5b 	bl	8007af4 <CODEC_IO_Write>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8006e48:	89fb      	ldrh	r3, [r7, #14]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8006e50:	2102      	movs	r1, #2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fe4e 	bl	8007af4 <CODEC_IO_Write>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006e62:	89fb      	ldrh	r3, [r7, #14]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2202      	movs	r2, #2
 8006e68:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fe41 	bl	8007af4 <CODEC_IO_Write>
 8006e72:	4603      	mov	r3, r0
 8006e74:	461a      	mov	r2, r3
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006e7c:	89fb      	ldrh	r3, [r7, #14]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2202      	movs	r2, #2
 8006e82:	f240 6109 	movw	r1, #1545	; 0x609
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fe34 	bl	8007af4 <CODEC_IO_Write>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8006e96:	89fb      	ldrh	r3, [r7, #14]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	220e      	movs	r2, #14
 8006e9c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fe27 	bl	8007af4 <CODEC_IO_Write>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	61fb      	str	r3, [r7, #28]
      break;
 8006eb0:	e143      	b.n	800713a <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8006eb2:	89fb      	ldrh	r3, [r7, #14]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2211      	movs	r2, #17
 8006eb8:	2128      	movs	r1, #40	; 0x28
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fe1a 	bl	8007af4 <CODEC_IO_Write>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8006eca:	89fb      	ldrh	r3, [r7, #14]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2220      	movs	r2, #32
 8006ed0:	2129      	movs	r1, #41	; 0x29
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fe0e 	bl	8007af4 <CODEC_IO_Write>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	4413      	add	r3, r2
 8006ee0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8006ee2:	89fb      	ldrh	r3, [r7, #14]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	212a      	movs	r1, #42	; 0x2a
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fe02 	bl	8007af4 <CODEC_IO_Write>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8006efa:	89fb      	ldrh	r3, [r7, #14]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f240 3203 	movw	r2, #771	; 0x303
 8006f02:	2104      	movs	r1, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fdf5 	bl	8007af4 <CODEC_IO_Write>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006f14:	89fb      	ldrh	r3, [r7, #14]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	22db      	movs	r2, #219	; 0xdb
 8006f1a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fde8 	bl	8007af4 <CODEC_IO_Write>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006f2e:	89fb      	ldrh	r3, [r7, #14]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	f246 3250 	movw	r2, #25424	; 0x6350
 8006f36:	2102      	movs	r1, #2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fddb 	bl	8007af4 <CODEC_IO_Write>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006f48:	89fb      	ldrh	r3, [r7, #14]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	f240 6106 	movw	r1, #1542	; 0x606
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fdce 	bl	8007af4 <CODEC_IO_Write>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006f62:	89fb      	ldrh	r3, [r7, #14]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2202      	movs	r2, #2
 8006f68:	f240 6107 	movw	r1, #1543	; 0x607
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fdc1 	bl	8007af4 <CODEC_IO_Write>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	4413      	add	r3, r2
 8006f7a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	220d      	movs	r2, #13
 8006f82:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fdb4 	bl	8007af4 <CODEC_IO_Write>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	461a      	mov	r2, r3
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	61fb      	str	r3, [r7, #28]
      break;
 8006f96:	e0d0      	b.n	800713a <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8006f98:	89fb      	ldrh	r3, [r7, #14]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fda6 	bl	8007af4 <CODEC_IO_Write>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	4413      	add	r3, r2
 8006fb0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8006fb2:	89fb      	ldrh	r3, [r7, #14]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	22db      	movs	r2, #219	; 0xdb
 8006fb8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fd99 	bl	8007af4 <CODEC_IO_Write>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8006fcc:	89fb      	ldrh	r3, [r7, #14]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f246 3250 	movw	r2, #25424	; 0x6350
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fd8c 	bl	8007af4 <CODEC_IO_Write>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006fe6:	89fb      	ldrh	r3, [r7, #14]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2202      	movs	r2, #2
 8006fec:	f240 6106 	movw	r1, #1542	; 0x606
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fd7f 	bl	8007af4 <CODEC_IO_Write>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8007000:	89fb      	ldrh	r3, [r7, #14]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2202      	movs	r2, #2
 8007006:	f240 6107 	movw	r1, #1543	; 0x607
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fd72 	bl	8007af4 <CODEC_IO_Write>
 8007010:	4603      	mov	r3, r0
 8007012:	461a      	mov	r2, r3
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	4413      	add	r3, r2
 8007018:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800701a:	89fb      	ldrh	r3, [r7, #14]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	220d      	movs	r2, #13
 8007020:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fd65 	bl	8007af4 <CODEC_IO_Write>
 800702a:	4603      	mov	r3, r0
 800702c:	461a      	mov	r2, r3
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	61fb      	str	r3, [r7, #28]
      break;
 8007034:	e081      	b.n	800713a <wm8994_Init+0x6fe>
 8007036:	bf00      	nop
 8007038:	2000043c 	.word	0x2000043c
 800703c:	20000440 	.word	0x20000440
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8007040:	89fb      	ldrh	r3, [r7, #14]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f640 723c 	movw	r2, #3900	; 0xf3c
 8007048:	2104      	movs	r1, #4
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fd52 	bl	8007af4 <CODEC_IO_Write>
 8007050:	4603      	mov	r3, r0
 8007052:	461a      	mov	r2, r3
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800705a:	89fb      	ldrh	r3, [r7, #14]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	22db      	movs	r2, #219	; 0xdb
 8007060:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fd45 	bl	8007af4 <CODEC_IO_Write>
 800706a:	4603      	mov	r3, r0
 800706c:	461a      	mov	r2, r3
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	22db      	movs	r2, #219	; 0xdb
 800707a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fd38 	bl	8007af4 <CODEC_IO_Write>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800708e:	89fb      	ldrh	r3, [r7, #14]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8007096:	2102      	movs	r1, #2
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fd2b 	bl	8007af4 <CODEC_IO_Write>
 800709e:	4603      	mov	r3, r0
 80070a0:	461a      	mov	r2, r3
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80070a8:	89fb      	ldrh	r3, [r7, #14]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2202      	movs	r2, #2
 80070ae:	f240 6106 	movw	r1, #1542	; 0x606
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fd1e 	bl	8007af4 <CODEC_IO_Write>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80070c2:	89fb      	ldrh	r3, [r7, #14]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2202      	movs	r2, #2
 80070c8:	f240 6107 	movw	r1, #1543	; 0x607
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fd11 	bl	8007af4 <CODEC_IO_Write>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80070dc:	89fb      	ldrh	r3, [r7, #14]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2202      	movs	r2, #2
 80070e2:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fd04 	bl	8007af4 <CODEC_IO_Write>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80070f6:	89fb      	ldrh	r3, [r7, #14]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2202      	movs	r2, #2
 80070fc:	f240 6109 	movw	r1, #1545	; 0x609
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fcf7 	bl	8007af4 <CODEC_IO_Write>
 8007106:	4603      	mov	r3, r0
 8007108:	461a      	mov	r2, r3
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8007110:	89fb      	ldrh	r3, [r7, #14]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	220d      	movs	r2, #13
 8007116:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fcea 	bl	8007af4 <CODEC_IO_Write>
 8007120:	4603      	mov	r3, r0
 8007122:	461a      	mov	r2, r3
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	4413      	add	r3, r2
 8007128:	61fb      	str	r3, [r7, #28]
      break;
 800712a:	e006      	b.n	800713a <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3301      	adds	r3, #1
 8007130:	61fb      	str	r3, [r7, #28]
      break;
 8007132:	e002      	b.n	800713a <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 8007134:	4ba4      	ldr	r3, [pc, #656]	; (80073c8 <wm8994_Init+0x98c>)
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4aa3      	ldr	r2, [pc, #652]	; (80073cc <wm8994_Init+0x990>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d079      	beq.n	8007236 <wm8994_Init+0x7fa>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4aa1      	ldr	r2, [pc, #644]	; (80073cc <wm8994_Init+0x990>)
 8007146:	4293      	cmp	r3, r2
 8007148:	f200 80ad 	bhi.w	80072a6 <wm8994_Init+0x86a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007152:	4293      	cmp	r3, r2
 8007154:	d061      	beq.n	800721a <wm8994_Init+0x7de>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800715c:	4293      	cmp	r3, r2
 800715e:	f200 80a2 	bhi.w	80072a6 <wm8994_Init+0x86a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f64a 4244 	movw	r2, #44100	; 0xac44
 8007168:	4293      	cmp	r3, r2
 800716a:	f000 808e 	beq.w	800728a <wm8994_Init+0x84e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f64a 4244 	movw	r2, #44100	; 0xac44
 8007174:	4293      	cmp	r3, r2
 8007176:	f200 8096 	bhi.w	80072a6 <wm8994_Init+0x86a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007180:	d03d      	beq.n	80071fe <wm8994_Init+0x7c2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007188:	f200 808d 	bhi.w	80072a6 <wm8994_Init+0x86a>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f245 6222 	movw	r2, #22050	; 0x5622
 8007192:	4293      	cmp	r3, r2
 8007194:	d06b      	beq.n	800726e <wm8994_Init+0x832>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f245 6222 	movw	r2, #22050	; 0x5622
 800719c:	4293      	cmp	r3, r2
 800719e:	f200 8082 	bhi.w	80072a6 <wm8994_Init+0x86a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80071a8:	d01b      	beq.n	80071e2 <wm8994_Init+0x7a6>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80071b0:	d879      	bhi.n	80072a6 <wm8994_Init+0x86a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80071b8:	d005      	beq.n	80071c6 <wm8994_Init+0x78a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f642 3211 	movw	r2, #11025	; 0x2b11
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d046      	beq.n	8007252 <wm8994_Init+0x816>
 80071c4:	e06f      	b.n	80072a6 <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80071c6:	89fb      	ldrh	r3, [r7, #14]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2203      	movs	r2, #3
 80071cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fc8f 	bl	8007af4 <CODEC_IO_Write>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	61fb      	str	r3, [r7, #28]
    break;
 80071e0:	e06f      	b.n	80072c2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80071e2:	89fb      	ldrh	r3, [r7, #14]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2233      	movs	r2, #51	; 0x33
 80071e8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fc81 	bl	8007af4 <CODEC_IO_Write>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	61fb      	str	r3, [r7, #28]
    break;
 80071fc:	e061      	b.n	80072c2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80071fe:	89fb      	ldrh	r3, [r7, #14]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2263      	movs	r2, #99	; 0x63
 8007204:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fc73 	bl	8007af4 <CODEC_IO_Write>
 800720e:	4603      	mov	r3, r0
 8007210:	461a      	mov	r2, r3
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	61fb      	str	r3, [r7, #28]
    break;
 8007218:	e053      	b.n	80072c2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800721a:	89fb      	ldrh	r3, [r7, #14]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2283      	movs	r2, #131	; 0x83
 8007220:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fc65 	bl	8007af4 <CODEC_IO_Write>
 800722a:	4603      	mov	r3, r0
 800722c:	461a      	mov	r2, r3
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	61fb      	str	r3, [r7, #28]
    break;
 8007234:	e045      	b.n	80072c2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8007236:	89fb      	ldrh	r3, [r7, #14]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	22a3      	movs	r2, #163	; 0xa3
 800723c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fc57 	bl	8007af4 <CODEC_IO_Write>
 8007246:	4603      	mov	r3, r0
 8007248:	461a      	mov	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]
    break;
 8007250:	e037      	b.n	80072c2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8007252:	89fb      	ldrh	r3, [r7, #14]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2213      	movs	r2, #19
 8007258:	f44f 7104 	mov.w	r1, #528	; 0x210
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fc49 	bl	8007af4 <CODEC_IO_Write>
 8007262:	4603      	mov	r3, r0
 8007264:	461a      	mov	r2, r3
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	61fb      	str	r3, [r7, #28]
    break;
 800726c:	e029      	b.n	80072c2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800726e:	89fb      	ldrh	r3, [r7, #14]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2243      	movs	r2, #67	; 0x43
 8007274:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fc3b 	bl	8007af4 <CODEC_IO_Write>
 800727e:	4603      	mov	r3, r0
 8007280:	461a      	mov	r2, r3
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	61fb      	str	r3, [r7, #28]
    break;
 8007288:	e01b      	b.n	80072c2 <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800728a:	89fb      	ldrh	r3, [r7, #14]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2273      	movs	r2, #115	; 0x73
 8007290:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fc2d 	bl	8007af4 <CODEC_IO_Write>
 800729a:	4603      	mov	r3, r0
 800729c:	461a      	mov	r2, r3
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	61fb      	str	r3, [r7, #28]
    break;
 80072a4:	e00d      	b.n	80072c2 <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80072a6:	89fb      	ldrh	r3, [r7, #14]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2283      	movs	r2, #131	; 0x83
 80072ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fc1f 	bl	8007af4 <CODEC_IO_Write>
 80072b6:	4603      	mov	r3, r0
 80072b8:	461a      	mov	r2, r3
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	61fb      	str	r3, [r7, #28]
    break;
 80072c0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80072c2:	8afb      	ldrh	r3, [r7, #22]
 80072c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c8:	d10e      	bne.n	80072e8 <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 80072ca:	89fb      	ldrh	r3, [r7, #14]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f244 0218 	movw	r2, #16408	; 0x4018
 80072d2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fc0c 	bl	8007af4 <CODEC_IO_Write>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	e00d      	b.n	8007304 <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80072e8:	89fb      	ldrh	r3, [r7, #14]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f244 0210 	movw	r2, #16400	; 0x4010
 80072f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fbfd 	bl	8007af4 <CODEC_IO_Write>
 80072fa:	4603      	mov	r3, r0
 80072fc:	461a      	mov	r2, r3
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8007304:	89fb      	ldrh	r3, [r7, #14]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2200      	movs	r2, #0
 800730a:	f240 3102 	movw	r1, #770	; 0x302
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fbf0 	bl	8007af4 <CODEC_IO_Write>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800731e:	89fb      	ldrh	r3, [r7, #14]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	220a      	movs	r2, #10
 8007324:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007328:	4618      	mov	r0, r3
 800732a:	f000 fbe3 	bl	8007af4 <CODEC_IO_Write>
 800732e:	4603      	mov	r3, r0
 8007330:	461a      	mov	r2, r3
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8007338:	89fb      	ldrh	r3, [r7, #14]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2201      	movs	r2, #1
 800733e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fbd6 	bl	8007af4 <CODEC_IO_Write>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4413      	add	r3, r2
 8007350:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8007352:	8b3b      	ldrh	r3, [r7, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 817b 	beq.w	8007650 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800735a:	8b3b      	ldrh	r3, [r7, #24]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d157      	bne.n	8007410 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8007360:	89fb      	ldrh	r3, [r7, #14]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007368:	212d      	movs	r1, #45	; 0x2d
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fbc2 	bl	8007af4 <CODEC_IO_Write>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 800737a:	89fb      	ldrh	r3, [r7, #14]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007382:	212e      	movs	r1, #46	; 0x2e
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fbb5 	bl	8007af4 <CODEC_IO_Write>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <wm8994_Init+0x994>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01b      	beq.n	80073d4 <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800739c:	89fb      	ldrh	r3, [r7, #14]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80073a4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fba3 	bl	8007af4 <CODEC_IO_Write>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <wm8994_Init+0x994>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 80073be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80073c2:	f000 fc05 	bl	8007bd0 <HAL_Delay>
 80073c6:	e016      	b.n	80073f6 <wm8994_Init+0x9ba>
 80073c8:	20000440 	.word	0x20000440
 80073cc:	00017700 	.word	0x00017700
 80073d0:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80073d4:	89fb      	ldrh	r3, [r7, #14]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f248 1208 	movw	r2, #33032	; 0x8108
 80073dc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fb87 	bl	8007af4 <CODEC_IO_Write>
 80073e6:	4603      	mov	r3, r0
 80073e8:	461a      	mov	r2, r3
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 80073f0:	2032      	movs	r0, #50	; 0x32
 80073f2:	f000 fbed 	bl	8007bd0 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80073f6:	89fb      	ldrh	r3, [r7, #14]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2200      	movs	r2, #0
 80073fc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fb77 	bl	8007af4 <CODEC_IO_Write>
 8007406:	4603      	mov	r3, r0
 8007408:	461a      	mov	r2, r3
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8007410:	89fb      	ldrh	r3, [r7, #14]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007418:	2103      	movs	r1, #3
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fb6a 	bl	8007af4 <CODEC_IO_Write>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800742a:	89fb      	ldrh	r3, [r7, #14]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2200      	movs	r2, #0
 8007430:	2122      	movs	r1, #34	; 0x22
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fb5e 	bl	8007af4 <CODEC_IO_Write>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8007442:	89fb      	ldrh	r3, [r7, #14]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2200      	movs	r2, #0
 8007448:	2123      	movs	r1, #35	; 0x23
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fb52 	bl	8007af4 <CODEC_IO_Write>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800745a:	89fb      	ldrh	r3, [r7, #14]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007462:	2136      	movs	r1, #54	; 0x36
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fb45 	bl	8007af4 <CODEC_IO_Write>
 800746a:	4603      	mov	r3, r0
 800746c:	461a      	mov	r2, r3
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8007474:	89fb      	ldrh	r3, [r7, #14]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f243 0203 	movw	r2, #12291	; 0x3003
 800747c:	2101      	movs	r1, #1
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fb38 	bl	8007af4 <CODEC_IO_Write>
 8007484:	4603      	mov	r3, r0
 8007486:	461a      	mov	r2, r3
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800748e:	8afb      	ldrh	r3, [r7, #22]
 8007490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007494:	d10d      	bne.n	80074b2 <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8007496:	89fb      	ldrh	r3, [r7, #14]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f240 2205 	movw	r2, #517	; 0x205
 800749e:	2151      	movs	r1, #81	; 0x51
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fb27 	bl	8007af4 <CODEC_IO_Write>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	4413      	add	r3, r2
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	e00b      	b.n	80074ca <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 80074b2:	89fb      	ldrh	r3, [r7, #14]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2205      	movs	r2, #5
 80074b8:	2151      	movs	r1, #81	; 0x51
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fb1a 	bl	8007af4 <CODEC_IO_Write>
 80074c0:	4603      	mov	r3, r0
 80074c2:	461a      	mov	r2, r3
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	4413      	add	r3, r2
 80074c8:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80074ca:	8b7b      	ldrh	r3, [r7, #26]
 80074cc:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80074d0:	f043 0303 	orr.w	r3, r3, #3
 80074d4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80074d6:	89fb      	ldrh	r3, [r7, #14]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	8b7a      	ldrh	r2, [r7, #26]
 80074dc:	2101      	movs	r1, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fb08 	bl	8007af4 <CODEC_IO_Write>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80074ee:	89fb      	ldrh	r3, [r7, #14]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2222      	movs	r2, #34	; 0x22
 80074f4:	2160      	movs	r1, #96	; 0x60
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fafc 	bl	8007af4 <CODEC_IO_Write>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	4413      	add	r3, r2
 8007504:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8007506:	89fb      	ldrh	r3, [r7, #14]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f649 7225 	movw	r2, #40741	; 0x9f25
 800750e:	214c      	movs	r1, #76	; 0x4c
 8007510:	4618      	mov	r0, r3
 8007512:	f000 faef 	bl	8007af4 <CODEC_IO_Write>
 8007516:	4603      	mov	r3, r0
 8007518:	461a      	mov	r2, r3
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 8007520:	200f      	movs	r0, #15
 8007522:	f000 fb55 	bl	8007bd0 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8007526:	89fb      	ldrh	r3, [r7, #14]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2201      	movs	r2, #1
 800752c:	212d      	movs	r1, #45	; 0x2d
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fae0 	bl	8007af4 <CODEC_IO_Write>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	4413      	add	r3, r2
 800753c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800753e:	89fb      	ldrh	r3, [r7, #14]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2201      	movs	r2, #1
 8007544:	212e      	movs	r1, #46	; 0x2e
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fad4 	bl	8007af4 <CODEC_IO_Write>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f44f 724c 	mov.w	r2, #816	; 0x330
 800755e:	2103      	movs	r1, #3
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fac7 	bl	8007af4 <CODEC_IO_Write>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2233      	movs	r2, #51	; 0x33
 8007576:	2154      	movs	r1, #84	; 0x54
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fabb 	bl	8007af4 <CODEC_IO_Write>
 800757e:	4603      	mov	r3, r0
 8007580:	461a      	mov	r2, r3
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 8007588:	f240 1001 	movw	r0, #257	; 0x101
 800758c:	f000 fb20 	bl	8007bd0 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8007590:	89fb      	ldrh	r3, [r7, #14]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	22ee      	movs	r2, #238	; 0xee
 8007596:	2160      	movs	r1, #96	; 0x60
 8007598:	4618      	mov	r0, r3
 800759a:	f000 faab 	bl	8007af4 <CODEC_IO_Write>
 800759e:	4603      	mov	r3, r0
 80075a0:	461a      	mov	r2, r3
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	4413      	add	r3, r2
 80075a6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80075a8:	89fb      	ldrh	r3, [r7, #14]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	22c0      	movs	r2, #192	; 0xc0
 80075ae:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fa9e 	bl	8007af4 <CODEC_IO_Write>
 80075b8:	4603      	mov	r3, r0
 80075ba:	461a      	mov	r2, r3
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80075c2:	89fb      	ldrh	r3, [r7, #14]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	22c0      	movs	r2, #192	; 0xc0
 80075c8:	f240 6111 	movw	r1, #1553	; 0x611
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fa91 	bl	8007af4 <CODEC_IO_Write>
 80075d2:	4603      	mov	r3, r0
 80075d4:	461a      	mov	r2, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80075dc:	89fb      	ldrh	r3, [r7, #14]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2210      	movs	r2, #16
 80075e2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fa84 	bl	8007af4 <CODEC_IO_Write>
 80075ec:	4603      	mov	r3, r0
 80075ee:	461a      	mov	r2, r3
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	4413      	add	r3, r2
 80075f4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80075f6:	89fb      	ldrh	r3, [r7, #14]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	22c0      	movs	r2, #192	; 0xc0
 80075fc:	f240 6112 	movw	r1, #1554	; 0x612
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fa77 	bl	8007af4 <CODEC_IO_Write>
 8007606:	4603      	mov	r3, r0
 8007608:	461a      	mov	r2, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8007610:	89fb      	ldrh	r3, [r7, #14]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	22c0      	movs	r2, #192	; 0xc0
 8007616:	f240 6113 	movw	r1, #1555	; 0x613
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fa6a 	bl	8007af4 <CODEC_IO_Write>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	4413      	add	r3, r2
 8007628:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800762a:	89fb      	ldrh	r3, [r7, #14]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2210      	movs	r2, #16
 8007630:	f240 4122 	movw	r1, #1058	; 0x422
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fa5d 	bl	8007af4 <CODEC_IO_Write>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8007644:	7afa      	ldrb	r2, [r7, #11]
 8007646:	89fb      	ldrh	r3, [r7, #14]
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f8c0 	bl	80077d0 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8007650:	8afb      	ldrh	r3, [r7, #22]
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 80a6 	beq.w	80077a4 <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8007658:	8afb      	ldrh	r3, [r7, #22]
 800765a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765e:	d003      	beq.n	8007668 <wm8994_Init+0xc2c>
 8007660:	8afb      	ldrh	r3, [r7, #22]
 8007662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007666:	d12b      	bne.n	80076c0 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8007668:	8b7b      	ldrh	r3, [r7, #26]
 800766a:	f043 0313 	orr.w	r3, r3, #19
 800766e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	8b7a      	ldrh	r2, [r7, #26]
 8007676:	2101      	movs	r1, #1
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fa3b 	bl	8007af4 <CODEC_IO_Write>
 800767e:	4603      	mov	r3, r0
 8007680:	461a      	mov	r2, r3
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8007688:	89fb      	ldrh	r3, [r7, #14]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2202      	movs	r2, #2
 800768e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fa2e 	bl	8007af4 <CODEC_IO_Write>
 8007698:	4603      	mov	r3, r0
 800769a:	461a      	mov	r2, r3
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	4413      	add	r3, r2
 80076a0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80076a2:	89fb      	ldrh	r3, [r7, #14]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80076aa:	f240 4111 	movw	r1, #1041	; 0x411
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fa20 	bl	8007af4 <CODEC_IO_Write>
 80076b4:	4603      	mov	r3, r0
 80076b6:	461a      	mov	r2, r3
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	e06b      	b.n	8007798 <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80076c0:	8afb      	ldrh	r3, [r7, #22]
 80076c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c6:	d139      	bne.n	800773c <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80076c8:	8b7b      	ldrh	r3, [r7, #26]
 80076ca:	f043 0313 	orr.w	r3, r3, #19
 80076ce:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80076d0:	89fb      	ldrh	r3, [r7, #14]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	8b7a      	ldrh	r2, [r7, #26]
 80076d6:	2101      	movs	r1, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fa0b 	bl	8007af4 <CODEC_IO_Write>
 80076de:	4603      	mov	r3, r0
 80076e0:	461a      	mov	r2, r3
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80076e8:	89fb      	ldrh	r3, [r7, #14]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2202      	movs	r2, #2
 80076ee:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f9fe 	bl	8007af4 <CODEC_IO_Write>
 80076f8:	4603      	mov	r3, r0
 80076fa:	461a      	mov	r2, r3
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8007702:	89fb      	ldrh	r3, [r7, #14]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800770a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f9f0 	bl	8007af4 <CODEC_IO_Write>
 8007714:	4603      	mov	r3, r0
 8007716:	461a      	mov	r2, r3
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 800771e:	89fb      	ldrh	r3, [r7, #14]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007726:	f240 4111 	movw	r1, #1041	; 0x411
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f9e2 	bl	8007af4 <CODEC_IO_Write>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	e02d      	b.n	8007798 <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800773c:	8afb      	ldrh	r3, [r7, #22]
 800773e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007742:	d003      	beq.n	800774c <wm8994_Init+0xd10>
 8007744:	8afb      	ldrh	r3, [r7, #22]
 8007746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774a:	d125      	bne.n	8007798 <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800774c:	89fb      	ldrh	r3, [r7, #14]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	220b      	movs	r2, #11
 8007752:	2118      	movs	r1, #24
 8007754:	4618      	mov	r0, r3
 8007756:	f000 f9cd 	bl	8007af4 <CODEC_IO_Write>
 800775a:	4603      	mov	r3, r0
 800775c:	461a      	mov	r2, r3
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	4413      	add	r3, r2
 8007762:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8007764:	89fb      	ldrh	r3, [r7, #14]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	220b      	movs	r2, #11
 800776a:	211a      	movs	r1, #26
 800776c:	4618      	mov	r0, r3
 800776e:	f000 f9c1 	bl	8007af4 <CODEC_IO_Write>
 8007772:	4603      	mov	r3, r0
 8007774:	461a      	mov	r2, r3
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800777c:	89fb      	ldrh	r3, [r7, #14]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8007784:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f9b3 	bl	8007af4 <CODEC_IO_Write>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	4413      	add	r3, r2
 8007796:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8007798:	7afa      	ldrb	r2, [r7, #11]
 800779a:	89fb      	ldrh	r3, [r7, #14]
 800779c:	4611      	mov	r1, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 f816 	bl	80077d0 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 80077a4:	69fb      	ldr	r3, [r7, #28]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop

080077b0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fd ff19 	bl	80055f8 <AUDIO_I2C_Read>
 80077c6:	4603      	mov	r3, r0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	460a      	mov	r2, r1
 80077da:	80fb      	strh	r3, [r7, #6]
 80077dc:	4613      	mov	r3, r2
 80077de:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80077e4:	797b      	ldrb	r3, [r7, #5]
 80077e6:	2b64      	cmp	r3, #100	; 0x64
 80077e8:	d80b      	bhi.n	8007802 <wm8994_SetVolume+0x32>
 80077ea:	797a      	ldrb	r2, [r7, #5]
 80077ec:	4613      	mov	r3, r2
 80077ee:	019b      	lsls	r3, r3, #6
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	4a86      	ldr	r2, [pc, #536]	; (8007a0c <wm8994_SetVolume+0x23c>)
 80077f4:	fb82 1203 	smull	r1, r2, r2, r3
 80077f8:	1152      	asrs	r2, r2, #5
 80077fa:	17db      	asrs	r3, r3, #31
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	e000      	b.n	8007804 <wm8994_SetVolume+0x34>
 8007802:	2364      	movs	r3, #100	; 0x64
 8007804:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8007806:	4b82      	ldr	r3, [pc, #520]	; (8007a10 <wm8994_SetVolume+0x240>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 809b 	beq.w	8007946 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	2b3e      	cmp	r3, #62	; 0x3e
 8007814:	d93d      	bls.n	8007892 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f000 f8fc 	bl	8007a18 <wm8994_SetMute>
 8007820:	4602      	mov	r2, r0
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4413      	add	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f240 127f 	movw	r2, #383	; 0x17f
 8007830:	211c      	movs	r1, #28
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f95e 	bl	8007af4 <CODEC_IO_Write>
 8007838:	4603      	mov	r3, r0
 800783a:	461a      	mov	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f240 127f 	movw	r2, #383	; 0x17f
 800784a:	211d      	movs	r1, #29
 800784c:	4618      	mov	r0, r3
 800784e:	f000 f951 	bl	8007af4 <CODEC_IO_Write>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f240 127f 	movw	r2, #383	; 0x17f
 8007864:	2126      	movs	r1, #38	; 0x26
 8007866:	4618      	mov	r0, r3
 8007868:	f000 f944 	bl	8007af4 <CODEC_IO_Write>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f240 127f 	movw	r2, #383	; 0x17f
 800787e:	2127      	movs	r1, #39	; 0x27
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f937 	bl	8007af4 <CODEC_IO_Write>
 8007886:	4603      	mov	r3, r0
 8007888:	461a      	mov	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4413      	add	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e059      	b.n	8007946 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8007892:	797b      	ldrb	r3, [r7, #5]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d109      	bne.n	80078ac <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	2101      	movs	r1, #1
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f8bb 	bl	8007a18 <wm8994_SetMute>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	e04c      	b.n	8007946 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80078ac:	88fb      	ldrh	r3, [r7, #6]
 80078ae:	2100      	movs	r1, #0
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f8b1 	bl	8007a18 <wm8994_SetMute>
 80078b6:	4602      	mov	r2, r0
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	b2d8      	uxtb	r0, r3
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	b21b      	sxth	r3, r3
 80078c6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80078ca:	b21b      	sxth	r3, r3
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	211c      	movs	r1, #28
 80078d2:	f000 f90f 	bl	8007af4 <CODEC_IO_Write>
 80078d6:	4603      	mov	r3, r0
 80078d8:	461a      	mov	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4413      	add	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	b2d8      	uxtb	r0, r3
 80078e4:	7afb      	ldrb	r3, [r7, #11]
 80078e6:	b21b      	sxth	r3, r3
 80078e8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80078ec:	b21b      	sxth	r3, r3
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	211d      	movs	r1, #29
 80078f4:	f000 f8fe 	bl	8007af4 <CODEC_IO_Write>
 80078f8:	4603      	mov	r3, r0
 80078fa:	461a      	mov	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	b2d8      	uxtb	r0, r3
 8007906:	7afb      	ldrb	r3, [r7, #11]
 8007908:	b21b      	sxth	r3, r3
 800790a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800790e:	b21b      	sxth	r3, r3
 8007910:	b29b      	uxth	r3, r3
 8007912:	461a      	mov	r2, r3
 8007914:	2126      	movs	r1, #38	; 0x26
 8007916:	f000 f8ed 	bl	8007af4 <CODEC_IO_Write>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8007924:	88fb      	ldrh	r3, [r7, #6]
 8007926:	b2d8      	uxtb	r0, r3
 8007928:	7afb      	ldrb	r3, [r7, #11]
 800792a:	b21b      	sxth	r3, r3
 800792c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8007930:	b21b      	sxth	r3, r3
 8007932:	b29b      	uxth	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	2127      	movs	r1, #39	; 0x27
 8007938:	f000 f8dc 	bl	8007af4 <CODEC_IO_Write>
 800793c:	4603      	mov	r3, r0
 800793e:	461a      	mov	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8007946:	4b33      	ldr	r3, [pc, #204]	; (8007a14 <wm8994_SetVolume+0x244>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d059      	beq.n	8007a02 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800794e:	797b      	ldrb	r3, [r7, #5]
 8007950:	2b63      	cmp	r3, #99	; 0x63
 8007952:	d80c      	bhi.n	800796e <wm8994_SetVolume+0x19e>
 8007954:	797a      	ldrb	r2, [r7, #5]
 8007956:	4613      	mov	r3, r2
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	1a9b      	subs	r3, r3, r2
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	4a2b      	ldr	r2, [pc, #172]	; (8007a0c <wm8994_SetVolume+0x23c>)
 8007960:	fb82 1203 	smull	r1, r2, r2, r3
 8007964:	1152      	asrs	r2, r2, #5
 8007966:	17db      	asrs	r3, r3, #31
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	b2db      	uxtb	r3, r3
 800796c:	e000      	b.n	8007970 <wm8994_SetVolume+0x1a0>
 800796e:	23ef      	movs	r3, #239	; 0xef
 8007970:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	b2d8      	uxtb	r0, r3
 8007976:	7afb      	ldrb	r3, [r7, #11]
 8007978:	b21b      	sxth	r3, r3
 800797a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797e:	b21b      	sxth	r3, r3
 8007980:	b29b      	uxth	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007988:	f000 f8b4 	bl	8007af4 <CODEC_IO_Write>
 800798c:	4603      	mov	r3, r0
 800798e:	461a      	mov	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8007996:	88fb      	ldrh	r3, [r7, #6]
 8007998:	b2d8      	uxtb	r0, r3
 800799a:	7afb      	ldrb	r3, [r7, #11]
 800799c:	b21b      	sxth	r3, r3
 800799e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a2:	b21b      	sxth	r3, r3
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	f240 4101 	movw	r1, #1025	; 0x401
 80079ac:	f000 f8a2 	bl	8007af4 <CODEC_IO_Write>
 80079b0:	4603      	mov	r3, r0
 80079b2:	461a      	mov	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80079ba:	88fb      	ldrh	r3, [r7, #6]
 80079bc:	b2d8      	uxtb	r0, r3
 80079be:	7afb      	ldrb	r3, [r7, #11]
 80079c0:	b21b      	sxth	r3, r3
 80079c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c6:	b21b      	sxth	r3, r3
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	f240 4104 	movw	r1, #1028	; 0x404
 80079d0:	f000 f890 	bl	8007af4 <CODEC_IO_Write>
 80079d4:	4603      	mov	r3, r0
 80079d6:	461a      	mov	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80079de:	88fb      	ldrh	r3, [r7, #6]
 80079e0:	b2d8      	uxtb	r0, r3
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	b21b      	sxth	r3, r3
 80079e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ea:	b21b      	sxth	r3, r3
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	f240 4105 	movw	r1, #1029	; 0x405
 80079f4:	f000 f87e 	bl	8007af4 <CODEC_IO_Write>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8007a02:	68fb      	ldr	r3, [r7, #12]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	51eb851f 	.word	0x51eb851f
 8007a10:	2000043c 	.word	0x2000043c
 8007a14:	20000440 	.word	0x20000440

08007a18 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8007a28:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <wm8994_SetMute+0x98>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d039      	beq.n	8007aa4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d11c      	bne.n	8007a70 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a3e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f856 	bl	8007af4 <CODEC_IO_Write>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a5a:	f240 4122 	movw	r1, #1058	; 0x422
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f848 	bl	8007af4 <CODEC_IO_Write>
 8007a64:	4603      	mov	r3, r0
 8007a66:	461a      	mov	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	e019      	b.n	8007aa4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2210      	movs	r2, #16
 8007a76:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f83a 	bl	8007af4 <CODEC_IO_Write>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2210      	movs	r2, #16
 8007a90:	f240 4122 	movw	r1, #1058	; 0x422
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 f82d 	bl	8007af4 <CODEC_IO_Write>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	2000043c 	.word	0x2000043c

08007ab4 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 f812 	bl	8007af4 <CODEC_IO_Write>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <wm8994_Reset+0x38>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <wm8994_Reset+0x3c>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]

  return counter;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	2000043c 	.word	0x2000043c
 8007af0:	20000440 	.word	0x20000440

08007af4 <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
 8007afe:	460b      	mov	r3, r1
 8007b00:	80bb      	strh	r3, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 8007b0a:	887a      	ldrh	r2, [r7, #2]
 8007b0c:	88b9      	ldrh	r1, [r7, #4]
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fd fd47 	bl	80055a4 <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	b2db      	uxtb	r3, r3
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007b28:	480d      	ldr	r0, [pc, #52]	; (8007b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007b2a:	490e      	ldr	r1, [pc, #56]	; (8007b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007b2c:	4a0e      	ldr	r2, [pc, #56]	; (8007b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007b30:	e002      	b.n	8007b38 <LoopCopyDataInit>

08007b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007b36:	3304      	adds	r3, #4

08007b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007b3c:	d3f9      	bcc.n	8007b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007b3e:	4a0b      	ldr	r2, [pc, #44]	; (8007b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007b40:	4c0b      	ldr	r4, [pc, #44]	; (8007b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007b44:	e001      	b.n	8007b4a <LoopFillZerobss>

08007b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b48:	3204      	adds	r2, #4

08007b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007b4c:	d3fb      	bcc.n	8007b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007b4e:	f7fc fe15 	bl	800477c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b52:	f013 fccf 	bl	801b4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b56:	f7fa f867 	bl	8001c28 <main>
  bx  lr    
 8007b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007b5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b64:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8007b68:	08032cf4 	.word	0x08032cf4
  ldr r2, =_sbss
 8007b6c:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8007b70:	2004dea0 	.word	0x2004dea0

08007b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b74:	e7fe      	b.n	8007b74 <ADC_IRQHandler>

08007b76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b7a:	2003      	movs	r0, #3
 8007b7c:	f000 fba5 	bl	80082ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b80:	2000      	movs	r0, #0
 8007b82:	f7fc fc51 	bl	8004428 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007b86:	f7fb fc13 	bl	80033b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b94:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <HAL_IncTick+0x20>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_IncTick+0x24>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	4a04      	ldr	r2, [pc, #16]	; (8007bb4 <HAL_IncTick+0x24>)
 8007ba2:	6013      	str	r3, [r2, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	20000054 	.word	0x20000054
 8007bb4:	2004d338 	.word	0x2004d338

08007bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  return uwTick;
 8007bbc:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <HAL_GetTick+0x14>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	2004d338 	.word	0x2004d338

08007bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bd8:	f7ff ffee 	bl	8007bb8 <HAL_GetTick>
 8007bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be8:	d005      	beq.n	8007bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007bea:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <HAL_Delay+0x44>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bf6:	bf00      	nop
 8007bf8:	f7ff ffde 	bl	8007bb8 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d8f7      	bhi.n	8007bf8 <HAL_Delay+0x28>
  {
  }
}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000054 	.word	0x20000054

08007c18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e031      	b.n	8007c92 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7fb fbe2 	bl	8003400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d116      	bne.n	8007c84 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c5a:	4b10      	ldr	r3, [pc, #64]	; (8007c9c <HAL_ADC_Init+0x84>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	f043 0202 	orr.w	r2, r3, #2
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f964 	bl	8007f34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	f043 0201 	orr.w	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40
 8007c82:	e001      	b.n	8007c88 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	ffffeefd 	.word	0xffffeefd

08007ca0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_ADC_ConfigChannel+0x1c>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e12a      	b.n	8007f12 <HAL_ADC_ConfigChannel+0x272>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b09      	cmp	r3, #9
 8007cca:	d93a      	bls.n	8007d42 <HAL_ADC_ConfigChannel+0xa2>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd4:	d035      	beq.n	8007d42 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68d9      	ldr	r1, [r3, #12]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	4413      	add	r3, r2
 8007cea:	3b1e      	subs	r3, #30
 8007cec:	2207      	movs	r2, #7
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	43da      	mvns	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	400a      	ands	r2, r1
 8007cfa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a87      	ldr	r2, [pc, #540]	; (8007f20 <HAL_ADC_ConfigChannel+0x280>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10a      	bne.n	8007d1c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68d9      	ldr	r1, [r3, #12]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	061a      	lsls	r2, r3, #24
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d1a:	e035      	b.n	8007d88 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68d9      	ldr	r1, [r3, #12]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689a      	ldr	r2, [r3, #8]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	4403      	add	r3, r0
 8007d34:	3b1e      	subs	r3, #30
 8007d36:	409a      	lsls	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d40:	e022      	b.n	8007d88 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6919      	ldr	r1, [r3, #16]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	4613      	mov	r3, r2
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	4413      	add	r3, r2
 8007d56:	2207      	movs	r2, #7
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	43da      	mvns	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	400a      	ands	r2, r1
 8007d64:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6919      	ldr	r1, [r3, #16]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	4618      	mov	r0, r3
 8007d78:	4603      	mov	r3, r0
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	4403      	add	r3, r0
 8007d7e:	409a      	lsls	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b06      	cmp	r3, #6
 8007d8e:	d824      	bhi.n	8007dda <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	3b05      	subs	r3, #5
 8007da2:	221f      	movs	r2, #31
 8007da4:	fa02 f303 	lsl.w	r3, r2, r3
 8007da8:	43da      	mvns	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	400a      	ands	r2, r1
 8007db0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	3b05      	subs	r3, #5
 8007dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8007dd8:	e04c      	b.n	8007e74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2b0c      	cmp	r3, #12
 8007de0:	d824      	bhi.n	8007e2c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	4613      	mov	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	3b23      	subs	r3, #35	; 0x23
 8007df4:	221f      	movs	r2, #31
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	43da      	mvns	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	400a      	ands	r2, r1
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	4618      	mov	r0, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3b23      	subs	r3, #35	; 0x23
 8007e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	631a      	str	r2, [r3, #48]	; 0x30
 8007e2a:	e023      	b.n	8007e74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	3b41      	subs	r3, #65	; 0x41
 8007e3e:	221f      	movs	r2, #31
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	43da      	mvns	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	400a      	ands	r2, r1
 8007e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	3b41      	subs	r3, #65	; 0x41
 8007e68:	fa00 f203 	lsl.w	r2, r0, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a2a      	ldr	r2, [pc, #168]	; (8007f24 <HAL_ADC_ConfigChannel+0x284>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d10a      	bne.n	8007e94 <HAL_ADC_ConfigChannel+0x1f4>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e86:	d105      	bne.n	8007e94 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007e88:	4b27      	ldr	r3, [pc, #156]	; (8007f28 <HAL_ADC_ConfigChannel+0x288>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <HAL_ADC_ConfigChannel+0x288>)
 8007e8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007e92:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a22      	ldr	r2, [pc, #136]	; (8007f24 <HAL_ADC_ConfigChannel+0x284>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d109      	bne.n	8007eb2 <HAL_ADC_ConfigChannel+0x212>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b12      	cmp	r3, #18
 8007ea4:	d105      	bne.n	8007eb2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007ea6:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <HAL_ADC_ConfigChannel+0x288>)
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <HAL_ADC_ConfigChannel+0x288>)
 8007eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007eb0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	; (8007f24 <HAL_ADC_ConfigChannel+0x284>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d125      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x268>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a17      	ldr	r2, [pc, #92]	; (8007f20 <HAL_ADC_ConfigChannel+0x280>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d003      	beq.n	8007ece <HAL_ADC_ConfigChannel+0x22e>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b11      	cmp	r3, #17
 8007ecc:	d11c      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007ece:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <HAL_ADC_ConfigChannel+0x288>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <HAL_ADC_ConfigChannel+0x288>)
 8007ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ed8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a10      	ldr	r2, [pc, #64]	; (8007f20 <HAL_ADC_ConfigChannel+0x280>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d111      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007ee4:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <HAL_ADC_ConfigChannel+0x28c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a11      	ldr	r2, [pc, #68]	; (8007f30 <HAL_ADC_ConfigChannel+0x290>)
 8007eea:	fba2 2303 	umull	r2, r3, r2, r3
 8007eee:	0c9a      	lsrs	r2, r3, #18
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007efa:	e002      	b.n	8007f02 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1f9      	bne.n	8007efc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	10000012 	.word	0x10000012
 8007f24:	40012000 	.word	0x40012000
 8007f28:	40012300 	.word	0x40012300
 8007f2c:	20000028 	.word	0x20000028
 8007f30:	431bde83 	.word	0x431bde83

08007f34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007f3c:	4b78      	ldr	r3, [pc, #480]	; (8008120 <ADC_Init+0x1ec>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	4a77      	ldr	r2, [pc, #476]	; (8008120 <ADC_Init+0x1ec>)
 8007f42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007f46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007f48:	4b75      	ldr	r3, [pc, #468]	; (8008120 <ADC_Init+0x1ec>)
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4973      	ldr	r1, [pc, #460]	; (8008120 <ADC_Init+0x1ec>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6859      	ldr	r1, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	021a      	lsls	r2, r3, #8
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6859      	ldr	r1, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6899      	ldr	r1, [r3, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	4a58      	ldr	r2, [pc, #352]	; (8008124 <ADC_Init+0x1f0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d022      	beq.n	800800e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6899      	ldr	r1, [r3, #8]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6899      	ldr	r1, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	e00f      	b.n	800802e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800801c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800802c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0202 	bic.w	r2, r2, #2
 800803c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6899      	ldr	r1, [r3, #8]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	005a      	lsls	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01b      	beq.n	8008094 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800806a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800807a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6859      	ldr	r1, [r3, #4]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	3b01      	subs	r3, #1
 8008088:	035a      	lsls	r2, r3, #13
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	e007      	b.n	80080a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80080b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	3b01      	subs	r3, #1
 80080c0:	051a      	lsls	r2, r3, #20
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80080d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6899      	ldr	r1, [r3, #8]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080e6:	025a      	lsls	r2, r3, #9
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6899      	ldr	r1, [r3, #8]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	029a      	lsls	r2, r3, #10
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	609a      	str	r2, [r3, #8]
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	40012300 	.word	0x40012300
 8008124:	0f000001 	.word	0x0f000001

08008128 <__NVIC_SetPriorityGrouping>:
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008138:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <__NVIC_SetPriorityGrouping+0x40>)
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008144:	4013      	ands	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008150:	4b06      	ldr	r3, [pc, #24]	; (800816c <__NVIC_SetPriorityGrouping+0x44>)
 8008152:	4313      	orrs	r3, r2
 8008154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008156:	4a04      	ldr	r2, [pc, #16]	; (8008168 <__NVIC_SetPriorityGrouping+0x40>)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	60d3      	str	r3, [r2, #12]
}
 800815c:	bf00      	nop
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	e000ed00 	.word	0xe000ed00
 800816c:	05fa0000 	.word	0x05fa0000

08008170 <__NVIC_GetPriorityGrouping>:
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <__NVIC_GetPriorityGrouping+0x18>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	f003 0307 	and.w	r3, r3, #7
}
 800817e:	4618      	mov	r0, r3
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	e000ed00 	.word	0xe000ed00

0800818c <__NVIC_EnableIRQ>:
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800819a:	2b00      	cmp	r3, #0
 800819c:	db0b      	blt.n	80081b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	f003 021f 	and.w	r2, r3, #31
 80081a4:	4907      	ldr	r1, [pc, #28]	; (80081c4 <__NVIC_EnableIRQ+0x38>)
 80081a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	2001      	movs	r0, #1
 80081ae:	fa00 f202 	lsl.w	r2, r0, r2
 80081b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	e000e100 	.word	0xe000e100

080081c8 <__NVIC_DisableIRQ>:
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	db12      	blt.n	8008200 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	f003 021f 	and.w	r2, r3, #31
 80081e0:	490a      	ldr	r1, [pc, #40]	; (800820c <__NVIC_DisableIRQ+0x44>)
 80081e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	2001      	movs	r0, #1
 80081ea:	fa00 f202 	lsl.w	r2, r0, r2
 80081ee:	3320      	adds	r3, #32
 80081f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80081f4:	f3bf 8f4f 	dsb	sy
}
 80081f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80081fa:	f3bf 8f6f 	isb	sy
}
 80081fe:	bf00      	nop
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	e000e100 	.word	0xe000e100

08008210 <__NVIC_SetPriority>:
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800821c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008220:	2b00      	cmp	r3, #0
 8008222:	db0a      	blt.n	800823a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	b2da      	uxtb	r2, r3
 8008228:	490c      	ldr	r1, [pc, #48]	; (800825c <__NVIC_SetPriority+0x4c>)
 800822a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800822e:	0112      	lsls	r2, r2, #4
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	440b      	add	r3, r1
 8008234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008238:	e00a      	b.n	8008250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	b2da      	uxtb	r2, r3
 800823e:	4908      	ldr	r1, [pc, #32]	; (8008260 <__NVIC_SetPriority+0x50>)
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	3b04      	subs	r3, #4
 8008248:	0112      	lsls	r2, r2, #4
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	440b      	add	r3, r1
 800824e:	761a      	strb	r2, [r3, #24]
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	e000e100 	.word	0xe000e100
 8008260:	e000ed00 	.word	0xe000ed00

08008264 <NVIC_EncodePriority>:
{
 8008264:	b480      	push	{r7}
 8008266:	b089      	sub	sp, #36	; 0x24
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f1c3 0307 	rsb	r3, r3, #7
 800827e:	2b04      	cmp	r3, #4
 8008280:	bf28      	it	cs
 8008282:	2304      	movcs	r3, #4
 8008284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	3304      	adds	r3, #4
 800828a:	2b06      	cmp	r3, #6
 800828c:	d902      	bls.n	8008294 <NVIC_EncodePriority+0x30>
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	3b03      	subs	r3, #3
 8008292:	e000      	b.n	8008296 <NVIC_EncodePriority+0x32>
 8008294:	2300      	movs	r3, #0
 8008296:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008298:	f04f 32ff 	mov.w	r2, #4294967295
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	fa02 f303 	lsl.w	r3, r2, r3
 80082a2:	43da      	mvns	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	401a      	ands	r2, r3
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082ac:	f04f 31ff 	mov.w	r1, #4294967295
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	fa01 f303 	lsl.w	r3, r1, r3
 80082b6:	43d9      	mvns	r1, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082bc:	4313      	orrs	r3, r2
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3724      	adds	r7, #36	; 0x24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff ff28 	bl	8008128 <__NVIC_SetPriorityGrouping>
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80082ee:	2300      	movs	r3, #0
 80082f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80082f2:	f7ff ff3d 	bl	8008170 <__NVIC_GetPriorityGrouping>
 80082f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	6978      	ldr	r0, [r7, #20]
 80082fe:	f7ff ffb1 	bl	8008264 <NVIC_EncodePriority>
 8008302:	4602      	mov	r2, r0
 8008304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff ff80 	bl	8008210 <__NVIC_SetPriority>
}
 8008310:	bf00      	nop
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff ff30 	bl	800818c <__NVIC_EnableIRQ>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800833e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff ff40 	bl	80081c8 <__NVIC_DisableIRQ>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008354:	f3bf 8f5f 	dmb	sy
}
 8008358:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <HAL_MPU_Disable+0x28>)
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	4a06      	ldr	r2, [pc, #24]	; (8008378 <HAL_MPU_Disable+0x28>)
 8008360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008364:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008366:	4b05      	ldr	r3, [pc, #20]	; (800837c <HAL_MPU_Disable+0x2c>)
 8008368:	2200      	movs	r2, #0
 800836a:	605a      	str	r2, [r3, #4]
}
 800836c:	bf00      	nop
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	e000ed00 	.word	0xe000ed00
 800837c:	e000ed90 	.word	0xe000ed90

08008380 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008388:	4a0b      	ldr	r2, [pc, #44]	; (80083b8 <HAL_MPU_Enable+0x38>)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008392:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <HAL_MPU_Enable+0x3c>)
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	4a09      	ldr	r2, [pc, #36]	; (80083bc <HAL_MPU_Enable+0x3c>)
 8008398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800839c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800839e:	f3bf 8f4f 	dsb	sy
}
 80083a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083a4:	f3bf 8f6f 	isb	sy
}
 80083a8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	e000ed90 	.word	0xe000ed90
 80083bc:	e000ed00 	.word	0xe000ed00

080083c0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	785a      	ldrb	r2, [r3, #1]
 80083cc:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <HAL_MPU_ConfigRegion+0x84>)
 80083ce:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d029      	beq.n	800842c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80083d8:	4a1a      	ldr	r2, [pc, #104]	; (8008444 <HAL_MPU_ConfigRegion+0x84>)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	7b1b      	ldrb	r3, [r3, #12]
 80083e4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7adb      	ldrb	r3, [r3, #11]
 80083ea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80083ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	7a9b      	ldrb	r3, [r3, #10]
 80083f2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80083f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7b5b      	ldrb	r3, [r3, #13]
 80083fa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80083fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7b9b      	ldrb	r3, [r3, #14]
 8008402:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008404:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7bdb      	ldrb	r3, [r3, #15]
 800840a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800840c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	7a5b      	ldrb	r3, [r3, #9]
 8008412:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008414:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7a1b      	ldrb	r3, [r3, #8]
 800841a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800841c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	7812      	ldrb	r2, [r2, #0]
 8008422:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008424:	4a07      	ldr	r2, [pc, #28]	; (8008444 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008426:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008428:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800842a:	e005      	b.n	8008438 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800842c:	4b05      	ldr	r3, [pc, #20]	; (8008444 <HAL_MPU_ConfigRegion+0x84>)
 800842e:	2200      	movs	r2, #0
 8008430:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8008432:	4b04      	ldr	r3, [pc, #16]	; (8008444 <HAL_MPU_ConfigRegion+0x84>)
 8008434:	2200      	movs	r2, #0
 8008436:	611a      	str	r2, [r3, #16]
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	e000ed90 	.word	0xe000ed90

08008448 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e054      	b.n	8008504 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7f5b      	ldrb	r3, [r3, #29]
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d105      	bne.n	8008470 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fb f822 	bl	80034b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	791b      	ldrb	r3, [r3, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10c      	bne.n	8008498 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a22      	ldr	r2, [pc, #136]	; (800850c <HAL_CRC_Init+0xc4>)
 8008484:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0218 	bic.w	r2, r2, #24
 8008494:	609a      	str	r2, [r3, #8]
 8008496:	e00c      	b.n	80084b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6899      	ldr	r1, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	461a      	mov	r2, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f834 	bl	8008510 <HAL_CRCEx_Polynomial_Set>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e028      	b.n	8008504 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	795b      	ldrb	r3, [r3, #5]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f04f 32ff 	mov.w	r2, #4294967295
 80084c2:	611a      	str	r2, [r3, #16]
 80084c4:	e004      	b.n	80084d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	6912      	ldr	r2, [r2, #16]
 80084ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695a      	ldr	r2, [r3, #20]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	04c11db7 	.word	0x04c11db7

08008510 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008520:	231f      	movs	r3, #31
 8008522:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008524:	bf00      	nop
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1e5a      	subs	r2, r3, #1
 800852a:	613a      	str	r2, [r7, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <HAL_CRCEx_Polynomial_Set+0x34>
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f003 031f 	and.w	r3, r3, #31
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	fa22 f303 	lsr.w	r3, r2, r3
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0f0      	beq.n	8008526 <HAL_CRCEx_Polynomial_Set+0x16>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b18      	cmp	r3, #24
 8008548:	d846      	bhi.n	80085d8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <HAL_CRCEx_Polynomial_Set+0x40>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	080085df 	.word	0x080085df
 8008554:	080085d9 	.word	0x080085d9
 8008558:	080085d9 	.word	0x080085d9
 800855c:	080085d9 	.word	0x080085d9
 8008560:	080085d9 	.word	0x080085d9
 8008564:	080085d9 	.word	0x080085d9
 8008568:	080085d9 	.word	0x080085d9
 800856c:	080085d9 	.word	0x080085d9
 8008570:	080085cd 	.word	0x080085cd
 8008574:	080085d9 	.word	0x080085d9
 8008578:	080085d9 	.word	0x080085d9
 800857c:	080085d9 	.word	0x080085d9
 8008580:	080085d9 	.word	0x080085d9
 8008584:	080085d9 	.word	0x080085d9
 8008588:	080085d9 	.word	0x080085d9
 800858c:	080085d9 	.word	0x080085d9
 8008590:	080085c1 	.word	0x080085c1
 8008594:	080085d9 	.word	0x080085d9
 8008598:	080085d9 	.word	0x080085d9
 800859c:	080085d9 	.word	0x080085d9
 80085a0:	080085d9 	.word	0x080085d9
 80085a4:	080085d9 	.word	0x080085d9
 80085a8:	080085d9 	.word	0x080085d9
 80085ac:	080085d9 	.word	0x080085d9
 80085b0:	080085b5 	.word	0x080085b5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	d913      	bls.n	80085e2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80085be:	e010      	b.n	80085e2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b07      	cmp	r3, #7
 80085c4:	d90f      	bls.n	80085e6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80085ca:	e00c      	b.n	80085e6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2b0f      	cmp	r3, #15
 80085d0:	d90b      	bls.n	80085ea <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80085d6:	e008      	b.n	80085ea <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	75fb      	strb	r3, [r7, #23]
      break;
 80085dc:	e006      	b.n	80085ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80085de:	bf00      	nop
 80085e0:	e004      	b.n	80085ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80085e2:	bf00      	nop
 80085e4:	e002      	b.n	80085ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80085e6:	bf00      	nop
 80085e8:	e000      	b.n	80085ec <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80085ea:	bf00      	nop
  }
  if (status == HAL_OK)
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10d      	bne.n	800860e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f023 0118 	bic.w	r1, r3, #24
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	430a      	orrs	r2, r1
 800860c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800860e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008610:	4618      	mov	r0, r3
 8008612:	371c      	adds	r7, #28
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e069      	b.n	8008702 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fa ff5a 	bl	80034f4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6819      	ldr	r1, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	4b2a      	ldr	r3, [pc, #168]	; (800870c <HAL_DCMI_Init+0xf0>)
 8008662:	400b      	ands	r3, r1
 8008664:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6819      	ldr	r1, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800867a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8008686:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8008692:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800869e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80086aa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b10      	cmp	r3, #16
 80086ba:	d112      	bne.n	80086e2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	7f1b      	ldrb	r3, [r3, #28]
 80086c0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7f5b      	ldrb	r3, [r3, #29]
 80086c6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80086c8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	7f9b      	ldrb	r3, [r3, #30]
 80086ce:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80086d0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	7fdb      	ldrb	r3, [r3, #31]
 80086d8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80086de:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80086e0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 021e 	orr.w	r2, r2, #30
 80086f0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	ffe0f007 	.word	0xffe0f007

08008710 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d016      	beq.n	8008758 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2204      	movs	r2, #4
 8008730:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008736:	f043 0202 	orr.w	r2, r3, #2
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2204      	movs	r2, #4
 8008742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800874a:	4a35      	ldr	r2, [pc, #212]	; (8008820 <HAL_DCMI_IRQHandler+0x110>)
 800874c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fa2a 	bl	8008bac <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d01e      	beq.n	80087a0 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2202      	movs	r2, #2
 8008768:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800876e:	f043 0201 	orr.w	r2, r3, #1
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2204      	movs	r2, #4
 800877a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008782:	4a27      	ldr	r2, [pc, #156]	; (8008820 <HAL_DCMI_IRQHandler+0x110>)
 8008784:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fa0e 	bl	8008bac <HAL_DMA_Abort_IT>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800879a:	4618      	mov	r0, r3
 800879c:	f000 f86a 	bl	8008874 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0310 	and.w	r3, r3, #16
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d006      	beq.n	80087b8 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2210      	movs	r2, #16
 80087b0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f840 	bl	8008838 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f003 0308 	and.w	r3, r3, #8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d006      	beq.n	80087d0 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2208      	movs	r2, #8
 80087c8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f83e 	bl	800884c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d01d      	beq.n	8008816 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d107      	bne.n	80087f8 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 021e 	bic.w	r2, r2, #30
 80087f6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0201 	bic.w	r2, r2, #1
 8008806:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2201      	movs	r2, #1
 800880e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f825 	bl	8008860 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8008816:	bf00      	nop
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	08008875 	.word	0x08008875

08008824 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008888:	2b02      	cmp	r3, #2
 800888a:	d009      	beq.n	80088a0 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008898:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff ffbf 	bl	8008824 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80088bc:	f7ff f97c 	bl	8007bb8 <HAL_GetTick>
 80088c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e099      	b.n	8008a00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0201 	bic.w	r2, r2, #1
 80088ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088ec:	e00f      	b.n	800890e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80088ee:	f7ff f963 	bl	8007bb8 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b05      	cmp	r3, #5
 80088fa:	d908      	bls.n	800890e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2203      	movs	r2, #3
 8008906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e078      	b.n	8008a00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e8      	bne.n	80088ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <HAL_DMA_Init+0x158>)
 8008928:	4013      	ands	r3, r2
 800892a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800893a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4313      	orrs	r3, r2
 800895e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	2b04      	cmp	r3, #4
 8008966:	d107      	bne.n	8008978 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008970:	4313      	orrs	r3, r2
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	4313      	orrs	r3, r2
 8008976:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	4313      	orrs	r3, r2
 8008998:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	2b04      	cmp	r3, #4
 80089a0:	d117      	bne.n	80089d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00e      	beq.n	80089d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fb15 	bl	8008fe4 <DMA_CheckFifoParam>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d008      	beq.n	80089d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2240      	movs	r2, #64	; 0x40
 80089c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80089ce:	2301      	movs	r3, #1
 80089d0:	e016      	b.n	8008a00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 facc 	bl	8008f78 <DMA_CalcBaseAndBitshift>
 80089e0:	4603      	mov	r3, r0
 80089e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e8:	223f      	movs	r2, #63	; 0x3f
 80089ea:	409a      	lsls	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	f010803f 	.word	0xf010803f

08008a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_DMA_Start_IT+0x26>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e048      	b.n	8008ac4 <HAL_DMA_Start_IT+0xb8>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d137      	bne.n	8008ab6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2202      	movs	r2, #2
 8008a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fa5e 	bl	8008f1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a64:	223f      	movs	r2, #63	; 0x3f
 8008a66:	409a      	lsls	r2, r3
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0216 	orr.w	r2, r2, #22
 8008a7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695a      	ldr	r2, [r3, #20]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a8a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0208 	orr.w	r2, r2, #8
 8008aa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f042 0201 	orr.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e005      	b.n	8008ac2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008ada:	f7ff f86d 	bl	8007bb8 <HAL_GetTick>
 8008ade:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d008      	beq.n	8008afe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2280      	movs	r2, #128	; 0x80
 8008af0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e052      	b.n	8008ba4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0216 	bic.w	r2, r2, #22
 8008b0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695a      	ldr	r2, [r3, #20]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <HAL_DMA_Abort+0x62>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d007      	beq.n	8008b3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0208 	bic.w	r2, r2, #8
 8008b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0201 	bic.w	r2, r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b4e:	e013      	b.n	8008b78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b50:	f7ff f832 	bl	8007bb8 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	d90c      	bls.n	8008b78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2203      	movs	r2, #3
 8008b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e015      	b.n	8008ba4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1e4      	bne.n	8008b50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8a:	223f      	movs	r2, #63	; 0x3f
 8008b8c:	409a      	lsls	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d004      	beq.n	8008bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2280      	movs	r2, #128	; 0x80
 8008bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e00c      	b.n	8008be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2205      	movs	r2, #5
 8008bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0201 	bic.w	r2, r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008bfc:	4b92      	ldr	r3, [pc, #584]	; (8008e48 <HAL_DMA_IRQHandler+0x258>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a92      	ldr	r2, [pc, #584]	; (8008e4c <HAL_DMA_IRQHandler+0x25c>)
 8008c02:	fba2 2303 	umull	r2, r3, r2, r3
 8008c06:	0a9b      	lsrs	r3, r3, #10
 8008c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	409a      	lsls	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4013      	ands	r3, r2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d01a      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d013      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0204 	bic.w	r2, r2, #4
 8008c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c48:	2208      	movs	r2, #8
 8008c4a:	409a      	lsls	r2, r3
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c54:	f043 0201 	orr.w	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c60:	2201      	movs	r2, #1
 8008c62:	409a      	lsls	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4013      	ands	r3, r2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d012      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00b      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c7e:	2201      	movs	r2, #1
 8008c80:	409a      	lsls	r2, r3
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	f043 0202 	orr.w	r2, r3, #2
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c96:	2204      	movs	r2, #4
 8008c98:	409a      	lsls	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d012      	beq.n	8008cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb4:	2204      	movs	r2, #4
 8008cb6:	409a      	lsls	r2, r3
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc0:	f043 0204 	orr.w	r2, r3, #4
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ccc:	2210      	movs	r2, #16
 8008cce:	409a      	lsls	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d043      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0308 	and.w	r3, r3, #8
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d03c      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cea:	2210      	movs	r2, #16
 8008cec:	409a      	lsls	r2, r3
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d018      	beq.n	8008d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d108      	bne.n	8008d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d024      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
 8008d1e:	e01f      	b.n	8008d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01b      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	4798      	blx	r3
 8008d30:	e016      	b.n	8008d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d107      	bne.n	8008d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0208 	bic.w	r2, r2, #8
 8008d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d003      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d64:	2220      	movs	r2, #32
 8008d66:	409a      	lsls	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 808e 	beq.w	8008e8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0310 	and.w	r3, r3, #16
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8086 	beq.w	8008e8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d86:	2220      	movs	r2, #32
 8008d88:	409a      	lsls	r2, r3
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d136      	bne.n	8008e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0216 	bic.w	r2, r2, #22
 8008da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695a      	ldr	r2, [r3, #20]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <HAL_DMA_IRQHandler+0x1da>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d007      	beq.n	8008dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f022 0208 	bic.w	r2, r2, #8
 8008dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dde:	223f      	movs	r2, #63	; 0x3f
 8008de0:	409a      	lsls	r2, r3
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d07d      	beq.n	8008efa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	4798      	blx	r3
        }
        return;
 8008e06:	e078      	b.n	8008efa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d01c      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d108      	bne.n	8008e36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d030      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4798      	blx	r3
 8008e34:	e02b      	b.n	8008e8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d027      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
 8008e46:	e022      	b.n	8008e8e <HAL_DMA_IRQHandler+0x29e>
 8008e48:	20000028 	.word	0x20000028
 8008e4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10f      	bne.n	8008e7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0210 	bic.w	r2, r2, #16
 8008e6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d032      	beq.n	8008efc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d022      	beq.n	8008ee8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2205      	movs	r2, #5
 8008ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60bb      	str	r3, [r7, #8]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d307      	bcc.n	8008ed6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1f2      	bne.n	8008eba <HAL_DMA_IRQHandler+0x2ca>
 8008ed4:	e000      	b.n	8008ed8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008ed6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	4798      	blx	r3
 8008ef8:	e000      	b.n	8008efc <HAL_DMA_IRQHandler+0x30c>
        return;
 8008efa:	bf00      	nop
    }
  }
}
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop

08008f04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	d108      	bne.n	8008f5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008f5a:	e007      	b.n	8008f6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	60da      	str	r2, [r3, #12]
}
 8008f6c:	bf00      	nop
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	3b10      	subs	r3, #16
 8008f88:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <DMA_CalcBaseAndBitshift+0x60>)
 8008f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008f92:	4a12      	ldr	r2, [pc, #72]	; (8008fdc <DMA_CalcBaseAndBitshift+0x64>)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d908      	bls.n	8008fb8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <DMA_CalcBaseAndBitshift+0x68>)
 8008fae:	4013      	ands	r3, r2
 8008fb0:	1d1a      	adds	r2, r3, #4
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	659a      	str	r2, [r3, #88]	; 0x58
 8008fb6:	e006      	b.n	8008fc6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <DMA_CalcBaseAndBitshift+0x68>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	aaaaaaab 	.word	0xaaaaaaab
 8008fdc:	0801f7d8 	.word	0x0801f7d8
 8008fe0:	fffffc00 	.word	0xfffffc00

08008fe4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d11f      	bne.n	800903e <DMA_CheckFifoParam+0x5a>
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2b03      	cmp	r3, #3
 8009002:	d856      	bhi.n	80090b2 <DMA_CheckFifoParam+0xce>
 8009004:	a201      	add	r2, pc, #4	; (adr r2, 800900c <DMA_CheckFifoParam+0x28>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	0800901d 	.word	0x0800901d
 8009010:	0800902f 	.word	0x0800902f
 8009014:	0800901d 	.word	0x0800901d
 8009018:	080090b3 	.word	0x080090b3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d046      	beq.n	80090b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800902c:	e043      	b.n	80090b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009036:	d140      	bne.n	80090ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800903c:	e03d      	b.n	80090ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009046:	d121      	bne.n	800908c <DMA_CheckFifoParam+0xa8>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b03      	cmp	r3, #3
 800904c:	d837      	bhi.n	80090be <DMA_CheckFifoParam+0xda>
 800904e:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <DMA_CheckFifoParam+0x70>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	08009065 	.word	0x08009065
 8009058:	0800906b 	.word	0x0800906b
 800905c:	08009065 	.word	0x08009065
 8009060:	0800907d 	.word	0x0800907d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	73fb      	strb	r3, [r7, #15]
      break;
 8009068:	e030      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d025      	beq.n	80090c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800907a:	e022      	b.n	80090c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009084:	d11f      	bne.n	80090c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800908a:	e01c      	b.n	80090c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d903      	bls.n	800909a <DMA_CheckFifoParam+0xb6>
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2b03      	cmp	r3, #3
 8009096:	d003      	beq.n	80090a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009098:	e018      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	73fb      	strb	r3, [r7, #15]
      break;
 800909e:	e015      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00e      	beq.n	80090ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	73fb      	strb	r3, [r7, #15]
      break;
 80090b0:	e00b      	b.n	80090ca <DMA_CheckFifoParam+0xe6>
      break;
 80090b2:	bf00      	nop
 80090b4:	e00a      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
      break;
 80090b6:	bf00      	nop
 80090b8:	e008      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
      break;
 80090ba:	bf00      	nop
 80090bc:	e006      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
      break;
 80090be:	bf00      	nop
 80090c0:	e004      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
      break;
 80090c2:	bf00      	nop
 80090c4:	e002      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
      break;   
 80090c6:	bf00      	nop
 80090c8:	e000      	b.n	80090cc <DMA_CheckFifoParam+0xe8>
      break;
 80090ca:	bf00      	nop
    }
  } 
  
  return status; 
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop

080090dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e039      	b.n	8009162 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fa faf0 	bl	80036e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912c:	f023 0107 	bic.w	r1, r3, #7
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <HAL_DMA2D_Init+0x90>)
 8009144:	4013      	ands	r3, r2
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	68d1      	ldr	r1, [r2, #12]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	6812      	ldr	r2, [r2, #0]
 800914e:	430b      	orrs	r3, r1
 8009150:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	ffffc000 	.word	0xffffc000

08009170 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af02      	add	r7, sp, #8
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_DMA2D_Start+0x1c>
 8009188:	2302      	movs	r3, #2
 800918a:	e018      	b.n	80091be <HAL_DMA2D_Start+0x4e>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 fa98 	bl	80096dc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0201 	orr.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b086      	sub	sp, #24
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d056      	beq.n	8009290 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80091e2:	f7fe fce9 	bl	8007bb8 <HAL_GetTick>
 80091e6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80091e8:	e04b      	b.n	8009282 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d023      	beq.n	8009244 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	f043 0202 	orr.w	r2, r3, #2
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009220:	f043 0201 	orr.w	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2221      	movs	r2, #33	; 0x21
 800922e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2204      	movs	r2, #4
 8009234:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e0a5      	b.n	8009390 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924a:	d01a      	beq.n	8009282 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800924c:	f7fe fcb4 	bl	8007bb8 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d302      	bcc.n	8009262 <HAL_DMA2D_PollForTransfer+0x9c>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10f      	bne.n	8009282 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009266:	f043 0220 	orr.w	r2, r3, #32
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2203      	movs	r2, #3
 8009272:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e086      	b.n	8009390 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0ac      	beq.n	80091ea <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	f003 0320 	and.w	r3, r3, #32
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d061      	beq.n	8009376 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80092b2:	f7fe fc81 	bl	8007bb8 <HAL_GetTick>
 80092b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80092b8:	e056      	b.n	8009368 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d02e      	beq.n	800932a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f003 0308 	and.w	r3, r3, #8
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d005      	beq.n	80092e2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092da:	f043 0204 	orr.w	r2, r3, #4
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f003 0320 	and.w	r3, r3, #32
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f0:	f043 0202 	orr.w	r2, r3, #2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009306:	f043 0201 	orr.w	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2229      	movs	r2, #41	; 0x29
 8009314:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2204      	movs	r2, #4
 800931a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e032      	b.n	8009390 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009330:	d01a      	beq.n	8009368 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009332:	f7fe fc41 	bl	8007bb8 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	429a      	cmp	r2, r3
 8009340:	d302      	bcc.n	8009348 <HAL_DMA2D_PollForTransfer+0x182>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10f      	bne.n	8009368 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934c:	f043 0220 	orr.w	r2, r3, #32
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2203      	movs	r2, #3
 8009358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e013      	b.n	8009390 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0a1      	beq.n	80092ba <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2212      	movs	r2, #18
 800937c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d026      	beq.n	8009408 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d021      	beq.n	8009408 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093d2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d8:	f043 0201 	orr.w	r2, r3, #1
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2201      	movs	r2, #1
 80093e6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2204      	movs	r2, #4
 80093ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d026      	beq.n	8009460 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d021      	beq.n	8009460 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800942a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2220      	movs	r2, #32
 8009432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009438:	f043 0202 	orr.w	r2, r3, #2
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2204      	movs	r2, #4
 8009444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d026      	beq.n	80094b8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009470:	2b00      	cmp	r3, #0
 8009472:	d021      	beq.n	80094b8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009482:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2208      	movs	r2, #8
 800948a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009490:	f043 0204 	orr.w	r2, r3, #4
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2204      	movs	r2, #4
 800949c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d013      	beq.n	80094ea <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00e      	beq.n	80094ea <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094da:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2204      	movs	r2, #4
 80094e2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f853 	bl	8009590 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d024      	beq.n	800953e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d01f      	beq.n	800953e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800950c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2202      	movs	r2, #2
 8009514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f003 0310 	and.w	r3, r3, #16
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01f      	beq.n	8009588 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d01a      	beq.n	8009588 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009560:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2210      	movs	r2, #16
 8009568:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f80e 	bl	80095a4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8009588:	bf00      	nop
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <HAL_DMA2D_ConfigLayer+0x20>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e079      	b.n	80096cc <HAL_DMA2D_ConfigLayer+0x114>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2202      	movs	r2, #2
 80095e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	011b      	lsls	r3, r3, #4
 80095ec:	3318      	adds	r3, #24
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	041b      	lsls	r3, r3, #16
 80095fe:	4313      	orrs	r3, r2
 8009600:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8009602:	4b35      	ldr	r3, [pc, #212]	; (80096d8 <HAL_DMA2D_ConfigLayer+0x120>)
 8009604:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2b0a      	cmp	r3, #10
 800960c:	d003      	beq.n	8009616 <HAL_DMA2D_ConfigLayer+0x5e>
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b09      	cmp	r3, #9
 8009614:	d107      	bne.n	8009626 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	4313      	orrs	r3, r2
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	e005      	b.n	8009632 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	061b      	lsls	r3, r3, #24
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d120      	bne.n	800967a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	43db      	mvns	r3, r3
 8009642:	ea02 0103 	and.w	r1, r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	430a      	orrs	r2, r1
 800964e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	6812      	ldr	r2, [r2, #0]
 8009658:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2b0a      	cmp	r3, #10
 8009660:	d003      	beq.n	800966a <HAL_DMA2D_ConfigLayer+0xb2>
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2b09      	cmp	r3, #9
 8009668:	d127      	bne.n	80096ba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009676:	629a      	str	r2, [r3, #40]	; 0x28
 8009678:	e01f      	b.n	80096ba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	43db      	mvns	r3, r3
 8009684:	ea02 0103 	and.w	r1, r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	430a      	orrs	r2, r1
 8009690:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	6812      	ldr	r2, [r2, #0]
 800969a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	2b0a      	cmp	r3, #10
 80096a2:	d003      	beq.n	80096ac <HAL_DMA2D_ConfigLayer+0xf4>
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	2b09      	cmp	r3, #9
 80096aa:	d106      	bne.n	80096ba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80096b8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	ff03000f 	.word	0xff03000f

080096dc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80096dc:	b480      	push	{r7}
 80096de:	b08b      	sub	sp, #44	; 0x2c
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	041a      	lsls	r2, r3, #16
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	431a      	orrs	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009714:	d174      	bne.n	8009800 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800971c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009724:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800972c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	b2db      	uxtb	r3, r3
 8009732:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	431a      	orrs	r2, r3
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	4313      	orrs	r3, r2
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	4313      	orrs	r3, r2
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
 800974c:	e053      	b.n	80097f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d106      	bne.n	8009764 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4313      	orrs	r3, r2
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	627b      	str	r3, [r7, #36]	; 0x24
 8009762:	e048      	b.n	80097f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d111      	bne.n	8009790 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	0cdb      	lsrs	r3, r3, #19
 8009770:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	0a9b      	lsrs	r3, r3, #10
 8009776:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	08db      	lsrs	r3, r3, #3
 800977c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	02db      	lsls	r3, r3, #11
 8009786:	4313      	orrs	r3, r2
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	4313      	orrs	r3, r2
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
 800978e:	e032      	b.n	80097f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d117      	bne.n	80097c8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	0fdb      	lsrs	r3, r3, #31
 800979c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	0cdb      	lsrs	r3, r3, #19
 80097a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	0adb      	lsrs	r3, r3, #11
 80097a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	08db      	lsrs	r3, r3, #3
 80097ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	029b      	lsls	r3, r3, #10
 80097b8:	431a      	orrs	r2, r3
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	03db      	lsls	r3, r3, #15
 80097be:	4313      	orrs	r3, r2
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
 80097c6:	e016      	b.n	80097f6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	0f1b      	lsrs	r3, r3, #28
 80097cc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	0d1b      	lsrs	r3, r3, #20
 80097d2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	0b1b      	lsrs	r3, r3, #12
 80097d8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	091b      	lsrs	r3, r3, #4
 80097de:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	011a      	lsls	r2, r3, #4
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	021b      	lsls	r3, r3, #8
 80097e8:	431a      	orrs	r2, r3
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	031b      	lsls	r3, r3, #12
 80097ee:	4313      	orrs	r3, r2
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80097fe:	e003      	b.n	8009808 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	60da      	str	r2, [r3, #12]
}
 8009808:	bf00      	nop
 800980a:	372c      	adds	r7, #44	; 0x2c
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009814:	b480      	push	{r7}
 8009816:	b089      	sub	sp, #36	; 0x24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800981e:	2300      	movs	r3, #0
 8009820:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009826:	2300      	movs	r3, #0
 8009828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800982a:	2300      	movs	r3, #0
 800982c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800982e:	2300      	movs	r3, #0
 8009830:	61fb      	str	r3, [r7, #28]
 8009832:	e175      	b.n	8009b20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009834:	2201      	movs	r2, #1
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	fa02 f303 	lsl.w	r3, r2, r3
 800983c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	4013      	ands	r3, r2
 8009846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	429a      	cmp	r2, r3
 800984e:	f040 8164 	bne.w	8009b1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d00b      	beq.n	8009872 <HAL_GPIO_Init+0x5e>
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2b02      	cmp	r3, #2
 8009860:	d007      	beq.n	8009872 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009866:	2b11      	cmp	r3, #17
 8009868:	d003      	beq.n	8009872 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2b12      	cmp	r3, #18
 8009870:	d130      	bne.n	80098d4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	005b      	lsls	r3, r3, #1
 800987c:	2203      	movs	r2, #3
 800987e:	fa02 f303 	lsl.w	r3, r2, r3
 8009882:	43db      	mvns	r3, r3
 8009884:	69ba      	ldr	r2, [r7, #24]
 8009886:	4013      	ands	r3, r2
 8009888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	4313      	orrs	r3, r2
 800989a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80098a8:	2201      	movs	r2, #1
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	fa02 f303 	lsl.w	r3, r2, r3
 80098b0:	43db      	mvns	r3, r3
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	4013      	ands	r3, r2
 80098b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	091b      	lsrs	r3, r3, #4
 80098be:	f003 0201 	and.w	r2, r3, #1
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	fa02 f303 	lsl.w	r3, r2, r3
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	2203      	movs	r2, #3
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	43db      	mvns	r3, r3
 80098e6:	69ba      	ldr	r2, [r7, #24]
 80098e8:	4013      	ands	r3, r2
 80098ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	fa02 f303 	lsl.w	r3, r2, r3
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69ba      	ldr	r2, [r7, #24]
 8009902:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d003      	beq.n	8009914 <HAL_GPIO_Init+0x100>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2b12      	cmp	r3, #18
 8009912:	d123      	bne.n	800995c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	08da      	lsrs	r2, r3, #3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	3208      	adds	r2, #8
 800991c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	f003 0307 	and.w	r3, r3, #7
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	220f      	movs	r2, #15
 800992c:	fa02 f303 	lsl.w	r3, r2, r3
 8009930:	43db      	mvns	r3, r3
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	4013      	ands	r3, r2
 8009936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	f003 0307 	and.w	r3, r3, #7
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	fa02 f303 	lsl.w	r3, r2, r3
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	4313      	orrs	r3, r2
 800994c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	08da      	lsrs	r2, r3, #3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3208      	adds	r2, #8
 8009956:	69b9      	ldr	r1, [r7, #24]
 8009958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	2203      	movs	r2, #3
 8009968:	fa02 f303 	lsl.w	r3, r2, r3
 800996c:	43db      	mvns	r3, r3
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	4013      	ands	r3, r2
 8009972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	f003 0203 	and.w	r2, r3, #3
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	005b      	lsls	r3, r3, #1
 8009980:	fa02 f303 	lsl.w	r3, r2, r3
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	4313      	orrs	r3, r2
 8009988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 80be 	beq.w	8009b1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800999e:	4b66      	ldr	r3, [pc, #408]	; (8009b38 <HAL_GPIO_Init+0x324>)
 80099a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a2:	4a65      	ldr	r2, [pc, #404]	; (8009b38 <HAL_GPIO_Init+0x324>)
 80099a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099a8:	6453      	str	r3, [r2, #68]	; 0x44
 80099aa:	4b63      	ldr	r3, [pc, #396]	; (8009b38 <HAL_GPIO_Init+0x324>)
 80099ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80099b6:	4a61      	ldr	r2, [pc, #388]	; (8009b3c <HAL_GPIO_Init+0x328>)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	089b      	lsrs	r3, r3, #2
 80099bc:	3302      	adds	r3, #2
 80099be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	220f      	movs	r2, #15
 80099ce:	fa02 f303 	lsl.w	r3, r2, r3
 80099d2:	43db      	mvns	r3, r3
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	4013      	ands	r3, r2
 80099d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a58      	ldr	r2, [pc, #352]	; (8009b40 <HAL_GPIO_Init+0x32c>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d037      	beq.n	8009a52 <HAL_GPIO_Init+0x23e>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a57      	ldr	r2, [pc, #348]	; (8009b44 <HAL_GPIO_Init+0x330>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d031      	beq.n	8009a4e <HAL_GPIO_Init+0x23a>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a56      	ldr	r2, [pc, #344]	; (8009b48 <HAL_GPIO_Init+0x334>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d02b      	beq.n	8009a4a <HAL_GPIO_Init+0x236>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a55      	ldr	r2, [pc, #340]	; (8009b4c <HAL_GPIO_Init+0x338>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d025      	beq.n	8009a46 <HAL_GPIO_Init+0x232>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a54      	ldr	r2, [pc, #336]	; (8009b50 <HAL_GPIO_Init+0x33c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d01f      	beq.n	8009a42 <HAL_GPIO_Init+0x22e>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a53      	ldr	r2, [pc, #332]	; (8009b54 <HAL_GPIO_Init+0x340>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d019      	beq.n	8009a3e <HAL_GPIO_Init+0x22a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a52      	ldr	r2, [pc, #328]	; (8009b58 <HAL_GPIO_Init+0x344>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d013      	beq.n	8009a3a <HAL_GPIO_Init+0x226>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a51      	ldr	r2, [pc, #324]	; (8009b5c <HAL_GPIO_Init+0x348>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00d      	beq.n	8009a36 <HAL_GPIO_Init+0x222>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a50      	ldr	r2, [pc, #320]	; (8009b60 <HAL_GPIO_Init+0x34c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d007      	beq.n	8009a32 <HAL_GPIO_Init+0x21e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a4f      	ldr	r2, [pc, #316]	; (8009b64 <HAL_GPIO_Init+0x350>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d101      	bne.n	8009a2e <HAL_GPIO_Init+0x21a>
 8009a2a:	2309      	movs	r3, #9
 8009a2c:	e012      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a2e:	230a      	movs	r3, #10
 8009a30:	e010      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a32:	2308      	movs	r3, #8
 8009a34:	e00e      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a36:	2307      	movs	r3, #7
 8009a38:	e00c      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a3a:	2306      	movs	r3, #6
 8009a3c:	e00a      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a3e:	2305      	movs	r3, #5
 8009a40:	e008      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a42:	2304      	movs	r3, #4
 8009a44:	e006      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a46:	2303      	movs	r3, #3
 8009a48:	e004      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	e002      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e000      	b.n	8009a54 <HAL_GPIO_Init+0x240>
 8009a52:	2300      	movs	r3, #0
 8009a54:	69fa      	ldr	r2, [r7, #28]
 8009a56:	f002 0203 	and.w	r2, r2, #3
 8009a5a:	0092      	lsls	r2, r2, #2
 8009a5c:	4093      	lsls	r3, r2
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009a64:	4935      	ldr	r1, [pc, #212]	; (8009b3c <HAL_GPIO_Init+0x328>)
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	089b      	lsrs	r3, r3, #2
 8009a6a:	3302      	adds	r3, #2
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009a72:	4b3d      	ldr	r3, [pc, #244]	; (8009b68 <HAL_GPIO_Init+0x354>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	43db      	mvns	r3, r3
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009a8e:	69ba      	ldr	r2, [r7, #24]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009a96:	4a34      	ldr	r2, [pc, #208]	; (8009b68 <HAL_GPIO_Init+0x354>)
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009a9c:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <HAL_GPIO_Init+0x354>)
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	43db      	mvns	r3, r3
 8009aa6:	69ba      	ldr	r2, [r7, #24]
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ac0:	4a29      	ldr	r2, [pc, #164]	; (8009b68 <HAL_GPIO_Init+0x354>)
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009ac6:	4b28      	ldr	r3, [pc, #160]	; (8009b68 <HAL_GPIO_Init+0x354>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	43db      	mvns	r3, r3
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009aea:	4a1f      	ldr	r2, [pc, #124]	; (8009b68 <HAL_GPIO_Init+0x354>)
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009af0:	4b1d      	ldr	r3, [pc, #116]	; (8009b68 <HAL_GPIO_Init+0x354>)
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	43db      	mvns	r3, r3
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	4013      	ands	r3, r2
 8009afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009b14:	4a14      	ldr	r2, [pc, #80]	; (8009b68 <HAL_GPIO_Init+0x354>)
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	2b0f      	cmp	r3, #15
 8009b24:	f67f ae86 	bls.w	8009834 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	3724      	adds	r7, #36	; 0x24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	40023800 	.word	0x40023800
 8009b3c:	40013800 	.word	0x40013800
 8009b40:	40020000 	.word	0x40020000
 8009b44:	40020400 	.word	0x40020400
 8009b48:	40020800 	.word	0x40020800
 8009b4c:	40020c00 	.word	0x40020c00
 8009b50:	40021000 	.word	0x40021000
 8009b54:	40021400 	.word	0x40021400
 8009b58:	40021800 	.word	0x40021800
 8009b5c:	40021c00 	.word	0x40021c00
 8009b60:	40022000 	.word	0x40022000
 8009b64:	40022400 	.word	0x40022400
 8009b68:	40013c00 	.word	0x40013c00

08009b6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009b76:	2300      	movs	r3, #0
 8009b78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009b82:	2300      	movs	r3, #0
 8009b84:	617b      	str	r3, [r7, #20]
 8009b86:	e0d9      	b.n	8009d3c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009b88:	2201      	movs	r2, #1
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	4013      	ands	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	f040 80c9 	bne.w	8009d36 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009ba4:	4a6b      	ldr	r2, [pc, #428]	; (8009d54 <HAL_GPIO_DeInit+0x1e8>)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	089b      	lsrs	r3, r3, #2
 8009baa:	3302      	adds	r3, #2
 8009bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bb0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f003 0303 	and.w	r3, r3, #3
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	220f      	movs	r2, #15
 8009bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a63      	ldr	r2, [pc, #396]	; (8009d58 <HAL_GPIO_DeInit+0x1ec>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d037      	beq.n	8009c3e <HAL_GPIO_DeInit+0xd2>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a62      	ldr	r2, [pc, #392]	; (8009d5c <HAL_GPIO_DeInit+0x1f0>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d031      	beq.n	8009c3a <HAL_GPIO_DeInit+0xce>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a61      	ldr	r2, [pc, #388]	; (8009d60 <HAL_GPIO_DeInit+0x1f4>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d02b      	beq.n	8009c36 <HAL_GPIO_DeInit+0xca>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a60      	ldr	r2, [pc, #384]	; (8009d64 <HAL_GPIO_DeInit+0x1f8>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d025      	beq.n	8009c32 <HAL_GPIO_DeInit+0xc6>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a5f      	ldr	r2, [pc, #380]	; (8009d68 <HAL_GPIO_DeInit+0x1fc>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d01f      	beq.n	8009c2e <HAL_GPIO_DeInit+0xc2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a5e      	ldr	r2, [pc, #376]	; (8009d6c <HAL_GPIO_DeInit+0x200>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d019      	beq.n	8009c2a <HAL_GPIO_DeInit+0xbe>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a5d      	ldr	r2, [pc, #372]	; (8009d70 <HAL_GPIO_DeInit+0x204>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d013      	beq.n	8009c26 <HAL_GPIO_DeInit+0xba>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a5c      	ldr	r2, [pc, #368]	; (8009d74 <HAL_GPIO_DeInit+0x208>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00d      	beq.n	8009c22 <HAL_GPIO_DeInit+0xb6>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a5b      	ldr	r2, [pc, #364]	; (8009d78 <HAL_GPIO_DeInit+0x20c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d007      	beq.n	8009c1e <HAL_GPIO_DeInit+0xb2>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a5a      	ldr	r2, [pc, #360]	; (8009d7c <HAL_GPIO_DeInit+0x210>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d101      	bne.n	8009c1a <HAL_GPIO_DeInit+0xae>
 8009c16:	2309      	movs	r3, #9
 8009c18:	e012      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	e010      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c1e:	2308      	movs	r3, #8
 8009c20:	e00e      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c22:	2307      	movs	r3, #7
 8009c24:	e00c      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c26:	2306      	movs	r3, #6
 8009c28:	e00a      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c2a:	2305      	movs	r3, #5
 8009c2c:	e008      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c2e:	2304      	movs	r3, #4
 8009c30:	e006      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c32:	2303      	movs	r3, #3
 8009c34:	e004      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c36:	2302      	movs	r3, #2
 8009c38:	e002      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <HAL_GPIO_DeInit+0xd4>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	f002 0203 	and.w	r2, r2, #3
 8009c46:	0092      	lsls	r2, r2, #2
 8009c48:	4093      	lsls	r3, r2
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d132      	bne.n	8009cb6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009c50:	4b4b      	ldr	r3, [pc, #300]	; (8009d80 <HAL_GPIO_DeInit+0x214>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	43db      	mvns	r3, r3
 8009c58:	4949      	ldr	r1, [pc, #292]	; (8009d80 <HAL_GPIO_DeInit+0x214>)
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009c5e:	4b48      	ldr	r3, [pc, #288]	; (8009d80 <HAL_GPIO_DeInit+0x214>)
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	43db      	mvns	r3, r3
 8009c66:	4946      	ldr	r1, [pc, #280]	; (8009d80 <HAL_GPIO_DeInit+0x214>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009c6c:	4b44      	ldr	r3, [pc, #272]	; (8009d80 <HAL_GPIO_DeInit+0x214>)
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	43db      	mvns	r3, r3
 8009c74:	4942      	ldr	r1, [pc, #264]	; (8009d80 <HAL_GPIO_DeInit+0x214>)
 8009c76:	4013      	ands	r3, r2
 8009c78:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009c7a:	4b41      	ldr	r3, [pc, #260]	; (8009d80 <HAL_GPIO_DeInit+0x214>)
 8009c7c:	68da      	ldr	r2, [r3, #12]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	43db      	mvns	r3, r3
 8009c82:	493f      	ldr	r1, [pc, #252]	; (8009d80 <HAL_GPIO_DeInit+0x214>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	220f      	movs	r2, #15
 8009c92:	fa02 f303 	lsl.w	r3, r2, r3
 8009c96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009c98:	4a2e      	ldr	r2, [pc, #184]	; (8009d54 <HAL_GPIO_DeInit+0x1e8>)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	089b      	lsrs	r3, r3, #2
 8009c9e:	3302      	adds	r3, #2
 8009ca0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	43da      	mvns	r2, r3
 8009ca8:	482a      	ldr	r0, [pc, #168]	; (8009d54 <HAL_GPIO_DeInit+0x1e8>)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	089b      	lsrs	r3, r3, #2
 8009cae:	400a      	ands	r2, r1
 8009cb0:	3302      	adds	r3, #2
 8009cb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	005b      	lsls	r3, r3, #1
 8009cbe:	2103      	movs	r1, #3
 8009cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc4:	43db      	mvns	r3, r3
 8009cc6:	401a      	ands	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	08da      	lsrs	r2, r3, #3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	3208      	adds	r2, #8
 8009cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f003 0307 	and.w	r3, r3, #7
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	220f      	movs	r2, #15
 8009ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce6:	43db      	mvns	r3, r3
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	08d2      	lsrs	r2, r2, #3
 8009cec:	4019      	ands	r1, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3208      	adds	r2, #8
 8009cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	2103      	movs	r1, #3
 8009d00:	fa01 f303 	lsl.w	r3, r1, r3
 8009d04:	43db      	mvns	r3, r3
 8009d06:	401a      	ands	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	2101      	movs	r1, #1
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	fa01 f303 	lsl.w	r3, r1, r3
 8009d18:	43db      	mvns	r3, r3
 8009d1a:	401a      	ands	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	2103      	movs	r1, #3
 8009d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2e:	43db      	mvns	r3, r3
 8009d30:	401a      	ands	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2b0f      	cmp	r3, #15
 8009d40:	f67f af22 	bls.w	8009b88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop
 8009d48:	371c      	adds	r7, #28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	40013800 	.word	0x40013800
 8009d58:	40020000 	.word	0x40020000
 8009d5c:	40020400 	.word	0x40020400
 8009d60:	40020800 	.word	0x40020800
 8009d64:	40020c00 	.word	0x40020c00
 8009d68:	40021000 	.word	0x40021000
 8009d6c:	40021400 	.word	0x40021400
 8009d70:	40021800 	.word	0x40021800
 8009d74:	40021c00 	.word	0x40021c00
 8009d78:	40022000 	.word	0x40022000
 8009d7c:	40022400 	.word	0x40022400
 8009d80:	40013c00 	.word	0x40013c00

08009d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	887b      	ldrh	r3, [r7, #2]
 8009d96:	4013      	ands	r3, r2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	73fb      	strb	r3, [r7, #15]
 8009da0:	e001      	b.n	8009da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	807b      	strh	r3, [r7, #2]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009dc4:	787b      	ldrb	r3, [r7, #1]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dca:	887a      	ldrh	r2, [r7, #2]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009dd0:	e003      	b.n	8009dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009dd2:	887b      	ldrh	r3, [r7, #2]
 8009dd4:	041a      	lsls	r2, r3, #16
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	619a      	str	r2, [r3, #24]
}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b085      	sub	sp, #20
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	460b      	mov	r3, r1
 8009df0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009df8:	887a      	ldrh	r2, [r7, #2]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	041a      	lsls	r2, r3, #16
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	43d9      	mvns	r1, r3
 8009e04:	887b      	ldrh	r3, [r7, #2]
 8009e06:	400b      	ands	r3, r1
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	619a      	str	r2, [r3, #24]
}
 8009e0e:	bf00      	nop
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
	...

08009e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009e26:	4b08      	ldr	r3, [pc, #32]	; (8009e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e28:	695a      	ldr	r2, [r3, #20]
 8009e2a:	88fb      	ldrh	r3, [r7, #6]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d006      	beq.n	8009e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e32:	4a05      	ldr	r2, [pc, #20]	; (8009e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e34:	88fb      	ldrh	r3, [r7, #6]
 8009e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e38:	88fb      	ldrh	r3, [r7, #6]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 f806 	bl	8009e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40013c00 	.word	0x40013c00

08009e4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e64:	b08f      	sub	sp, #60	; 0x3c
 8009e66:	af0a      	add	r7, sp, #40	; 0x28
 8009e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e054      	b.n	8009f1e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f00f ff96 	bl	8019dc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2203      	movs	r2, #3
 8009e98:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d102      	bne.n	8009eae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f009 fea9 	bl	8013c0a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	603b      	str	r3, [r7, #0]
 8009ebe:	687e      	ldr	r6, [r7, #4]
 8009ec0:	466d      	mov	r5, sp
 8009ec2:	f106 0410 	add.w	r4, r6, #16
 8009ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ece:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009ed2:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ed6:	1d33      	adds	r3, r6, #4
 8009ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eda:	6838      	ldr	r0, [r7, #0]
 8009edc:	f009 fe2c 	bl	8013b38 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f009 fea0 	bl	8013c2c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	603b      	str	r3, [r7, #0]
 8009ef2:	687e      	ldr	r6, [r7, #4]
 8009ef4:	466d      	mov	r5, sp
 8009ef6:	f106 0410 	add.w	r4, r6, #16
 8009efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8009f0a:	1d33      	adds	r3, r6, #4
 8009f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f0e:	6838      	ldr	r0, [r7, #0]
 8009f10:	f009 ffb2 	bl	8013e78 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f26 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009f26:	b590      	push	{r4, r7, lr}
 8009f28:	b089      	sub	sp, #36	; 0x24
 8009f2a:	af04      	add	r7, sp, #16
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	461a      	mov	r2, r3
 8009f34:	4603      	mov	r3, r0
 8009f36:	70fb      	strb	r3, [r7, #3]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70bb      	strb	r3, [r7, #2]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d101      	bne.n	8009f4e <HAL_HCD_HC_Init+0x28>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	e076      	b.n	800a03c <HAL_HCD_HC_Init+0x116>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8009f56:	78fb      	ldrb	r3, [r7, #3]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	212c      	movs	r1, #44	; 0x2c
 8009f5c:	fb01 f303 	mul.w	r3, r1, r3
 8009f60:	4413      	add	r3, r2
 8009f62:	333d      	adds	r3, #61	; 0x3d
 8009f64:	2200      	movs	r2, #0
 8009f66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	212c      	movs	r1, #44	; 0x2c
 8009f6e:	fb01 f303 	mul.w	r3, r1, r3
 8009f72:	4413      	add	r3, r2
 8009f74:	3338      	adds	r3, #56	; 0x38
 8009f76:	787a      	ldrb	r2, [r7, #1]
 8009f78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	212c      	movs	r1, #44	; 0x2c
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	4413      	add	r3, r2
 8009f86:	3340      	adds	r3, #64	; 0x40
 8009f88:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f8a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	212c      	movs	r1, #44	; 0x2c
 8009f92:	fb01 f303 	mul.w	r3, r1, r3
 8009f96:	4413      	add	r3, r2
 8009f98:	3339      	adds	r3, #57	; 0x39
 8009f9a:	78fa      	ldrb	r2, [r7, #3]
 8009f9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	212c      	movs	r1, #44	; 0x2c
 8009fa4:	fb01 f303 	mul.w	r3, r1, r3
 8009fa8:	4413      	add	r3, r2
 8009faa:	333f      	adds	r3, #63	; 0x3f
 8009fac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009fb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8009fb2:	78fb      	ldrb	r3, [r7, #3]
 8009fb4:	78ba      	ldrb	r2, [r7, #2]
 8009fb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009fba:	b2d0      	uxtb	r0, r2
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	212c      	movs	r1, #44	; 0x2c
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	333a      	adds	r3, #58	; 0x3a
 8009fc8:	4602      	mov	r2, r0
 8009fca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009fcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	da09      	bge.n	8009fe8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	212c      	movs	r1, #44	; 0x2c
 8009fda:	fb01 f303 	mul.w	r3, r1, r3
 8009fde:	4413      	add	r3, r2
 8009fe0:	333b      	adds	r3, #59	; 0x3b
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	e008      	b.n	8009ffa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	212c      	movs	r1, #44	; 0x2c
 8009fee:	fb01 f303 	mul.w	r3, r1, r3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	333b      	adds	r3, #59	; 0x3b
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009ffa:	78fb      	ldrb	r3, [r7, #3]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	212c      	movs	r1, #44	; 0x2c
 800a000:	fb01 f303 	mul.w	r3, r1, r3
 800a004:	4413      	add	r3, r2
 800a006:	333c      	adds	r3, #60	; 0x3c
 800a008:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a00c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	787c      	ldrb	r4, [r7, #1]
 800a014:	78ba      	ldrb	r2, [r7, #2]
 800a016:	78f9      	ldrb	r1, [r7, #3]
 800a018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a01a:	9302      	str	r3, [sp, #8]
 800a01c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	4623      	mov	r3, r4
 800a02a:	f00a f89b 	bl	8014164 <USB_HC_Init>
 800a02e:	4603      	mov	r3, r0
 800a030:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	bd90      	pop	{r4, r7, pc}

0800a044 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <HAL_HCD_HC_Halt+0x1e>
 800a05e:	2302      	movs	r3, #2
 800a060:	e00f      	b.n	800a082 <HAL_HCD_HC_Halt+0x3e>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	78fa      	ldrb	r2, [r7, #3]
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f00a fad7 	bl	8014626 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	4608      	mov	r0, r1
 800a096:	4611      	mov	r1, r2
 800a098:	461a      	mov	r2, r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	70fb      	strb	r3, [r7, #3]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	70bb      	strb	r3, [r7, #2]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800a0a6:	78fb      	ldrb	r3, [r7, #3]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	212c      	movs	r1, #44	; 0x2c
 800a0ac:	fb01 f303 	mul.w	r3, r1, r3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	333b      	adds	r3, #59	; 0x3b
 800a0b4:	78ba      	ldrb	r2, [r7, #2]
 800a0b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800a0b8:	78fb      	ldrb	r3, [r7, #3]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	212c      	movs	r1, #44	; 0x2c
 800a0be:	fb01 f303 	mul.w	r3, r1, r3
 800a0c2:	4413      	add	r3, r2
 800a0c4:	333f      	adds	r3, #63	; 0x3f
 800a0c6:	787a      	ldrb	r2, [r7, #1]
 800a0c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800a0ca:	7c3b      	ldrb	r3, [r7, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d112      	bne.n	800a0f6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	212c      	movs	r1, #44	; 0x2c
 800a0d6:	fb01 f303 	mul.w	r3, r1, r3
 800a0da:	4413      	add	r3, r2
 800a0dc:	3342      	adds	r3, #66	; 0x42
 800a0de:	2203      	movs	r2, #3
 800a0e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	212c      	movs	r1, #44	; 0x2c
 800a0e8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ec:	4413      	add	r3, r2
 800a0ee:	333d      	adds	r3, #61	; 0x3d
 800a0f0:	7f3a      	ldrb	r2, [r7, #28]
 800a0f2:	701a      	strb	r2, [r3, #0]
 800a0f4:	e008      	b.n	800a108 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	212c      	movs	r1, #44	; 0x2c
 800a0fc:	fb01 f303 	mul.w	r3, r1, r3
 800a100:	4413      	add	r3, r2
 800a102:	3342      	adds	r3, #66	; 0x42
 800a104:	2202      	movs	r2, #2
 800a106:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800a108:	787b      	ldrb	r3, [r7, #1]
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	f200 80c6 	bhi.w	800a29c <HAL_HCD_HC_SubmitRequest+0x210>
 800a110:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800a112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a116:	bf00      	nop
 800a118:	0800a129 	.word	0x0800a129
 800a11c:	0800a289 	.word	0x0800a289
 800a120:	0800a18d 	.word	0x0800a18d
 800a124:	0800a20b 	.word	0x0800a20b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800a128:	7c3b      	ldrb	r3, [r7, #16]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	f040 80b8 	bne.w	800a2a0 <HAL_HCD_HC_SubmitRequest+0x214>
 800a130:	78bb      	ldrb	r3, [r7, #2]
 800a132:	2b00      	cmp	r3, #0
 800a134:	f040 80b4 	bne.w	800a2a0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800a138:	8b3b      	ldrh	r3, [r7, #24]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d108      	bne.n	800a150 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	212c      	movs	r1, #44	; 0x2c
 800a144:	fb01 f303 	mul.w	r3, r1, r3
 800a148:	4413      	add	r3, r2
 800a14a:	3355      	adds	r3, #85	; 0x55
 800a14c:	2201      	movs	r2, #1
 800a14e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	212c      	movs	r1, #44	; 0x2c
 800a156:	fb01 f303 	mul.w	r3, r1, r3
 800a15a:	4413      	add	r3, r2
 800a15c:	3355      	adds	r3, #85	; 0x55
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d109      	bne.n	800a178 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	212c      	movs	r1, #44	; 0x2c
 800a16a:	fb01 f303 	mul.w	r3, r1, r3
 800a16e:	4413      	add	r3, r2
 800a170:	3342      	adds	r3, #66	; 0x42
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800a176:	e093      	b.n	800a2a0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	212c      	movs	r1, #44	; 0x2c
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	4413      	add	r3, r2
 800a184:	3342      	adds	r3, #66	; 0x42
 800a186:	2202      	movs	r2, #2
 800a188:	701a      	strb	r2, [r3, #0]
      break;
 800a18a:	e089      	b.n	800a2a0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800a18c:	78bb      	ldrb	r3, [r7, #2]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d11d      	bne.n	800a1ce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800a192:	78fb      	ldrb	r3, [r7, #3]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	212c      	movs	r1, #44	; 0x2c
 800a198:	fb01 f303 	mul.w	r3, r1, r3
 800a19c:	4413      	add	r3, r2
 800a19e:	3355      	adds	r3, #85	; 0x55
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d109      	bne.n	800a1ba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	212c      	movs	r1, #44	; 0x2c
 800a1ac:	fb01 f303 	mul.w	r3, r1, r3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	3342      	adds	r3, #66	; 0x42
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800a1b8:	e073      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a1ba:	78fb      	ldrb	r3, [r7, #3]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	212c      	movs	r1, #44	; 0x2c
 800a1c0:	fb01 f303 	mul.w	r3, r1, r3
 800a1c4:	4413      	add	r3, r2
 800a1c6:	3342      	adds	r3, #66	; 0x42
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	701a      	strb	r2, [r3, #0]
      break;
 800a1cc:	e069      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	212c      	movs	r1, #44	; 0x2c
 800a1d4:	fb01 f303 	mul.w	r3, r1, r3
 800a1d8:	4413      	add	r3, r2
 800a1da:	3354      	adds	r3, #84	; 0x54
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d109      	bne.n	800a1f6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	212c      	movs	r1, #44	; 0x2c
 800a1e8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	3342      	adds	r3, #66	; 0x42
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	701a      	strb	r2, [r3, #0]
      break;
 800a1f4:	e055      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a1f6:	78fb      	ldrb	r3, [r7, #3]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	212c      	movs	r1, #44	; 0x2c
 800a1fc:	fb01 f303 	mul.w	r3, r1, r3
 800a200:	4413      	add	r3, r2
 800a202:	3342      	adds	r3, #66	; 0x42
 800a204:	2202      	movs	r2, #2
 800a206:	701a      	strb	r2, [r3, #0]
      break;
 800a208:	e04b      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800a20a:	78bb      	ldrb	r3, [r7, #2]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d11d      	bne.n	800a24c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	212c      	movs	r1, #44	; 0x2c
 800a216:	fb01 f303 	mul.w	r3, r1, r3
 800a21a:	4413      	add	r3, r2
 800a21c:	3355      	adds	r3, #85	; 0x55
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d109      	bne.n	800a238 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a224:	78fb      	ldrb	r3, [r7, #3]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	212c      	movs	r1, #44	; 0x2c
 800a22a:	fb01 f303 	mul.w	r3, r1, r3
 800a22e:	4413      	add	r3, r2
 800a230:	3342      	adds	r3, #66	; 0x42
 800a232:	2200      	movs	r2, #0
 800a234:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800a236:	e034      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a238:	78fb      	ldrb	r3, [r7, #3]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	212c      	movs	r1, #44	; 0x2c
 800a23e:	fb01 f303 	mul.w	r3, r1, r3
 800a242:	4413      	add	r3, r2
 800a244:	3342      	adds	r3, #66	; 0x42
 800a246:	2202      	movs	r2, #2
 800a248:	701a      	strb	r2, [r3, #0]
      break;
 800a24a:	e02a      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800a24c:	78fb      	ldrb	r3, [r7, #3]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	212c      	movs	r1, #44	; 0x2c
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	4413      	add	r3, r2
 800a258:	3354      	adds	r3, #84	; 0x54
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d109      	bne.n	800a274 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	212c      	movs	r1, #44	; 0x2c
 800a266:	fb01 f303 	mul.w	r3, r1, r3
 800a26a:	4413      	add	r3, r2
 800a26c:	3342      	adds	r3, #66	; 0x42
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
      break;
 800a272:	e016      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	212c      	movs	r1, #44	; 0x2c
 800a27a:	fb01 f303 	mul.w	r3, r1, r3
 800a27e:	4413      	add	r3, r2
 800a280:	3342      	adds	r3, #66	; 0x42
 800a282:	2202      	movs	r2, #2
 800a284:	701a      	strb	r2, [r3, #0]
      break;
 800a286:	e00c      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	212c      	movs	r1, #44	; 0x2c
 800a28e:	fb01 f303 	mul.w	r3, r1, r3
 800a292:	4413      	add	r3, r2
 800a294:	3342      	adds	r3, #66	; 0x42
 800a296:	2200      	movs	r2, #0
 800a298:	701a      	strb	r2, [r3, #0]
      break;
 800a29a:	e002      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800a29c:	bf00      	nop
 800a29e:	e000      	b.n	800a2a2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800a2a0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	212c      	movs	r1, #44	; 0x2c
 800a2a8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3344      	adds	r3, #68	; 0x44
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	8b3a      	ldrh	r2, [r7, #24]
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	202c      	movs	r0, #44	; 0x2c
 800a2bc:	fb00 f303 	mul.w	r3, r0, r3
 800a2c0:	440b      	add	r3, r1
 800a2c2:	334c      	adds	r3, #76	; 0x4c
 800a2c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800a2c6:	78fb      	ldrb	r3, [r7, #3]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	212c      	movs	r1, #44	; 0x2c
 800a2cc:	fb01 f303 	mul.w	r3, r1, r3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	3360      	adds	r3, #96	; 0x60
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800a2d8:	78fb      	ldrb	r3, [r7, #3]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	212c      	movs	r1, #44	; 0x2c
 800a2de:	fb01 f303 	mul.w	r3, r1, r3
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3350      	adds	r3, #80	; 0x50
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	212c      	movs	r1, #44	; 0x2c
 800a2f0:	fb01 f303 	mul.w	r3, r1, r3
 800a2f4:	4413      	add	r3, r2
 800a2f6:	3339      	adds	r3, #57	; 0x39
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	212c      	movs	r1, #44	; 0x2c
 800a302:	fb01 f303 	mul.w	r3, r1, r3
 800a306:	4413      	add	r3, r2
 800a308:	3361      	adds	r3, #97	; 0x61
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6818      	ldr	r0, [r3, #0]
 800a312:	78fb      	ldrb	r3, [r7, #3]
 800a314:	222c      	movs	r2, #44	; 0x2c
 800a316:	fb02 f303 	mul.w	r3, r2, r3
 800a31a:	3338      	adds	r3, #56	; 0x38
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	18d1      	adds	r1, r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	461a      	mov	r2, r3
 800a328:	f00a f82a 	bl	8014380 <USB_HC_StartXfer>
 800a32c:	4603      	mov	r3, r0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop

0800a338 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f009 fd4f 	bl	8013df2 <USB_GetMode>
 800a354:	4603      	mov	r3, r0
 800a356:	2b01      	cmp	r3, #1
 800a358:	f040 80ef 	bne.w	800a53a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4618      	mov	r0, r3
 800a362:	f009 fd33 	bl	8013dcc <USB_ReadInterrupts>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 80e5 	beq.w	800a538 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f009 fd2a 	bl	8013dcc <USB_ReadInterrupts>
 800a378:	4603      	mov	r3, r0
 800a37a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a37e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a382:	d104      	bne.n	800a38e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a38c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4618      	mov	r0, r3
 800a394:	f009 fd1a 	bl	8013dcc <USB_ReadInterrupts>
 800a398:	4603      	mov	r3, r0
 800a39a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a39e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3a2:	d104      	bne.n	800a3ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a3ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f009 fd0a 	bl	8013dcc <USB_ReadInterrupts>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3c2:	d104      	bne.n	800a3ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a3cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f009 fcfa 	bl	8013dcc <USB_ReadInterrupts>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d103      	bne.n	800a3ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f009 fcec 	bl	8013dcc <USB_ReadInterrupts>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3fe:	d115      	bne.n	800a42c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a408:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d108      	bne.n	800a42c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f00f fd42 	bl	8019ea4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2101      	movs	r1, #1
 800a426:	4618      	mov	r0, r3
 800a428:	f009 fdd6 	bl	8013fd8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4618      	mov	r0, r3
 800a432:	f009 fccb 	bl	8013dcc <USB_ReadInterrupts>
 800a436:	4603      	mov	r3, r0
 800a438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a43c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a440:	d102      	bne.n	800a448 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f001 f9ff 	bl	800b846 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f009 fcbd 	bl	8013dcc <USB_ReadInterrupts>
 800a452:	4603      	mov	r3, r0
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b08      	cmp	r3, #8
 800a45a:	d106      	bne.n	800a46a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f00f fd05 	bl	8019e6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2208      	movs	r2, #8
 800a468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f009 fcac 	bl	8013dcc <USB_ReadInterrupts>
 800a474:	4603      	mov	r3, r0
 800a476:	f003 0310 	and.w	r3, r3, #16
 800a47a:	2b10      	cmp	r3, #16
 800a47c:	d101      	bne.n	800a482 <HAL_HCD_IRQHandler+0x14a>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <HAL_HCD_IRQHandler+0x14c>
 800a482:	2300      	movs	r3, #0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d012      	beq.n	800a4ae <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699a      	ldr	r2, [r3, #24]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f022 0210 	bic.w	r2, r2, #16
 800a496:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 f902 	bl	800b6a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	699a      	ldr	r2, [r3, #24]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f042 0210 	orr.w	r2, r2, #16
 800a4ac:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f009 fc8a 	bl	8013dcc <USB_ReadInterrupts>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4c2:	d13a      	bne.n	800a53a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f00a f89b 	bl	8014604 <USB_HC_ReadInterrupt>
 800a4ce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	617b      	str	r3, [r7, #20]
 800a4d4:	e025      	b.n	800a522 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f003 030f 	and.w	r3, r3, #15
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d018      	beq.n	800a51c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a500:	d106      	bne.n	800a510 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f8ab 	bl	800a664 <HCD_HC_IN_IRQHandler>
 800a50e:	e005      	b.n	800a51c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fcc6 	bl	800aea8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	3301      	adds	r3, #1
 800a520:	617b      	str	r3, [r7, #20]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d3d4      	bcc.n	800a4d6 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a534:	615a      	str	r2, [r3, #20]
 800a536:	e000      	b.n	800a53a <HAL_HCD_IRQHandler+0x202>
      return;
 800a538:	bf00      	nop
    }
  }
}
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_HCD_Start+0x16>
 800a552:	2302      	movs	r3, #2
 800a554:	e013      	b.n	800a57e <HAL_HCD_Start+0x3e>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4618      	mov	r0, r3
 800a564:	f009 fb40 	bl	8013be8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2101      	movs	r1, #1
 800a56e:	4618      	mov	r0, r3
 800a570:	f009 fd96 	bl	80140a0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800a594:	2b01      	cmp	r3, #1
 800a596:	d101      	bne.n	800a59c <HAL_HCD_Stop+0x16>
 800a598:	2302      	movs	r3, #2
 800a59a:	e00d      	b.n	800a5b8 <HAL_HCD_Stop+0x32>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f00a f995 	bl	80148d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f009 fd3d 	bl	801404c <USB_ResetPort>
 800a5d2:	4603      	mov	r3, r0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800a5e8:	78fb      	ldrb	r3, [r7, #3]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	212c      	movs	r1, #44	; 0x2c
 800a5ee:	fb01 f303 	mul.w	r3, r1, r3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	3360      	adds	r3, #96	; 0x60
 800a5f6:	781b      	ldrb	r3, [r3, #0]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	212c      	movs	r1, #44	; 0x2c
 800a616:	fb01 f303 	mul.w	r3, r1, r3
 800a61a:	4413      	add	r3, r2
 800a61c:	3350      	adds	r3, #80	; 0x50
 800a61e:	681b      	ldr	r3, [r3, #0]
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4618      	mov	r0, r3
 800a63a:	f009 fd81 	bl	8014140 <USB_GetCurrentFrame>
 800a63e:	4603      	mov	r3, r0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4618      	mov	r0, r3
 800a656:	f009 fd5c 	bl	8014112 <USB_GetHostSpeed>
 800a65a:	4603      	mov	r3, r0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	4413      	add	r3, r2
 800a686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b04      	cmp	r3, #4
 800a692:	d119      	bne.n	800a6c8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	2304      	movs	r3, #4
 800a6a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	0151      	lsls	r1, r2, #5
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	440a      	add	r2, r1
 800a6bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6c0:	f043 0302 	orr.w	r3, r3, #2
 800a6c4:	60d3      	str	r3, [r2, #12]
 800a6c6:	e101      	b.n	800a8cc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6de:	d12b      	bne.n	800a738 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	212c      	movs	r1, #44	; 0x2c
 800a6fa:	fb01 f303 	mul.w	r3, r1, r3
 800a6fe:	4413      	add	r3, r2
 800a700:	3361      	adds	r3, #97	; 0x61
 800a702:	2207      	movs	r2, #7
 800a704:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a720:	f043 0302 	orr.w	r3, r3, #2
 800a724:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f009 ff78 	bl	8014626 <USB_HC_Halt>
 800a736:	e0c9      	b.n	800a8cc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b20      	cmp	r3, #32
 800a74c:	d109      	bne.n	800a762 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	4413      	add	r3, r2
 800a756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a75a:	461a      	mov	r2, r3
 800a75c:	2320      	movs	r3, #32
 800a75e:	6093      	str	r3, [r2, #8]
 800a760:	e0b4      	b.n	800a8cc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f003 0308 	and.w	r3, r3, #8
 800a774:	2b08      	cmp	r3, #8
 800a776:	d133      	bne.n	800a7e0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	0151      	lsls	r1, r2, #5
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	440a      	add	r2, r1
 800a78e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a792:	f043 0302 	orr.w	r3, r3, #2
 800a796:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	212c      	movs	r1, #44	; 0x2c
 800a79e:	fb01 f303 	mul.w	r3, r1, r3
 800a7a2:	4413      	add	r3, r2
 800a7a4:	3361      	adds	r3, #97	; 0x61
 800a7a6:	2205      	movs	r2, #5
 800a7a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	2308      	movs	r3, #8
 800a7cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	b2d2      	uxtb	r2, r2
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f009 ff24 	bl	8014626 <USB_HC_Halt>
 800a7de:	e075      	b.n	800a8cc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7f6:	d134      	bne.n	800a862 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	0151      	lsls	r1, r2, #5
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	440a      	add	r2, r1
 800a80e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a812:	f043 0302 	orr.w	r3, r3, #2
 800a816:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	212c      	movs	r1, #44	; 0x2c
 800a81e:	fb01 f303 	mul.w	r3, r1, r3
 800a822:	4413      	add	r3, r2
 800a824:	3361      	adds	r3, #97	; 0x61
 800a826:	2208      	movs	r2, #8
 800a828:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	4413      	add	r3, r2
 800a832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a836:	461a      	mov	r2, r3
 800a838:	2310      	movs	r3, #16
 800a83a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	4413      	add	r3, r2
 800a844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a848:	461a      	mov	r2, r3
 800a84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a84e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	b2d2      	uxtb	r2, r2
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f009 fee3 	bl	8014626 <USB_HC_Halt>
 800a860:	e034      	b.n	800a8cc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a874:	2b80      	cmp	r3, #128	; 0x80
 800a876:	d129      	bne.n	800a8cc <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	0151      	lsls	r1, r2, #5
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	440a      	add	r2, r1
 800a88e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a892:	f043 0302 	orr.w	r3, r3, #2
 800a896:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	212c      	movs	r1, #44	; 0x2c
 800a89e:	fb01 f303 	mul.w	r3, r1, r3
 800a8a2:	4413      	add	r3, r2
 800a8a4:	3361      	adds	r3, #97	; 0x61
 800a8a6:	2206      	movs	r2, #6
 800a8a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	b2d2      	uxtb	r2, r2
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f009 feb6 	bl	8014626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	015a      	lsls	r2, r3, #5
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	2380      	movs	r3, #128	; 0x80
 800a8ca:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e2:	d122      	bne.n	800a92a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	0151      	lsls	r1, r2, #5
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	440a      	add	r2, r1
 800a8fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8fe:	f043 0302 	orr.w	r3, r3, #2
 800a902:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	b2d2      	uxtb	r2, r2
 800a90c:	4611      	mov	r1, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f009 fe89 	bl	8014626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a920:	461a      	mov	r2, r3
 800a922:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a926:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a928:	e2ba      	b.n	800aea0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	4413      	add	r3, r2
 800a932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	f040 811b 	bne.w	800ab78 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d019      	beq.n	800a97e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	212c      	movs	r1, #44	; 0x2c
 800a950:	fb01 f303 	mul.w	r3, r1, r3
 800a954:	4413      	add	r3, r2
 800a956:	3348      	adds	r3, #72	; 0x48
 800a958:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	0159      	lsls	r1, r3, #5
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	440b      	add	r3, r1
 800a962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800a96c:	1ad2      	subs	r2, r2, r3
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	202c      	movs	r0, #44	; 0x2c
 800a974:	fb00 f303 	mul.w	r3, r0, r3
 800a978:	440b      	add	r3, r1
 800a97a:	3350      	adds	r3, #80	; 0x50
 800a97c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	212c      	movs	r1, #44	; 0x2c
 800a984:	fb01 f303 	mul.w	r3, r1, r3
 800a988:	4413      	add	r3, r2
 800a98a:	3361      	adds	r3, #97	; 0x61
 800a98c:	2201      	movs	r2, #1
 800a98e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	212c      	movs	r1, #44	; 0x2c
 800a996:	fb01 f303 	mul.w	r3, r1, r3
 800a99a:	4413      	add	r3, r2
 800a99c:	335c      	adds	r3, #92	; 0x5c
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	212c      	movs	r1, #44	; 0x2c
 800a9ba:	fb01 f303 	mul.w	r3, r1, r3
 800a9be:	4413      	add	r3, r2
 800a9c0:	333f      	adds	r3, #63	; 0x3f
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d009      	beq.n	800a9dc <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	212c      	movs	r1, #44	; 0x2c
 800a9ce:	fb01 f303 	mul.w	r3, r1, r3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	333f      	adds	r3, #63	; 0x3f
 800a9d6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d121      	bne.n	800aa20 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	0151      	lsls	r1, r2, #5
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	440a      	add	r2, r1
 800a9f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9f6:	f043 0302 	orr.w	r3, r3, #2
 800a9fa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	b2d2      	uxtb	r2, r2
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f009 fe0d 	bl	8014626 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa18:	461a      	mov	r2, r3
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	6093      	str	r3, [r2, #8]
 800aa1e:	e066      	b.n	800aaee <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	212c      	movs	r1, #44	; 0x2c
 800aa26:	fb01 f303 	mul.w	r3, r1, r3
 800aa2a:	4413      	add	r3, r2
 800aa2c:	333f      	adds	r3, #63	; 0x3f
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d127      	bne.n	800aa84 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	0151      	lsls	r1, r2, #5
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	440a      	add	r2, r1
 800aa4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa52:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	212c      	movs	r1, #44	; 0x2c
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	4413      	add	r3, r2
 800aa60:	3360      	adds	r3, #96	; 0x60
 800aa62:	2201      	movs	r2, #1
 800aa64:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	b2d9      	uxtb	r1, r3
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	202c      	movs	r0, #44	; 0x2c
 800aa70:	fb00 f303 	mul.w	r3, r0, r3
 800aa74:	4413      	add	r3, r2
 800aa76:	3360      	adds	r3, #96	; 0x60
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f00f fa1f 	bl	8019ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800aa82:	e034      	b.n	800aaee <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	212c      	movs	r1, #44	; 0x2c
 800aa8a:	fb01 f303 	mul.w	r3, r1, r3
 800aa8e:	4413      	add	r3, r2
 800aa90:	333f      	adds	r3, #63	; 0x3f
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d12a      	bne.n	800aaee <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	212c      	movs	r1, #44	; 0x2c
 800aa9e:	fb01 f303 	mul.w	r3, r1, r3
 800aaa2:	4413      	add	r3, r2
 800aaa4:	3360      	adds	r3, #96	; 0x60
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	212c      	movs	r1, #44	; 0x2c
 800aab0:	fb01 f303 	mul.w	r3, r1, r3
 800aab4:	4413      	add	r3, r2
 800aab6:	3354      	adds	r3, #84	; 0x54
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	f083 0301 	eor.w	r3, r3, #1
 800aabe:	b2d8      	uxtb	r0, r3
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	212c      	movs	r1, #44	; 0x2c
 800aac6:	fb01 f303 	mul.w	r3, r1, r3
 800aaca:	4413      	add	r3, r2
 800aacc:	3354      	adds	r3, #84	; 0x54
 800aace:	4602      	mov	r2, r0
 800aad0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	b2d9      	uxtb	r1, r3
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	202c      	movs	r0, #44	; 0x2c
 800aadc:	fb00 f303 	mul.w	r3, r0, r3
 800aae0:	4413      	add	r3, r2
 800aae2:	3360      	adds	r3, #96	; 0x60
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f00f f9e9 	bl	8019ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d12b      	bne.n	800ab4e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	212c      	movs	r1, #44	; 0x2c
 800aafc:	fb01 f303 	mul.w	r3, r1, r3
 800ab00:	4413      	add	r3, r2
 800ab02:	3348      	adds	r3, #72	; 0x48
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	202c      	movs	r0, #44	; 0x2c
 800ab0c:	fb00 f202 	mul.w	r2, r0, r2
 800ab10:	440a      	add	r2, r1
 800ab12:	3240      	adds	r2, #64	; 0x40
 800ab14:	8812      	ldrh	r2, [r2, #0]
 800ab16:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 81be 	beq.w	800aea0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	212c      	movs	r1, #44	; 0x2c
 800ab2a:	fb01 f303 	mul.w	r3, r1, r3
 800ab2e:	4413      	add	r3, r2
 800ab30:	3354      	adds	r3, #84	; 0x54
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	f083 0301 	eor.w	r3, r3, #1
 800ab38:	b2d8      	uxtb	r0, r3
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	212c      	movs	r1, #44	; 0x2c
 800ab40:	fb01 f303 	mul.w	r3, r1, r3
 800ab44:	4413      	add	r3, r2
 800ab46:	3354      	adds	r3, #84	; 0x54
 800ab48:	4602      	mov	r2, r0
 800ab4a:	701a      	strb	r2, [r3, #0]
}
 800ab4c:	e1a8      	b.n	800aea0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	212c      	movs	r1, #44	; 0x2c
 800ab54:	fb01 f303 	mul.w	r3, r1, r3
 800ab58:	4413      	add	r3, r2
 800ab5a:	3354      	adds	r3, #84	; 0x54
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	f083 0301 	eor.w	r3, r3, #1
 800ab62:	b2d8      	uxtb	r0, r3
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	212c      	movs	r1, #44	; 0x2c
 800ab6a:	fb01 f303 	mul.w	r3, r1, r3
 800ab6e:	4413      	add	r3, r2
 800ab70:	3354      	adds	r3, #84	; 0x54
 800ab72:	4602      	mov	r2, r0
 800ab74:	701a      	strb	r2, [r3, #0]
}
 800ab76:	e193      	b.n	800aea0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	f040 8106 	bne.w	800ad9c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	0151      	lsls	r1, r2, #5
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	440a      	add	r2, r1
 800aba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abaa:	f023 0302 	bic.w	r3, r3, #2
 800abae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	212c      	movs	r1, #44	; 0x2c
 800abb6:	fb01 f303 	mul.w	r3, r1, r3
 800abba:	4413      	add	r3, r2
 800abbc:	3361      	adds	r3, #97	; 0x61
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d109      	bne.n	800abd8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	212c      	movs	r1, #44	; 0x2c
 800abca:	fb01 f303 	mul.w	r3, r1, r3
 800abce:	4413      	add	r3, r2
 800abd0:	3360      	adds	r3, #96	; 0x60
 800abd2:	2201      	movs	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
 800abd6:	e0c9      	b.n	800ad6c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	212c      	movs	r1, #44	; 0x2c
 800abde:	fb01 f303 	mul.w	r3, r1, r3
 800abe2:	4413      	add	r3, r2
 800abe4:	3361      	adds	r3, #97	; 0x61
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b05      	cmp	r3, #5
 800abea:	d109      	bne.n	800ac00 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	212c      	movs	r1, #44	; 0x2c
 800abf2:	fb01 f303 	mul.w	r3, r1, r3
 800abf6:	4413      	add	r3, r2
 800abf8:	3360      	adds	r3, #96	; 0x60
 800abfa:	2205      	movs	r2, #5
 800abfc:	701a      	strb	r2, [r3, #0]
 800abfe:	e0b5      	b.n	800ad6c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	212c      	movs	r1, #44	; 0x2c
 800ac06:	fb01 f303 	mul.w	r3, r1, r3
 800ac0a:	4413      	add	r3, r2
 800ac0c:	3361      	adds	r3, #97	; 0x61
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b06      	cmp	r3, #6
 800ac12:	d009      	beq.n	800ac28 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	212c      	movs	r1, #44	; 0x2c
 800ac1a:	fb01 f303 	mul.w	r3, r1, r3
 800ac1e:	4413      	add	r3, r2
 800ac20:	3361      	adds	r3, #97	; 0x61
 800ac22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d150      	bne.n	800acca <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	212c      	movs	r1, #44	; 0x2c
 800ac2e:	fb01 f303 	mul.w	r3, r1, r3
 800ac32:	4413      	add	r3, r2
 800ac34:	335c      	adds	r3, #92	; 0x5c
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	6879      	ldr	r1, [r7, #4]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	202c      	movs	r0, #44	; 0x2c
 800ac40:	fb00 f303 	mul.w	r3, r0, r3
 800ac44:	440b      	add	r3, r1
 800ac46:	335c      	adds	r3, #92	; 0x5c
 800ac48:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	212c      	movs	r1, #44	; 0x2c
 800ac50:	fb01 f303 	mul.w	r3, r1, r3
 800ac54:	4413      	add	r3, r2
 800ac56:	335c      	adds	r3, #92	; 0x5c
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d912      	bls.n	800ac84 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	212c      	movs	r1, #44	; 0x2c
 800ac64:	fb01 f303 	mul.w	r3, r1, r3
 800ac68:	4413      	add	r3, r2
 800ac6a:	335c      	adds	r3, #92	; 0x5c
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	212c      	movs	r1, #44	; 0x2c
 800ac76:	fb01 f303 	mul.w	r3, r1, r3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3360      	adds	r3, #96	; 0x60
 800ac7e:	2204      	movs	r2, #4
 800ac80:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800ac82:	e073      	b.n	800ad6c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	212c      	movs	r1, #44	; 0x2c
 800ac8a:	fb01 f303 	mul.w	r3, r1, r3
 800ac8e:	4413      	add	r3, r2
 800ac90:	3360      	adds	r3, #96	; 0x60
 800ac92:	2202      	movs	r2, #2
 800ac94:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800acac:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acb4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	015a      	lsls	r2, r3, #5
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	4413      	add	r3, r2
 800acbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc2:	461a      	mov	r2, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800acc8:	e050      	b.n	800ad6c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	212c      	movs	r1, #44	; 0x2c
 800acd0:	fb01 f303 	mul.w	r3, r1, r3
 800acd4:	4413      	add	r3, r2
 800acd6:	3361      	adds	r3, #97	; 0x61
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d122      	bne.n	800ad24 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	212c      	movs	r1, #44	; 0x2c
 800ace4:	fb01 f303 	mul.w	r3, r1, r3
 800ace8:	4413      	add	r3, r2
 800acea:	3360      	adds	r3, #96	; 0x60
 800acec:	2202      	movs	r2, #2
 800acee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad06:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad0e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	e023      	b.n	800ad6c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	212c      	movs	r1, #44	; 0x2c
 800ad2a:	fb01 f303 	mul.w	r3, r1, r3
 800ad2e:	4413      	add	r3, r2
 800ad30:	3361      	adds	r3, #97	; 0x61
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b07      	cmp	r3, #7
 800ad36:	d119      	bne.n	800ad6c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	212c      	movs	r1, #44	; 0x2c
 800ad3e:	fb01 f303 	mul.w	r3, r1, r3
 800ad42:	4413      	add	r3, r2
 800ad44:	335c      	adds	r3, #92	; 0x5c
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	202c      	movs	r0, #44	; 0x2c
 800ad50:	fb00 f303 	mul.w	r3, r0, r3
 800ad54:	440b      	add	r3, r1
 800ad56:	335c      	adds	r3, #92	; 0x5c
 800ad58:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	212c      	movs	r1, #44	; 0x2c
 800ad60:	fb01 f303 	mul.w	r3, r1, r3
 800ad64:	4413      	add	r3, r2
 800ad66:	3360      	adds	r3, #96	; 0x60
 800ad68:	2204      	movs	r2, #4
 800ad6a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad78:	461a      	mov	r2, r3
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	b2d9      	uxtb	r1, r3
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	202c      	movs	r0, #44	; 0x2c
 800ad88:	fb00 f303 	mul.w	r3, r0, r3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	3360      	adds	r3, #96	; 0x60
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f00f f893 	bl	8019ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800ad9a:	e081      	b.n	800aea0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	015a      	lsls	r2, r3, #5
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	4413      	add	r3, r2
 800ada4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	f003 0310 	and.w	r3, r3, #16
 800adae:	2b10      	cmp	r3, #16
 800adb0:	d176      	bne.n	800aea0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	212c      	movs	r1, #44	; 0x2c
 800adb8:	fb01 f303 	mul.w	r3, r1, r3
 800adbc:	4413      	add	r3, r2
 800adbe:	333f      	adds	r3, #63	; 0x3f
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d121      	bne.n	800ae0a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	212c      	movs	r1, #44	; 0x2c
 800adcc:	fb01 f303 	mul.w	r3, r1, r3
 800add0:	4413      	add	r3, r2
 800add2:	335c      	adds	r3, #92	; 0x5c
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	0151      	lsls	r1, r2, #5
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	440a      	add	r2, r1
 800adee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adf2:	f043 0302 	orr.w	r3, r3, #2
 800adf6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f009 fc0f 	bl	8014626 <USB_HC_Halt>
 800ae08:	e041      	b.n	800ae8e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	212c      	movs	r1, #44	; 0x2c
 800ae10:	fb01 f303 	mul.w	r3, r1, r3
 800ae14:	4413      	add	r3, r2
 800ae16:	333f      	adds	r3, #63	; 0x3f
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d009      	beq.n	800ae32 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	212c      	movs	r1, #44	; 0x2c
 800ae24:	fb01 f303 	mul.w	r3, r1, r3
 800ae28:	4413      	add	r3, r2
 800ae2a:	333f      	adds	r3, #63	; 0x3f
 800ae2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d12d      	bne.n	800ae8e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	212c      	movs	r1, #44	; 0x2c
 800ae38:	fb01 f303 	mul.w	r3, r1, r3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	335c      	adds	r3, #92	; 0x5c
 800ae40:	2200      	movs	r2, #0
 800ae42:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d120      	bne.n	800ae8e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	212c      	movs	r1, #44	; 0x2c
 800ae52:	fb01 f303 	mul.w	r3, r1, r3
 800ae56:	4413      	add	r3, r2
 800ae58:	3361      	adds	r3, #97	; 0x61
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	015a      	lsls	r2, r3, #5
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	4413      	add	r3, r2
 800ae66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	0151      	lsls	r1, r2, #5
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	440a      	add	r2, r1
 800ae74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae78:	f043 0302 	orr.w	r3, r3, #2
 800ae7c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	b2d2      	uxtb	r2, r2
 800ae86:	4611      	mov	r1, r2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f009 fbcc 	bl	8014626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	015a      	lsls	r2, r3, #5
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	4413      	add	r3, r2
 800ae96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	2310      	movs	r3, #16
 800ae9e:	6093      	str	r3, [r2, #8]
}
 800aea0:	bf00      	nop
 800aea2:	3718      	adds	r7, #24
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800aebe:	78fb      	ldrb	r3, [r7, #3]
 800aec0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	015a      	lsls	r2, r3, #5
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b04      	cmp	r3, #4
 800aed6:	d119      	bne.n	800af0c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aee4:	461a      	mov	r2, r3
 800aee6:	2304      	movs	r3, #4
 800aee8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	0151      	lsls	r1, r2, #5
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	440a      	add	r2, r1
 800af00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af04:	f043 0302 	orr.w	r3, r3, #2
 800af08:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800af0a:	e3c6      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	4413      	add	r3, r2
 800af14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f003 0320 	and.w	r3, r3, #32
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d13e      	bne.n	800afa0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af2e:	461a      	mov	r2, r3
 800af30:	2320      	movs	r3, #32
 800af32:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	212c      	movs	r1, #44	; 0x2c
 800af3a:	fb01 f303 	mul.w	r3, r1, r3
 800af3e:	4413      	add	r3, r2
 800af40:	333d      	adds	r3, #61	; 0x3d
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b01      	cmp	r3, #1
 800af46:	f040 83a8 	bne.w	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	212c      	movs	r1, #44	; 0x2c
 800af50:	fb01 f303 	mul.w	r3, r1, r3
 800af54:	4413      	add	r3, r2
 800af56:	333d      	adds	r3, #61	; 0x3d
 800af58:	2200      	movs	r2, #0
 800af5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	212c      	movs	r1, #44	; 0x2c
 800af62:	fb01 f303 	mul.w	r3, r1, r3
 800af66:	4413      	add	r3, r2
 800af68:	3360      	adds	r3, #96	; 0x60
 800af6a:	2202      	movs	r2, #2
 800af6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	4413      	add	r3, r2
 800af76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	0151      	lsls	r1, r2, #5
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	440a      	add	r2, r1
 800af84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af88:	f043 0302 	orr.w	r3, r3, #2
 800af8c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	b2d2      	uxtb	r2, r2
 800af96:	4611      	mov	r1, r2
 800af98:	4618      	mov	r0, r3
 800af9a:	f009 fb44 	bl	8014626 <USB_HC_Halt>
}
 800af9e:	e37c      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afb6:	d122      	bne.n	800affe <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	015a      	lsls	r2, r3, #5
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	0151      	lsls	r1, r2, #5
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	440a      	add	r2, r1
 800afce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afd2:	f043 0302 	orr.w	r3, r3, #2
 800afd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	4611      	mov	r1, r2
 800afe2:	4618      	mov	r0, r3
 800afe4:	f009 fb1f 	bl	8014626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff4:	461a      	mov	r2, r3
 800aff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800affa:	6093      	str	r3, [r2, #8]
}
 800affc:	e34d      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	015a      	lsls	r2, r3, #5
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	4413      	add	r3, r2
 800b006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b01      	cmp	r3, #1
 800b012:	d150      	bne.n	800b0b6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	212c      	movs	r1, #44	; 0x2c
 800b01a:	fb01 f303 	mul.w	r3, r1, r3
 800b01e:	4413      	add	r3, r2
 800b020:	335c      	adds	r3, #92	; 0x5c
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b038:	2b40      	cmp	r3, #64	; 0x40
 800b03a:	d111      	bne.n	800b060 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	212c      	movs	r1, #44	; 0x2c
 800b042:	fb01 f303 	mul.w	r3, r1, r3
 800b046:	4413      	add	r3, r2
 800b048:	333d      	adds	r3, #61	; 0x3d
 800b04a:	2201      	movs	r2, #1
 800b04c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	4413      	add	r3, r2
 800b056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b05a:	461a      	mov	r2, r3
 800b05c:	2340      	movs	r3, #64	; 0x40
 800b05e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	4413      	add	r3, r2
 800b068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	0151      	lsls	r1, r2, #5
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	440a      	add	r2, r1
 800b076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b07a:	f043 0302 	orr.w	r3, r3, #2
 800b07e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	b2d2      	uxtb	r2, r2
 800b088:	4611      	mov	r1, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f009 facb 	bl	8014626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	4413      	add	r3, r2
 800b098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b09c:	461a      	mov	r2, r3
 800b09e:	2301      	movs	r3, #1
 800b0a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	212c      	movs	r1, #44	; 0x2c
 800b0a8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	3361      	adds	r3, #97	; 0x61
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	701a      	strb	r2, [r3, #0]
}
 800b0b4:	e2f1      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c8:	2b40      	cmp	r3, #64	; 0x40
 800b0ca:	d13c      	bne.n	800b146 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	212c      	movs	r1, #44	; 0x2c
 800b0d2:	fb01 f303 	mul.w	r3, r1, r3
 800b0d6:	4413      	add	r3, r2
 800b0d8:	3361      	adds	r3, #97	; 0x61
 800b0da:	2204      	movs	r2, #4
 800b0dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	212c      	movs	r1, #44	; 0x2c
 800b0e4:	fb01 f303 	mul.w	r3, r1, r3
 800b0e8:	4413      	add	r3, r2
 800b0ea:	333d      	adds	r3, #61	; 0x3d
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	212c      	movs	r1, #44	; 0x2c
 800b0f6:	fb01 f303 	mul.w	r3, r1, r3
 800b0fa:	4413      	add	r3, r2
 800b0fc:	335c      	adds	r3, #92	; 0x5c
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	697a      	ldr	r2, [r7, #20]
 800b112:	0151      	lsls	r1, r2, #5
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	440a      	add	r2, r1
 800b118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b11c:	f043 0302 	orr.w	r3, r3, #2
 800b120:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	b2d2      	uxtb	r2, r2
 800b12a:	4611      	mov	r1, r2
 800b12c:	4618      	mov	r0, r3
 800b12e:	f009 fa7a 	bl	8014626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b13e:	461a      	mov	r2, r3
 800b140:	2340      	movs	r3, #64	; 0x40
 800b142:	6093      	str	r3, [r2, #8]
}
 800b144:	e2a9      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d12a      	bne.n	800b1b2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	4413      	add	r3, r2
 800b164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b168:	461a      	mov	r2, r3
 800b16a:	2308      	movs	r3, #8
 800b16c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	4413      	add	r3, r2
 800b176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	0151      	lsls	r1, r2, #5
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	440a      	add	r2, r1
 800b184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b188:	f043 0302 	orr.w	r3, r3, #2
 800b18c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	b2d2      	uxtb	r2, r2
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f009 fa44 	bl	8014626 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	212c      	movs	r1, #44	; 0x2c
 800b1a4:	fb01 f303 	mul.w	r3, r1, r3
 800b1a8:	4413      	add	r3, r2
 800b1aa:	3361      	adds	r3, #97	; 0x61
 800b1ac:	2205      	movs	r2, #5
 800b1ae:	701a      	strb	r2, [r3, #0]
}
 800b1b0:	e273      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f003 0310 	and.w	r3, r3, #16
 800b1c4:	2b10      	cmp	r3, #16
 800b1c6:	d150      	bne.n	800b26a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	212c      	movs	r1, #44	; 0x2c
 800b1ce:	fb01 f303 	mul.w	r3, r1, r3
 800b1d2:	4413      	add	r3, r2
 800b1d4:	335c      	adds	r3, #92	; 0x5c
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	212c      	movs	r1, #44	; 0x2c
 800b1e0:	fb01 f303 	mul.w	r3, r1, r3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	3361      	adds	r3, #97	; 0x61
 800b1e8:	2203      	movs	r2, #3
 800b1ea:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	212c      	movs	r1, #44	; 0x2c
 800b1f2:	fb01 f303 	mul.w	r3, r1, r3
 800b1f6:	4413      	add	r3, r2
 800b1f8:	333d      	adds	r3, #61	; 0x3d
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d112      	bne.n	800b226 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	212c      	movs	r1, #44	; 0x2c
 800b206:	fb01 f303 	mul.w	r3, r1, r3
 800b20a:	4413      	add	r3, r2
 800b20c:	333c      	adds	r3, #60	; 0x3c
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d108      	bne.n	800b226 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	212c      	movs	r1, #44	; 0x2c
 800b21a:	fb01 f303 	mul.w	r3, r1, r3
 800b21e:	4413      	add	r3, r2
 800b220:	333d      	adds	r3, #61	; 0x3d
 800b222:	2201      	movs	r2, #1
 800b224:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	0151      	lsls	r1, r2, #5
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	440a      	add	r2, r1
 800b23c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b240:	f043 0302 	orr.w	r3, r3, #2
 800b244:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	b2d2      	uxtb	r2, r2
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f009 f9e8 	bl	8014626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b262:	461a      	mov	r2, r3
 800b264:	2310      	movs	r3, #16
 800b266:	6093      	str	r3, [r2, #8]
}
 800b268:	e217      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	015a      	lsls	r2, r3, #5
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	4413      	add	r3, r2
 800b272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b27c:	2b80      	cmp	r3, #128	; 0x80
 800b27e:	d174      	bne.n	800b36a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d121      	bne.n	800b2cc <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	212c      	movs	r1, #44	; 0x2c
 800b28e:	fb01 f303 	mul.w	r3, r1, r3
 800b292:	4413      	add	r3, r2
 800b294:	3361      	adds	r3, #97	; 0x61
 800b296:	2206      	movs	r2, #6
 800b298:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	015a      	lsls	r2, r3, #5
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	697a      	ldr	r2, [r7, #20]
 800b2aa:	0151      	lsls	r1, r2, #5
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	440a      	add	r2, r1
 800b2b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2b4:	f043 0302 	orr.w	r3, r3, #2
 800b2b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	b2d2      	uxtb	r2, r2
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f009 f9ae 	bl	8014626 <USB_HC_Halt>
 800b2ca:	e044      	b.n	800b356 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	212c      	movs	r1, #44	; 0x2c
 800b2d2:	fb01 f303 	mul.w	r3, r1, r3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	335c      	adds	r3, #92	; 0x5c
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	202c      	movs	r0, #44	; 0x2c
 800b2e4:	fb00 f303 	mul.w	r3, r0, r3
 800b2e8:	440b      	add	r3, r1
 800b2ea:	335c      	adds	r3, #92	; 0x5c
 800b2ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	212c      	movs	r1, #44	; 0x2c
 800b2f4:	fb01 f303 	mul.w	r3, r1, r3
 800b2f8:	4413      	add	r3, r2
 800b2fa:	335c      	adds	r3, #92	; 0x5c
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d920      	bls.n	800b344 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	212c      	movs	r1, #44	; 0x2c
 800b308:	fb01 f303 	mul.w	r3, r1, r3
 800b30c:	4413      	add	r3, r2
 800b30e:	335c      	adds	r3, #92	; 0x5c
 800b310:	2200      	movs	r2, #0
 800b312:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	212c      	movs	r1, #44	; 0x2c
 800b31a:	fb01 f303 	mul.w	r3, r1, r3
 800b31e:	4413      	add	r3, r2
 800b320:	3360      	adds	r3, #96	; 0x60
 800b322:	2204      	movs	r2, #4
 800b324:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	b2d9      	uxtb	r1, r3
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	202c      	movs	r0, #44	; 0x2c
 800b330:	fb00 f303 	mul.w	r3, r0, r3
 800b334:	4413      	add	r3, r2
 800b336:	3360      	adds	r3, #96	; 0x60
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f00e fdbf 	bl	8019ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800b342:	e008      	b.n	800b356 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	212c      	movs	r1, #44	; 0x2c
 800b34a:	fb01 f303 	mul.w	r3, r1, r3
 800b34e:	4413      	add	r3, r2
 800b350:	3360      	adds	r3, #96	; 0x60
 800b352:	2202      	movs	r2, #2
 800b354:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b362:	461a      	mov	r2, r3
 800b364:	2380      	movs	r3, #128	; 0x80
 800b366:	6093      	str	r3, [r2, #8]
}
 800b368:	e197      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	015a      	lsls	r2, r3, #5
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	4413      	add	r3, r2
 800b372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b37c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b380:	d134      	bne.n	800b3ec <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	0151      	lsls	r1, r2, #5
 800b394:	69ba      	ldr	r2, [r7, #24]
 800b396:	440a      	add	r2, r1
 800b398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b39c:	f043 0302 	orr.w	r3, r3, #2
 800b3a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	b2d2      	uxtb	r2, r2
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f009 f93a 	bl	8014626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	015a      	lsls	r2, r3, #5
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3be:	461a      	mov	r2, r3
 800b3c0:	2310      	movs	r3, #16
 800b3c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	015a      	lsls	r2, r3, #5
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	212c      	movs	r1, #44	; 0x2c
 800b3de:	fb01 f303 	mul.w	r3, r1, r3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	3361      	adds	r3, #97	; 0x61
 800b3e6:	2208      	movs	r2, #8
 800b3e8:	701a      	strb	r2, [r3, #0]
}
 800b3ea:	e156      	b.n	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	f040 814b 	bne.w	800b69a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	015a      	lsls	r2, r3, #5
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	0151      	lsls	r1, r2, #5
 800b416:	69ba      	ldr	r2, [r7, #24]
 800b418:	440a      	add	r2, r1
 800b41a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b41e:	f023 0302 	bic.w	r3, r3, #2
 800b422:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	212c      	movs	r1, #44	; 0x2c
 800b42a:	fb01 f303 	mul.w	r3, r1, r3
 800b42e:	4413      	add	r3, r2
 800b430:	3361      	adds	r3, #97	; 0x61
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d179      	bne.n	800b52c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	212c      	movs	r1, #44	; 0x2c
 800b43e:	fb01 f303 	mul.w	r3, r1, r3
 800b442:	4413      	add	r3, r2
 800b444:	3360      	adds	r3, #96	; 0x60
 800b446:	2201      	movs	r2, #1
 800b448:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	212c      	movs	r1, #44	; 0x2c
 800b450:	fb01 f303 	mul.w	r3, r1, r3
 800b454:	4413      	add	r3, r2
 800b456:	333f      	adds	r3, #63	; 0x3f
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d00a      	beq.n	800b474 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	212c      	movs	r1, #44	; 0x2c
 800b464:	fb01 f303 	mul.w	r3, r1, r3
 800b468:	4413      	add	r3, r2
 800b46a:	333f      	adds	r3, #63	; 0x3f
 800b46c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800b46e:	2b03      	cmp	r3, #3
 800b470:	f040 80fc 	bne.w	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d142      	bne.n	800b502 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	212c      	movs	r1, #44	; 0x2c
 800b482:	fb01 f303 	mul.w	r3, r1, r3
 800b486:	4413      	add	r3, r2
 800b488:	334c      	adds	r3, #76	; 0x4c
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 80ed 	beq.w	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	212c      	movs	r1, #44	; 0x2c
 800b498:	fb01 f303 	mul.w	r3, r1, r3
 800b49c:	4413      	add	r3, r2
 800b49e:	334c      	adds	r3, #76	; 0x4c
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	202c      	movs	r0, #44	; 0x2c
 800b4a8:	fb00 f202 	mul.w	r2, r0, r2
 800b4ac:	440a      	add	r2, r1
 800b4ae:	3240      	adds	r2, #64	; 0x40
 800b4b0:	8812      	ldrh	r2, [r2, #0]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	6879      	ldr	r1, [r7, #4]
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	202c      	movs	r0, #44	; 0x2c
 800b4bc:	fb00 f202 	mul.w	r2, r0, r2
 800b4c0:	440a      	add	r2, r1
 800b4c2:	3240      	adds	r2, #64	; 0x40
 800b4c4:	8812      	ldrh	r2, [r2, #0]
 800b4c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 80ca 	beq.w	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	212c      	movs	r1, #44	; 0x2c
 800b4de:	fb01 f303 	mul.w	r3, r1, r3
 800b4e2:	4413      	add	r3, r2
 800b4e4:	3355      	adds	r3, #85	; 0x55
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	f083 0301 	eor.w	r3, r3, #1
 800b4ec:	b2d8      	uxtb	r0, r3
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	212c      	movs	r1, #44	; 0x2c
 800b4f4:	fb01 f303 	mul.w	r3, r1, r3
 800b4f8:	4413      	add	r3, r2
 800b4fa:	3355      	adds	r3, #85	; 0x55
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	e0b4      	b.n	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	212c      	movs	r1, #44	; 0x2c
 800b508:	fb01 f303 	mul.w	r3, r1, r3
 800b50c:	4413      	add	r3, r2
 800b50e:	3355      	adds	r3, #85	; 0x55
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f083 0301 	eor.w	r3, r3, #1
 800b516:	b2d8      	uxtb	r0, r3
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	212c      	movs	r1, #44	; 0x2c
 800b51e:	fb01 f303 	mul.w	r3, r1, r3
 800b522:	4413      	add	r3, r2
 800b524:	3355      	adds	r3, #85	; 0x55
 800b526:	4602      	mov	r2, r0
 800b528:	701a      	strb	r2, [r3, #0]
 800b52a:	e09f      	b.n	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	212c      	movs	r1, #44	; 0x2c
 800b532:	fb01 f303 	mul.w	r3, r1, r3
 800b536:	4413      	add	r3, r2
 800b538:	3361      	adds	r3, #97	; 0x61
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d109      	bne.n	800b554 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	212c      	movs	r1, #44	; 0x2c
 800b546:	fb01 f303 	mul.w	r3, r1, r3
 800b54a:	4413      	add	r3, r2
 800b54c:	3360      	adds	r3, #96	; 0x60
 800b54e:	2202      	movs	r2, #2
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	e08b      	b.n	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	212c      	movs	r1, #44	; 0x2c
 800b55a:	fb01 f303 	mul.w	r3, r1, r3
 800b55e:	4413      	add	r3, r2
 800b560:	3361      	adds	r3, #97	; 0x61
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b04      	cmp	r3, #4
 800b566:	d109      	bne.n	800b57c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	212c      	movs	r1, #44	; 0x2c
 800b56e:	fb01 f303 	mul.w	r3, r1, r3
 800b572:	4413      	add	r3, r2
 800b574:	3360      	adds	r3, #96	; 0x60
 800b576:	2202      	movs	r2, #2
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	e077      	b.n	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	212c      	movs	r1, #44	; 0x2c
 800b582:	fb01 f303 	mul.w	r3, r1, r3
 800b586:	4413      	add	r3, r2
 800b588:	3361      	adds	r3, #97	; 0x61
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b05      	cmp	r3, #5
 800b58e:	d109      	bne.n	800b5a4 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	212c      	movs	r1, #44	; 0x2c
 800b596:	fb01 f303 	mul.w	r3, r1, r3
 800b59a:	4413      	add	r3, r2
 800b59c:	3360      	adds	r3, #96	; 0x60
 800b59e:	2205      	movs	r2, #5
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	e063      	b.n	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	212c      	movs	r1, #44	; 0x2c
 800b5aa:	fb01 f303 	mul.w	r3, r1, r3
 800b5ae:	4413      	add	r3, r2
 800b5b0:	3361      	adds	r3, #97	; 0x61
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b06      	cmp	r3, #6
 800b5b6:	d009      	beq.n	800b5cc <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	212c      	movs	r1, #44	; 0x2c
 800b5be:	fb01 f303 	mul.w	r3, r1, r3
 800b5c2:	4413      	add	r3, r2
 800b5c4:	3361      	adds	r3, #97	; 0x61
 800b5c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800b5c8:	2b08      	cmp	r3, #8
 800b5ca:	d14f      	bne.n	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	212c      	movs	r1, #44	; 0x2c
 800b5d2:	fb01 f303 	mul.w	r3, r1, r3
 800b5d6:	4413      	add	r3, r2
 800b5d8:	335c      	adds	r3, #92	; 0x5c
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	202c      	movs	r0, #44	; 0x2c
 800b5e4:	fb00 f303 	mul.w	r3, r0, r3
 800b5e8:	440b      	add	r3, r1
 800b5ea:	335c      	adds	r3, #92	; 0x5c
 800b5ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	212c      	movs	r1, #44	; 0x2c
 800b5f4:	fb01 f303 	mul.w	r3, r1, r3
 800b5f8:	4413      	add	r3, r2
 800b5fa:	335c      	adds	r3, #92	; 0x5c
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d912      	bls.n	800b628 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	212c      	movs	r1, #44	; 0x2c
 800b608:	fb01 f303 	mul.w	r3, r1, r3
 800b60c:	4413      	add	r3, r2
 800b60e:	335c      	adds	r3, #92	; 0x5c
 800b610:	2200      	movs	r2, #0
 800b612:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	212c      	movs	r1, #44	; 0x2c
 800b61a:	fb01 f303 	mul.w	r3, r1, r3
 800b61e:	4413      	add	r3, r2
 800b620:	3360      	adds	r3, #96	; 0x60
 800b622:	2204      	movs	r2, #4
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	e021      	b.n	800b66c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	212c      	movs	r1, #44	; 0x2c
 800b62e:	fb01 f303 	mul.w	r3, r1, r3
 800b632:	4413      	add	r3, r2
 800b634:	3360      	adds	r3, #96	; 0x60
 800b636:	2202      	movs	r2, #2
 800b638:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	015a      	lsls	r2, r3, #5
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	4413      	add	r3, r2
 800b642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b650:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b658:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	015a      	lsls	r2, r3, #5
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	4413      	add	r3, r2
 800b662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b666:	461a      	mov	r2, r3
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	4413      	add	r3, r2
 800b674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b678:	461a      	mov	r2, r3
 800b67a:	2302      	movs	r3, #2
 800b67c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	b2d9      	uxtb	r1, r3
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	202c      	movs	r0, #44	; 0x2c
 800b688:	fb00 f303 	mul.w	r3, r0, r3
 800b68c:	4413      	add	r3, r2
 800b68e:	3360      	adds	r3, #96	; 0x60
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f00e fc13 	bl	8019ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800b69a:	bf00      	nop
 800b69c:	3720      	adds	r7, #32
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b08a      	sub	sp, #40	; 0x28
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	f003 030f 	and.w	r3, r3, #15
 800b6c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	0c5b      	lsrs	r3, r3, #17
 800b6c8:	f003 030f 	and.w	r3, r3, #15
 800b6cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	091b      	lsrs	r3, r3, #4
 800b6d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d004      	beq.n	800b6e8 <HCD_RXQLVL_IRQHandler+0x46>
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b05      	cmp	r3, #5
 800b6e2:	f000 80a9 	beq.w	800b838 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800b6e6:	e0aa      	b.n	800b83e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 80a6 	beq.w	800b83c <HCD_RXQLVL_IRQHandler+0x19a>
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	212c      	movs	r1, #44	; 0x2c
 800b6f6:	fb01 f303 	mul.w	r3, r1, r3
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3344      	adds	r3, #68	; 0x44
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 809b 	beq.w	800b83c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	212c      	movs	r1, #44	; 0x2c
 800b70c:	fb01 f303 	mul.w	r3, r1, r3
 800b710:	4413      	add	r3, r2
 800b712:	3350      	adds	r3, #80	; 0x50
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	441a      	add	r2, r3
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	202c      	movs	r0, #44	; 0x2c
 800b720:	fb00 f303 	mul.w	r3, r0, r3
 800b724:	440b      	add	r3, r1
 800b726:	334c      	adds	r3, #76	; 0x4c
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d87a      	bhi.n	800b824 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6818      	ldr	r0, [r3, #0]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	212c      	movs	r1, #44	; 0x2c
 800b738:	fb01 f303 	mul.w	r3, r1, r3
 800b73c:	4413      	add	r3, r2
 800b73e:	3344      	adds	r3, #68	; 0x44
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	b292      	uxth	r2, r2
 800b746:	4619      	mov	r1, r3
 800b748:	f008 fb17 	bl	8013d7a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	212c      	movs	r1, #44	; 0x2c
 800b752:	fb01 f303 	mul.w	r3, r1, r3
 800b756:	4413      	add	r3, r2
 800b758:	3344      	adds	r3, #68	; 0x44
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	441a      	add	r2, r3
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	202c      	movs	r0, #44	; 0x2c
 800b766:	fb00 f303 	mul.w	r3, r0, r3
 800b76a:	440b      	add	r3, r1
 800b76c:	3344      	adds	r3, #68	; 0x44
 800b76e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	212c      	movs	r1, #44	; 0x2c
 800b776:	fb01 f303 	mul.w	r3, r1, r3
 800b77a:	4413      	add	r3, r2
 800b77c:	3350      	adds	r3, #80	; 0x50
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	441a      	add	r2, r3
 800b784:	6879      	ldr	r1, [r7, #4]
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	202c      	movs	r0, #44	; 0x2c
 800b78a:	fb00 f303 	mul.w	r3, r0, r3
 800b78e:	440b      	add	r3, r1
 800b790:	3350      	adds	r3, #80	; 0x50
 800b792:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	0cdb      	lsrs	r3, r3, #19
 800b7a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7a8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	212c      	movs	r1, #44	; 0x2c
 800b7b0:	fb01 f303 	mul.w	r3, r1, r3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3340      	adds	r3, #64	; 0x40
 800b7b8:	881b      	ldrh	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d13c      	bne.n	800b83c <HCD_RXQLVL_IRQHandler+0x19a>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d039      	beq.n	800b83c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7de:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7e6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	212c      	movs	r1, #44	; 0x2c
 800b800:	fb01 f303 	mul.w	r3, r1, r3
 800b804:	4413      	add	r3, r2
 800b806:	3354      	adds	r3, #84	; 0x54
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	f083 0301 	eor.w	r3, r3, #1
 800b80e:	b2d8      	uxtb	r0, r3
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	212c      	movs	r1, #44	; 0x2c
 800b816:	fb01 f303 	mul.w	r3, r1, r3
 800b81a:	4413      	add	r3, r2
 800b81c:	3354      	adds	r3, #84	; 0x54
 800b81e:	4602      	mov	r2, r0
 800b820:	701a      	strb	r2, [r3, #0]
      break;
 800b822:	e00b      	b.n	800b83c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	212c      	movs	r1, #44	; 0x2c
 800b82a:	fb01 f303 	mul.w	r3, r1, r3
 800b82e:	4413      	add	r3, r2
 800b830:	3360      	adds	r3, #96	; 0x60
 800b832:	2204      	movs	r2, #4
 800b834:	701a      	strb	r2, [r3, #0]
      break;
 800b836:	e001      	b.n	800b83c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800b838:	bf00      	nop
 800b83a:	e000      	b.n	800b83e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800b83c:	bf00      	nop
  }
}
 800b83e:	bf00      	nop
 800b840:	3728      	adds	r7, #40	; 0x28
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b086      	sub	sp, #24
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b872:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d10b      	bne.n	800b896 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	2b01      	cmp	r3, #1
 800b886:	d102      	bne.n	800b88e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f00e fafd 	bl	8019e88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	f043 0302 	orr.w	r3, r3, #2
 800b894:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f003 0308 	and.w	r3, r3, #8
 800b89c:	2b08      	cmp	r3, #8
 800b89e:	d132      	bne.n	800b906 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f043 0308 	orr.w	r3, r3, #8
 800b8a6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f003 0304 	and.w	r3, r3, #4
 800b8ae:	2b04      	cmp	r3, #4
 800b8b0:	d126      	bne.n	800b900 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d113      	bne.n	800b8e2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b8c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8c4:	d106      	bne.n	800b8d4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2102      	movs	r1, #2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f008 fb83 	bl	8013fd8 <USB_InitFSLSPClkSel>
 800b8d2:	e011      	b.n	800b8f8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2101      	movs	r1, #1
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f008 fb7c 	bl	8013fd8 <USB_InitFSLSPClkSel>
 800b8e0:	e00a      	b.n	800b8f8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d106      	bne.n	800b8f8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b8f6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f00e faf3 	bl	8019ee4 <HAL_HCD_PortEnabled_Callback>
 800b8fe:	e002      	b.n	800b906 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f00e fafd 	bl	8019f00 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f003 0320 	and.w	r3, r3, #32
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	d103      	bne.n	800b918 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f043 0320 	orr.w	r3, r3, #32
 800b916:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b91e:	461a      	mov	r2, r3
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	6013      	str	r3, [r2, #0]
}
 800b924:	bf00      	nop
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e07f      	b.n	800ba3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d106      	bne.n	800b958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7f7 feee 	bl	8003734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2224      	movs	r2, #36	; 0x24
 800b95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f022 0201 	bic.w	r2, r2, #1
 800b96e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685a      	ldr	r2, [r3, #4]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b97c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	689a      	ldr	r2, [r3, #8]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b98c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d107      	bne.n	800b9a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9a2:	609a      	str	r2, [r3, #8]
 800b9a4:	e006      	b.n	800b9b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	689a      	ldr	r2, [r3, #8]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b9b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d104      	bne.n	800b9c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6859      	ldr	r1, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	4b1d      	ldr	r3, [pc, #116]	; (800ba48 <HAL_I2C_Init+0x11c>)
 800b9d2:	430b      	orrs	r3, r1
 800b9d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68da      	ldr	r2, [r3, #12]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b9e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	691a      	ldr	r2, [r3, #16]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	ea42 0103 	orr.w	r1, r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	699b      	ldr	r3, [r3, #24]
 800b9f6:	021a      	lsls	r2, r3, #8
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	69d9      	ldr	r1, [r3, #28]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a1a      	ldr	r2, [r3, #32]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f042 0201 	orr.w	r2, r2, #1
 800ba1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2220      	movs	r2, #32
 800ba2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	02008000 	.word	0x02008000

0800ba4c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e021      	b.n	800baa2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2224      	movs	r2, #36	; 0x24
 800ba62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f022 0201 	bic.w	r2, r2, #1
 800ba74:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7f7 fed4 	bl	8003824 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af02      	add	r7, sp, #8
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	461a      	mov	r2, r3
 800baba:	4603      	mov	r3, r0
 800babc:	817b      	strh	r3, [r7, #10]
 800babe:	460b      	mov	r3, r1
 800bac0:	813b      	strh	r3, [r7, #8]
 800bac2:	4613      	mov	r3, r2
 800bac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b20      	cmp	r3, #32
 800bad0:	f040 80f9 	bne.w	800bcc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <HAL_I2C_Mem_Write+0x34>
 800bada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800badc:	2b00      	cmp	r3, #0
 800bade:	d105      	bne.n	800baec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bae6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	e0ed      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d101      	bne.n	800bafa <HAL_I2C_Mem_Write+0x4e>
 800baf6:	2302      	movs	r3, #2
 800baf8:	e0e6      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x21c>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bb02:	f7fc f859 	bl	8007bb8 <HAL_GetTick>
 800bb06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	2319      	movs	r3, #25
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f000 fac3 	bl	800c0a0 <I2C_WaitOnFlagUntilTimeout>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e0d1      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2221      	movs	r2, #33	; 0x21
 800bb28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2240      	movs	r2, #64	; 0x40
 800bb30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6a3a      	ldr	r2, [r7, #32]
 800bb3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bb4c:	88f8      	ldrh	r0, [r7, #6]
 800bb4e:	893a      	ldrh	r2, [r7, #8]
 800bb50:	8979      	ldrh	r1, [r7, #10]
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	9301      	str	r3, [sp, #4]
 800bb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f000 f9d3 	bl	800bf08 <I2C_RequestMemoryWrite>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e0a9      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	2bff      	cmp	r3, #255	; 0xff
 800bb7c:	d90e      	bls.n	800bb9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	22ff      	movs	r2, #255	; 0xff
 800bb82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	8979      	ldrh	r1, [r7, #10]
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 fba5 	bl	800c2e4 <I2C_TransferConfig>
 800bb9a:	e00f      	b.n	800bbbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbaa:	b2da      	uxtb	r2, r3
 800bbac:	8979      	ldrh	r1, [r7, #10]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 fb94 	bl	800c2e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f000 faad 	bl	800c120 <I2C_WaitOnTXISFlagUntilTimeout>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e07b      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd4:	781a      	ldrb	r2, [r3, #0]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	3b01      	subs	r3, #1
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d034      	beq.n	800bc74 <HAL_I2C_Mem_Write+0x1c8>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d130      	bne.n	800bc74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2180      	movs	r1, #128	; 0x80
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 fa3f 	bl	800c0a0 <I2C_WaitOnFlagUntilTimeout>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e04d      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	2bff      	cmp	r3, #255	; 0xff
 800bc34:	d90e      	bls.n	800bc54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	22ff      	movs	r2, #255	; 0xff
 800bc3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	8979      	ldrh	r1, [r7, #10]
 800bc44:	2300      	movs	r3, #0
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fb49 	bl	800c2e4 <I2C_TransferConfig>
 800bc52:	e00f      	b.n	800bc74 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	8979      	ldrh	r1, [r7, #10]
 800bc66:	2300      	movs	r3, #0
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f000 fb38 	bl	800c2e4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d19e      	bne.n	800bbbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 fa8c 	bl	800c1a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e01a      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2220      	movs	r2, #32
 800bc98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6859      	ldr	r1, [r3, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <HAL_I2C_Mem_Write+0x224>)
 800bca6:	400b      	ands	r3, r1
 800bca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2220      	movs	r2, #32
 800bcae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e000      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bcc6:	2302      	movs	r3, #2
  }
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	fe00e800 	.word	0xfe00e800

0800bcd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af02      	add	r7, sp, #8
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	4608      	mov	r0, r1
 800bcde:	4611      	mov	r1, r2
 800bce0:	461a      	mov	r2, r3
 800bce2:	4603      	mov	r3, r0
 800bce4:	817b      	strh	r3, [r7, #10]
 800bce6:	460b      	mov	r3, r1
 800bce8:	813b      	strh	r3, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b20      	cmp	r3, #32
 800bcf8:	f040 80fd 	bne.w	800bef6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <HAL_I2C_Mem_Read+0x34>
 800bd02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d105      	bne.n	800bd14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e0f1      	b.n	800bef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d101      	bne.n	800bd22 <HAL_I2C_Mem_Read+0x4e>
 800bd1e:	2302      	movs	r3, #2
 800bd20:	e0ea      	b.n	800bef8 <HAL_I2C_Mem_Read+0x224>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bd2a:	f7fb ff45 	bl	8007bb8 <HAL_GetTick>
 800bd2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	2319      	movs	r3, #25
 800bd36:	2201      	movs	r2, #1
 800bd38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f000 f9af 	bl	800c0a0 <I2C_WaitOnFlagUntilTimeout>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e0d5      	b.n	800bef8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2222      	movs	r2, #34	; 0x22
 800bd50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2240      	movs	r2, #64	; 0x40
 800bd58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6a3a      	ldr	r2, [r7, #32]
 800bd66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd74:	88f8      	ldrh	r0, [r7, #6]
 800bd76:	893a      	ldrh	r2, [r7, #8]
 800bd78:	8979      	ldrh	r1, [r7, #10]
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	9301      	str	r3, [sp, #4]
 800bd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	4603      	mov	r3, r0
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f000 f913 	bl	800bfb0 <I2C_RequestMemoryRead>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d005      	beq.n	800bd9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e0ad      	b.n	800bef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	2bff      	cmp	r3, #255	; 0xff
 800bda4:	d90e      	bls.n	800bdc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	22ff      	movs	r2, #255	; 0xff
 800bdaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	8979      	ldrh	r1, [r7, #10]
 800bdb4:	4b52      	ldr	r3, [pc, #328]	; (800bf00 <HAL_I2C_Mem_Read+0x22c>)
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f000 fa91 	bl	800c2e4 <I2C_TransferConfig>
 800bdc2:	e00f      	b.n	800bde4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	8979      	ldrh	r1, [r7, #10]
 800bdd6:	4b4a      	ldr	r3, [pc, #296]	; (800bf00 <HAL_I2C_Mem_Read+0x22c>)
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f000 fa80 	bl	800c2e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	2200      	movs	r2, #0
 800bdec:	2104      	movs	r1, #4
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f000 f956 	bl	800c0a0 <I2C_WaitOnFlagUntilTimeout>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e07c      	b.n	800bef8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	b2d2      	uxtb	r2, r2
 800be0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be1a:	3b01      	subs	r3, #1
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be26:	b29b      	uxth	r3, r3
 800be28:	3b01      	subs	r3, #1
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be34:	b29b      	uxth	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d034      	beq.n	800bea4 <HAL_I2C_Mem_Read+0x1d0>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d130      	bne.n	800bea4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	2200      	movs	r2, #0
 800be4a:	2180      	movs	r1, #128	; 0x80
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f000 f927 	bl	800c0a0 <I2C_WaitOnFlagUntilTimeout>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d001      	beq.n	800be5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e04d      	b.n	800bef8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be60:	b29b      	uxth	r3, r3
 800be62:	2bff      	cmp	r3, #255	; 0xff
 800be64:	d90e      	bls.n	800be84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	22ff      	movs	r2, #255	; 0xff
 800be6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be70:	b2da      	uxtb	r2, r3
 800be72:	8979      	ldrh	r1, [r7, #10]
 800be74:	2300      	movs	r3, #0
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 fa31 	bl	800c2e4 <I2C_TransferConfig>
 800be82:	e00f      	b.n	800bea4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be88:	b29a      	uxth	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be92:	b2da      	uxtb	r2, r3
 800be94:	8979      	ldrh	r1, [r7, #10]
 800be96:	2300      	movs	r3, #0
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f000 fa20 	bl	800c2e4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d19a      	bne.n	800bde4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f000 f974 	bl	800c1a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e01a      	b.n	800bef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2220      	movs	r2, #32
 800bec8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	6859      	ldr	r1, [r3, #4]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <HAL_I2C_Mem_Read+0x230>)
 800bed6:	400b      	ands	r3, r1
 800bed8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2220      	movs	r2, #32
 800bede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	e000      	b.n	800bef8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bef6:	2302      	movs	r3, #2
  }
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	80002400 	.word	0x80002400
 800bf04:	fe00e800 	.word	0xfe00e800

0800bf08 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	4608      	mov	r0, r1
 800bf12:	4611      	mov	r1, r2
 800bf14:	461a      	mov	r2, r3
 800bf16:	4603      	mov	r3, r0
 800bf18:	817b      	strh	r3, [r7, #10]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	813b      	strh	r3, [r7, #8]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bf22:	88fb      	ldrh	r3, [r7, #6]
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	8979      	ldrh	r1, [r7, #10]
 800bf28:	4b20      	ldr	r3, [pc, #128]	; (800bfac <I2C_RequestMemoryWrite+0xa4>)
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 f9d7 	bl	800c2e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf36:	69fa      	ldr	r2, [r7, #28]
 800bf38:	69b9      	ldr	r1, [r7, #24]
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 f8f0 	bl	800c120 <I2C_WaitOnTXISFlagUntilTimeout>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	e02c      	b.n	800bfa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf4a:	88fb      	ldrh	r3, [r7, #6]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d105      	bne.n	800bf5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf50:	893b      	ldrh	r3, [r7, #8]
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	629a      	str	r2, [r3, #40]	; 0x28
 800bf5a:	e015      	b.n	800bf88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bf5c:	893b      	ldrh	r3, [r7, #8]
 800bf5e:	0a1b      	lsrs	r3, r3, #8
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf6a:	69fa      	ldr	r2, [r7, #28]
 800bf6c:	69b9      	ldr	r1, [r7, #24]
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 f8d6 	bl	800c120 <I2C_WaitOnTXISFlagUntilTimeout>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e012      	b.n	800bfa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf7e:	893b      	ldrh	r3, [r7, #8]
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	2180      	movs	r1, #128	; 0x80
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 f884 	bl	800c0a0 <I2C_WaitOnFlagUntilTimeout>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d001      	beq.n	800bfa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e000      	b.n	800bfa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	80002000 	.word	0x80002000

0800bfb0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af02      	add	r7, sp, #8
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	4608      	mov	r0, r1
 800bfba:	4611      	mov	r1, r2
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	817b      	strh	r3, [r7, #10]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	813b      	strh	r3, [r7, #8]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bfca:	88fb      	ldrh	r3, [r7, #6]
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	8979      	ldrh	r1, [r7, #10]
 800bfd0:	4b20      	ldr	r3, [pc, #128]	; (800c054 <I2C_RequestMemoryRead+0xa4>)
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f000 f984 	bl	800c2e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfdc:	69fa      	ldr	r2, [r7, #28]
 800bfde:	69b9      	ldr	r1, [r7, #24]
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f000 f89d 	bl	800c120 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e02c      	b.n	800c04a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bff0:	88fb      	ldrh	r3, [r7, #6]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d105      	bne.n	800c002 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bff6:	893b      	ldrh	r3, [r7, #8]
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	629a      	str	r2, [r3, #40]	; 0x28
 800c000:	e015      	b.n	800c02e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c002:	893b      	ldrh	r3, [r7, #8]
 800c004:	0a1b      	lsrs	r3, r3, #8
 800c006:	b29b      	uxth	r3, r3
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c010:	69fa      	ldr	r2, [r7, #28]
 800c012:	69b9      	ldr	r1, [r7, #24]
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f000 f883 	bl	800c120 <I2C_WaitOnTXISFlagUntilTimeout>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e012      	b.n	800c04a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c024:	893b      	ldrh	r3, [r7, #8]
 800c026:	b2da      	uxtb	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2200      	movs	r2, #0
 800c036:	2140      	movs	r1, #64	; 0x40
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f000 f831 	bl	800c0a0 <I2C_WaitOnFlagUntilTimeout>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e000      	b.n	800c04a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	80002000 	.word	0x80002000

0800c058 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	f003 0302 	and.w	r3, r3, #2
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d103      	bne.n	800c076 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2200      	movs	r2, #0
 800c074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	2b01      	cmp	r3, #1
 800c082:	d007      	beq.n	800c094 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	699a      	ldr	r2, [r3, #24]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	619a      	str	r2, [r3, #24]
  }
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0b0:	e022      	b.n	800c0f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b8:	d01e      	beq.n	800c0f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0ba:	f7fb fd7d 	bl	8007bb8 <HAL_GetTick>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d302      	bcc.n	800c0d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d113      	bne.n	800c0f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d4:	f043 0220 	orr.w	r2, r3, #32
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2220      	movs	r2, #32
 800c0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e00f      	b.n	800c118 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	699a      	ldr	r2, [r3, #24]
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	4013      	ands	r3, r2
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	429a      	cmp	r2, r3
 800c106:	bf0c      	ite	eq
 800c108:	2301      	moveq	r3, #1
 800c10a:	2300      	movne	r3, #0
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	461a      	mov	r2, r3
 800c110:	79fb      	ldrb	r3, [r7, #7]
 800c112:	429a      	cmp	r2, r3
 800c114:	d0cd      	beq.n	800c0b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c12c:	e02c      	b.n	800c188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	68b9      	ldr	r1, [r7, #8]
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f000 f870 	bl	800c218 <I2C_IsAcknowledgeFailed>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e02a      	b.n	800c198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c148:	d01e      	beq.n	800c188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c14a:	f7fb fd35 	bl	8007bb8 <HAL_GetTick>
 800c14e:	4602      	mov	r2, r0
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	429a      	cmp	r2, r3
 800c158:	d302      	bcc.n	800c160 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d113      	bne.n	800c188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c164:	f043 0220 	orr.w	r2, r3, #32
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2220      	movs	r2, #32
 800c170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	e007      	b.n	800c198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	f003 0302 	and.w	r3, r3, #2
 800c192:	2b02      	cmp	r3, #2
 800c194:	d1cb      	bne.n	800c12e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c1ac:	e028      	b.n	800c200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 f830 	bl	800c218 <I2C_IsAcknowledgeFailed>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d001      	beq.n	800c1c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e026      	b.n	800c210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1c2:	f7fb fcf9 	bl	8007bb8 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d302      	bcc.n	800c1d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d113      	bne.n	800c200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1dc:	f043 0220 	orr.w	r2, r3, #32
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e007      	b.n	800c210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	f003 0320 	and.w	r3, r3, #32
 800c20a:	2b20      	cmp	r3, #32
 800c20c:	d1cf      	bne.n	800c1ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	f003 0310 	and.w	r3, r3, #16
 800c22e:	2b10      	cmp	r3, #16
 800c230:	d151      	bne.n	800c2d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c232:	e022      	b.n	800c27a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23a:	d01e      	beq.n	800c27a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c23c:	f7fb fcbc 	bl	8007bb8 <HAL_GetTick>
 800c240:	4602      	mov	r2, r0
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d302      	bcc.n	800c252 <I2C_IsAcknowledgeFailed+0x3a>
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d113      	bne.n	800c27a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c256:	f043 0220 	orr.w	r2, r3, #32
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2220      	movs	r2, #32
 800c262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e02e      	b.n	800c2d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	f003 0320 	and.w	r3, r3, #32
 800c284:	2b20      	cmp	r3, #32
 800c286:	d1d5      	bne.n	800c234 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2210      	movs	r2, #16
 800c28e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2220      	movs	r2, #32
 800c296:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f7ff fedd 	bl	800c058 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6859      	ldr	r1, [r3, #4]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	4b0d      	ldr	r3, [pc, #52]	; (800c2e0 <I2C_IsAcknowledgeFailed+0xc8>)
 800c2aa:	400b      	ands	r3, r1
 800c2ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b2:	f043 0204 	orr.w	r2, r3, #4
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2220      	movs	r2, #32
 800c2be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e000      	b.n	800c2d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	fe00e800 	.word	0xfe00e800

0800c2e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	607b      	str	r3, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	817b      	strh	r3, [r7, #10]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	0d5b      	lsrs	r3, r3, #21
 800c300:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c304:	4b0d      	ldr	r3, [pc, #52]	; (800c33c <I2C_TransferConfig+0x58>)
 800c306:	430b      	orrs	r3, r1
 800c308:	43db      	mvns	r3, r3
 800c30a:	ea02 0103 	and.w	r1, r2, r3
 800c30e:	897b      	ldrh	r3, [r7, #10]
 800c310:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c314:	7a7b      	ldrb	r3, [r7, #9]
 800c316:	041b      	lsls	r3, r3, #16
 800c318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c31c:	431a      	orrs	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	431a      	orrs	r2, r3
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	431a      	orrs	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c32e:	bf00      	nop
 800c330:	3714      	adds	r7, #20
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	03ff63ff 	.word	0x03ff63ff

0800c340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b20      	cmp	r3, #32
 800c354:	d138      	bne.n	800c3c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d101      	bne.n	800c364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c360:	2302      	movs	r3, #2
 800c362:	e032      	b.n	800c3ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2224      	movs	r2, #36	; 0x24
 800c370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 0201 	bic.w	r2, r2, #1
 800c382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	6819      	ldr	r1, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f042 0201 	orr.w	r2, r2, #1
 800c3b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	e000      	b.n	800c3ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c3c8:	2302      	movs	r3, #2
  }
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b085      	sub	sp, #20
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b20      	cmp	r3, #32
 800c3ea:	d139      	bne.n	800c460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d101      	bne.n	800c3fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	e033      	b.n	800c462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2224      	movs	r2, #36	; 0x24
 800c406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f022 0201 	bic.w	r2, r2, #1
 800c418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	021b      	lsls	r3, r3, #8
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	4313      	orrs	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f042 0201 	orr.w	r2, r2, #1
 800c44a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2220      	movs	r2, #32
 800c450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e000      	b.n	800c462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c460:	2302      	movs	r3, #2
  }
}
 800c462:	4618      	mov	r0, r3
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
	...

0800c470 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	e0bf      	b.n	800c602 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d106      	bne.n	800c49c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7f7 fa00 	bl	800389c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2202      	movs	r2, #2
 800c4a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	699a      	ldr	r2, [r3, #24]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c4b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6999      	ldr	r1, [r3, #24]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c4c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	430a      	orrs	r2, r1
 800c4d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6899      	ldr	r1, [r3, #8]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	4b4a      	ldr	r3, [pc, #296]	; (800c60c <HAL_LTDC_Init+0x19c>)
 800c4e4:	400b      	ands	r3, r1
 800c4e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	041b      	lsls	r3, r3, #16
 800c4ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6899      	ldr	r1, [r3, #8]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	699a      	ldr	r2, [r3, #24]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	431a      	orrs	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	430a      	orrs	r2, r1
 800c504:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68d9      	ldr	r1, [r3, #12]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	4b3e      	ldr	r3, [pc, #248]	; (800c60c <HAL_LTDC_Init+0x19c>)
 800c512:	400b      	ands	r3, r1
 800c514:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	69db      	ldr	r3, [r3, #28]
 800c51a:	041b      	lsls	r3, r3, #16
 800c51c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	68d9      	ldr	r1, [r3, #12]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a1a      	ldr	r2, [r3, #32]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	431a      	orrs	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	430a      	orrs	r2, r1
 800c532:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6919      	ldr	r1, [r3, #16]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4b33      	ldr	r3, [pc, #204]	; (800c60c <HAL_LTDC_Init+0x19c>)
 800c540:	400b      	ands	r3, r1
 800c542:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c548:	041b      	lsls	r3, r3, #16
 800c54a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6919      	ldr	r1, [r3, #16]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	431a      	orrs	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	430a      	orrs	r2, r1
 800c560:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6959      	ldr	r1, [r3, #20]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4b27      	ldr	r3, [pc, #156]	; (800c60c <HAL_LTDC_Init+0x19c>)
 800c56e:	400b      	ands	r3, r1
 800c570:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c576:	041b      	lsls	r3, r3, #16
 800c578:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	6959      	ldr	r1, [r3, #20]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	431a      	orrs	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	430a      	orrs	r2, r1
 800c58e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c596:	021b      	lsls	r3, r3, #8
 800c598:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c5a0:	041b      	lsls	r3, r3, #16
 800c5a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c5b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c5c6:	431a      	orrs	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f042 0206 	orr.w	r2, r2, #6
 800c5de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	699a      	ldr	r2, [r3, #24]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f042 0201 	orr.w	r2, r2, #1
 800c5ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	f000f800 	.word	0xf000f800

0800c610 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c610:	b5b0      	push	{r4, r5, r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c622:	2b01      	cmp	r3, #1
 800c624:	d101      	bne.n	800c62a <HAL_LTDC_ConfigLayer+0x1a>
 800c626:	2302      	movs	r3, #2
 800c628:	e02c      	b.n	800c684 <HAL_LTDC_ConfigLayer+0x74>
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2201      	movs	r2, #1
 800c62e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2202      	movs	r2, #2
 800c636:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2134      	movs	r1, #52	; 0x34
 800c640:	fb01 f303 	mul.w	r3, r1, r3
 800c644:	4413      	add	r3, r2
 800c646:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	4614      	mov	r4, r2
 800c64e:	461d      	mov	r5, r3
 800c650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c65a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c65c:	682b      	ldr	r3, [r5, #0]
 800c65e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	68b9      	ldr	r1, [r7, #8]
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f000 f847 	bl	800c6f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2201      	movs	r2, #1
 800c670:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bdb0      	pop	{r4, r5, r7, pc}

0800c68c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b086      	sub	sp, #24
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d101      	bne.n	800c6a6 <HAL_LTDC_SetAddress+0x1a>
 800c6a2:	2302      	movs	r3, #2
 800c6a4:	e024      	b.n	800c6f0 <HAL_LTDC_SetAddress+0x64>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2234      	movs	r2, #52	; 0x34
 800c6ba:	fb02 f303 	mul.w	r3, r2, r3
 800c6be:	3338      	adds	r3, #56	; 0x38
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	6979      	ldr	r1, [r7, #20]
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f000 f811 	bl	800c6f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3718      	adds	r7, #24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b089      	sub	sp, #36	; 0x24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	685a      	ldr	r2, [r3, #4]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	0c1b      	lsrs	r3, r3, #16
 800c710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c714:	4413      	add	r3, r2
 800c716:	041b      	lsls	r3, r3, #16
 800c718:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	01db      	lsls	r3, r3, #7
 800c724:	4413      	add	r3, r2
 800c726:	3384      	adds	r3, #132	; 0x84
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	6812      	ldr	r2, [r2, #0]
 800c72e:	4611      	mov	r1, r2
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	01d2      	lsls	r2, r2, #7
 800c734:	440a      	add	r2, r1
 800c736:	3284      	adds	r2, #132	; 0x84
 800c738:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c73c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	0c1b      	lsrs	r3, r3, #16
 800c74a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c74e:	4413      	add	r3, r2
 800c750:	1c5a      	adds	r2, r3, #1
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4619      	mov	r1, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	01db      	lsls	r3, r3, #7
 800c75c:	440b      	add	r3, r1
 800c75e:	3384      	adds	r3, #132	; 0x84
 800c760:	4619      	mov	r1, r3
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	4313      	orrs	r3, r2
 800c766:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	68da      	ldr	r2, [r3, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c776:	4413      	add	r3, r2
 800c778:	041b      	lsls	r3, r3, #16
 800c77a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	461a      	mov	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	01db      	lsls	r3, r3, #7
 800c786:	4413      	add	r3, r2
 800c788:	3384      	adds	r3, #132	; 0x84
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	6812      	ldr	r2, [r2, #0]
 800c790:	4611      	mov	r1, r2
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	01d2      	lsls	r2, r2, #7
 800c796:	440a      	add	r2, r1
 800c798:	3284      	adds	r2, #132	; 0x84
 800c79a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c79e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	689a      	ldr	r2, [r3, #8]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7ae:	4413      	add	r3, r2
 800c7b0:	1c5a      	adds	r2, r3, #1
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	01db      	lsls	r3, r3, #7
 800c7bc:	440b      	add	r3, r1
 800c7be:	3384      	adds	r3, #132	; 0x84
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	01db      	lsls	r3, r3, #7
 800c7d2:	4413      	add	r3, r2
 800c7d4:	3384      	adds	r3, #132	; 0x84
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	6812      	ldr	r2, [r2, #0]
 800c7dc:	4611      	mov	r1, r2
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	01d2      	lsls	r2, r2, #7
 800c7e2:	440a      	add	r2, r1
 800c7e4:	3284      	adds	r2, #132	; 0x84
 800c7e6:	f023 0307 	bic.w	r3, r3, #7
 800c7ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	01db      	lsls	r3, r3, #7
 800c7f6:	4413      	add	r3, r2
 800c7f8:	3384      	adds	r3, #132	; 0x84
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c808:	021b      	lsls	r3, r3, #8
 800c80a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c812:	041b      	lsls	r3, r3, #16
 800c814:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	699b      	ldr	r3, [r3, #24]
 800c81a:	061b      	lsls	r3, r3, #24
 800c81c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	461a      	mov	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	01db      	lsls	r3, r3, #7
 800c828:	4413      	add	r3, r2
 800c82a:	3384      	adds	r3, #132	; 0x84
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	461a      	mov	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	01db      	lsls	r3, r3, #7
 800c838:	4413      	add	r3, r2
 800c83a:	3384      	adds	r3, #132	; 0x84
 800c83c:	461a      	mov	r2, r3
 800c83e:	2300      	movs	r3, #0
 800c840:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c848:	461a      	mov	r2, r3
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	431a      	orrs	r2, r3
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	431a      	orrs	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4619      	mov	r1, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	01db      	lsls	r3, r3, #7
 800c85c:	440b      	add	r3, r1
 800c85e:	3384      	adds	r3, #132	; 0x84
 800c860:	4619      	mov	r1, r3
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	4313      	orrs	r3, r2
 800c866:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	461a      	mov	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	01db      	lsls	r3, r3, #7
 800c872:	4413      	add	r3, r2
 800c874:	3384      	adds	r3, #132	; 0x84
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	6812      	ldr	r2, [r2, #0]
 800c87c:	4611      	mov	r1, r2
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	01d2      	lsls	r2, r2, #7
 800c882:	440a      	add	r2, r1
 800c884:	3284      	adds	r2, #132	; 0x84
 800c886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c88a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	461a      	mov	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	01db      	lsls	r3, r3, #7
 800c896:	4413      	add	r3, r2
 800c898:	3384      	adds	r3, #132	; 0x84
 800c89a:	461a      	mov	r2, r3
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	01db      	lsls	r3, r3, #7
 800c8ac:	4413      	add	r3, r2
 800c8ae:	3384      	adds	r3, #132	; 0x84
 800c8b0:	69da      	ldr	r2, [r3, #28]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	01db      	lsls	r3, r3, #7
 800c8bc:	440b      	add	r3, r1
 800c8be:	3384      	adds	r3, #132	; 0x84
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4b58      	ldr	r3, [pc, #352]	; (800ca24 <LTDC_SetConfig+0x32c>)
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	69da      	ldr	r2, [r3, #28]
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	6a1b      	ldr	r3, [r3, #32]
 800c8d0:	68f9      	ldr	r1, [r7, #12]
 800c8d2:	6809      	ldr	r1, [r1, #0]
 800c8d4:	4608      	mov	r0, r1
 800c8d6:	6879      	ldr	r1, [r7, #4]
 800c8d8:	01c9      	lsls	r1, r1, #7
 800c8da:	4401      	add	r1, r0
 800c8dc:	3184      	adds	r1, #132	; 0x84
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	01db      	lsls	r3, r3, #7
 800c8ec:	4413      	add	r3, r2
 800c8ee:	3384      	adds	r3, #132	; 0x84
 800c8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	01db      	lsls	r3, r3, #7
 800c8fc:	4413      	add	r3, r2
 800c8fe:	3384      	adds	r3, #132	; 0x84
 800c900:	461a      	mov	r2, r3
 800c902:	2300      	movs	r3, #0
 800c904:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	01db      	lsls	r3, r3, #7
 800c910:	4413      	add	r3, r2
 800c912:	3384      	adds	r3, #132	; 0x84
 800c914:	461a      	mov	r2, r3
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d102      	bne.n	800c92a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800c924:	2304      	movs	r3, #4
 800c926:	61fb      	str	r3, [r7, #28]
 800c928:	e01b      	b.n	800c962 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d102      	bne.n	800c938 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800c932:	2303      	movs	r3, #3
 800c934:	61fb      	str	r3, [r7, #28]
 800c936:	e014      	b.n	800c962 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	2b04      	cmp	r3, #4
 800c93e:	d00b      	beq.n	800c958 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c944:	2b02      	cmp	r3, #2
 800c946:	d007      	beq.n	800c958 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d003      	beq.n	800c958 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c954:	2b07      	cmp	r3, #7
 800c956:	d102      	bne.n	800c95e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800c958:	2302      	movs	r3, #2
 800c95a:	61fb      	str	r3, [r7, #28]
 800c95c:	e001      	b.n	800c962 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800c95e:	2301      	movs	r3, #1
 800c960:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	01db      	lsls	r3, r3, #7
 800c96c:	4413      	add	r3, r2
 800c96e:	3384      	adds	r3, #132	; 0x84
 800c970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	6812      	ldr	r2, [r2, #0]
 800c976:	4611      	mov	r1, r2
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	01d2      	lsls	r2, r2, #7
 800c97c:	440a      	add	r2, r1
 800c97e:	3284      	adds	r2, #132	; 0x84
 800c980:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c984:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98a:	69fa      	ldr	r2, [r7, #28]
 800c98c:	fb02 f303 	mul.w	r3, r2, r3
 800c990:	041a      	lsls	r2, r3, #16
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	6859      	ldr	r1, [r3, #4]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	1acb      	subs	r3, r1, r3
 800c99c:	69f9      	ldr	r1, [r7, #28]
 800c99e:	fb01 f303 	mul.w	r3, r1, r3
 800c9a2:	3303      	adds	r3, #3
 800c9a4:	68f9      	ldr	r1, [r7, #12]
 800c9a6:	6809      	ldr	r1, [r1, #0]
 800c9a8:	4608      	mov	r0, r1
 800c9aa:	6879      	ldr	r1, [r7, #4]
 800c9ac:	01c9      	lsls	r1, r1, #7
 800c9ae:	4401      	add	r1, r0
 800c9b0:	3184      	adds	r1, #132	; 0x84
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	01db      	lsls	r3, r3, #7
 800c9c0:	4413      	add	r3, r2
 800c9c2:	3384      	adds	r3, #132	; 0x84
 800c9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	01db      	lsls	r3, r3, #7
 800c9d0:	440b      	add	r3, r1
 800c9d2:	3384      	adds	r3, #132	; 0x84
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	4b14      	ldr	r3, [pc, #80]	; (800ca28 <LTDC_SetConfig+0x330>)
 800c9d8:	4013      	ands	r3, r2
 800c9da:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	01db      	lsls	r3, r3, #7
 800c9e6:	4413      	add	r3, r2
 800c9e8:	3384      	adds	r3, #132	; 0x84
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	01db      	lsls	r3, r3, #7
 800c9fc:	4413      	add	r3, r2
 800c9fe:	3384      	adds	r3, #132	; 0x84
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	6812      	ldr	r2, [r2, #0]
 800ca06:	4611      	mov	r1, r2
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	01d2      	lsls	r2, r2, #7
 800ca0c:	440a      	add	r2, r1
 800ca0e:	3284      	adds	r2, #132	; 0x84
 800ca10:	f043 0301 	orr.w	r3, r3, #1
 800ca14:	6013      	str	r3, [r2, #0]
}
 800ca16:	bf00      	nop
 800ca18:	3724      	adds	r7, #36	; 0x24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	fffff8f8 	.word	0xfffff8f8
 800ca28:	fffff800 	.word	0xfffff800

0800ca2c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca30:	4b05      	ldr	r3, [pc, #20]	; (800ca48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a04      	ldr	r2, [pc, #16]	; (800ca48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ca36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca3a:	6013      	str	r3, [r2, #0]
}
 800ca3c:	bf00      	nop
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	40007000 	.word	0x40007000

0800ca4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ca56:	4b23      	ldr	r3, [pc, #140]	; (800cae4 <HAL_PWREx_EnableOverDrive+0x98>)
 800ca58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5a:	4a22      	ldr	r2, [pc, #136]	; (800cae4 <HAL_PWREx_EnableOverDrive+0x98>)
 800ca5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca60:	6413      	str	r3, [r2, #64]	; 0x40
 800ca62:	4b20      	ldr	r3, [pc, #128]	; (800cae4 <HAL_PWREx_EnableOverDrive+0x98>)
 800ca64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca6a:	603b      	str	r3, [r7, #0]
 800ca6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ca6e:	4b1e      	ldr	r3, [pc, #120]	; (800cae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a1d      	ldr	r2, [pc, #116]	; (800cae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ca74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ca7a:	f7fb f89d 	bl	8007bb8 <HAL_GetTick>
 800ca7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ca80:	e009      	b.n	800ca96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ca82:	f7fb f899 	bl	8007bb8 <HAL_GetTick>
 800ca86:	4602      	mov	r2, r0
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca90:	d901      	bls.n	800ca96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e022      	b.n	800cadc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ca96:	4b14      	ldr	r3, [pc, #80]	; (800cae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caa2:	d1ee      	bne.n	800ca82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800caa4:	4b10      	ldr	r3, [pc, #64]	; (800cae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a0f      	ldr	r2, [pc, #60]	; (800cae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800caaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cab0:	f7fb f882 	bl	8007bb8 <HAL_GetTick>
 800cab4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cab6:	e009      	b.n	800cacc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cab8:	f7fb f87e 	bl	8007bb8 <HAL_GetTick>
 800cabc:	4602      	mov	r2, r0
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cac6:	d901      	bls.n	800cacc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800cac8:	2303      	movs	r3, #3
 800caca:	e007      	b.n	800cadc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cacc:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cad8:	d1ee      	bne.n	800cab8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	40023800 	.word	0x40023800
 800cae8:	40007000 	.word	0x40007000

0800caec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800caf4:	f7fb f860 	bl	8007bb8 <HAL_GetTick>
 800caf8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d101      	bne.n	800cb04 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e067      	b.n	800cbd4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10b      	bne.n	800cb28 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f7f6 ff7f 	bl	8003a1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800cb1e:	f241 3188 	movw	r1, #5000	; 0x1388
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fda8 	bl	800d678 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	021a      	lsls	r2, r3, #8
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2120      	movs	r1, #32
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fdd3 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800cb54:	4603      	mov	r3, r0
 800cb56:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800cb58:	7afb      	ldrb	r3, [r7, #11]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d135      	bne.n	800cbca <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	4b1d      	ldr	r3, [pc, #116]	; (800cbdc <HAL_QSPI_Init+0xf0>)
 800cb66:	4013      	ands	r3, r2
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	6852      	ldr	r2, [r2, #4]
 800cb6c:	0611      	lsls	r1, r2, #24
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	68d2      	ldr	r2, [r2, #12]
 800cb72:	4311      	orrs	r1, r2
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	69d2      	ldr	r2, [r2, #28]
 800cb78:	4311      	orrs	r1, r2
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	6a12      	ldr	r2, [r2, #32]
 800cb7e:	4311      	orrs	r1, r2
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	6812      	ldr	r2, [r2, #0]
 800cb84:	430b      	orrs	r3, r1
 800cb86:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	685a      	ldr	r2, [r3, #4]
 800cb8e:	4b14      	ldr	r3, [pc, #80]	; (800cbe0 <HAL_QSPI_Init+0xf4>)
 800cb90:	4013      	ands	r3, r2
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	6912      	ldr	r2, [r2, #16]
 800cb96:	0411      	lsls	r1, r2, #16
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	6952      	ldr	r2, [r2, #20]
 800cb9c:	4311      	orrs	r1, r2
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	6992      	ldr	r2, [r2, #24]
 800cba2:	4311      	orrs	r1, r2
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	6812      	ldr	r2, [r2, #0]
 800cba8:	430b      	orrs	r3, r1
 800cbaa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f042 0201 	orr.w	r2, r2, #1
 800cbba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800cbd2:	7afb      	ldrb	r3, [r7, #11]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	00ffff2f 	.word	0x00ffff2f
 800cbe0:	ffe0f8fe 	.word	0xffe0f8fe

0800cbe4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	f003 0304 	and.w	r3, r3, #4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d064      	beq.n	800ccd0 <HAL_QSPI_IRQHandler+0xec>
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d05f      	beq.n	800ccd0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3320      	adds	r3, #32
 800cc16:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b12      	cmp	r3, #18
 800cc22:	d125      	bne.n	800cc70 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cc24:	e01c      	b.n	800cc60 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00f      	beq.n	800cc4e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc32:	781a      	ldrb	r2, [r3, #0]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc46:	1e5a      	subs	r2, r3, #1
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	62da      	str	r2, [r3, #44]	; 0x2c
 800cc4c:	e008      	b.n	800cc60 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cc5c:	601a      	str	r2, [r3, #0]
          break;
 800cc5e:	e033      	b.n	800ccc8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	f003 0304 	and.w	r3, r3, #4
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1db      	bne.n	800cc26 <HAL_QSPI_IRQHandler+0x42>
 800cc6e:	e02b      	b.n	800ccc8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	2b22      	cmp	r3, #34	; 0x22
 800cc7a:	d125      	bne.n	800ccc8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800cc7c:	e01d      	b.n	800ccba <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d010      	beq.n	800cca8 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	7812      	ldrb	r2, [r2, #0]
 800cc8e:	b2d2      	uxtb	r2, r2
 800cc90:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca0:	1e5a      	subs	r2, r3, #1
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	639a      	str	r2, [r3, #56]	; 0x38
 800cca6:	e008      	b.n	800ccba <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ccb6:	601a      	str	r2, [r3, #0]
          break;
 800ccb8:	e006      	b.n	800ccc8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	f003 0304 	and.w	r3, r3, #4
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1da      	bne.n	800cc7e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fbed 	bl	800d4a8 <HAL_QSPI_FifoThresholdCallback>
 800ccce:	e142      	b.n	800cf56 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	f003 0302 	and.w	r3, r3, #2
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 80b6 	beq.w	800ce48 <HAL_QSPI_IRQHandler+0x264>
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 80b0 	beq.w	800ce48 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2202      	movs	r2, #2
 800ccee:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800ccfe:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b12      	cmp	r3, #18
 800cd0a:	d123      	bne.n	800cd54 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f003 0304 	and.w	r3, r3, #4
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d011      	beq.n	800cd3e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f022 0204 	bic.w	r2, r2, #4
 800cd28:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f022 0201 	bic.w	r2, r2, #1
 800cd3c:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fc3e 	bl	800d5c0 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 fba1 	bl	800d494 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cd52:	e0fd      	b.n	800cf50 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	2b22      	cmp	r3, #34	; 0x22
 800cd5e:	d146      	bne.n	800cdee <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f003 0304 	and.w	r3, r3, #4
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d012      	beq.n	800cd94 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f022 0204 	bic.w	r2, r2, #4
 800cd7c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f022 0201 	bic.w	r2, r2, #1
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	e021      	b.n	800cdd8 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3320      	adds	r3, #32
 800cd9a:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800cd9c:	e013      	b.n	800cdc6 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d017      	beq.n	800cdd6 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	7812      	ldrb	r2, [r2, #0]
 800cdae:	b2d2      	uxtb	r2, r2
 800cdb0:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc0:	1e5a      	subs	r2, r3, #1
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1e4      	bne.n	800cd9e <HAL_QSPI_IRQHandler+0x1ba>
 800cdd4:	e000      	b.n	800cdd8 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800cdd6:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fbf1 	bl	800d5c0 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fb4a 	bl	800d480 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cdec:	e0b0      	b.n	800cf50 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d107      	bne.n	800ce0a <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 fb32 	bl	800d46c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ce08:	e0a2      	b.n	800cf50 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	2b08      	cmp	r3, #8
 800ce14:	f040 809c 	bne.w	800cf50 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	695a      	ldr	r2, [r3, #20]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ce26:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d103      	bne.n	800ce40 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fb0d 	bl	800d458 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ce3e:	e087      	b.n	800cf50 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 faff 	bl	800d444 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ce46:	e083      	b.n	800cf50 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	f003 0308 	and.w	r3, r3, #8
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d01f      	beq.n	800ce92 <HAL_QSPI_IRQHandler+0x2ae>
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d01a      	beq.n	800ce92 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2208      	movs	r2, #8
 800ce62:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00b      	beq.n	800ce8a <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800ce80:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fb16 	bl	800d4bc <HAL_QSPI_StatusMatchCallback>
 800ce90:	e061      	b.n	800cf56 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d047      	beq.n	800cf2c <HAL_QSPI_IRQHandler+0x348>
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d042      	beq.n	800cf2c <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800cebc:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec2:	f043 0202 	orr.w	r2, r3, #2
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f003 0304 	and.w	r3, r3, #4
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d021      	beq.n	800cf1c <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f022 0204 	bic.w	r2, r2, #4
 800cee6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceec:	4a1c      	ldr	r2, [pc, #112]	; (800cf60 <HAL_QSPI_IRQHandler+0x37c>)
 800ceee:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fb fe59 	bl	8008bac <HAL_DMA_Abort_IT>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d029      	beq.n	800cf54 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf04:	f043 0204 	orr.w	r2, r3, #4
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fa95 	bl	800d444 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cf1a:	e01b      	b.n	800cf54 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fa8d 	bl	800d444 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cf2a:	e013      	b.n	800cf54 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	f003 0310 	and.w	r3, r3, #16
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00f      	beq.n	800cf56 <HAL_QSPI_IRQHandler+0x372>
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00a      	beq.n	800cf56 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2210      	movs	r2, #16
 800cf46:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fac1 	bl	800d4d0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800cf4e:	e002      	b.n	800cf56 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800cf50:	bf00      	nop
 800cf52:	e000      	b.n	800cf56 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cf54:	bf00      	nop
}
 800cf56:	bf00      	nop
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	0800d695 	.word	0x0800d695

0800cf64 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af02      	add	r7, sp, #8
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800cf70:	f7fa fe22 	bl	8007bb8 <HAL_GetTick>
 800cf74:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d101      	bne.n	800cf86 <HAL_QSPI_Command+0x22>
 800cf82:	2302      	movs	r3, #2
 800cf84:	e048      	b.n	800d018 <HAL_QSPI_Command+0xb4>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d137      	bne.n	800d00a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	2120      	movs	r1, #32
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f000 fba1 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800cfbc:	7dfb      	ldrb	r3, [r7, #23]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d125      	bne.n	800d00e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	68b9      	ldr	r1, [r7, #8]
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f000 fbce 	bl	800d768 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d115      	bne.n	800d000 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	2102      	movs	r1, #2
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 fb8b 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10f      	bne.n	800d00e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2202      	movs	r2, #2
 800cff4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cffe:	e006      	b.n	800d00e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d008:	e001      	b.n	800d00e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800d00a:	2302      	movs	r3, #2
 800d00c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d016:	7dfb      	ldrb	r3, [r7, #23]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3718      	adds	r7, #24
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b08a      	sub	sp, #40	; 0x28
 800d024:	af02      	add	r7, sp, #8
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800d030:	f7fa fdc2 	bl	8007bb8 <HAL_GetTick>
 800d034:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	3320      	adds	r3, #32
 800d03c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b01      	cmp	r3, #1
 800d048:	d101      	bne.n	800d04e <HAL_QSPI_Transmit+0x2e>
 800d04a:	2302      	movs	r3, #2
 800d04c:	e07b      	b.n	800d146 <HAL_QSPI_Transmit+0x126>
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d16a      	bne.n	800d138 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d05b      	beq.n	800d126 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2212      	movs	r2, #18
 800d072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	1c5a      	adds	r2, r3, #1
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	691b      	ldr	r3, [r3, #16]
 800d088:	1c5a      	adds	r2, r3, #1
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	695a      	ldr	r2, [r3, #20]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d0a2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800d0a4:	e01b      	b.n	800d0de <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	2104      	movs	r1, #4
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f000 fb22 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800d0ba:	7ffb      	ldrb	r3, [r7, #31]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d113      	bne.n	800d0e8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	781a      	ldrb	r2, [r3, #0]
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d8:	1e5a      	subs	r2, r3, #1
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1df      	bne.n	800d0a6 <HAL_QSPI_Transmit+0x86>
 800d0e6:	e000      	b.n	800d0ea <HAL_QSPI_Transmit+0xca>
          break;
 800d0e8:	bf00      	nop
      }

      if (status == HAL_OK)
 800d0ea:	7ffb      	ldrb	r3, [r7, #31]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d115      	bne.n	800d11c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	2102      	movs	r1, #2
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f000 fafd 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d100:	4603      	mov	r3, r0
 800d102:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800d104:	7ffb      	ldrb	r3, [r7, #31]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d108      	bne.n	800d11c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2202      	movs	r2, #2
 800d110:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800d112:	68f8      	ldr	r0, [r7, #12]
 800d114:	f000 f9e6 	bl	800d4e4 <HAL_QSPI_Abort>
 800d118:	4603      	mov	r3, r0
 800d11a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d124:	e00a      	b.n	800d13c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12a:	f043 0208 	orr.w	r2, r3, #8
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	77fb      	strb	r3, [r7, #31]
 800d136:	e001      	b.n	800d13c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d138:	2302      	movs	r3, #2
 800d13a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800d144:	7ffb      	ldrb	r3, [r7, #31]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3720      	adds	r7, #32
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b08a      	sub	sp, #40	; 0x28
 800d152:	af02      	add	r7, sp, #8
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800d15e:	f7fa fd2b 	bl	8007bb8 <HAL_GetTick>
 800d162:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	3320      	adds	r3, #32
 800d172:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d101      	bne.n	800d184 <HAL_QSPI_Receive+0x36>
 800d180:	2302      	movs	r3, #2
 800d182:	e082      	b.n	800d28a <HAL_QSPI_Receive+0x13c>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b01      	cmp	r3, #1
 800d196:	d171      	bne.n	800d27c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d062      	beq.n	800d26a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2222      	movs	r2, #34	; 0x22
 800d1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	691b      	ldr	r3, [r3, #16]
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	695b      	ldr	r3, [r3, #20]
 800d1d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d1dc:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800d1e6:	e01c      	b.n	800d222 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	2106      	movs	r1, #6
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f000 fa81 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800d1fc:	7ffb      	ldrb	r3, [r7, #31]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d114      	bne.n	800d22c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	7812      	ldrb	r2, [r2, #0]
 800d20a:	b2d2      	uxtb	r2, r2
 800d20c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d21c:	1e5a      	subs	r2, r3, #1
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1de      	bne.n	800d1e8 <HAL_QSPI_Receive+0x9a>
 800d22a:	e000      	b.n	800d22e <HAL_QSPI_Receive+0xe0>
          break;
 800d22c:	bf00      	nop
      }

      if (status == HAL_OK)
 800d22e:	7ffb      	ldrb	r3, [r7, #31]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d115      	bne.n	800d260 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	2201      	movs	r2, #1
 800d23c:	2102      	movs	r1, #2
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f000 fa5b 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d244:	4603      	mov	r3, r0
 800d246:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800d248:	7ffb      	ldrb	r3, [r7, #31]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d108      	bne.n	800d260 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2202      	movs	r2, #2
 800d254:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f000 f944 	bl	800d4e4 <HAL_QSPI_Abort>
 800d25c:	4603      	mov	r3, r0
 800d25e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d268:	e00a      	b.n	800d280 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26e:	f043 0208 	orr.w	r2, r3, #8
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	77fb      	strb	r3, [r7, #31]
 800d27a:	e001      	b.n	800d280 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d27c:	2302      	movs	r3, #2
 800d27e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800d288:	7ffb      	ldrb	r3, [r7, #31]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3720      	adds	r7, #32
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b088      	sub	sp, #32
 800d296:	af02      	add	r7, sp, #8
 800d298:	60f8      	str	r0, [r7, #12]
 800d29a:	60b9      	str	r1, [r7, #8]
 800d29c:	607a      	str	r2, [r7, #4]
 800d29e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d2a0:	f7fa fc8a 	bl	8007bb8 <HAL_GetTick>
 800d2a4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d101      	bne.n	800d2b6 <HAL_QSPI_AutoPolling+0x24>
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	e060      	b.n	800d378 <HAL_QSPI_AutoPolling+0xe6>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d14f      	bne.n	800d36a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2242      	movs	r2, #66	; 0x42
 800d2d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2120      	movs	r1, #32
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f000 fa09 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800d2ec:	7dfb      	ldrb	r3, [r7, #23]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d13d      	bne.n	800d36e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	6812      	ldr	r2, [r2, #0]
 800d2fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	6852      	ldr	r2, [r2, #4]
 800d304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	6892      	ldr	r2, [r2, #8]
 800d30e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	431a      	orrs	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800d328:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68da      	ldr	r2, [r3, #12]
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d336:	68b9      	ldr	r1, [r7, #8]
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f000 fa15 	bl	800d768 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	2201      	movs	r2, #1
 800d346:	2108      	movs	r1, #8
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 f9d6 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d34e:	4603      	mov	r3, r0
 800d350:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800d352:	7dfb      	ldrb	r3, [r7, #23]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2208      	movs	r2, #8
 800d35e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d368:	e001      	b.n	800d36e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800d36a:	2302      	movs	r3, #2
 800d36c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d376:	7dfb      	ldrb	r3, [r7, #23]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af02      	add	r7, sp, #8
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d38c:	f7fa fc14 	bl	8007bb8 <HAL_GetTick>
 800d390:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d101      	bne.n	800d3a2 <HAL_QSPI_MemoryMapped+0x22>
 800d39e:	2302      	movs	r3, #2
 800d3a0:	e04c      	b.n	800d43c <HAL_QSPI_MemoryMapped+0xbc>
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d13b      	bne.n	800d42e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2282      	movs	r2, #130	; 0x82
 800d3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2120      	movs	r1, #32
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f000 f992 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d128      	bne.n	800d432 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f023 0108 	bic.w	r1, r3, #8
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	430a      	orrs	r2, r1
 800d3f4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	2b08      	cmp	r3, #8
 800d3fc:	d110      	bne.n	800d420 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	6812      	ldr	r2, [r2, #0]
 800d406:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2210      	movs	r2, #16
 800d40e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d41e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d420:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 f99e 	bl	800d768 <QSPI_Config>
 800d42c:	e001      	b.n	800d432 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800d42e:	2302      	movs	r3, #2
 800d430:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800d43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800d44c:	bf00      	nop
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af02      	add	r7, sp, #8
 800d4ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800d4f0:	f7fa fb62 	bl	8007bb8 <HAL_GetTick>
 800d4f4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f003 0302 	and.w	r3, r3, #2
 800d502:	2b00      	cmp	r3, #0
 800d504:	d056      	beq.n	800d5b4 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f003 0304 	and.w	r3, r3, #4
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d017      	beq.n	800d54c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f022 0204 	bic.w	r2, r2, #4
 800d52a:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d530:	4618      	mov	r0, r3
 800d532:	f7fb facb 	bl	8008acc <HAL_DMA_Abort>
 800d536:	4603      	mov	r3, r0
 800d538:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d005      	beq.n	800d54c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d544:	f043 0204 	orr.w	r2, r3, #4
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f042 0202 	orr.w	r2, r2, #2
 800d55a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	2201      	movs	r2, #1
 800d566:	2102      	movs	r1, #2
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f8c6 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d56e:	4603      	mov	r3, r0
 800d570:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d572:	7bfb      	ldrb	r3, [r7, #15]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10e      	bne.n	800d596 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2202      	movs	r2, #2
 800d57e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2200      	movs	r2, #0
 800d58a:	2120      	movs	r1, #32
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 f8b4 	bl	800d6fa <QSPI_WaitFlagStateUntilTimeout>
 800d592:	4603      	mov	r3, r0
 800d594:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d596:	7bfb      	ldrb	r3, [r7, #15]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10b      	bne.n	800d5b4 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	695a      	ldr	r2, [r3, #20]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d5aa:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
	...

0800d5c0 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	f003 0302 	and.w	r3, r3, #2
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d046      	beq.n	800d66a <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2208      	movs	r2, #8
 800d5e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800d5fa:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f003 0304 	and.w	r3, r3, #4
 800d606:	2b00      	cmp	r3, #0
 800d608:	d01b      	beq.n	800d642 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f022 0204 	bic.w	r2, r2, #4
 800d618:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d61e:	4a15      	ldr	r2, [pc, #84]	; (800d674 <HAL_QSPI_Abort_IT+0xb4>)
 800d620:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d626:	4618      	mov	r0, r3
 800d628:	f7fb fac0 	bl	8008bac <HAL_DMA_Abort_IT>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d01b      	beq.n	800d66a <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff ff0c 	bl	800d458 <HAL_QSPI_AbortCpltCallback>
 800d640:	e013      	b.n	800d66a <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2202      	movs	r2, #2
 800d648:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d658:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f042 0202 	orr.w	r2, r2, #2
 800d668:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800d66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	0800d695 	.word	0x0800d695

0800d678 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	649a      	str	r2, [r3, #72]	; 0x48
}
 800d688:	bf00      	nop
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	2b08      	cmp	r3, #8
 800d6b8:	d114      	bne.n	800d6e4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	2202      	movs	r2, #2
 800d6c0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d6d0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f042 0202 	orr.w	r2, r2, #2
 800d6e0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800d6e2:	e006      	b.n	800d6f2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f7ff fea9 	bl	800d444 <HAL_QSPI_ErrorCallback>
}
 800d6f2:	bf00      	nop
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	60b9      	str	r1, [r7, #8]
 800d704:	603b      	str	r3, [r7, #0]
 800d706:	4613      	mov	r3, r2
 800d708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d70a:	e01a      	b.n	800d742 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d712:	d016      	beq.n	800d742 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d714:	f7fa fa50 	bl	8007bb8 <HAL_GetTick>
 800d718:	4602      	mov	r2, r0
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	429a      	cmp	r2, r3
 800d722:	d302      	bcc.n	800d72a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10b      	bne.n	800d742 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2204      	movs	r2, #4
 800d72e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d736:	f043 0201 	orr.w	r2, r3, #1
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	e00e      	b.n	800d760 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	689a      	ldr	r2, [r3, #8]
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	4013      	ands	r3, r2
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	bf14      	ite	ne
 800d750:	2301      	movne	r3, #1
 800d752:	2300      	moveq	r3, #0
 800d754:	b2db      	uxtb	r3, r3
 800d756:	461a      	mov	r2, r3
 800d758:	79fb      	ldrb	r3, [r7, #7]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d1d6      	bne.n	800d70c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d009      	beq.n	800d790 <QSPI_Config+0x28>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d782:	d005      	beq.n	800d790 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3a01      	subs	r2, #1
 800d78e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	f000 80b9 	beq.w	800d90c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d05f      	beq.n	800d862 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	6892      	ldr	r2, [r2, #8]
 800d7aa:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	69db      	ldr	r3, [r3, #28]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d031      	beq.n	800d818 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7bc:	431a      	orrs	r2, r3
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c8:	431a      	orrs	r2, r3
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	695b      	ldr	r3, [r3, #20]
 800d7ce:	049b      	lsls	r3, r3, #18
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	691b      	ldr	r3, [r3, #16]
 800d7d6:	431a      	orrs	r2, r3
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	6a1b      	ldr	r3, [r3, #32]
 800d7dc:	431a      	orrs	r2, r3
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	69db      	ldr	r3, [r3, #28]
 800d7e8:	431a      	orrs	r2, r3
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	431a      	orrs	r2, r3
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	ea42 0103 	orr.w	r1, r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	430a      	orrs	r2, r1
 800d800:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d808:	f000 812e 	beq.w	800da68 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68ba      	ldr	r2, [r7, #8]
 800d812:	6852      	ldr	r2, [r2, #4]
 800d814:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d816:	e127      	b.n	800da68 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d820:	431a      	orrs	r2, r3
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d826:	431a      	orrs	r2, r3
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82c:	431a      	orrs	r2, r3
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	049b      	lsls	r3, r3, #18
 800d834:	431a      	orrs	r2, r3
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	431a      	orrs	r2, r3
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	6a1b      	ldr	r3, [r3, #32]
 800d840:	431a      	orrs	r2, r3
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	69db      	ldr	r3, [r3, #28]
 800d846:	431a      	orrs	r2, r3
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	699b      	ldr	r3, [r3, #24]
 800d84c:	431a      	orrs	r2, r3
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	ea42 0103 	orr.w	r1, r2, r3
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	430a      	orrs	r2, r1
 800d85e:	615a      	str	r2, [r3, #20]
}
 800d860:	e102      	b.n	800da68 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d02e      	beq.n	800d8c8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d872:	431a      	orrs	r2, r3
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d878:	431a      	orrs	r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87e:	431a      	orrs	r2, r3
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	695b      	ldr	r3, [r3, #20]
 800d884:	049b      	lsls	r3, r3, #18
 800d886:	431a      	orrs	r2, r3
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	6a1b      	ldr	r3, [r3, #32]
 800d88c:	431a      	orrs	r2, r3
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	431a      	orrs	r2, r3
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	69db      	ldr	r3, [r3, #28]
 800d898:	431a      	orrs	r2, r3
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	431a      	orrs	r2, r3
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	ea42 0103 	orr.w	r1, r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	430a      	orrs	r2, r1
 800d8b0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d8b8:	f000 80d6 	beq.w	800da68 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	6852      	ldr	r2, [r2, #4]
 800d8c4:	619a      	str	r2, [r3, #24]
}
 800d8c6:	e0cf      	b.n	800da68 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8dc:	431a      	orrs	r2, r3
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	695b      	ldr	r3, [r3, #20]
 800d8e2:	049b      	lsls	r3, r3, #18
 800d8e4:	431a      	orrs	r2, r3
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	431a      	orrs	r2, r3
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	69db      	ldr	r3, [r3, #28]
 800d8f0:	431a      	orrs	r2, r3
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	699b      	ldr	r3, [r3, #24]
 800d8f6:	431a      	orrs	r2, r3
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	ea42 0103 	orr.w	r1, r2, r3
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	430a      	orrs	r2, r1
 800d908:	615a      	str	r2, [r3, #20]
}
 800d90a:	e0ad      	b.n	800da68 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d058      	beq.n	800d9c6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68ba      	ldr	r2, [r7, #8]
 800d91a:	6892      	ldr	r2, [r2, #8]
 800d91c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	69db      	ldr	r3, [r3, #28]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d02d      	beq.n	800d982 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92e:	431a      	orrs	r2, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d934:	431a      	orrs	r2, r3
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93a:	431a      	orrs	r2, r3
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	695b      	ldr	r3, [r3, #20]
 800d940:	049b      	lsls	r3, r3, #18
 800d942:	431a      	orrs	r2, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	431a      	orrs	r2, r3
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	431a      	orrs	r2, r3
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	431a      	orrs	r2, r3
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	69db      	ldr	r3, [r3, #28]
 800d95a:	431a      	orrs	r2, r3
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	ea42 0103 	orr.w	r1, r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	430a      	orrs	r2, r1
 800d96c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d974:	d078      	beq.n	800da68 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	6852      	ldr	r2, [r2, #4]
 800d97e:	619a      	str	r2, [r3, #24]
}
 800d980:	e072      	b.n	800da68 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d98a:	431a      	orrs	r2, r3
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d990:	431a      	orrs	r2, r3
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d996:	431a      	orrs	r2, r3
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	049b      	lsls	r3, r3, #18
 800d99e:	431a      	orrs	r2, r3
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	431a      	orrs	r2, r3
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	431a      	orrs	r2, r3
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	431a      	orrs	r2, r3
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	699b      	ldr	r3, [r3, #24]
 800d9b6:	ea42 0103 	orr.w	r1, r2, r3
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	430a      	orrs	r2, r1
 800d9c2:	615a      	str	r2, [r3, #20]
}
 800d9c4:	e050      	b.n	800da68 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	69db      	ldr	r3, [r3, #28]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d02a      	beq.n	800da24 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9dc:	431a      	orrs	r2, r3
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e2:	431a      	orrs	r2, r3
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	695b      	ldr	r3, [r3, #20]
 800d9e8:	049b      	lsls	r3, r3, #18
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	6a1b      	ldr	r3, [r3, #32]
 800d9f0:	431a      	orrs	r2, r3
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	69db      	ldr	r3, [r3, #28]
 800d9fc:	431a      	orrs	r2, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	ea42 0103 	orr.w	r1, r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	430a      	orrs	r2, r1
 800da0e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800da16:	d027      	beq.n	800da68 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	6852      	ldr	r2, [r2, #4]
 800da20:	619a      	str	r2, [r3, #24]
}
 800da22:	e021      	b.n	800da68 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d01d      	beq.n	800da68 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da34:	431a      	orrs	r2, r3
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da3a:	431a      	orrs	r2, r3
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da40:	431a      	orrs	r2, r3
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	695b      	ldr	r3, [r3, #20]
 800da46:	049b      	lsls	r3, r3, #18
 800da48:	431a      	orrs	r2, r3
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	6a1b      	ldr	r3, [r3, #32]
 800da4e:	431a      	orrs	r2, r3
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	69db      	ldr	r3, [r3, #28]
 800da54:	431a      	orrs	r2, r3
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	699b      	ldr	r3, [r3, #24]
 800da5a:	ea42 0103 	orr.w	r1, r2, r3
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	430a      	orrs	r2, r1
 800da66:	615a      	str	r2, [r3, #20]
}
 800da68:	bf00      	nop
 800da6a:	3714      	adds	r7, #20
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800da7c:	2300      	movs	r3, #0
 800da7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d101      	bne.n	800da8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800da86:	2301      	movs	r3, #1
 800da88:	e291      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	2b00      	cmp	r3, #0
 800da94:	f000 8087 	beq.w	800dba6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800da98:	4b96      	ldr	r3, [pc, #600]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	f003 030c 	and.w	r3, r3, #12
 800daa0:	2b04      	cmp	r3, #4
 800daa2:	d00c      	beq.n	800dabe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800daa4:	4b93      	ldr	r3, [pc, #588]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	f003 030c 	and.w	r3, r3, #12
 800daac:	2b08      	cmp	r3, #8
 800daae:	d112      	bne.n	800dad6 <HAL_RCC_OscConfig+0x62>
 800dab0:	4b90      	ldr	r3, [pc, #576]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dabc:	d10b      	bne.n	800dad6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dabe:	4b8d      	ldr	r3, [pc, #564]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d06c      	beq.n	800dba4 <HAL_RCC_OscConfig+0x130>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d168      	bne.n	800dba4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	e26b      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dade:	d106      	bne.n	800daee <HAL_RCC_OscConfig+0x7a>
 800dae0:	4b84      	ldr	r3, [pc, #528]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a83      	ldr	r2, [pc, #524]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800daea:	6013      	str	r3, [r2, #0]
 800daec:	e02e      	b.n	800db4c <HAL_RCC_OscConfig+0xd8>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d10c      	bne.n	800db10 <HAL_RCC_OscConfig+0x9c>
 800daf6:	4b7f      	ldr	r3, [pc, #508]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a7e      	ldr	r2, [pc, #504]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dafc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db00:	6013      	str	r3, [r2, #0]
 800db02:	4b7c      	ldr	r3, [pc, #496]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a7b      	ldr	r2, [pc, #492]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db0c:	6013      	str	r3, [r2, #0]
 800db0e:	e01d      	b.n	800db4c <HAL_RCC_OscConfig+0xd8>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db18:	d10c      	bne.n	800db34 <HAL_RCC_OscConfig+0xc0>
 800db1a:	4b76      	ldr	r3, [pc, #472]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a75      	ldr	r2, [pc, #468]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db24:	6013      	str	r3, [r2, #0]
 800db26:	4b73      	ldr	r3, [pc, #460]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a72      	ldr	r2, [pc, #456]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db30:	6013      	str	r3, [r2, #0]
 800db32:	e00b      	b.n	800db4c <HAL_RCC_OscConfig+0xd8>
 800db34:	4b6f      	ldr	r3, [pc, #444]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a6e      	ldr	r2, [pc, #440]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db3e:	6013      	str	r3, [r2, #0]
 800db40:	4b6c      	ldr	r3, [pc, #432]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a6b      	ldr	r2, [pc, #428]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d013      	beq.n	800db7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db54:	f7fa f830 	bl	8007bb8 <HAL_GetTick>
 800db58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db5a:	e008      	b.n	800db6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db5c:	f7fa f82c 	bl	8007bb8 <HAL_GetTick>
 800db60:	4602      	mov	r2, r0
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	1ad3      	subs	r3, r2, r3
 800db66:	2b64      	cmp	r3, #100	; 0x64
 800db68:	d901      	bls.n	800db6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db6a:	2303      	movs	r3, #3
 800db6c:	e21f      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db6e:	4b61      	ldr	r3, [pc, #388]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db76:	2b00      	cmp	r3, #0
 800db78:	d0f0      	beq.n	800db5c <HAL_RCC_OscConfig+0xe8>
 800db7a:	e014      	b.n	800dba6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db7c:	f7fa f81c 	bl	8007bb8 <HAL_GetTick>
 800db80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db82:	e008      	b.n	800db96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db84:	f7fa f818 	bl	8007bb8 <HAL_GetTick>
 800db88:	4602      	mov	r2, r0
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	2b64      	cmp	r3, #100	; 0x64
 800db90:	d901      	bls.n	800db96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800db92:	2303      	movs	r3, #3
 800db94:	e20b      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800db96:	4b57      	ldr	r3, [pc, #348]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1f0      	bne.n	800db84 <HAL_RCC_OscConfig+0x110>
 800dba2:	e000      	b.n	800dba6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f003 0302 	and.w	r3, r3, #2
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d069      	beq.n	800dc86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dbb2:	4b50      	ldr	r3, [pc, #320]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	f003 030c 	and.w	r3, r3, #12
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00b      	beq.n	800dbd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dbbe:	4b4d      	ldr	r3, [pc, #308]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	f003 030c 	and.w	r3, r3, #12
 800dbc6:	2b08      	cmp	r3, #8
 800dbc8:	d11c      	bne.n	800dc04 <HAL_RCC_OscConfig+0x190>
 800dbca:	4b4a      	ldr	r3, [pc, #296]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d116      	bne.n	800dc04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dbd6:	4b47      	ldr	r3, [pc, #284]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d005      	beq.n	800dbee <HAL_RCC_OscConfig+0x17a>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d001      	beq.n	800dbee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	e1df      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbee:	4b41      	ldr	r3, [pc, #260]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	493d      	ldr	r1, [pc, #244]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dc02:	e040      	b.n	800dc86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d023      	beq.n	800dc54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dc0c:	4b39      	ldr	r3, [pc, #228]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a38      	ldr	r2, [pc, #224]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc12:	f043 0301 	orr.w	r3, r3, #1
 800dc16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc18:	f7f9 ffce 	bl	8007bb8 <HAL_GetTick>
 800dc1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc1e:	e008      	b.n	800dc32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc20:	f7f9 ffca 	bl	8007bb8 <HAL_GetTick>
 800dc24:	4602      	mov	r2, r0
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	d901      	bls.n	800dc32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	e1bd      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc32:	4b30      	ldr	r3, [pc, #192]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f003 0302 	and.w	r3, r3, #2
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d0f0      	beq.n	800dc20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc3e:	4b2d      	ldr	r3, [pc, #180]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	00db      	lsls	r3, r3, #3
 800dc4c:	4929      	ldr	r1, [pc, #164]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	600b      	str	r3, [r1, #0]
 800dc52:	e018      	b.n	800dc86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dc54:	4b27      	ldr	r3, [pc, #156]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a26      	ldr	r2, [pc, #152]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc5a:	f023 0301 	bic.w	r3, r3, #1
 800dc5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc60:	f7f9 ffaa 	bl	8007bb8 <HAL_GetTick>
 800dc64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dc66:	e008      	b.n	800dc7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc68:	f7f9 ffa6 	bl	8007bb8 <HAL_GetTick>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	2b02      	cmp	r3, #2
 800dc74:	d901      	bls.n	800dc7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e199      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dc7a:	4b1e      	ldr	r3, [pc, #120]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0302 	and.w	r3, r3, #2
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1f0      	bne.n	800dc68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 0308 	and.w	r3, r3, #8
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d038      	beq.n	800dd04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	695b      	ldr	r3, [r3, #20]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d019      	beq.n	800dcce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dc9a:	4b16      	ldr	r3, [pc, #88]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dc9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc9e:	4a15      	ldr	r2, [pc, #84]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dca0:	f043 0301 	orr.w	r3, r3, #1
 800dca4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dca6:	f7f9 ff87 	bl	8007bb8 <HAL_GetTick>
 800dcaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dcac:	e008      	b.n	800dcc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dcae:	f7f9 ff83 	bl	8007bb8 <HAL_GetTick>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	d901      	bls.n	800dcc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800dcbc:	2303      	movs	r3, #3
 800dcbe:	e176      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dcc0:	4b0c      	ldr	r3, [pc, #48]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dcc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcc4:	f003 0302 	and.w	r3, r3, #2
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d0f0      	beq.n	800dcae <HAL_RCC_OscConfig+0x23a>
 800dccc:	e01a      	b.n	800dd04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dcce:	4b09      	ldr	r3, [pc, #36]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dcd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd2:	4a08      	ldr	r2, [pc, #32]	; (800dcf4 <HAL_RCC_OscConfig+0x280>)
 800dcd4:	f023 0301 	bic.w	r3, r3, #1
 800dcd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcda:	f7f9 ff6d 	bl	8007bb8 <HAL_GetTick>
 800dcde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dce0:	e00a      	b.n	800dcf8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dce2:	f7f9 ff69 	bl	8007bb8 <HAL_GetTick>
 800dce6:	4602      	mov	r2, r0
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d903      	bls.n	800dcf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e15c      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
 800dcf4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dcf8:	4b91      	ldr	r3, [pc, #580]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dcfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcfc:	f003 0302 	and.w	r3, r3, #2
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1ee      	bne.n	800dce2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f003 0304 	and.w	r3, r3, #4
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f000 80a4 	beq.w	800de5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dd12:	4b8b      	ldr	r3, [pc, #556]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10d      	bne.n	800dd3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800dd1e:	4b88      	ldr	r3, [pc, #544]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd22:	4a87      	ldr	r2, [pc, #540]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dd24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd28:	6413      	str	r3, [r2, #64]	; 0x40
 800dd2a:	4b85      	ldr	r3, [pc, #532]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd32:	60bb      	str	r3, [r7, #8]
 800dd34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dd36:	2301      	movs	r3, #1
 800dd38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd3a:	4b82      	ldr	r3, [pc, #520]	; (800df44 <HAL_RCC_OscConfig+0x4d0>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d118      	bne.n	800dd78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800dd46:	4b7f      	ldr	r3, [pc, #508]	; (800df44 <HAL_RCC_OscConfig+0x4d0>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a7e      	ldr	r2, [pc, #504]	; (800df44 <HAL_RCC_OscConfig+0x4d0>)
 800dd4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dd52:	f7f9 ff31 	bl	8007bb8 <HAL_GetTick>
 800dd56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd58:	e008      	b.n	800dd6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd5a:	f7f9 ff2d 	bl	8007bb8 <HAL_GetTick>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	2b64      	cmp	r3, #100	; 0x64
 800dd66:	d901      	bls.n	800dd6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	e120      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd6c:	4b75      	ldr	r3, [pc, #468]	; (800df44 <HAL_RCC_OscConfig+0x4d0>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d0f0      	beq.n	800dd5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d106      	bne.n	800dd8e <HAL_RCC_OscConfig+0x31a>
 800dd80:	4b6f      	ldr	r3, [pc, #444]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dd82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd84:	4a6e      	ldr	r2, [pc, #440]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dd86:	f043 0301 	orr.w	r3, r3, #1
 800dd8a:	6713      	str	r3, [r2, #112]	; 0x70
 800dd8c:	e02d      	b.n	800ddea <HAL_RCC_OscConfig+0x376>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10c      	bne.n	800ddb0 <HAL_RCC_OscConfig+0x33c>
 800dd96:	4b6a      	ldr	r3, [pc, #424]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd9a:	4a69      	ldr	r2, [pc, #420]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dd9c:	f023 0301 	bic.w	r3, r3, #1
 800dda0:	6713      	str	r3, [r2, #112]	; 0x70
 800dda2:	4b67      	ldr	r3, [pc, #412]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda6:	4a66      	ldr	r2, [pc, #408]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dda8:	f023 0304 	bic.w	r3, r3, #4
 800ddac:	6713      	str	r3, [r2, #112]	; 0x70
 800ddae:	e01c      	b.n	800ddea <HAL_RCC_OscConfig+0x376>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	2b05      	cmp	r3, #5
 800ddb6:	d10c      	bne.n	800ddd2 <HAL_RCC_OscConfig+0x35e>
 800ddb8:	4b61      	ldr	r3, [pc, #388]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800ddba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddbc:	4a60      	ldr	r2, [pc, #384]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800ddbe:	f043 0304 	orr.w	r3, r3, #4
 800ddc2:	6713      	str	r3, [r2, #112]	; 0x70
 800ddc4:	4b5e      	ldr	r3, [pc, #376]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800ddc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc8:	4a5d      	ldr	r2, [pc, #372]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800ddca:	f043 0301 	orr.w	r3, r3, #1
 800ddce:	6713      	str	r3, [r2, #112]	; 0x70
 800ddd0:	e00b      	b.n	800ddea <HAL_RCC_OscConfig+0x376>
 800ddd2:	4b5b      	ldr	r3, [pc, #364]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800ddd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd6:	4a5a      	ldr	r2, [pc, #360]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800ddd8:	f023 0301 	bic.w	r3, r3, #1
 800dddc:	6713      	str	r3, [r2, #112]	; 0x70
 800ddde:	4b58      	ldr	r3, [pc, #352]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dde0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde2:	4a57      	ldr	r2, [pc, #348]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dde4:	f023 0304 	bic.w	r3, r3, #4
 800dde8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d015      	beq.n	800de1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddf2:	f7f9 fee1 	bl	8007bb8 <HAL_GetTick>
 800ddf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ddf8:	e00a      	b.n	800de10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddfa:	f7f9 fedd 	bl	8007bb8 <HAL_GetTick>
 800ddfe:	4602      	mov	r2, r0
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	f241 3288 	movw	r2, #5000	; 0x1388
 800de08:	4293      	cmp	r3, r2
 800de0a:	d901      	bls.n	800de10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800de0c:	2303      	movs	r3, #3
 800de0e:	e0ce      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de10:	4b4b      	ldr	r3, [pc, #300]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800de12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de14:	f003 0302 	and.w	r3, r3, #2
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d0ee      	beq.n	800ddfa <HAL_RCC_OscConfig+0x386>
 800de1c:	e014      	b.n	800de48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de1e:	f7f9 fecb 	bl	8007bb8 <HAL_GetTick>
 800de22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de24:	e00a      	b.n	800de3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de26:	f7f9 fec7 	bl	8007bb8 <HAL_GetTick>
 800de2a:	4602      	mov	r2, r0
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	1ad3      	subs	r3, r2, r3
 800de30:	f241 3288 	movw	r2, #5000	; 0x1388
 800de34:	4293      	cmp	r3, r2
 800de36:	d901      	bls.n	800de3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800de38:	2303      	movs	r3, #3
 800de3a:	e0b8      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de3c:	4b40      	ldr	r3, [pc, #256]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800de3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de40:	f003 0302 	and.w	r3, r3, #2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1ee      	bne.n	800de26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d105      	bne.n	800de5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800de4e:	4b3c      	ldr	r3, [pc, #240]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800de50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de52:	4a3b      	ldr	r2, [pc, #236]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800de54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	f000 80a4 	beq.w	800dfac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800de64:	4b36      	ldr	r3, [pc, #216]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	f003 030c 	and.w	r3, r3, #12
 800de6c:	2b08      	cmp	r3, #8
 800de6e:	d06b      	beq.n	800df48 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	699b      	ldr	r3, [r3, #24]
 800de74:	2b02      	cmp	r3, #2
 800de76:	d149      	bne.n	800df0c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de78:	4b31      	ldr	r3, [pc, #196]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a30      	ldr	r2, [pc, #192]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800de7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de84:	f7f9 fe98 	bl	8007bb8 <HAL_GetTick>
 800de88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de8a:	e008      	b.n	800de9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de8c:	f7f9 fe94 	bl	8007bb8 <HAL_GetTick>
 800de90:	4602      	mov	r2, r0
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	1ad3      	subs	r3, r2, r3
 800de96:	2b02      	cmp	r3, #2
 800de98:	d901      	bls.n	800de9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800de9a:	2303      	movs	r3, #3
 800de9c:	e087      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de9e:	4b28      	ldr	r3, [pc, #160]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d1f0      	bne.n	800de8c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	69da      	ldr	r2, [r3, #28]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6a1b      	ldr	r3, [r3, #32]
 800deb2:	431a      	orrs	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb8:	019b      	lsls	r3, r3, #6
 800deba:	431a      	orrs	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec0:	085b      	lsrs	r3, r3, #1
 800dec2:	3b01      	subs	r3, #1
 800dec4:	041b      	lsls	r3, r3, #16
 800dec6:	431a      	orrs	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800decc:	061b      	lsls	r3, r3, #24
 800dece:	4313      	orrs	r3, r2
 800ded0:	4a1b      	ldr	r2, [pc, #108]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800ded2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ded6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ded8:	4b19      	ldr	r3, [pc, #100]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a18      	ldr	r2, [pc, #96]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800dede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dee4:	f7f9 fe68 	bl	8007bb8 <HAL_GetTick>
 800dee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800deea:	e008      	b.n	800defe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800deec:	f7f9 fe64 	bl	8007bb8 <HAL_GetTick>
 800def0:	4602      	mov	r2, r0
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	1ad3      	subs	r3, r2, r3
 800def6:	2b02      	cmp	r3, #2
 800def8:	d901      	bls.n	800defe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800defa:	2303      	movs	r3, #3
 800defc:	e057      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800defe:	4b10      	ldr	r3, [pc, #64]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df06:	2b00      	cmp	r3, #0
 800df08:	d0f0      	beq.n	800deec <HAL_RCC_OscConfig+0x478>
 800df0a:	e04f      	b.n	800dfac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df0c:	4b0c      	ldr	r3, [pc, #48]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a0b      	ldr	r2, [pc, #44]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800df12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df18:	f7f9 fe4e 	bl	8007bb8 <HAL_GetTick>
 800df1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df1e:	e008      	b.n	800df32 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df20:	f7f9 fe4a 	bl	8007bb8 <HAL_GetTick>
 800df24:	4602      	mov	r2, r0
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d901      	bls.n	800df32 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800df2e:	2303      	movs	r3, #3
 800df30:	e03d      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df32:	4b03      	ldr	r3, [pc, #12]	; (800df40 <HAL_RCC_OscConfig+0x4cc>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d1f0      	bne.n	800df20 <HAL_RCC_OscConfig+0x4ac>
 800df3e:	e035      	b.n	800dfac <HAL_RCC_OscConfig+0x538>
 800df40:	40023800 	.word	0x40023800
 800df44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800df48:	4b1b      	ldr	r3, [pc, #108]	; (800dfb8 <HAL_RCC_OscConfig+0x544>)
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	699b      	ldr	r3, [r3, #24]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d028      	beq.n	800dfa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800df60:	429a      	cmp	r2, r3
 800df62:	d121      	bne.n	800dfa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800df6e:	429a      	cmp	r2, r3
 800df70:	d11a      	bne.n	800dfa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800df78:	4013      	ands	r3, r2
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800df7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800df80:	4293      	cmp	r3, r2
 800df82:	d111      	bne.n	800dfa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df8e:	085b      	lsrs	r3, r3, #1
 800df90:	3b01      	subs	r3, #1
 800df92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800df94:	429a      	cmp	r2, r3
 800df96:	d107      	bne.n	800dfa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d001      	beq.n	800dfac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e000      	b.n	800dfae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3718      	adds	r7, #24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	40023800 	.word	0x40023800

0800dfbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d101      	bne.n	800dfd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e0d0      	b.n	800e176 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dfd4:	4b6a      	ldr	r3, [pc, #424]	; (800e180 <HAL_RCC_ClockConfig+0x1c4>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f003 030f 	and.w	r3, r3, #15
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d910      	bls.n	800e004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dfe2:	4b67      	ldr	r3, [pc, #412]	; (800e180 <HAL_RCC_ClockConfig+0x1c4>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f023 020f 	bic.w	r2, r3, #15
 800dfea:	4965      	ldr	r1, [pc, #404]	; (800e180 <HAL_RCC_ClockConfig+0x1c4>)
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	4313      	orrs	r3, r2
 800dff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dff2:	4b63      	ldr	r3, [pc, #396]	; (800e180 <HAL_RCC_ClockConfig+0x1c4>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f003 030f 	and.w	r3, r3, #15
 800dffa:	683a      	ldr	r2, [r7, #0]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d001      	beq.n	800e004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e0b8      	b.n	800e176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 0302 	and.w	r3, r3, #2
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d020      	beq.n	800e052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f003 0304 	and.w	r3, r3, #4
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d005      	beq.n	800e028 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e01c:	4b59      	ldr	r3, [pc, #356]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	4a58      	ldr	r2, [pc, #352]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f003 0308 	and.w	r3, r3, #8
 800e030:	2b00      	cmp	r3, #0
 800e032:	d005      	beq.n	800e040 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e034:	4b53      	ldr	r3, [pc, #332]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	4a52      	ldr	r2, [pc, #328]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e03a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e03e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e040:	4b50      	ldr	r3, [pc, #320]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	494d      	ldr	r1, [pc, #308]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e04e:	4313      	orrs	r3, r2
 800e050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d040      	beq.n	800e0e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d107      	bne.n	800e076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e066:	4b47      	ldr	r3, [pc, #284]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d115      	bne.n	800e09e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	e07f      	b.n	800e176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d107      	bne.n	800e08e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e07e:	4b41      	ldr	r3, [pc, #260]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e086:	2b00      	cmp	r3, #0
 800e088:	d109      	bne.n	800e09e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e073      	b.n	800e176 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e08e:	4b3d      	ldr	r3, [pc, #244]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 0302 	and.w	r3, r3, #2
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	e06b      	b.n	800e176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e09e:	4b39      	ldr	r3, [pc, #228]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f023 0203 	bic.w	r2, r3, #3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	4936      	ldr	r1, [pc, #216]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0b0:	f7f9 fd82 	bl	8007bb8 <HAL_GetTick>
 800e0b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0b6:	e00a      	b.n	800e0ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e0b8:	f7f9 fd7e 	bl	8007bb8 <HAL_GetTick>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d901      	bls.n	800e0ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800e0ca:	2303      	movs	r3, #3
 800e0cc:	e053      	b.n	800e176 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0ce:	4b2d      	ldr	r3, [pc, #180]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	f003 020c 	and.w	r2, r3, #12
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d1eb      	bne.n	800e0b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e0e0:	4b27      	ldr	r3, [pc, #156]	; (800e180 <HAL_RCC_ClockConfig+0x1c4>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f003 030f 	and.w	r3, r3, #15
 800e0e8:	683a      	ldr	r2, [r7, #0]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d210      	bcs.n	800e110 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e0ee:	4b24      	ldr	r3, [pc, #144]	; (800e180 <HAL_RCC_ClockConfig+0x1c4>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f023 020f 	bic.w	r2, r3, #15
 800e0f6:	4922      	ldr	r1, [pc, #136]	; (800e180 <HAL_RCC_ClockConfig+0x1c4>)
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0fe:	4b20      	ldr	r3, [pc, #128]	; (800e180 <HAL_RCC_ClockConfig+0x1c4>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 030f 	and.w	r3, r3, #15
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d001      	beq.n	800e110 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e032      	b.n	800e176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f003 0304 	and.w	r3, r3, #4
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d008      	beq.n	800e12e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e11c:	4b19      	ldr	r3, [pc, #100]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	4916      	ldr	r1, [pc, #88]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e12a:	4313      	orrs	r3, r2
 800e12c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f003 0308 	and.w	r3, r3, #8
 800e136:	2b00      	cmp	r3, #0
 800e138:	d009      	beq.n	800e14e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e13a:	4b12      	ldr	r3, [pc, #72]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e13c:	689b      	ldr	r3, [r3, #8]
 800e13e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	691b      	ldr	r3, [r3, #16]
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	490e      	ldr	r1, [pc, #56]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e14a:	4313      	orrs	r3, r2
 800e14c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e14e:	f000 f821 	bl	800e194 <HAL_RCC_GetSysClockFreq>
 800e152:	4602      	mov	r2, r0
 800e154:	4b0b      	ldr	r3, [pc, #44]	; (800e184 <HAL_RCC_ClockConfig+0x1c8>)
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	091b      	lsrs	r3, r3, #4
 800e15a:	f003 030f 	and.w	r3, r3, #15
 800e15e:	490a      	ldr	r1, [pc, #40]	; (800e188 <HAL_RCC_ClockConfig+0x1cc>)
 800e160:	5ccb      	ldrb	r3, [r1, r3]
 800e162:	fa22 f303 	lsr.w	r3, r2, r3
 800e166:	4a09      	ldr	r2, [pc, #36]	; (800e18c <HAL_RCC_ClockConfig+0x1d0>)
 800e168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800e16a:	4b09      	ldr	r3, [pc, #36]	; (800e190 <HAL_RCC_ClockConfig+0x1d4>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f6 f95a 	bl	8004428 <HAL_InitTick>

  return HAL_OK;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	40023c00 	.word	0x40023c00
 800e184:	40023800 	.word	0x40023800
 800e188:	0801ccb4 	.word	0x0801ccb4
 800e18c:	20000028 	.word	0x20000028
 800e190:	20000050 	.word	0x20000050

0800e194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e194:	b5b0      	push	{r4, r5, r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800e19a:	2100      	movs	r1, #0
 800e19c:	6079      	str	r1, [r7, #4]
 800e19e:	2100      	movs	r1, #0
 800e1a0:	60f9      	str	r1, [r7, #12]
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e1aa:	4952      	ldr	r1, [pc, #328]	; (800e2f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e1ac:	6889      	ldr	r1, [r1, #8]
 800e1ae:	f001 010c 	and.w	r1, r1, #12
 800e1b2:	2908      	cmp	r1, #8
 800e1b4:	d00d      	beq.n	800e1d2 <HAL_RCC_GetSysClockFreq+0x3e>
 800e1b6:	2908      	cmp	r1, #8
 800e1b8:	f200 8094 	bhi.w	800e2e4 <HAL_RCC_GetSysClockFreq+0x150>
 800e1bc:	2900      	cmp	r1, #0
 800e1be:	d002      	beq.n	800e1c6 <HAL_RCC_GetSysClockFreq+0x32>
 800e1c0:	2904      	cmp	r1, #4
 800e1c2:	d003      	beq.n	800e1cc <HAL_RCC_GetSysClockFreq+0x38>
 800e1c4:	e08e      	b.n	800e2e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e1c6:	4b4c      	ldr	r3, [pc, #304]	; (800e2f8 <HAL_RCC_GetSysClockFreq+0x164>)
 800e1c8:	60bb      	str	r3, [r7, #8]
      break;
 800e1ca:	e08e      	b.n	800e2ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e1cc:	4b4b      	ldr	r3, [pc, #300]	; (800e2fc <HAL_RCC_GetSysClockFreq+0x168>)
 800e1ce:	60bb      	str	r3, [r7, #8]
      break;
 800e1d0:	e08b      	b.n	800e2ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e1d2:	4948      	ldr	r1, [pc, #288]	; (800e2f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e1d4:	6849      	ldr	r1, [r1, #4]
 800e1d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e1da:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e1dc:	4945      	ldr	r1, [pc, #276]	; (800e2f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e1de:	6849      	ldr	r1, [r1, #4]
 800e1e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e1e4:	2900      	cmp	r1, #0
 800e1e6:	d024      	beq.n	800e232 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e1e8:	4942      	ldr	r1, [pc, #264]	; (800e2f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e1ea:	6849      	ldr	r1, [r1, #4]
 800e1ec:	0989      	lsrs	r1, r1, #6
 800e1ee:	4608      	mov	r0, r1
 800e1f0:	f04f 0100 	mov.w	r1, #0
 800e1f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e1f8:	f04f 0500 	mov.w	r5, #0
 800e1fc:	ea00 0204 	and.w	r2, r0, r4
 800e200:	ea01 0305 	and.w	r3, r1, r5
 800e204:	493d      	ldr	r1, [pc, #244]	; (800e2fc <HAL_RCC_GetSysClockFreq+0x168>)
 800e206:	fb01 f003 	mul.w	r0, r1, r3
 800e20a:	2100      	movs	r1, #0
 800e20c:	fb01 f102 	mul.w	r1, r1, r2
 800e210:	1844      	adds	r4, r0, r1
 800e212:	493a      	ldr	r1, [pc, #232]	; (800e2fc <HAL_RCC_GetSysClockFreq+0x168>)
 800e214:	fba2 0101 	umull	r0, r1, r2, r1
 800e218:	1863      	adds	r3, r4, r1
 800e21a:	4619      	mov	r1, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	461a      	mov	r2, r3
 800e220:	f04f 0300 	mov.w	r3, #0
 800e224:	f7f2 fd6a 	bl	8000cfc <__aeabi_uldivmod>
 800e228:	4602      	mov	r2, r0
 800e22a:	460b      	mov	r3, r1
 800e22c:	4613      	mov	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	e04a      	b.n	800e2c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e232:	4b30      	ldr	r3, [pc, #192]	; (800e2f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	099b      	lsrs	r3, r3, #6
 800e238:	461a      	mov	r2, r3
 800e23a:	f04f 0300 	mov.w	r3, #0
 800e23e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e242:	f04f 0100 	mov.w	r1, #0
 800e246:	ea02 0400 	and.w	r4, r2, r0
 800e24a:	ea03 0501 	and.w	r5, r3, r1
 800e24e:	4620      	mov	r0, r4
 800e250:	4629      	mov	r1, r5
 800e252:	f04f 0200 	mov.w	r2, #0
 800e256:	f04f 0300 	mov.w	r3, #0
 800e25a:	014b      	lsls	r3, r1, #5
 800e25c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e260:	0142      	lsls	r2, r0, #5
 800e262:	4610      	mov	r0, r2
 800e264:	4619      	mov	r1, r3
 800e266:	1b00      	subs	r0, r0, r4
 800e268:	eb61 0105 	sbc.w	r1, r1, r5
 800e26c:	f04f 0200 	mov.w	r2, #0
 800e270:	f04f 0300 	mov.w	r3, #0
 800e274:	018b      	lsls	r3, r1, #6
 800e276:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e27a:	0182      	lsls	r2, r0, #6
 800e27c:	1a12      	subs	r2, r2, r0
 800e27e:	eb63 0301 	sbc.w	r3, r3, r1
 800e282:	f04f 0000 	mov.w	r0, #0
 800e286:	f04f 0100 	mov.w	r1, #0
 800e28a:	00d9      	lsls	r1, r3, #3
 800e28c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e290:	00d0      	lsls	r0, r2, #3
 800e292:	4602      	mov	r2, r0
 800e294:	460b      	mov	r3, r1
 800e296:	1912      	adds	r2, r2, r4
 800e298:	eb45 0303 	adc.w	r3, r5, r3
 800e29c:	f04f 0000 	mov.w	r0, #0
 800e2a0:	f04f 0100 	mov.w	r1, #0
 800e2a4:	0299      	lsls	r1, r3, #10
 800e2a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e2aa:	0290      	lsls	r0, r2, #10
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	f04f 0300 	mov.w	r3, #0
 800e2bc:	f7f2 fd1e 	bl	8000cfc <__aeabi_uldivmod>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e2c8:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	0c1b      	lsrs	r3, r3, #16
 800e2ce:	f003 0303 	and.w	r3, r3, #3
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e0:	60bb      	str	r3, [r7, #8]
      break;
 800e2e2:	e002      	b.n	800e2ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e2e4:	4b04      	ldr	r3, [pc, #16]	; (800e2f8 <HAL_RCC_GetSysClockFreq+0x164>)
 800e2e6:	60bb      	str	r3, [r7, #8]
      break;
 800e2e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e2ea:	68bb      	ldr	r3, [r7, #8]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bdb0      	pop	{r4, r5, r7, pc}
 800e2f4:	40023800 	.word	0x40023800
 800e2f8:	00f42400 	.word	0x00f42400
 800e2fc:	017d7840 	.word	0x017d7840

0800e300 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e300:	b480      	push	{r7}
 800e302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e304:	4b03      	ldr	r3, [pc, #12]	; (800e314 <HAL_RCC_GetHCLKFreq+0x14>)
 800e306:	681b      	ldr	r3, [r3, #0]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	20000028 	.word	0x20000028

0800e318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e31c:	f7ff fff0 	bl	800e300 <HAL_RCC_GetHCLKFreq>
 800e320:	4602      	mov	r2, r0
 800e322:	4b05      	ldr	r3, [pc, #20]	; (800e338 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	0a9b      	lsrs	r3, r3, #10
 800e328:	f003 0307 	and.w	r3, r3, #7
 800e32c:	4903      	ldr	r1, [pc, #12]	; (800e33c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e32e:	5ccb      	ldrb	r3, [r1, r3]
 800e330:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e334:	4618      	mov	r0, r3
 800e336:	bd80      	pop	{r7, pc}
 800e338:	40023800 	.word	0x40023800
 800e33c:	0801ccc4 	.word	0x0801ccc4

0800e340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e344:	f7ff ffdc 	bl	800e300 <HAL_RCC_GetHCLKFreq>
 800e348:	4602      	mov	r2, r0
 800e34a:	4b05      	ldr	r3, [pc, #20]	; (800e360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	0b5b      	lsrs	r3, r3, #13
 800e350:	f003 0307 	and.w	r3, r3, #7
 800e354:	4903      	ldr	r1, [pc, #12]	; (800e364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e356:	5ccb      	ldrb	r3, [r1, r3]
 800e358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	40023800 	.word	0x40023800
 800e364:	0801ccc4 	.word	0x0801ccc4

0800e368 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	220f      	movs	r2, #15
 800e376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e378:	4b12      	ldr	r3, [pc, #72]	; (800e3c4 <HAL_RCC_GetClockConfig+0x5c>)
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	f003 0203 	and.w	r2, r3, #3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e384:	4b0f      	ldr	r3, [pc, #60]	; (800e3c4 <HAL_RCC_GetClockConfig+0x5c>)
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e390:	4b0c      	ldr	r3, [pc, #48]	; (800e3c4 <HAL_RCC_GetClockConfig+0x5c>)
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e39c:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <HAL_RCC_GetClockConfig+0x5c>)
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	08db      	lsrs	r3, r3, #3
 800e3a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e3aa:	4b07      	ldr	r3, [pc, #28]	; (800e3c8 <HAL_RCC_GetClockConfig+0x60>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f003 020f 	and.w	r2, r3, #15
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	601a      	str	r2, [r3, #0]
}
 800e3b6:	bf00      	nop
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	40023800 	.word	0x40023800
 800e3c8:	40023c00 	.word	0x40023c00

0800e3cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b088      	sub	sp, #32
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d012      	beq.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e3f4:	4b69      	ldr	r3, [pc, #420]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	4a68      	ldr	r2, [pc, #416]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e3fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e3fe:	6093      	str	r3, [r2, #8]
 800e400:	4b66      	ldr	r3, [pc, #408]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e402:	689a      	ldr	r2, [r3, #8]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e408:	4964      	ldr	r1, [pc, #400]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e40a:	4313      	orrs	r3, r2
 800e40c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e416:	2301      	movs	r3, #1
 800e418:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e422:	2b00      	cmp	r3, #0
 800e424:	d017      	beq.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e426:	4b5d      	ldr	r3, [pc, #372]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e42c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e434:	4959      	ldr	r1, [pc, #356]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e436:	4313      	orrs	r3, r2
 800e438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e444:	d101      	bne.n	800e44a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e446:	2301      	movs	r3, #1
 800e448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e452:	2301      	movs	r3, #1
 800e454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d017      	beq.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e462:	4b4e      	ldr	r3, [pc, #312]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e468:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e470:	494a      	ldr	r1, [pc, #296]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e472:	4313      	orrs	r3, r2
 800e474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e47c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e480:	d101      	bne.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e482:	2301      	movs	r3, #1
 800e484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d101      	bne.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e48e:	2301      	movs	r3, #1
 800e490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d001      	beq.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f003 0320 	and.w	r3, r3, #32
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 808b 	beq.w	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e4b0:	4b3a      	ldr	r3, [pc, #232]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b4:	4a39      	ldr	r2, [pc, #228]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4ba:	6413      	str	r3, [r2, #64]	; 0x40
 800e4bc:	4b37      	ldr	r3, [pc, #220]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4c4:	60bb      	str	r3, [r7, #8]
 800e4c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e4c8:	4b35      	ldr	r3, [pc, #212]	; (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a34      	ldr	r2, [pc, #208]	; (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e4ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4d4:	f7f9 fb70 	bl	8007bb8 <HAL_GetTick>
 800e4d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e4da:	e008      	b.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e4dc:	f7f9 fb6c 	bl	8007bb8 <HAL_GetTick>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	1ad3      	subs	r3, r2, r3
 800e4e6:	2b64      	cmp	r3, #100	; 0x64
 800e4e8:	d901      	bls.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	e357      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e4ee:	4b2c      	ldr	r3, [pc, #176]	; (800e5a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d0f0      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e4fa:	4b28      	ldr	r3, [pc, #160]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e502:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d035      	beq.n	800e576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e512:	693a      	ldr	r2, [r7, #16]
 800e514:	429a      	cmp	r2, r3
 800e516:	d02e      	beq.n	800e576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e518:	4b20      	ldr	r3, [pc, #128]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e51a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e51c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e520:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e522:	4b1e      	ldr	r3, [pc, #120]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e526:	4a1d      	ldr	r2, [pc, #116]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e52c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e52e:	4b1b      	ldr	r3, [pc, #108]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e532:	4a1a      	ldr	r2, [pc, #104]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e538:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e53a:	4a18      	ldr	r2, [pc, #96]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e540:	4b16      	ldr	r3, [pc, #88]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d114      	bne.n	800e576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e54c:	f7f9 fb34 	bl	8007bb8 <HAL_GetTick>
 800e550:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e552:	e00a      	b.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e554:	f7f9 fb30 	bl	8007bb8 <HAL_GetTick>
 800e558:	4602      	mov	r2, r0
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	1ad3      	subs	r3, r2, r3
 800e55e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e562:	4293      	cmp	r3, r2
 800e564:	d901      	bls.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e566:	2303      	movs	r3, #3
 800e568:	e319      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e56a:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e56e:	f003 0302 	and.w	r3, r3, #2
 800e572:	2b00      	cmp	r3, #0
 800e574:	d0ee      	beq.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e57a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e57e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e582:	d111      	bne.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e584:	4b05      	ldr	r3, [pc, #20]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e590:	4b04      	ldr	r3, [pc, #16]	; (800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e592:	400b      	ands	r3, r1
 800e594:	4901      	ldr	r1, [pc, #4]	; (800e59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e596:	4313      	orrs	r3, r2
 800e598:	608b      	str	r3, [r1, #8]
 800e59a:	e00b      	b.n	800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e59c:	40023800 	.word	0x40023800
 800e5a0:	40007000 	.word	0x40007000
 800e5a4:	0ffffcff 	.word	0x0ffffcff
 800e5a8:	4bb1      	ldr	r3, [pc, #708]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	4ab0      	ldr	r2, [pc, #704]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e5ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e5b2:	6093      	str	r3, [r2, #8]
 800e5b4:	4bae      	ldr	r3, [pc, #696]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e5b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5c0:	49ab      	ldr	r1, [pc, #684]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f003 0310 	and.w	r3, r3, #16
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d010      	beq.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e5d2:	4ba7      	ldr	r3, [pc, #668]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e5d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5d8:	4aa5      	ldr	r2, [pc, #660]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e5da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e5de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e5e2:	4ba3      	ldr	r3, [pc, #652]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e5e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ec:	49a0      	ldr	r1, [pc, #640]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00a      	beq.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e600:	4b9b      	ldr	r3, [pc, #620]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e606:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e60e:	4998      	ldr	r1, [pc, #608]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e610:	4313      	orrs	r3, r2
 800e612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d00a      	beq.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e622:	4b93      	ldr	r3, [pc, #588]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e628:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e630:	498f      	ldr	r1, [pc, #572]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e632:	4313      	orrs	r3, r2
 800e634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00a      	beq.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e644:	4b8a      	ldr	r3, [pc, #552]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e64a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e652:	4987      	ldr	r1, [pc, #540]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e654:	4313      	orrs	r3, r2
 800e656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00a      	beq.n	800e67c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e666:	4b82      	ldr	r3, [pc, #520]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e66c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e674:	497e      	ldr	r1, [pc, #504]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e676:	4313      	orrs	r3, r2
 800e678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00a      	beq.n	800e69e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e688:	4b79      	ldr	r3, [pc, #484]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e68e:	f023 0203 	bic.w	r2, r3, #3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e696:	4976      	ldr	r1, [pc, #472]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e698:	4313      	orrs	r3, r2
 800e69a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00a      	beq.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e6aa:	4b71      	ldr	r3, [pc, #452]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6b0:	f023 020c 	bic.w	r2, r3, #12
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6b8:	496d      	ldr	r1, [pc, #436]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00a      	beq.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e6cc:	4b68      	ldr	r3, [pc, #416]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6da:	4965      	ldr	r1, [pc, #404]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00a      	beq.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e6ee:	4b60      	ldr	r3, [pc, #384]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6fc:	495c      	ldr	r1, [pc, #368]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e6fe:	4313      	orrs	r3, r2
 800e700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00a      	beq.n	800e726 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e710:	4b57      	ldr	r3, [pc, #348]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e71e:	4954      	ldr	r1, [pc, #336]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e720:	4313      	orrs	r3, r2
 800e722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00a      	beq.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e732:	4b4f      	ldr	r3, [pc, #316]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e738:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e740:	494b      	ldr	r1, [pc, #300]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e742:	4313      	orrs	r3, r2
 800e744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00a      	beq.n	800e76a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e754:	4b46      	ldr	r3, [pc, #280]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e75a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e762:	4943      	ldr	r1, [pc, #268]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e764:	4313      	orrs	r3, r2
 800e766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00a      	beq.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e776:	4b3e      	ldr	r3, [pc, #248]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e77c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e784:	493a      	ldr	r1, [pc, #232]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e786:	4313      	orrs	r3, r2
 800e788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00a      	beq.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e798:	4b35      	ldr	r3, [pc, #212]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e79e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7a6:	4932      	ldr	r1, [pc, #200]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d011      	beq.n	800e7de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e7ba:	4b2d      	ldr	r3, [pc, #180]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7c8:	4929      	ldr	r1, [pc, #164]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7d8:	d101      	bne.n	800e7de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f003 0308 	and.w	r3, r3, #8
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00a      	beq.n	800e810 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e7fa:	4b1d      	ldr	r3, [pc, #116]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e800:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e808:	4919      	ldr	r1, [pc, #100]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e80a:	4313      	orrs	r3, r2
 800e80c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00b      	beq.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e81c:	4b14      	ldr	r3, [pc, #80]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e822:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e82c:	4910      	ldr	r1, [pc, #64]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e82e:	4313      	orrs	r3, r2
 800e830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	2b01      	cmp	r3, #1
 800e838:	d006      	beq.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e842:	2b00      	cmp	r3, #0
 800e844:	f000 80d9 	beq.w	800e9fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e848:	4b09      	ldr	r3, [pc, #36]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a08      	ldr	r2, [pc, #32]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800e84e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e854:	f7f9 f9b0 	bl	8007bb8 <HAL_GetTick>
 800e858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e85a:	e00b      	b.n	800e874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e85c:	f7f9 f9ac 	bl	8007bb8 <HAL_GetTick>
 800e860:	4602      	mov	r2, r0
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	2b64      	cmp	r3, #100	; 0x64
 800e868:	d904      	bls.n	800e874 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e86a:	2303      	movs	r3, #3
 800e86c:	e197      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e86e:	bf00      	nop
 800e870:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e874:	4b6c      	ldr	r3, [pc, #432]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1ed      	bne.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f003 0301 	and.w	r3, r3, #1
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d021      	beq.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e890:	2b00      	cmp	r3, #0
 800e892:	d11d      	bne.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e894:	4b64      	ldr	r3, [pc, #400]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e89a:	0c1b      	lsrs	r3, r3, #16
 800e89c:	f003 0303 	and.w	r3, r3, #3
 800e8a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e8a2:	4b61      	ldr	r3, [pc, #388]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8a8:	0e1b      	lsrs	r3, r3, #24
 800e8aa:	f003 030f 	and.w	r3, r3, #15
 800e8ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	019a      	lsls	r2, r3, #6
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	041b      	lsls	r3, r3, #16
 800e8ba:	431a      	orrs	r2, r3
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	061b      	lsls	r3, r3, #24
 800e8c0:	431a      	orrs	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	071b      	lsls	r3, r3, #28
 800e8c8:	4957      	ldr	r1, [pc, #348]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d004      	beq.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8e4:	d00a      	beq.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d02e      	beq.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8fa:	d129      	bne.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e8fc:	4b4a      	ldr	r3, [pc, #296]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e902:	0c1b      	lsrs	r3, r3, #16
 800e904:	f003 0303 	and.w	r3, r3, #3
 800e908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e90a:	4b47      	ldr	r3, [pc, #284]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e910:	0f1b      	lsrs	r3, r3, #28
 800e912:	f003 0307 	and.w	r3, r3, #7
 800e916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	019a      	lsls	r2, r3, #6
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	041b      	lsls	r3, r3, #16
 800e922:	431a      	orrs	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	061b      	lsls	r3, r3, #24
 800e92a:	431a      	orrs	r2, r3
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	071b      	lsls	r3, r3, #28
 800e930:	493d      	ldr	r1, [pc, #244]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e932:	4313      	orrs	r3, r2
 800e934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e938:	4b3b      	ldr	r3, [pc, #236]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e93e:	f023 021f 	bic.w	r2, r3, #31
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e946:	3b01      	subs	r3, #1
 800e948:	4937      	ldr	r1, [pc, #220]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e94a:	4313      	orrs	r3, r2
 800e94c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d01d      	beq.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e95c:	4b32      	ldr	r3, [pc, #200]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e962:	0e1b      	lsrs	r3, r3, #24
 800e964:	f003 030f 	and.w	r3, r3, #15
 800e968:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e96a:	4b2f      	ldr	r3, [pc, #188]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e970:	0f1b      	lsrs	r3, r3, #28
 800e972:	f003 0307 	and.w	r3, r3, #7
 800e976:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	019a      	lsls	r2, r3, #6
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	041b      	lsls	r3, r3, #16
 800e984:	431a      	orrs	r2, r3
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	061b      	lsls	r3, r3, #24
 800e98a:	431a      	orrs	r2, r3
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	071b      	lsls	r3, r3, #28
 800e990:	4925      	ldr	r1, [pc, #148]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e992:	4313      	orrs	r3, r2
 800e994:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d011      	beq.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	019a      	lsls	r2, r3, #6
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	041b      	lsls	r3, r3, #16
 800e9b0:	431a      	orrs	r2, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	061b      	lsls	r3, r3, #24
 800e9b8:	431a      	orrs	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	071b      	lsls	r3, r3, #28
 800e9c0:	4919      	ldr	r1, [pc, #100]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e9c8:	4b17      	ldr	r3, [pc, #92]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a16      	ldr	r2, [pc, #88]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e9ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9d4:	f7f9 f8f0 	bl	8007bb8 <HAL_GetTick>
 800e9d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e9da:	e008      	b.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e9dc:	f7f9 f8ec 	bl	8007bb8 <HAL_GetTick>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	2b64      	cmp	r3, #100	; 0x64
 800e9e8:	d901      	bls.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e9ea:	2303      	movs	r3, #3
 800e9ec:	e0d7      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d0f0      	beq.n	800e9dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	f040 80cd 	bne.w	800eb9c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ea02:	4b09      	ldr	r3, [pc, #36]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4a08      	ldr	r2, [pc, #32]	; (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ea08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea0e:	f7f9 f8d3 	bl	8007bb8 <HAL_GetTick>
 800ea12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ea14:	e00a      	b.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ea16:	f7f9 f8cf 	bl	8007bb8 <HAL_GetTick>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	1ad3      	subs	r3, r2, r3
 800ea20:	2b64      	cmp	r3, #100	; 0x64
 800ea22:	d903      	bls.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ea24:	2303      	movs	r3, #3
 800ea26:	e0ba      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ea28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ea2c:	4b5e      	ldr	r3, [pc, #376]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea38:	d0ed      	beq.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d003      	beq.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d009      	beq.n	800ea62 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d02e      	beq.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d12a      	bne.n	800eab8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ea62:	4b51      	ldr	r3, [pc, #324]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ea64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea68:	0c1b      	lsrs	r3, r3, #16
 800ea6a:	f003 0303 	and.w	r3, r3, #3
 800ea6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ea70:	4b4d      	ldr	r3, [pc, #308]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ea72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea76:	0f1b      	lsrs	r3, r3, #28
 800ea78:	f003 0307 	and.w	r3, r3, #7
 800ea7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	019a      	lsls	r2, r3, #6
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	041b      	lsls	r3, r3, #16
 800ea88:	431a      	orrs	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	699b      	ldr	r3, [r3, #24]
 800ea8e:	061b      	lsls	r3, r3, #24
 800ea90:	431a      	orrs	r2, r3
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	071b      	lsls	r3, r3, #28
 800ea96:	4944      	ldr	r1, [pc, #272]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ea9e:	4b42      	ldr	r3, [pc, #264]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaac:	3b01      	subs	r3, #1
 800eaae:	021b      	lsls	r3, r3, #8
 800eab0:	493d      	ldr	r1, [pc, #244]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eab2:	4313      	orrs	r3, r2
 800eab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d022      	beq.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eacc:	d11d      	bne.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800eace:	4b36      	ldr	r3, [pc, #216]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ead0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ead4:	0e1b      	lsrs	r3, r3, #24
 800ead6:	f003 030f 	and.w	r3, r3, #15
 800eada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800eadc:	4b32      	ldr	r3, [pc, #200]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eae2:	0f1b      	lsrs	r3, r3, #28
 800eae4:	f003 0307 	and.w	r3, r3, #7
 800eae8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	695b      	ldr	r3, [r3, #20]
 800eaee:	019a      	lsls	r2, r3, #6
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6a1b      	ldr	r3, [r3, #32]
 800eaf4:	041b      	lsls	r3, r3, #16
 800eaf6:	431a      	orrs	r2, r3
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	061b      	lsls	r3, r3, #24
 800eafc:	431a      	orrs	r2, r3
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	071b      	lsls	r3, r3, #28
 800eb02:	4929      	ldr	r1, [pc, #164]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb04:	4313      	orrs	r3, r2
 800eb06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f003 0308 	and.w	r3, r3, #8
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d028      	beq.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800eb16:	4b24      	ldr	r3, [pc, #144]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb1c:	0e1b      	lsrs	r3, r3, #24
 800eb1e:	f003 030f 	and.w	r3, r3, #15
 800eb22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800eb24:	4b20      	ldr	r3, [pc, #128]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb2a:	0c1b      	lsrs	r3, r3, #16
 800eb2c:	f003 0303 	and.w	r3, r3, #3
 800eb30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	695b      	ldr	r3, [r3, #20]
 800eb36:	019a      	lsls	r2, r3, #6
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	041b      	lsls	r3, r3, #16
 800eb3c:	431a      	orrs	r2, r3
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	061b      	lsls	r3, r3, #24
 800eb42:	431a      	orrs	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	071b      	lsls	r3, r3, #28
 800eb4a:	4917      	ldr	r1, [pc, #92]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800eb52:	4b15      	ldr	r3, [pc, #84]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb60:	4911      	ldr	r1, [pc, #68]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb62:	4313      	orrs	r3, r2
 800eb64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800eb68:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a0e      	ldr	r2, [pc, #56]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb74:	f7f9 f820 	bl	8007bb8 <HAL_GetTick>
 800eb78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800eb7a:	e008      	b.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800eb7c:	f7f9 f81c 	bl	8007bb8 <HAL_GetTick>
 800eb80:	4602      	mov	r2, r0
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	2b64      	cmp	r3, #100	; 0x64
 800eb88:	d901      	bls.n	800eb8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	e007      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800eb8e:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb9a:	d1ef      	bne.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3720      	adds	r7, #32
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	40023800 	.word	0x40023800

0800ebac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b087      	sub	sp, #28
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ebca:	f040 808c 	bne.w	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ebce:	4b95      	ldr	r3, [pc, #596]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ebd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebd4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ebdc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebe4:	d07c      	beq.n	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebec:	d87d      	bhi.n	800ecea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d004      	beq.n	800ebfe <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebfa:	d039      	beq.n	800ec70 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ebfc:	e075      	b.n	800ecea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ebfe:	4b89      	ldr	r3, [pc, #548]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d108      	bne.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ec0a:	4b86      	ldr	r3, [pc, #536]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec12:	4a85      	ldr	r2, [pc, #532]	; (800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ec14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec18:	613b      	str	r3, [r7, #16]
 800ec1a:	e007      	b.n	800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ec1c:	4b81      	ldr	r3, [pc, #516]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec24:	4a81      	ldr	r2, [pc, #516]	; (800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ec26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec2a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ec2c:	4b7d      	ldr	r3, [pc, #500]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec32:	0e1b      	lsrs	r3, r3, #24
 800ec34:	f003 030f 	and.w	r3, r3, #15
 800ec38:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ec3a:	4b7a      	ldr	r3, [pc, #488]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec40:	099b      	lsrs	r3, r3, #6
 800ec42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec46:	693a      	ldr	r2, [r7, #16]
 800ec48:	fb02 f203 	mul.w	r2, r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec52:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ec54:	4b73      	ldr	r3, [pc, #460]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec5a:	0a1b      	lsrs	r3, r3, #8
 800ec5c:	f003 031f 	and.w	r3, r3, #31
 800ec60:	3301      	adds	r3, #1
 800ec62:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ec64:	697a      	ldr	r2, [r7, #20]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec6c:	617b      	str	r3, [r7, #20]
        break;
 800ec6e:	e03d      	b.n	800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ec70:	4b6c      	ldr	r3, [pc, #432]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d108      	bne.n	800ec8e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ec7c:	4b69      	ldr	r3, [pc, #420]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec84:	4a68      	ldr	r2, [pc, #416]	; (800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ec86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec8a:	613b      	str	r3, [r7, #16]
 800ec8c:	e007      	b.n	800ec9e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ec8e:	4b65      	ldr	r3, [pc, #404]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec96:	4a65      	ldr	r2, [pc, #404]	; (800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ec98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec9c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ec9e:	4b61      	ldr	r3, [pc, #388]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eca4:	0e1b      	lsrs	r3, r3, #24
 800eca6:	f003 030f 	and.w	r3, r3, #15
 800ecaa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ecac:	4b5d      	ldr	r3, [pc, #372]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ecae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecb2:	099b      	lsrs	r3, r3, #6
 800ecb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	fb02 f203 	mul.w	r2, r2, r3
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ecc6:	4b57      	ldr	r3, [pc, #348]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ecc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eccc:	f003 031f 	and.w	r3, r3, #31
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ecd4:	697a      	ldr	r2, [r7, #20]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecdc:	617b      	str	r3, [r7, #20]
        break;
 800ecde:	e005      	b.n	800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ece0:	4b53      	ldr	r3, [pc, #332]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ece2:	617b      	str	r3, [r7, #20]
        break;
 800ece4:	e002      	b.n	800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800ece6:	bf00      	nop
 800ece8:	e000      	b.n	800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800ecea:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecf2:	f040 808c 	bne.w	800ee0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ecf6:	4b4b      	ldr	r3, [pc, #300]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ecf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecfc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ed04:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed0c:	d07c      	beq.n	800ee08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed14:	d87d      	bhi.n	800ee12 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d004      	beq.n	800ed26 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed22:	d039      	beq.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ed24:	e075      	b.n	800ee12 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ed26:	4b3f      	ldr	r3, [pc, #252]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d108      	bne.n	800ed44 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ed32:	4b3c      	ldr	r3, [pc, #240]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed3a:	4a3b      	ldr	r2, [pc, #236]	; (800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ed3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed40:	613b      	str	r3, [r7, #16]
 800ed42:	e007      	b.n	800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ed44:	4b37      	ldr	r3, [pc, #220]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed4c:	4a37      	ldr	r2, [pc, #220]	; (800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ed4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed52:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ed54:	4b33      	ldr	r3, [pc, #204]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ed56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed5a:	0e1b      	lsrs	r3, r3, #24
 800ed5c:	f003 030f 	and.w	r3, r3, #15
 800ed60:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ed62:	4b30      	ldr	r3, [pc, #192]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ed64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed68:	099b      	lsrs	r3, r3, #6
 800ed6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	fb02 f203 	mul.w	r2, r2, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed7a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ed7c:	4b29      	ldr	r3, [pc, #164]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ed7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed82:	0a1b      	lsrs	r3, r3, #8
 800ed84:	f003 031f 	and.w	r3, r3, #31
 800ed88:	3301      	adds	r3, #1
 800ed8a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ed8c:	697a      	ldr	r2, [r7, #20]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed94:	617b      	str	r3, [r7, #20]
        break;
 800ed96:	e03d      	b.n	800ee14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ed98:	4b22      	ldr	r3, [pc, #136]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d108      	bne.n	800edb6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800eda4:	4b1f      	ldr	r3, [pc, #124]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edac:	4a1e      	ldr	r2, [pc, #120]	; (800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800edae:	fbb2 f3f3 	udiv	r3, r2, r3
 800edb2:	613b      	str	r3, [r7, #16]
 800edb4:	e007      	b.n	800edc6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800edb6:	4b1b      	ldr	r3, [pc, #108]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edbe:	4a1b      	ldr	r2, [pc, #108]	; (800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800edc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800edc4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800edc6:	4b17      	ldr	r3, [pc, #92]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800edc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edcc:	0e1b      	lsrs	r3, r3, #24
 800edce:	f003 030f 	and.w	r3, r3, #15
 800edd2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800edd4:	4b13      	ldr	r3, [pc, #76]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800edd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edda:	099b      	lsrs	r3, r3, #6
 800eddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ede0:	693a      	ldr	r2, [r7, #16]
 800ede2:	fb02 f203 	mul.w	r2, r2, r3
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	fbb2 f3f3 	udiv	r3, r2, r3
 800edec:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800edee:	4b0d      	ldr	r3, [pc, #52]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800edf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edf4:	f003 031f 	and.w	r3, r3, #31
 800edf8:	3301      	adds	r3, #1
 800edfa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800edfc:	697a      	ldr	r2, [r7, #20]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee04:	617b      	str	r3, [r7, #20]
        break;
 800ee06:	e005      	b.n	800ee14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ee08:	4b09      	ldr	r3, [pc, #36]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ee0a:	617b      	str	r3, [r7, #20]
        break;
 800ee0c:	e002      	b.n	800ee14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800ee0e:	bf00      	nop
 800ee10:	e000      	b.n	800ee14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800ee12:	bf00      	nop

  return frequency;
 800ee14:	697b      	ldr	r3, [r7, #20]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	371c      	adds	r7, #28
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	40023800 	.word	0x40023800
 800ee28:	00f42400 	.word	0x00f42400
 800ee2c:	017d7840 	.word	0x017d7840
 800ee30:	00bb8000 	.word	0x00bb8000

0800ee34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d101      	bne.n	800ee46 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ee42:	2301      	movs	r3, #1
 800ee44:	e081      	b.n	800ef4a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	7f5b      	ldrb	r3, [r3, #29]
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d105      	bne.n	800ee5c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7f4 fe78 	bl	8003b4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2202      	movs	r2, #2
 800ee60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	22ca      	movs	r2, #202	; 0xca
 800ee68:	625a      	str	r2, [r3, #36]	; 0x24
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2253      	movs	r2, #83	; 0x53
 800ee70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fb16 	bl	800f4a4 <RTC_EnterInitMode>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d008      	beq.n	800ee90 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	22ff      	movs	r2, #255	; 0xff
 800ee84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2204      	movs	r2, #4
 800ee8a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e05c      	b.n	800ef4a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6899      	ldr	r1, [r3, #8]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	4b2e      	ldr	r3, [pc, #184]	; (800ef54 <HAL_RTC_Init+0x120>)
 800ee9c:	400b      	ands	r3, r1
 800ee9e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	6899      	ldr	r1, [r3, #8]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	685a      	ldr	r2, [r3, #4]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	691b      	ldr	r3, [r3, #16]
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	695b      	ldr	r3, [r3, #20]
 800eeb4:	431a      	orrs	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	430a      	orrs	r2, r1
 800eebc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	68d2      	ldr	r2, [r2, #12]
 800eec6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	6919      	ldr	r1, [r3, #16]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	041a      	lsls	r2, r3, #16
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	430a      	orrs	r2, r1
 800eeda:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68da      	ldr	r2, [r3, #12]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eeea:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	f003 0320 	and.w	r3, r3, #32
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10e      	bne.n	800ef18 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 faaa 	bl	800f454 <HAL_RTC_WaitForSynchro>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d008      	beq.n	800ef18 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	22ff      	movs	r2, #255	; 0xff
 800ef0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2204      	movs	r2, #4
 800ef12:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ef14:	2301      	movs	r3, #1
 800ef16:	e018      	b.n	800ef4a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f022 0208 	bic.w	r2, r2, #8
 800ef26:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	699a      	ldr	r2, [r3, #24]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	430a      	orrs	r2, r1
 800ef38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	22ff      	movs	r2, #255	; 0xff
 800ef40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2201      	movs	r2, #1
 800ef46:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ef48:	2300      	movs	r3, #0
  }
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	ff8fffbf 	.word	0xff8fffbf

0800ef58 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ef58:	b590      	push	{r4, r7, lr}
 800ef5a:	b087      	sub	sp, #28
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800ef64:	2300      	movs	r3, #0
 800ef66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	7f1b      	ldrb	r3, [r3, #28]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d101      	bne.n	800ef74 <HAL_RTC_SetTime+0x1c>
 800ef70:	2302      	movs	r3, #2
 800ef72:	e0a8      	b.n	800f0c6 <HAL_RTC_SetTime+0x16e>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2201      	movs	r2, #1
 800ef78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2202      	movs	r2, #2
 800ef7e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d126      	bne.n	800efd4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d102      	bne.n	800ef9a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	2200      	movs	r2, #0
 800ef98:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 faac 	bl	800f4fc <RTC_ByteToBcd2>
 800efa4:	4603      	mov	r3, r0
 800efa6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	785b      	ldrb	r3, [r3, #1]
 800efac:	4618      	mov	r0, r3
 800efae:	f000 faa5 	bl	800f4fc <RTC_ByteToBcd2>
 800efb2:	4603      	mov	r3, r0
 800efb4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800efb6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	789b      	ldrb	r3, [r3, #2]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 fa9d 	bl	800f4fc <RTC_ByteToBcd2>
 800efc2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800efc4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	7b1b      	ldrb	r3, [r3, #12]
 800efcc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800efce:	4313      	orrs	r3, r2
 800efd0:	617b      	str	r3, [r7, #20]
 800efd2:	e018      	b.n	800f006 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	2200      	movs	r2, #0
 800efe6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	785b      	ldrb	r3, [r3, #1]
 800eff2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800eff4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800effa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	7b1b      	ldrb	r3, [r3, #12]
 800f000:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800f002:	4313      	orrs	r3, r2
 800f004:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	22ca      	movs	r2, #202	; 0xca
 800f00c:	625a      	str	r2, [r3, #36]	; 0x24
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2253      	movs	r2, #83	; 0x53
 800f014:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	f000 fa44 	bl	800f4a4 <RTC_EnterInitMode>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00b      	beq.n	800f03a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	22ff      	movs	r2, #255	; 0xff
 800f028:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2204      	movs	r2, #4
 800f02e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	e045      	b.n	800f0c6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	6979      	ldr	r1, [r7, #20]
 800f040:	4b23      	ldr	r3, [pc, #140]	; (800f0d0 <HAL_RTC_SetTime+0x178>)
 800f042:	400b      	ands	r3, r1
 800f044:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	689a      	ldr	r2, [r3, #8]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f054:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	6899      	ldr	r1, [r3, #8]
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	691a      	ldr	r2, [r3, #16]
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	431a      	orrs	r2, r3
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	430a      	orrs	r2, r1
 800f06c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	68da      	ldr	r2, [r3, #12]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f07c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	f003 0320 	and.w	r3, r3, #32
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d111      	bne.n	800f0b0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f000 f9e1 	bl	800f454 <HAL_RTC_WaitForSynchro>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d00b      	beq.n	800f0b0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	22ff      	movs	r2, #255	; 0xff
 800f09e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2204      	movs	r2, #4
 800f0a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e00a      	b.n	800f0c6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	22ff      	movs	r2, #255	; 0xff
 800f0b6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800f0c4:	2300      	movs	r3, #0
  }
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	371c      	adds	r7, #28
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd90      	pop	{r4, r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	007f7f7f 	.word	0x007f7f7f

0800f0d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f0d4:	b590      	push	{r4, r7, lr}
 800f0d6:	b087      	sub	sp, #28
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	7f1b      	ldrb	r3, [r3, #28]
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d101      	bne.n	800f0f0 <HAL_RTC_SetDate+0x1c>
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	e092      	b.n	800f216 <HAL_RTC_SetDate+0x142>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2202      	movs	r2, #2
 800f0fa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d10e      	bne.n	800f120 <HAL_RTC_SetDate+0x4c>
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	785b      	ldrb	r3, [r3, #1]
 800f106:	f003 0310 	and.w	r3, r3, #16
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d008      	beq.n	800f120 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	785b      	ldrb	r3, [r3, #1]
 800f112:	f023 0310 	bic.w	r3, r3, #16
 800f116:	b2db      	uxtb	r3, r3
 800f118:	330a      	adds	r3, #10
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d11c      	bne.n	800f160 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	78db      	ldrb	r3, [r3, #3]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 f9e6 	bl	800f4fc <RTC_ByteToBcd2>
 800f130:	4603      	mov	r3, r0
 800f132:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	785b      	ldrb	r3, [r3, #1]
 800f138:	4618      	mov	r0, r3
 800f13a:	f000 f9df 	bl	800f4fc <RTC_ByteToBcd2>
 800f13e:	4603      	mov	r3, r0
 800f140:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f142:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	789b      	ldrb	r3, [r3, #2]
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 f9d7 	bl	800f4fc <RTC_ByteToBcd2>
 800f14e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800f150:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800f15a:	4313      	orrs	r3, r2
 800f15c:	617b      	str	r3, [r7, #20]
 800f15e:	e00e      	b.n	800f17e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	78db      	ldrb	r3, [r3, #3]
 800f164:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	785b      	ldrb	r3, [r3, #1]
 800f16a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f16c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800f172:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800f17a:	4313      	orrs	r3, r2
 800f17c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	22ca      	movs	r2, #202	; 0xca
 800f184:	625a      	str	r2, [r3, #36]	; 0x24
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2253      	movs	r2, #83	; 0x53
 800f18c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f000 f988 	bl	800f4a4 <RTC_EnterInitMode>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00b      	beq.n	800f1b2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	22ff      	movs	r2, #255	; 0xff
 800f1a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2204      	movs	r2, #4
 800f1a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e031      	b.n	800f216 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	6979      	ldr	r1, [r7, #20]
 800f1b8:	4b19      	ldr	r3, [pc, #100]	; (800f220 <HAL_RTC_SetDate+0x14c>)
 800f1ba:	400b      	ands	r3, r1
 800f1bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68da      	ldr	r2, [r3, #12]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f1cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	689b      	ldr	r3, [r3, #8]
 800f1d4:	f003 0320 	and.w	r3, r3, #32
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d111      	bne.n	800f200 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f000 f939 	bl	800f454 <HAL_RTC_WaitForSynchro>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00b      	beq.n	800f200 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	22ff      	movs	r2, #255	; 0xff
 800f1ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2204      	movs	r2, #4
 800f1f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	e00a      	b.n	800f216 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	22ff      	movs	r2, #255	; 0xff
 800f206:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2201      	movs	r2, #1
 800f20c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2200      	movs	r2, #0
 800f212:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800f214:	2300      	movs	r3, #0
  }
}
 800f216:	4618      	mov	r0, r3
 800f218:	371c      	adds	r7, #28
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd90      	pop	{r4, r7, pc}
 800f21e:	bf00      	nop
 800f220:	00ffff3f 	.word	0x00ffff3f

0800f224 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800f224:	b590      	push	{r4, r7, lr}
 800f226:	b089      	sub	sp, #36	; 0x24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800f230:	2300      	movs	r3, #0
 800f232:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800f234:	2300      	movs	r3, #0
 800f236:	61fb      	str	r3, [r7, #28]
 800f238:	2300      	movs	r3, #0
 800f23a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	7f1b      	ldrb	r3, [r3, #28]
 800f240:	2b01      	cmp	r3, #1
 800f242:	d101      	bne.n	800f248 <HAL_RTC_SetAlarm+0x24>
 800f244:	2302      	movs	r3, #2
 800f246:	e101      	b.n	800f44c <HAL_RTC_SetAlarm+0x228>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2201      	movs	r2, #1
 800f24c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2202      	movs	r2, #2
 800f252:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d137      	bne.n	800f2ca <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f264:	2b00      	cmp	r3, #0
 800f266:	d102      	bne.n	800f26e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2200      	movs	r2, #0
 800f26c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	4618      	mov	r0, r3
 800f274:	f000 f942 	bl	800f4fc <RTC_ByteToBcd2>
 800f278:	4603      	mov	r3, r0
 800f27a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	785b      	ldrb	r3, [r3, #1]
 800f280:	4618      	mov	r0, r3
 800f282:	f000 f93b 	bl	800f4fc <RTC_ByteToBcd2>
 800f286:	4603      	mov	r3, r0
 800f288:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800f28a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	789b      	ldrb	r3, [r3, #2]
 800f290:	4618      	mov	r0, r3
 800f292:	f000 f933 	bl	800f4fc <RTC_ByteToBcd2>
 800f296:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800f298:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	7b1b      	ldrb	r3, [r3, #12]
 800f2a0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800f2a2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f000 f925 	bl	800f4fc <RTC_ByteToBcd2>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800f2b6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800f2be:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	61fb      	str	r3, [r7, #28]
 800f2c8:	e023      	b.n	800f312 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d102      	bne.n	800f2de <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	785b      	ldrb	r3, [r3, #1]
 800f2e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800f2ea:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800f2f0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	7b1b      	ldrb	r3, [r3, #12]
 800f2f6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800f2f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f300:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800f302:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800f308:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800f30e:	4313      	orrs	r3, r2
 800f310:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	4313      	orrs	r3, r2
 800f31c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	22ca      	movs	r2, #202	; 0xca
 800f324:	625a      	str	r2, [r3, #36]	; 0x24
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2253      	movs	r2, #83	; 0x53
 800f32c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f336:	d13f      	bne.n	800f3b8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	689a      	ldr	r2, [r3, #8]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f346:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	689a      	ldr	r2, [r3, #8]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f356:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f358:	f7f8 fc2e 	bl	8007bb8 <HAL_GetTick>
 800f35c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800f35e:	e013      	b.n	800f388 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f360:	f7f8 fc2a 	bl	8007bb8 <HAL_GetTick>
 800f364:	4602      	mov	r2, r0
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f36e:	d90b      	bls.n	800f388 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	22ff      	movs	r2, #255	; 0xff
 800f376:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2203      	movs	r2, #3
 800f37c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800f384:	2303      	movs	r3, #3
 800f386:	e061      	b.n	800f44c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	2b00      	cmp	r3, #0
 800f394:	d0e4      	beq.n	800f360 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	69fa      	ldr	r2, [r7, #28]
 800f39c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	697a      	ldr	r2, [r7, #20]
 800f3a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	689a      	ldr	r2, [r3, #8]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f3b4:	609a      	str	r2, [r3, #8]
 800f3b6:	e03e      	b.n	800f436 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	689a      	ldr	r2, [r3, #8]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f3c6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	689a      	ldr	r2, [r3, #8]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f3d6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f3d8:	f7f8 fbee 	bl	8007bb8 <HAL_GetTick>
 800f3dc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800f3de:	e013      	b.n	800f408 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f3e0:	f7f8 fbea 	bl	8007bb8 <HAL_GetTick>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f3ee:	d90b      	bls.n	800f408 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	22ff      	movs	r2, #255	; 0xff
 800f3f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2203      	movs	r2, #3
 800f3fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800f404:	2303      	movs	r3, #3
 800f406:	e021      	b.n	800f44c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	f003 0302 	and.w	r3, r3, #2
 800f412:	2b00      	cmp	r3, #0
 800f414:	d0e4      	beq.n	800f3e0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	69fa      	ldr	r2, [r7, #28]
 800f41c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	697a      	ldr	r2, [r7, #20]
 800f424:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	689a      	ldr	r2, [r3, #8]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f434:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	22ff      	movs	r2, #255	; 0xff
 800f43c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2201      	movs	r2, #1
 800f442:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2200      	movs	r2, #0
 800f448:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3724      	adds	r7, #36	; 0x24
 800f450:	46bd      	mov	sp, r7
 800f452:	bd90      	pop	{r4, r7, pc}

0800f454 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f45c:	2300      	movs	r3, #0
 800f45e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	68da      	ldr	r2, [r3, #12]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f46e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f470:	f7f8 fba2 	bl	8007bb8 <HAL_GetTick>
 800f474:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f476:	e009      	b.n	800f48c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f478:	f7f8 fb9e 	bl	8007bb8 <HAL_GetTick>
 800f47c:	4602      	mov	r2, r0
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f486:	d901      	bls.n	800f48c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800f488:	2303      	movs	r3, #3
 800f48a:	e007      	b.n	800f49c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	f003 0320 	and.w	r3, r3, #32
 800f496:	2b00      	cmp	r3, #0
 800f498:	d0ee      	beq.n	800f478 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d119      	bne.n	800f4f2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f4c8:	f7f8 fb76 	bl	8007bb8 <HAL_GetTick>
 800f4cc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f4ce:	e009      	b.n	800f4e4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800f4d0:	f7f8 fb72 	bl	8007bb8 <HAL_GetTick>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f4de:	d901      	bls.n	800f4e4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800f4e0:	2303      	movs	r3, #3
 800f4e2:	e007      	b.n	800f4f4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d0ee      	beq.n	800f4d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	4603      	mov	r3, r0
 800f504:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800f50a:	e005      	b.n	800f518 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	3301      	adds	r3, #1
 800f510:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800f512:	79fb      	ldrb	r3, [r7, #7]
 800f514:	3b0a      	subs	r3, #10
 800f516:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800f518:	79fb      	ldrb	r3, [r7, #7]
 800f51a:	2b09      	cmp	r3, #9
 800f51c:	d8f6      	bhi.n	800f50c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	b2db      	uxtb	r3, r3
 800f522:	011b      	lsls	r3, r3, #4
 800f524:	b2da      	uxtb	r2, r3
 800f526:	79fb      	ldrb	r3, [r7, #7]
 800f528:	4313      	orrs	r3, r2
 800f52a:	b2db      	uxtb	r3, r3
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3714      	adds	r7, #20
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800f538:	b480      	push	{r7}
 800f53a:	b087      	sub	sp, #28
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800f544:	2300      	movs	r3, #0
 800f546:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	7f1b      	ldrb	r3, [r3, #28]
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d101      	bne.n	800f554 <HAL_RTCEx_SetTimeStamp+0x1c>
 800f550:	2302      	movs	r3, #2
 800f552:	e03e      	b.n	800f5d2 <HAL_RTCEx_SetTimeStamp+0x9a>
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2201      	movs	r2, #1
 800f558:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2202      	movs	r2, #2
 800f55e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	689a      	ldr	r2, [r3, #8]
 800f566:	4b1e      	ldr	r3, [pc, #120]	; (800f5e0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800f568:	4013      	ands	r3, r2
 800f56a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800f56c:	697a      	ldr	r2, [r7, #20]
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	4313      	orrs	r3, r2
 800f572:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	22ca      	movs	r2, #202	; 0xca
 800f57a:	625a      	str	r2, [r3, #36]	; 0x24
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2253      	movs	r2, #83	; 0x53
 800f582:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f022 0206 	bic.w	r2, r2, #6
 800f592:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	430a      	orrs	r2, r1
 800f5a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	697a      	ldr	r2, [r7, #20]
 800f5aa:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	689a      	ldr	r2, [r3, #8]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5ba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	22ff      	movs	r2, #255	; 0xff
 800f5c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800f5d0:	2300      	movs	r3, #0
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	371c      	adds	r7, #28
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	fffff7f7 	.word	0xfffff7f7

0800f5e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b088      	sub	sp, #32
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d101      	bne.n	800f602 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800f5fe:	2301      	movs	r3, #1
 800f600:	e156      	b.n	800f8b0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d106      	bne.n	800f61c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7f4 fe0c 	bl	8004234 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2202      	movs	r2, #2
 800f620:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 facf 	bl	800fbc8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	2b02      	cmp	r3, #2
 800f630:	d00c      	beq.n	800f64c <HAL_SAI_Init+0x68>
 800f632:	2b02      	cmp	r3, #2
 800f634:	d80d      	bhi.n	800f652 <HAL_SAI_Init+0x6e>
 800f636:	2b00      	cmp	r3, #0
 800f638:	d002      	beq.n	800f640 <HAL_SAI_Init+0x5c>
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d003      	beq.n	800f646 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800f63e:	e008      	b.n	800f652 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800f640:	2300      	movs	r3, #0
 800f642:	61fb      	str	r3, [r7, #28]
      break;
 800f644:	e006      	b.n	800f654 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f646:	2310      	movs	r3, #16
 800f648:	61fb      	str	r3, [r7, #28]
      break;
 800f64a:	e003      	b.n	800f654 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f64c:	2320      	movs	r3, #32
 800f64e:	61fb      	str	r3, [r7, #28]
      break;
 800f650:	e000      	b.n	800f654 <HAL_SAI_Init+0x70>
      break;
 800f652:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	2b03      	cmp	r3, #3
 800f65a:	d81e      	bhi.n	800f69a <HAL_SAI_Init+0xb6>
 800f65c:	a201      	add	r2, pc, #4	; (adr r2, 800f664 <HAL_SAI_Init+0x80>)
 800f65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f662:	bf00      	nop
 800f664:	0800f675 	.word	0x0800f675
 800f668:	0800f67b 	.word	0x0800f67b
 800f66c:	0800f683 	.word	0x0800f683
 800f670:	0800f68b 	.word	0x0800f68b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800f674:	2300      	movs	r3, #0
 800f676:	617b      	str	r3, [r7, #20]
    }
    break;
 800f678:	e010      	b.n	800f69c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f67e:	617b      	str	r3, [r7, #20]
    }
    break;
 800f680:	e00c      	b.n	800f69c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f686:	617b      	str	r3, [r7, #20]
    }
    break;
 800f688:	e008      	b.n	800f69c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f68a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f68e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	f043 0301 	orr.w	r3, r3, #1
 800f696:	61fb      	str	r3, [r7, #28]
    }
    break;
 800f698:	e000      	b.n	800f69c <HAL_SAI_Init+0xb8>
    default:
      break;
 800f69a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a85      	ldr	r2, [pc, #532]	; (800f8b8 <HAL_SAI_Init+0x2d4>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d004      	beq.n	800f6b0 <HAL_SAI_Init+0xcc>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a84      	ldr	r2, [pc, #528]	; (800f8bc <HAL_SAI_Init+0x2d8>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d103      	bne.n	800f6b8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800f6b0:	4a83      	ldr	r2, [pc, #524]	; (800f8c0 <HAL_SAI_Init+0x2dc>)
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	6013      	str	r3, [r2, #0]
 800f6b6:	e002      	b.n	800f6be <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800f6b8:	4a82      	ldr	r2, [pc, #520]	; (800f8c4 <HAL_SAI_Init+0x2e0>)
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	69db      	ldr	r3, [r3, #28]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d04c      	beq.n	800f760 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4a7a      	ldr	r2, [pc, #488]	; (800f8b8 <HAL_SAI_Init+0x2d4>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d004      	beq.n	800f6de <HAL_SAI_Init+0xfa>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a78      	ldr	r2, [pc, #480]	; (800f8bc <HAL_SAI_Init+0x2d8>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d104      	bne.n	800f6e8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f6de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800f6e2:	f7ff fa63 	bl	800ebac <HAL_RCCEx_GetPeriphCLKFreq>
 800f6e6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a76      	ldr	r2, [pc, #472]	; (800f8c8 <HAL_SAI_Init+0x2e4>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d004      	beq.n	800f6fc <HAL_SAI_Init+0x118>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	4a75      	ldr	r2, [pc, #468]	; (800f8cc <HAL_SAI_Init+0x2e8>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d104      	bne.n	800f706 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f6fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f700:	f7ff fa54 	bl	800ebac <HAL_RCCEx_GetPeriphCLKFreq>
 800f704:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800f706:	693a      	ldr	r2, [r7, #16]
 800f708:	4613      	mov	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4413      	add	r3, r2
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	461a      	mov	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	69db      	ldr	r3, [r3, #28]
 800f716:	025b      	lsls	r3, r3, #9
 800f718:	fbb2 f3f3 	udiv	r3, r2, r3
 800f71c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	4a6b      	ldr	r2, [pc, #428]	; (800f8d0 <HAL_SAI_Init+0x2ec>)
 800f722:	fba2 2303 	umull	r2, r3, r2, r3
 800f726:	08da      	lsrs	r2, r3, #3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800f72c:	68f9      	ldr	r1, [r7, #12]
 800f72e:	4b68      	ldr	r3, [pc, #416]	; (800f8d0 <HAL_SAI_Init+0x2ec>)
 800f730:	fba3 2301 	umull	r2, r3, r3, r1
 800f734:	08da      	lsrs	r2, r3, #3
 800f736:	4613      	mov	r3, r2
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4413      	add	r3, r2
 800f73c:	005b      	lsls	r3, r3, #1
 800f73e:	1aca      	subs	r2, r1, r3
 800f740:	2a08      	cmp	r2, #8
 800f742:	d904      	bls.n	800f74e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a1b      	ldr	r3, [r3, #32]
 800f748:	1c5a      	adds	r2, r3, #1
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f752:	2b04      	cmp	r3, #4
 800f754:	d104      	bne.n	800f760 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a1b      	ldr	r3, [r3, #32]
 800f75a:	085a      	lsrs	r2, r3, #1
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d003      	beq.n	800f770 <HAL_SAI_Init+0x18c>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d109      	bne.n	800f784 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f774:	2b01      	cmp	r3, #1
 800f776:	d101      	bne.n	800f77c <HAL_SAI_Init+0x198>
 800f778:	2300      	movs	r3, #0
 800f77a:	e001      	b.n	800f780 <HAL_SAI_Init+0x19c>
 800f77c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f780:	61bb      	str	r3, [r7, #24]
 800f782:	e008      	b.n	800f796 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d102      	bne.n	800f792 <HAL_SAI_Init+0x1ae>
 800f78c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f790:	e000      	b.n	800f794 <HAL_SAI_Init+0x1b0>
 800f792:	2300      	movs	r3, #0
 800f794:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	6819      	ldr	r1, [r3, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	4b4c      	ldr	r3, [pc, #304]	; (800f8d4 <HAL_SAI_Init+0x2f0>)
 800f7a2:	400b      	ands	r3, r1
 800f7a4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	6819      	ldr	r1, [r3, #0]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f7ba:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7c0:	431a      	orrs	r2, r3
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800f7ce:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	691b      	ldr	r3, [r3, #16]
 800f7d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f7da:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6a1b      	ldr	r3, [r3, #32]
 800f7e0:	051b      	lsls	r3, r3, #20
 800f7e2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	430a      	orrs	r2, r1
 800f7ea:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	6859      	ldr	r1, [r3, #4]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	4b38      	ldr	r3, [pc, #224]	; (800f8d8 <HAL_SAI_Init+0x2f4>)
 800f7f8:	400b      	ands	r3, r1
 800f7fa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	6859      	ldr	r1, [r3, #4]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	699a      	ldr	r2, [r3, #24]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80a:	431a      	orrs	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f810:	431a      	orrs	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	430a      	orrs	r2, r1
 800f818:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	6899      	ldr	r1, [r3, #8]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	4b2d      	ldr	r3, [pc, #180]	; (800f8dc <HAL_SAI_Init+0x2f8>)
 800f826:	400b      	ands	r3, r1
 800f828:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	6899      	ldr	r1, [r3, #8]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f834:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800f83a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800f840:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800f846:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f84c:	3b01      	subs	r3, #1
 800f84e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f850:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	430a      	orrs	r2, r1
 800f858:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68d9      	ldr	r1, [r3, #12]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f868:	400b      	ands	r3, r1
 800f86a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	68d9      	ldr	r1, [r3, #12]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f87a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f880:	041b      	lsls	r3, r3, #16
 800f882:	431a      	orrs	r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f888:	3b01      	subs	r3, #1
 800f88a:	021b      	lsls	r3, r3, #8
 800f88c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	430a      	orrs	r2, r1
 800f894:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2200      	movs	r2, #0
 800f89a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800f8ae:	2300      	movs	r3, #0
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3720      	adds	r7, #32
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	40015804 	.word	0x40015804
 800f8bc:	40015824 	.word	0x40015824
 800f8c0:	40015800 	.word	0x40015800
 800f8c4:	40015c00 	.word	0x40015c00
 800f8c8:	40015c04 	.word	0x40015c04
 800f8cc:	40015c24 	.word	0x40015c24
 800f8d0:	cccccccd 	.word	0xcccccccd
 800f8d4:	ff05c010 	.word	0xff05c010
 800f8d8:	ffff1ff0 	.word	0xffff1ff0
 800f8dc:	fff88000 	.word	0xfff88000

0800f8e0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b086      	sub	sp, #24
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f8ee:	f7f8 f963 	bl	8007bb8 <HAL_GetTick>
 800f8f2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d002      	beq.n	800f900 <HAL_SAI_Transmit_DMA+0x20>
 800f8fa:	88fb      	ldrh	r3, [r7, #6]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d101      	bne.n	800f904 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f900:	2301      	movs	r3, #1
 800f902:	e093      	b.n	800fa2c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	f040 808c 	bne.w	800fa2a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d101      	bne.n	800f920 <HAL_SAI_Transmit_DMA+0x40>
 800f91c:	2302      	movs	r3, #2
 800f91e:	e085      	b.n	800fa2c <HAL_SAI_Transmit_DMA+0x14c>
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2201      	movs	r2, #1
 800f924:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	88fa      	ldrh	r2, [r7, #6]
 800f932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	88fa      	ldrh	r2, [r7, #6]
 800f93a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2200      	movs	r2, #0
 800f942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2212      	movs	r2, #18
 800f94a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f952:	4a38      	ldr	r2, [pc, #224]	; (800fa34 <HAL_SAI_Transmit_DMA+0x154>)
 800f954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f95a:	4a37      	ldr	r2, [pc, #220]	; (800fa38 <HAL_SAI_Transmit_DMA+0x158>)
 800f95c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f962:	4a36      	ldr	r2, [pc, #216]	; (800fa3c <HAL_SAI_Transmit_DMA+0x15c>)
 800f964:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96a:	2200      	movs	r2, #0
 800f96c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f976:	4619      	mov	r1, r3
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	331c      	adds	r3, #28
 800f97e:	461a      	mov	r2, r3
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f986:	f7f9 f841 	bl	8008a0c <HAL_DMA_Start_IT>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d005      	beq.n	800f99c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2200      	movs	r2, #0
 800f994:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800f998:	2301      	movs	r3, #1
 800f99a:	e047      	b.n	800fa2c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f99c:	2100      	movs	r1, #0
 800f99e:	68f8      	ldr	r0, [r7, #12]
 800f9a0:	f000 f8dc 	bl	800fb5c <SAI_InterruptFlag>
 800f9a4:	4601      	mov	r1, r0
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	691a      	ldr	r2, [r3, #16]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	430a      	orrs	r2, r1
 800f9b2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f9c2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f9c4:	e015      	b.n	800f9f2 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f9c6:	f7f8 f8f7 	bl	8007bb8 <HAL_GetTick>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	1ad3      	subs	r3, r2, r3
 800f9d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f9d4:	d90d      	bls.n	800f9f2 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	e01c      	b.n	800fa2c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	695b      	ldr	r3, [r3, #20]
 800f9f8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d0e2      	beq.n	800f9c6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d107      	bne.n	800fa1e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fa1c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800fa26:	2300      	movs	r3, #0
 800fa28:	e000      	b.n	800fa2c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800fa2a:	2302      	movs	r3, #2
  }
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3718      	adds	r7, #24
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	0800fc99 	.word	0x0800fc99
 800fa38:	0800fc39 	.word	0x0800fc39
 800fa3c:	0800fd31 	.word	0x0800fd31

0800fa40 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <HAL_SAI_Receive_DMA+0x1a>
 800fa54:	88fb      	ldrh	r3, [r7, #6]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d101      	bne.n	800fa5e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e074      	b.n	800fb48 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d16d      	bne.n	800fb46 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d101      	bne.n	800fa78 <HAL_SAI_Receive_DMA+0x38>
 800fa74:	2302      	movs	r3, #2
 800fa76:	e067      	b.n	800fb48 <HAL_SAI_Receive_DMA+0x108>
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	68ba      	ldr	r2, [r7, #8]
 800fa84:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	88fa      	ldrh	r2, [r7, #6]
 800fa8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	88fa      	ldrh	r2, [r7, #6]
 800fa92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2222      	movs	r2, #34	; 0x22
 800faa2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faaa:	4a29      	ldr	r2, [pc, #164]	; (800fb50 <HAL_SAI_Receive_DMA+0x110>)
 800faac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fab2:	4a28      	ldr	r2, [pc, #160]	; (800fb54 <HAL_SAI_Receive_DMA+0x114>)
 800fab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faba:	4a27      	ldr	r2, [pc, #156]	; (800fb58 <HAL_SAI_Receive_DMA+0x118>)
 800fabc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fac2:	2200      	movs	r2, #0
 800fac4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	331c      	adds	r3, #28
 800fad0:	4619      	mov	r1, r3
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fad6:	461a      	mov	r2, r3
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fade:	f7f8 ff95 	bl	8008a0c <HAL_DMA_Start_IT>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d005      	beq.n	800faf4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2200      	movs	r2, #0
 800faec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	e029      	b.n	800fb48 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800faf4:	2100      	movs	r1, #0
 800faf6:	68f8      	ldr	r0, [r7, #12]
 800faf8:	f000 f830 	bl	800fb5c <SAI_InterruptFlag>
 800fafc:	4601      	mov	r1, r0
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	691a      	ldr	r2, [r3, #16]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	430a      	orrs	r2, r1
 800fb0a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb1a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d107      	bne.n	800fb3a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	681a      	ldr	r2, [r3, #0]
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fb38:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	e000      	b.n	800fb48 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800fb46:	2302      	movs	r3, #2
  }
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	0800fd15 	.word	0x0800fd15
 800fb54:	0800fcb5 	.word	0x0800fcb5
 800fb58:	0800fd31 	.word	0x0800fd31

0800fb5c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b085      	sub	sp, #20
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800fb66:	2301      	movs	r3, #1
 800fb68:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d103      	bne.n	800fb78 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f043 0308 	orr.w	r3, r3, #8
 800fb76:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb7c:	2b08      	cmp	r3, #8
 800fb7e:	d10b      	bne.n	800fb98 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	d003      	beq.n	800fb90 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d103      	bne.n	800fb98 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f043 0310 	orr.w	r3, r3, #16
 800fb96:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	2b03      	cmp	r3, #3
 800fb9e:	d003      	beq.n	800fba8 <SAI_InterruptFlag+0x4c>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	d104      	bne.n	800fbb2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fbae:	60fb      	str	r3, [r7, #12]
 800fbb0:	e003      	b.n	800fbba <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f043 0304 	orr.w	r3, r3, #4
 800fbb8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800fbba:	68fb      	ldr	r3, [r7, #12]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b085      	sub	sp, #20
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800fbd0:	4b17      	ldr	r3, [pc, #92]	; (800fc30 <SAI_Disable+0x68>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a17      	ldr	r2, [pc, #92]	; (800fc34 <SAI_Disable+0x6c>)
 800fbd6:	fba2 2303 	umull	r2, r3, r2, r3
 800fbda:	0b1b      	lsrs	r3, r3, #12
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fbf2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	1e5a      	subs	r2, r3, #1
 800fbf8:	60fa      	str	r2, [r7, #12]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d10a      	bne.n	800fc14 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800fc0e:	2303      	movs	r3, #3
 800fc10:	72fb      	strb	r3, [r7, #11]
      break;
 800fc12:	e006      	b.n	800fc22 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1e8      	bne.n	800fbf4 <SAI_Disable+0x2c>

  return status;
 800fc22:	7afb      	ldrb	r3, [r7, #11]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3714      	adds	r7, #20
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr
 800fc30:	20000028 	.word	0x20000028
 800fc34:	95cbec1b 	.word	0x95cbec1b

0800fc38 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc44:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	69db      	ldr	r3, [r3, #28]
 800fc4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc4e:	d01c      	beq.n	800fc8a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2200      	movs	r2, #0
 800fc54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fc66:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fc68:	2100      	movs	r1, #0
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f7ff ff76 	bl	800fb5c <SAI_InterruptFlag>
 800fc70:	4603      	mov	r3, r0
 800fc72:	43d9      	mvns	r1, r3
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	691a      	ldr	r2, [r3, #16]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	400a      	ands	r2, r1
 800fc80:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2201      	movs	r2, #1
 800fc86:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800fc8a:	68f8      	ldr	r0, [r7, #12]
 800fc8c:	f7f6 fa56 	bl	800613c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fc90:	bf00      	nop
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800fca6:	68f8      	ldr	r0, [r7, #12]
 800fca8:	f7f6 fa52 	bl	8006150 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fcac:	bf00      	nop
 800fcae:	3710      	adds	r7, #16
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	69db      	ldr	r3, [r3, #28]
 800fcc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcca:	d01c      	beq.n	800fd06 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fcda:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2200      	movs	r2, #0
 800fce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fce4:	2100      	movs	r1, #0
 800fce6:	68f8      	ldr	r0, [r7, #12]
 800fce8:	f7ff ff38 	bl	800fb5c <SAI_InterruptFlag>
 800fcec:	4603      	mov	r3, r0
 800fcee:	43d9      	mvns	r1, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	691a      	ldr	r2, [r3, #16]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	400a      	ands	r2, r1
 800fcfc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2201      	movs	r2, #1
 800fd02:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f7f1 fa92 	bl	8001230 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fd0c:	bf00      	nop
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7f1 fa94 	bl	8001250 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fd28:	bf00      	nop
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd3c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d004      	beq.n	800fd62 <SAI_DMAError+0x32>
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d112      	bne.n	800fd88 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fd70:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f7ff ff28 	bl	800fbc8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2200      	movs	r2, #0
 800fd84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f7f6 f9eb 	bl	8006164 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fd8e:	bf00      	nop
 800fd90:	3710      	adds	r7, #16
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b082      	sub	sp, #8
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d101      	bne.n	800fda8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800fda4:	2301      	movs	r3, #1
 800fda6:	e022      	b.n	800fdee <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d105      	bne.n	800fdc0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7f3 fee0 	bl	8003b80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2203      	movs	r2, #3
 800fdc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f815 	bl	800fdf8 <HAL_SD_InitCard>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	e00a      	b.n	800fdee <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2201      	movs	r2, #1
 800fde8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3708      	adds	r7, #8
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
	...

0800fdf8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fdf8:	b5b0      	push	{r4, r5, r7, lr}
 800fdfa:	b08e      	sub	sp, #56	; 0x38
 800fdfc:	af04      	add	r7, sp, #16
 800fdfe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800fe00:	2300      	movs	r3, #0
 800fe02:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800fe04:	2300      	movs	r3, #0
 800fe06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800fe10:	2300      	movs	r3, #0
 800fe12:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800fe14:	2376      	movs	r3, #118	; 0x76
 800fe16:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681d      	ldr	r5, [r3, #0]
 800fe1c:	466c      	mov	r4, sp
 800fe1e:	f107 0314 	add.w	r3, r7, #20
 800fe22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe2a:	f107 0308 	add.w	r3, r7, #8
 800fe2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe30:	4628      	mov	r0, r5
 800fe32:	f003 f91b 	bl	801306c <SDMMC_Init>
 800fe36:	4603      	mov	r3, r0
 800fe38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800fe3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d001      	beq.n	800fe48 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800fe44:	2301      	movs	r3, #1
 800fe46:	e056      	b.n	800fef6 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fe56:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f003 f93e 	bl	80130de <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	685a      	ldr	r2, [r3, #4]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe70:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 fe0e 	bl	8010a94 <SD_PowerON>
 800fe78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fe7a:	6a3b      	ldr	r3, [r7, #32]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00b      	beq.n	800fe98 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2201      	movs	r2, #1
 800fe84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe8c:	6a3b      	ldr	r3, [r7, #32]
 800fe8e:	431a      	orrs	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800fe94:	2301      	movs	r3, #1
 800fe96:	e02e      	b.n	800fef6 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 fd2f 	bl	80108fc <SD_InitCard>
 800fe9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fea0:	6a3b      	ldr	r3, [r7, #32]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00b      	beq.n	800febe <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2201      	movs	r2, #1
 800feaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	431a      	orrs	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800feba:	2301      	movs	r3, #1
 800febc:	e01b      	b.n	800fef6 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fec6:	4618      	mov	r0, r3
 800fec8:	f003 f99c 	bl	8013204 <SDMMC_CmdBlockLength>
 800fecc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fece:	6a3b      	ldr	r3, [r7, #32]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00f      	beq.n	800fef4 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a09      	ldr	r2, [pc, #36]	; (800ff00 <HAL_SD_InitCard+0x108>)
 800feda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fee0:	6a3b      	ldr	r3, [r7, #32]
 800fee2:	431a      	orrs	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fef0:	2301      	movs	r3, #1
 800fef2:	e000      	b.n	800fef6 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3728      	adds	r7, #40	; 0x28
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bdb0      	pop	{r4, r5, r7, pc}
 800fefe:	bf00      	nop
 800ff00:	004005ff 	.word	0x004005ff

0800ff04 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b08c      	sub	sp, #48	; 0x30
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
 800ff10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d107      	bne.n	800ff2c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e0c3      	b.n	80100b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	f040 80bc 	bne.w	80100b2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ff40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	441a      	add	r2, r3
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d907      	bls.n	800ff5e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e0aa      	b.n	80100b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2203      	movs	r2, #3
 800ff62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ff7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff82:	4a4e      	ldr	r2, [pc, #312]	; (80100bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ff84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff8a:	4a4d      	ldr	r2, [pc, #308]	; (80100c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800ff8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff92:	2200      	movs	r2, #0
 800ff94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffae:	689a      	ldr	r2, [r3, #8]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	430a      	orrs	r2, r1
 800ffb8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	3380      	adds	r3, #128	; 0x80
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	025b      	lsls	r3, r3, #9
 800ffcc:	089b      	lsrs	r3, r3, #2
 800ffce:	f7f8 fd1d 	bl	8008a0c <HAL_DMA_Start_IT>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d017      	beq.n	8010008 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ffe6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a35      	ldr	r2, [pc, #212]	; (80100c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ffee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fff4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2201      	movs	r2, #1
 8010000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010004:	2301      	movs	r3, #1
 8010006:	e055      	b.n	80100b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f042 0208 	orr.w	r2, r2, #8
 8010016:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801001c:	2b01      	cmp	r3, #1
 801001e:	d002      	beq.n	8010026 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8010020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010022:	025b      	lsls	r3, r3, #9
 8010024:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010026:	f04f 33ff 	mov.w	r3, #4294967295
 801002a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	025b      	lsls	r3, r3, #9
 8010030:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010032:	2390      	movs	r3, #144	; 0x90
 8010034:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010036:	2302      	movs	r3, #2
 8010038:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801003a:	2300      	movs	r3, #0
 801003c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 801003e:	2301      	movs	r3, #1
 8010040:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f107 0210 	add.w	r2, r7, #16
 801004a:	4611      	mov	r1, r2
 801004c:	4618      	mov	r0, r3
 801004e:	f003 f8ad 	bl	80131ac <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	2b01      	cmp	r3, #1
 8010056:	d90a      	bls.n	801006e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2282      	movs	r2, #130	; 0x82
 801005c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010064:	4618      	mov	r0, r3
 8010066:	f003 f911 	bl	801328c <SDMMC_CmdReadMultiBlock>
 801006a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801006c:	e009      	b.n	8010082 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2281      	movs	r2, #129	; 0x81
 8010072:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801007a:	4618      	mov	r0, r3
 801007c:	f003 f8e4 	bl	8013248 <SDMMC_CmdReadSingleBlock>
 8010080:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8010082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010084:	2b00      	cmp	r3, #0
 8010086:	d012      	beq.n	80100ae <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4a0d      	ldr	r2, [pc, #52]	; (80100c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 801008e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010096:	431a      	orrs	r2, r3
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2201      	movs	r2, #1
 80100a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2200      	movs	r2, #0
 80100a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80100aa:	2301      	movs	r3, #1
 80100ac:	e002      	b.n	80100b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80100ae:	2300      	movs	r3, #0
 80100b0:	e000      	b.n	80100b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80100b2:	2302      	movs	r3, #2
  }
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3730      	adds	r7, #48	; 0x30
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	080107e7 	.word	0x080107e7
 80100c0:	08010859 	.word	0x08010859
 80100c4:	004005ff 	.word	0x004005ff

080100c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08c      	sub	sp, #48	; 0x30
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	607a      	str	r2, [r7, #4]
 80100d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d107      	bne.n	80100f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80100ec:	2301      	movs	r3, #1
 80100ee:	e0c6      	b.n	801027e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	f040 80bf 	bne.w	801027c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2200      	movs	r2, #0
 8010102:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	441a      	add	r2, r3
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801010e:	429a      	cmp	r2, r3
 8010110:	d907      	bls.n	8010122 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010116:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801011e:	2301      	movs	r3, #1
 8010120:	e0ad      	b.n	801027e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2203      	movs	r2, #3
 8010126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2200      	movs	r2, #0
 8010130:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f042 021a 	orr.w	r2, r2, #26
 8010140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010146:	4a50      	ldr	r2, [pc, #320]	; (8010288 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8010148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801014e:	4a4f      	ldr	r2, [pc, #316]	; (801028c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8010150:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010156:	2200      	movs	r2, #0
 8010158:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801015e:	2b01      	cmp	r3, #1
 8010160:	d002      	beq.n	8010168 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8010162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010164:	025b      	lsls	r3, r3, #9
 8010166:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	2b01      	cmp	r3, #1
 801016c:	d90a      	bls.n	8010184 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	22a0      	movs	r2, #160	; 0xa0
 8010172:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801017a:	4618      	mov	r0, r3
 801017c:	f003 f8ca 	bl	8013314 <SDMMC_CmdWriteMultiBlock>
 8010180:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010182:	e009      	b.n	8010198 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2290      	movs	r2, #144	; 0x90
 8010188:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010190:	4618      	mov	r0, r3
 8010192:	f003 f89d 	bl	80132d0 <SDMMC_CmdWriteSingleBlock>
 8010196:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8010198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019a:	2b00      	cmp	r3, #0
 801019c:	d012      	beq.n	80101c4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4a3b      	ldr	r2, [pc, #236]	; (8010290 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80101a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ac:	431a      	orrs	r2, r3
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2201      	movs	r2, #1
 80101b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2200      	movs	r2, #0
 80101be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80101c0:	2301      	movs	r3, #1
 80101c2:	e05c      	b.n	801027e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f042 0208 	orr.w	r2, r2, #8
 80101d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101d8:	2240      	movs	r2, #64	; 0x40
 80101da:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ec:	689a      	ldr	r2, [r3, #8]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	430a      	orrs	r2, r1
 80101f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80101fc:	68b9      	ldr	r1, [r7, #8]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3380      	adds	r3, #128	; 0x80
 8010204:	461a      	mov	r2, r3
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	025b      	lsls	r3, r3, #9
 801020a:	089b      	lsrs	r3, r3, #2
 801020c:	f7f8 fbfe 	bl	8008a0c <HAL_DMA_Start_IT>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d01a      	beq.n	801024c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f022 021a 	bic.w	r2, r2, #26
 8010224:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4a19      	ldr	r2, [pc, #100]	; (8010290 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 801022c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010232:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2201      	movs	r2, #1
 801023e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2200      	movs	r2, #0
 8010246:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8010248:	2301      	movs	r3, #1
 801024a:	e018      	b.n	801027e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801024c:	f04f 33ff 	mov.w	r3, #4294967295
 8010250:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	025b      	lsls	r3, r3, #9
 8010256:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010258:	2390      	movs	r3, #144	; 0x90
 801025a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801025c:	2300      	movs	r3, #0
 801025e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010260:	2300      	movs	r3, #0
 8010262:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8010264:	2301      	movs	r3, #1
 8010266:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f107 0210 	add.w	r2, r7, #16
 8010270:	4611      	mov	r1, r2
 8010272:	4618      	mov	r0, r3
 8010274:	f002 ff9a 	bl	80131ac <SDMMC_ConfigData>

      return HAL_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	e000      	b.n	801027e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 801027c:	2302      	movs	r3, #2
  }
}
 801027e:	4618      	mov	r0, r3
 8010280:	3730      	adds	r7, #48	; 0x30
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	080107bd 	.word	0x080107bd
 801028c:	08010859 	.word	0x08010859
 8010290:	004005ff 	.word	0x004005ff

08010294 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801029c:	bf00      	nop
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102b6:	0f9b      	lsrs	r3, r3, #30
 80102b8:	b2da      	uxtb	r2, r3
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102c2:	0e9b      	lsrs	r3, r3, #26
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	f003 030f 	and.w	r3, r3, #15
 80102ca:	b2da      	uxtb	r2, r3
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102d4:	0e1b      	lsrs	r3, r3, #24
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	f003 0303 	and.w	r3, r3, #3
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102e6:	0c1b      	lsrs	r3, r3, #16
 80102e8:	b2da      	uxtb	r2, r3
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102f2:	0a1b      	lsrs	r3, r3, #8
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102fe:	b2da      	uxtb	r2, r3
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010308:	0d1b      	lsrs	r3, r3, #20
 801030a:	b29a      	uxth	r2, r3
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010314:	0c1b      	lsrs	r3, r3, #16
 8010316:	b2db      	uxtb	r3, r3
 8010318:	f003 030f 	and.w	r3, r3, #15
 801031c:	b2da      	uxtb	r2, r3
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010326:	0bdb      	lsrs	r3, r3, #15
 8010328:	b2db      	uxtb	r3, r3
 801032a:	f003 0301 	and.w	r3, r3, #1
 801032e:	b2da      	uxtb	r2, r3
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010338:	0b9b      	lsrs	r3, r3, #14
 801033a:	b2db      	uxtb	r3, r3
 801033c:	f003 0301 	and.w	r3, r3, #1
 8010340:	b2da      	uxtb	r2, r3
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801034a:	0b5b      	lsrs	r3, r3, #13
 801034c:	b2db      	uxtb	r3, r3
 801034e:	f003 0301 	and.w	r3, r3, #1
 8010352:	b2da      	uxtb	r2, r3
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801035c:	0b1b      	lsrs	r3, r3, #12
 801035e:	b2db      	uxtb	r3, r3
 8010360:	f003 0301 	and.w	r3, r3, #1
 8010364:	b2da      	uxtb	r2, r3
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	2200      	movs	r2, #0
 801036e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010374:	2b00      	cmp	r3, #0
 8010376:	d163      	bne.n	8010440 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801037c:	009a      	lsls	r2, r3, #2
 801037e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010382:	4013      	ands	r3, r2
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8010388:	0f92      	lsrs	r2, r2, #30
 801038a:	431a      	orrs	r2, r3
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010394:	0edb      	lsrs	r3, r3, #27
 8010396:	b2db      	uxtb	r3, r3
 8010398:	f003 0307 	and.w	r3, r3, #7
 801039c:	b2da      	uxtb	r2, r3
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103a6:	0e1b      	lsrs	r3, r3, #24
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	f003 0307 	and.w	r3, r3, #7
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103b8:	0d5b      	lsrs	r3, r3, #21
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	f003 0307 	and.w	r3, r3, #7
 80103c0:	b2da      	uxtb	r2, r3
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103ca:	0c9b      	lsrs	r3, r3, #18
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	f003 0307 	and.w	r3, r3, #7
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103dc:	0bdb      	lsrs	r3, r3, #15
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	f003 0307 	and.w	r3, r3, #7
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	691b      	ldr	r3, [r3, #16]
 80103ee:	1c5a      	adds	r2, r3, #1
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	7e1b      	ldrb	r3, [r3, #24]
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	f003 0307 	and.w	r3, r3, #7
 80103fe:	3302      	adds	r3, #2
 8010400:	2201      	movs	r2, #1
 8010402:	fa02 f303 	lsl.w	r3, r2, r3
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801040a:	fb02 f203 	mul.w	r2, r2, r3
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	7a1b      	ldrb	r3, [r3, #8]
 8010416:	b2db      	uxtb	r3, r3
 8010418:	f003 030f 	and.w	r3, r3, #15
 801041c:	2201      	movs	r2, #1
 801041e:	409a      	lsls	r2, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801042c:	0a52      	lsrs	r2, r2, #9
 801042e:	fb02 f203 	mul.w	r2, r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f44f 7200 	mov.w	r2, #512	; 0x200
 801043c:	661a      	str	r2, [r3, #96]	; 0x60
 801043e:	e031      	b.n	80104a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010444:	2b01      	cmp	r3, #1
 8010446:	d11d      	bne.n	8010484 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801044c:	041b      	lsls	r3, r3, #16
 801044e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010456:	0c1b      	lsrs	r3, r3, #16
 8010458:	431a      	orrs	r2, r3
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	3301      	adds	r3, #1
 8010464:	029a      	lsls	r2, r3, #10
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010478:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	661a      	str	r2, [r3, #96]	; 0x60
 8010482:	e00f      	b.n	80104a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a58      	ldr	r2, [pc, #352]	; (80105ec <HAL_SD_GetCardCSD+0x344>)
 801048a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2201      	movs	r2, #1
 801049c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80104a0:	2301      	movs	r3, #1
 80104a2:	e09d      	b.n	80105e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a8:	0b9b      	lsrs	r3, r3, #14
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	f003 0301 	and.w	r3, r3, #1
 80104b0:	b2da      	uxtb	r2, r3
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ba:	09db      	lsrs	r3, r3, #7
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104d2:	b2da      	uxtb	r2, r3
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104dc:	0fdb      	lsrs	r3, r3, #31
 80104de:	b2da      	uxtb	r2, r3
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e8:	0f5b      	lsrs	r3, r3, #29
 80104ea:	b2db      	uxtb	r3, r3
 80104ec:	f003 0303 	and.w	r3, r3, #3
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104fa:	0e9b      	lsrs	r3, r3, #26
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	f003 0307 	and.w	r3, r3, #7
 8010502:	b2da      	uxtb	r2, r3
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801050c:	0d9b      	lsrs	r3, r3, #22
 801050e:	b2db      	uxtb	r3, r3
 8010510:	f003 030f 	and.w	r3, r3, #15
 8010514:	b2da      	uxtb	r2, r3
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801051e:	0d5b      	lsrs	r3, r3, #21
 8010520:	b2db      	uxtb	r3, r3
 8010522:	f003 0301 	and.w	r3, r3, #1
 8010526:	b2da      	uxtb	r2, r3
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	2200      	movs	r2, #0
 8010532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801053a:	0c1b      	lsrs	r3, r3, #16
 801053c:	b2db      	uxtb	r3, r3
 801053e:	f003 0301 	and.w	r3, r3, #1
 8010542:	b2da      	uxtb	r2, r3
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801054e:	0bdb      	lsrs	r3, r3, #15
 8010550:	b2db      	uxtb	r3, r3
 8010552:	f003 0301 	and.w	r3, r3, #1
 8010556:	b2da      	uxtb	r2, r3
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010562:	0b9b      	lsrs	r3, r3, #14
 8010564:	b2db      	uxtb	r3, r3
 8010566:	f003 0301 	and.w	r3, r3, #1
 801056a:	b2da      	uxtb	r2, r3
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010576:	0b5b      	lsrs	r3, r3, #13
 8010578:	b2db      	uxtb	r3, r3
 801057a:	f003 0301 	and.w	r3, r3, #1
 801057e:	b2da      	uxtb	r2, r3
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801058a:	0b1b      	lsrs	r3, r3, #12
 801058c:	b2db      	uxtb	r3, r3
 801058e:	f003 0301 	and.w	r3, r3, #1
 8010592:	b2da      	uxtb	r2, r3
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801059e:	0a9b      	lsrs	r3, r3, #10
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	f003 0303 	and.w	r3, r3, #3
 80105a6:	b2da      	uxtb	r2, r3
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105b2:	0a1b      	lsrs	r3, r3, #8
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	f003 0303 	and.w	r3, r3, #3
 80105ba:	b2da      	uxtb	r2, r3
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c6:	085b      	lsrs	r3, r3, #1
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105ce:	b2da      	uxtb	r2, r3
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	2201      	movs	r2, #1
 80105da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80105de:	2300      	movs	r3, #0
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr
 80105ec:	004005ff 	.word	0x004005ff

080105f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801063a:	2300      	movs	r3, #0
}
 801063c:	4618      	mov	r0, r3
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010648:	b5b0      	push	{r4, r5, r7, lr}
 801064a:	b08e      	sub	sp, #56	; 0x38
 801064c:	af04      	add	r7, sp, #16
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010652:	2300      	movs	r3, #0
 8010654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2203      	movs	r2, #3
 801065c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010664:	2b03      	cmp	r3, #3
 8010666:	d02e      	beq.n	80106c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801066e:	d106      	bne.n	801067e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	639a      	str	r2, [r3, #56]	; 0x38
 801067c:	e029      	b.n	80106d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010684:	d10a      	bne.n	801069c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 faba 	bl	8010c00 <SD_WideBus_Enable>
 801068c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010692:	6a3b      	ldr	r3, [r7, #32]
 8010694:	431a      	orrs	r2, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	639a      	str	r2, [r3, #56]	; 0x38
 801069a:	e01a      	b.n	80106d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d10a      	bne.n	80106b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 faf7 	bl	8010c96 <SD_WideBus_Disable>
 80106a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	431a      	orrs	r2, r3
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	639a      	str	r2, [r3, #56]	; 0x38
 80106b6:	e00c      	b.n	80106d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	639a      	str	r2, [r3, #56]	; 0x38
 80106c4:	e005      	b.n	80106d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00b      	beq.n	80106f2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	4a26      	ldr	r2, [pc, #152]	; (8010778 <HAL_SD_ConfigWideBusOperation+0x130>)
 80106e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2201      	movs	r2, #1
 80106e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80106ea:	2301      	movs	r3, #1
 80106ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80106f0:	e01f      	b.n	8010732 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	695b      	ldr	r3, [r3, #20]
 801070c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	699b      	ldr	r3, [r3, #24]
 8010712:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681d      	ldr	r5, [r3, #0]
 8010718:	466c      	mov	r4, sp
 801071a:	f107 0314 	add.w	r3, r7, #20
 801071e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010726:	f107 0308 	add.w	r3, r7, #8
 801072a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801072c:	4628      	mov	r0, r5
 801072e:	f002 fc9d 	bl	801306c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f44f 7100 	mov.w	r1, #512	; 0x200
 801073a:	4618      	mov	r0, r3
 801073c:	f002 fd62 	bl	8013204 <SDMMC_CmdBlockLength>
 8010740:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010742:	6a3b      	ldr	r3, [r7, #32]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00c      	beq.n	8010762 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4a0a      	ldr	r2, [pc, #40]	; (8010778 <HAL_SD_ConfigWideBusOperation+0x130>)
 801074e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	431a      	orrs	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801075c:	2301      	movs	r3, #1
 801075e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2201      	movs	r2, #1
 8010766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 801076a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801076e:	4618      	mov	r0, r3
 8010770:	3728      	adds	r7, #40	; 0x28
 8010772:	46bd      	mov	sp, r7
 8010774:	bdb0      	pop	{r4, r5, r7, pc}
 8010776:	bf00      	nop
 8010778:	004005ff 	.word	0x004005ff

0801077c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010784:	2300      	movs	r3, #0
 8010786:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010788:	f107 030c 	add.w	r3, r7, #12
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 fa0e 	bl	8010bb0 <SD_SendStatus>
 8010794:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d005      	beq.n	80107a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	431a      	orrs	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	0a5b      	lsrs	r3, r3, #9
 80107ac:	f003 030f 	and.w	r3, r3, #15
 80107b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80107b2:	693b      	ldr	r3, [r7, #16]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3718      	adds	r7, #24
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80107bc:	b480      	push	{r7}
 80107be:	b085      	sub	sp, #20
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80107da:	bf00      	nop
 80107dc:	3714      	adds	r7, #20
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b084      	sub	sp, #16
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107f8:	2b82      	cmp	r3, #130	; 0x82
 80107fa:	d111      	bne.n	8010820 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4618      	mov	r0, r3
 8010802:	f002 fda9 	bl	8013358 <SDMMC_CmdStopTransfer>
 8010806:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d008      	beq.n	8010820 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	431a      	orrs	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 801081a:	68f8      	ldr	r0, [r7, #12]
 801081c:	f7ff fd3a 	bl	8010294 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f022 0208 	bic.w	r2, r2, #8
 801082e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f240 523a 	movw	r2, #1338	; 0x53a
 8010838:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2201      	movs	r2, #1
 801083e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2200      	movs	r2, #0
 8010846:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	f004 f955 	bl	8014af8 <HAL_SD_RxCpltCallback>
#endif
}
 801084e:	bf00      	nop
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
	...

08010858 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b086      	sub	sp, #24
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010864:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f7f8 fb4c 	bl	8008f04 <HAL_DMA_GetError>
 801086c:	4603      	mov	r3, r0
 801086e:	2b02      	cmp	r3, #2
 8010870:	d03e      	beq.n	80108f0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010878:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801087e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010880:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d002      	beq.n	801088e <SD_DMAError+0x36>
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2b01      	cmp	r3, #1
 801088c:	d12d      	bne.n	80108ea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a19      	ldr	r2, [pc, #100]	; (80108f8 <SD_DMAError+0xa0>)
 8010894:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80108a4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80108b2:	6978      	ldr	r0, [r7, #20]
 80108b4:	f7ff ff62 	bl	801077c <HAL_SD_GetCardState>
 80108b8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	2b06      	cmp	r3, #6
 80108be:	d002      	beq.n	80108c6 <SD_DMAError+0x6e>
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2b05      	cmp	r3, #5
 80108c4:	d10a      	bne.n	80108dc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	4618      	mov	r0, r3
 80108cc:	f002 fd44 	bl	8013358 <SDMMC_CmdStopTransfer>
 80108d0:	4602      	mov	r2, r0
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108d6:	431a      	orrs	r2, r3
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	2201      	movs	r2, #1
 80108e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	2200      	movs	r2, #0
 80108e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80108ea:	6978      	ldr	r0, [r7, #20]
 80108ec:	f7ff fcd2 	bl	8010294 <HAL_SD_ErrorCallback>
#endif
  }
}
 80108f0:	bf00      	nop
 80108f2:	3718      	adds	r7, #24
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	004005ff 	.word	0x004005ff

080108fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80108fc:	b5b0      	push	{r4, r5, r7, lr}
 80108fe:	b094      	sub	sp, #80	; 0x50
 8010900:	af04      	add	r7, sp, #16
 8010902:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8010904:	2301      	movs	r3, #1
 8010906:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4618      	mov	r0, r3
 801090e:	f002 fbf5 	bl	80130fc <SDMMC_GetPowerState>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d102      	bne.n	801091e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010918:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801091c:	e0b6      	b.n	8010a8c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010922:	2b03      	cmp	r3, #3
 8010924:	d02f      	beq.n	8010986 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	4618      	mov	r0, r3
 801092c:	f002 fe1f 	bl	801356e <SDMMC_CmdSendCID>
 8010930:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010934:	2b00      	cmp	r3, #0
 8010936:	d001      	beq.n	801093c <SD_InitCard+0x40>
    {
      return errorstate;
 8010938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801093a:	e0a7      	b.n	8010a8c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2100      	movs	r1, #0
 8010942:	4618      	mov	r0, r3
 8010944:	f002 fc1f 	bl	8013186 <SDMMC_GetResponse>
 8010948:	4602      	mov	r2, r0
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	2104      	movs	r1, #4
 8010954:	4618      	mov	r0, r3
 8010956:	f002 fc16 	bl	8013186 <SDMMC_GetResponse>
 801095a:	4602      	mov	r2, r0
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2108      	movs	r1, #8
 8010966:	4618      	mov	r0, r3
 8010968:	f002 fc0d 	bl	8013186 <SDMMC_GetResponse>
 801096c:	4602      	mov	r2, r0
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	210c      	movs	r1, #12
 8010978:	4618      	mov	r0, r3
 801097a:	f002 fc04 	bl	8013186 <SDMMC_GetResponse>
 801097e:	4602      	mov	r2, r0
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801098a:	2b03      	cmp	r3, #3
 801098c:	d00d      	beq.n	80109aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f107 020e 	add.w	r2, r7, #14
 8010996:	4611      	mov	r1, r2
 8010998:	4618      	mov	r0, r3
 801099a:	f002 fe25 	bl	80135e8 <SDMMC_CmdSetRelAdd>
 801099e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80109a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d001      	beq.n	80109aa <SD_InitCard+0xae>
    {
      return errorstate;
 80109a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a8:	e070      	b.n	8010a8c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ae:	2b03      	cmp	r3, #3
 80109b0:	d036      	beq.n	8010a20 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80109b2:	89fb      	ldrh	r3, [r7, #14]
 80109b4:	461a      	mov	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109c2:	041b      	lsls	r3, r3, #16
 80109c4:	4619      	mov	r1, r3
 80109c6:	4610      	mov	r0, r2
 80109c8:	f002 fdef 	bl	80135aa <SDMMC_CmdSendCSD>
 80109cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80109ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80109d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d6:	e059      	b.n	8010a8c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	2100      	movs	r1, #0
 80109de:	4618      	mov	r0, r3
 80109e0:	f002 fbd1 	bl	8013186 <SDMMC_GetResponse>
 80109e4:	4602      	mov	r2, r0
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2104      	movs	r1, #4
 80109f0:	4618      	mov	r0, r3
 80109f2:	f002 fbc8 	bl	8013186 <SDMMC_GetResponse>
 80109f6:	4602      	mov	r2, r0
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2108      	movs	r1, #8
 8010a02:	4618      	mov	r0, r3
 8010a04:	f002 fbbf 	bl	8013186 <SDMMC_GetResponse>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	210c      	movs	r1, #12
 8010a14:	4618      	mov	r0, r3
 8010a16:	f002 fbb6 	bl	8013186 <SDMMC_GetResponse>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	2104      	movs	r1, #4
 8010a26:	4618      	mov	r0, r3
 8010a28:	f002 fbad 	bl	8013186 <SDMMC_GetResponse>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	0d1a      	lsrs	r2, r3, #20
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010a34:	f107 0310 	add.w	r3, r7, #16
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f7ff fc34 	bl	80102a8 <HAL_SD_GetCardCSD>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010a46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010a4a:	e01f      	b.n	8010a8c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6819      	ldr	r1, [r3, #0]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a54:	041b      	lsls	r3, r3, #16
 8010a56:	461a      	mov	r2, r3
 8010a58:	f04f 0300 	mov.w	r3, #0
 8010a5c:	4608      	mov	r0, r1
 8010a5e:	f002 fc9d 	bl	801339c <SDMMC_CmdSelDesel>
 8010a62:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8010a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d001      	beq.n	8010a6e <SD_InitCard+0x172>
  {
    return errorstate;
 8010a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a6c:	e00e      	b.n	8010a8c <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681d      	ldr	r5, [r3, #0]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	466c      	mov	r4, sp
 8010a76:	f103 0210 	add.w	r2, r3, #16
 8010a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8010a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010a80:	3304      	adds	r3, #4
 8010a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a84:	4628      	mov	r0, r5
 8010a86:	f002 faf1 	bl	801306c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3740      	adds	r7, #64	; 0x40
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bdb0      	pop	{r4, r5, r7, pc}

08010a94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b086      	sub	sp, #24
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	617b      	str	r3, [r7, #20]
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f002 fc98 	bl	80133e2 <SDMMC_CmdGoIdleState>
 8010ab2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <SD_PowerON+0x2a>
  {
    return errorstate;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	e072      	b.n	8010ba4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f002 fcab 	bl	801341e <SDMMC_CmdOperCond>
 8010ac8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d00d      	beq.n	8010aec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	4618      	mov	r0, r3
 8010adc:	f002 fc81 	bl	80133e2 <SDMMC_CmdGoIdleState>
 8010ae0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d004      	beq.n	8010af2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	e05b      	b.n	8010ba4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d137      	bne.n	8010b6a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2100      	movs	r1, #0
 8010b00:	4618      	mov	r0, r3
 8010b02:	f002 fcab 	bl	801345c <SDMMC_CmdAppCommand>
 8010b06:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d02d      	beq.n	8010b6a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010b12:	e047      	b.n	8010ba4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2100      	movs	r1, #0
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f002 fc9e 	bl	801345c <SDMMC_CmdAppCommand>
 8010b20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <SD_PowerON+0x98>
    {
      return errorstate;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	e03b      	b.n	8010ba4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	491e      	ldr	r1, [pc, #120]	; (8010bac <SD_PowerON+0x118>)
 8010b32:	4618      	mov	r0, r3
 8010b34:	f002 fcb4 	bl	80134a0 <SDMMC_CmdAppOperCommand>
 8010b38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010b40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010b44:	e02e      	b.n	8010ba4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f002 fb1a 	bl	8013186 <SDMMC_GetResponse>
 8010b52:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	0fdb      	lsrs	r3, r3, #31
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d101      	bne.n	8010b60 <SD_PowerON+0xcc>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e000      	b.n	8010b62 <SD_PowerON+0xce>
 8010b60:	2300      	movs	r3, #0
 8010b62:	613b      	str	r3, [r7, #16]

    count++;
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	3301      	adds	r3, #1
 8010b68:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d802      	bhi.n	8010b7a <SD_PowerON+0xe6>
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d0cc      	beq.n	8010b14 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d902      	bls.n	8010b8a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010b88:	e00c      	b.n	8010ba4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d003      	beq.n	8010b9c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2201      	movs	r2, #1
 8010b98:	645a      	str	r2, [r3, #68]	; 0x44
 8010b9a:	e002      	b.n	8010ba2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8010ba2:	2300      	movs	r3, #0
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3718      	adds	r7, #24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	c1100000 	.word	0xc1100000

08010bb0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d102      	bne.n	8010bc6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8010bc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010bc4:	e018      	b.n	8010bf8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681a      	ldr	r2, [r3, #0]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bce:	041b      	lsls	r3, r3, #16
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	4610      	mov	r0, r2
 8010bd4:	f002 fd29 	bl	801362a <SDMMC_CmdSendStatus>
 8010bd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d001      	beq.n	8010be4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	e009      	b.n	8010bf8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2100      	movs	r1, #0
 8010bea:	4618      	mov	r0, r3
 8010bec:	f002 facb 	bl	8013186 <SDMMC_GetResponse>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8010bf6:	2300      	movs	r3, #0
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b086      	sub	sp, #24
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010c08:	2300      	movs	r3, #0
 8010c0a:	60fb      	str	r3, [r7, #12]
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2100      	movs	r1, #0
 8010c16:	4618      	mov	r0, r3
 8010c18:	f002 fab5 	bl	8013186 <SDMMC_GetResponse>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010c26:	d102      	bne.n	8010c2e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010c28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c2c:	e02f      	b.n	8010c8e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010c2e:	f107 030c 	add.w	r3, r7, #12
 8010c32:	4619      	mov	r1, r3
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 f879 	bl	8010d2c <SD_FindSCR>
 8010c3a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d001      	beq.n	8010c46 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	e023      	b.n	8010c8e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d01c      	beq.n	8010c8a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c58:	041b      	lsls	r3, r3, #16
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	4610      	mov	r0, r2
 8010c5e:	f002 fbfd 	bl	801345c <SDMMC_CmdAppCommand>
 8010c62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d001      	beq.n	8010c6e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	e00f      	b.n	8010c8e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	2102      	movs	r1, #2
 8010c74:	4618      	mov	r0, r3
 8010c76:	f002 fc37 	bl	80134e8 <SDMMC_CmdBusWidth>
 8010c7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	e003      	b.n	8010c8e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010c86:	2300      	movs	r3, #0
 8010c88:	e001      	b.n	8010c8e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010c8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3718      	adds	r7, #24
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b086      	sub	sp, #24
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	60fb      	str	r3, [r7, #12]
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2100      	movs	r1, #0
 8010cac:	4618      	mov	r0, r3
 8010cae:	f002 fa6a 	bl	8013186 <SDMMC_GetResponse>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010cbc:	d102      	bne.n	8010cc4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010cc2:	e02f      	b.n	8010d24 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010cc4:	f107 030c 	add.w	r3, r7, #12
 8010cc8:	4619      	mov	r1, r3
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f000 f82e 	bl	8010d2c <SD_FindSCR>
 8010cd0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d001      	beq.n	8010cdc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	e023      	b.n	8010d24 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d01c      	beq.n	8010d20 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cee:	041b      	lsls	r3, r3, #16
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	4610      	mov	r0, r2
 8010cf4:	f002 fbb2 	bl	801345c <SDMMC_CmdAppCommand>
 8010cf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d001      	beq.n	8010d04 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	e00f      	b.n	8010d24 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2100      	movs	r1, #0
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f002 fbec 	bl	80134e8 <SDMMC_CmdBusWidth>
 8010d10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d001      	beq.n	8010d1c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	e003      	b.n	8010d24 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	e001      	b.n	8010d24 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010d20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3718      	adds	r7, #24
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010d2c:	b590      	push	{r4, r7, lr}
 8010d2e:	b08f      	sub	sp, #60	; 0x3c
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010d36:	f7f6 ff3f 	bl	8007bb8 <HAL_GetTick>
 8010d3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8010d40:	2300      	movs	r3, #0
 8010d42:	60bb      	str	r3, [r7, #8]
 8010d44:	2300      	movs	r3, #0
 8010d46:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2108      	movs	r1, #8
 8010d52:	4618      	mov	r0, r3
 8010d54:	f002 fa56 	bl	8013204 <SDMMC_CmdBlockLength>
 8010d58:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d001      	beq.n	8010d64 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	e0b2      	b.n	8010eca <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d6c:	041b      	lsls	r3, r3, #16
 8010d6e:	4619      	mov	r1, r3
 8010d70:	4610      	mov	r0, r2
 8010d72:	f002 fb73 	bl	801345c <SDMMC_CmdAppCommand>
 8010d76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d001      	beq.n	8010d82 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d80:	e0a3      	b.n	8010eca <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010d82:	f04f 33ff 	mov.w	r3, #4294967295
 8010d86:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010d88:	2308      	movs	r3, #8
 8010d8a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010d8c:	2330      	movs	r3, #48	; 0x30
 8010d8e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010d90:	2302      	movs	r3, #2
 8010d92:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010d98:	2301      	movs	r3, #1
 8010d9a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f107 0210 	add.w	r2, r7, #16
 8010da4:	4611      	mov	r1, r2
 8010da6:	4618      	mov	r0, r3
 8010da8:	f002 fa00 	bl	80131ac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f002 fbbb 	bl	801352c <SDMMC_CmdSendSCR>
 8010db6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8010db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d02a      	beq.n	8010e14 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	e083      	b.n	8010eca <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00f      	beq.n	8010df0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6819      	ldr	r1, [r3, #0]
 8010dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd6:	009b      	lsls	r3, r3, #2
 8010dd8:	f107 0208 	add.w	r2, r7, #8
 8010ddc:	18d4      	adds	r4, r2, r3
 8010dde:	4608      	mov	r0, r1
 8010de0:	f002 f970 	bl	80130c4 <SDMMC_ReadFIFO>
 8010de4:	4603      	mov	r3, r0
 8010de6:	6023      	str	r3, [r4, #0]
      index++;
 8010de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dea:	3301      	adds	r3, #1
 8010dec:	637b      	str	r3, [r7, #52]	; 0x34
 8010dee:	e006      	b.n	8010dfe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d012      	beq.n	8010e24 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010dfe:	f7f6 fedb 	bl	8007bb8 <HAL_GetTick>
 8010e02:	4602      	mov	r2, r0
 8010e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e0c:	d102      	bne.n	8010e14 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010e0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e12:	e05a      	b.n	8010eca <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e1a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d0cf      	beq.n	8010dc2 <SD_FindSCR+0x96>
 8010e22:	e000      	b.n	8010e26 <SD_FindSCR+0xfa>
      break;
 8010e24:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e2c:	f003 0308 	and.w	r3, r3, #8
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d005      	beq.n	8010e40 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2208      	movs	r2, #8
 8010e3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010e3c:	2308      	movs	r3, #8
 8010e3e:	e044      	b.n	8010eca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e46:	f003 0302 	and.w	r3, r3, #2
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d005      	beq.n	8010e5a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2202      	movs	r2, #2
 8010e54:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010e56:	2302      	movs	r3, #2
 8010e58:	e037      	b.n	8010eca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e60:	f003 0320 	and.w	r3, r3, #32
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d005      	beq.n	8010e74 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2220      	movs	r2, #32
 8010e6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010e70:	2320      	movs	r3, #32
 8010e72:	e02a      	b.n	8010eca <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f240 523a 	movw	r2, #1338	; 0x53a
 8010e7c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	061a      	lsls	r2, r3, #24
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	021b      	lsls	r3, r3, #8
 8010e86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010e8a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	0a1b      	lsrs	r3, r3, #8
 8010e90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010e94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	0e1b      	lsrs	r3, r3, #24
 8010e9a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9e:	601a      	str	r2, [r3, #0]
    scr++;
 8010ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	061a      	lsls	r2, r3, #24
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	021b      	lsls	r3, r3, #8
 8010eae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010eb2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	0a1b      	lsrs	r3, r3, #8
 8010eb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010ebc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	0e1b      	lsrs	r3, r3, #24
 8010ec2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010ec8:	2300      	movs	r3, #0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	373c      	adds	r7, #60	; 0x3c
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd90      	pop	{r4, r7, pc}

08010ed2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
 8010eda:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d101      	bne.n	8010ee6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e025      	b.n	8010f32 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d106      	bne.n	8010f00 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7f3 f990 	bl	8004220 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2202      	movs	r2, #2
 8010f04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	3304      	adds	r3, #4
 8010f10:	4619      	mov	r1, r3
 8010f12:	4610      	mov	r0, r2
 8010f14:	f001 ff80 	bl	8012e18 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6818      	ldr	r0, [r3, #0]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	461a      	mov	r2, r3
 8010f22:	6839      	ldr	r1, [r7, #0]
 8010f24:	f001 ffea 	bl	8012efc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8010f30:	2300      	movs	r3, #0
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b084      	sub	sp, #16
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	60f8      	str	r0, [r7, #12]
 8010f42:	60b9      	str	r1, [r7, #8]
 8010f44:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	2b02      	cmp	r3, #2
 8010f50:	d101      	bne.n	8010f56 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8010f52:	2302      	movs	r3, #2
 8010f54:	e018      	b.n	8010f88 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2202      	movs	r2, #2
 8010f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	68b9      	ldr	r1, [r7, #8]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f002 f848 	bl	8012ffc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b02      	cmp	r3, #2
 8010f72:	d104      	bne.n	8010f7e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2205      	movs	r2, #5
 8010f78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8010f7c:	e003      	b.n	8010f86 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	2b02      	cmp	r3, #2
 8010fa4:	d101      	bne.n	8010faa <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8010fa6:	2302      	movs	r3, #2
 8010fa8:	e00e      	b.n	8010fc8 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2202      	movs	r2, #2
 8010fae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	6839      	ldr	r1, [r7, #0]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f002 f843 	bl	8013044 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3708      	adds	r7, #8
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d101      	bne.n	8010fe2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	e04c      	b.n	801107c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d106      	bne.n	8010ffc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f7f2 fe24 	bl	8003c44 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2202      	movs	r2, #2
 8011000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f022 0203 	bic.w	r2, r2, #3
 8011012:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 801101c:	68fa      	ldr	r2, [r7, #12]
 801101e:	4b19      	ldr	r3, [pc, #100]	; (8011084 <HAL_SPDIFRX_Init+0xb4>)
 8011020:	4013      	ands	r3, r2
 8011022:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 801102c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8011032:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8011038:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 801103e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8011044:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 801104a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8011050:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8011056:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 801105c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	4313      	orrs	r3, r2
 8011062:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2201      	movs	r2, #1
 8011076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 801107a:	2300      	movs	r3, #0
}
 801107c:	4618      	mov	r0, r3
 801107e:	3710      	adds	r7, #16
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}
 8011084:	fff88407 	.word	0xfff88407

08011088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d101      	bne.n	801109a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011096:	2301      	movs	r3, #1
 8011098:	e049      	b.n	801112e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d106      	bne.n	80110b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2200      	movs	r2, #0
 80110aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f7f2 fe0a 	bl	8003cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2202      	movs	r2, #2
 80110b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	3304      	adds	r3, #4
 80110c4:	4619      	mov	r1, r3
 80110c6:	4610      	mov	r0, r2
 80110c8:	f000 fd28 	bl	8011b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2201      	movs	r2, #1
 80110d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2201      	movs	r2, #1
 80110d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2201      	movs	r2, #1
 80110e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2201      	movs	r2, #1
 80110f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2201      	movs	r2, #1
 80110f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2201      	movs	r2, #1
 8011100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2201      	movs	r2, #1
 8011108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2201      	movs	r2, #1
 8011110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2201      	movs	r2, #1
 8011118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2201      	movs	r2, #1
 8011120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2201      	movs	r2, #1
 8011128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801112c:	2300      	movs	r3, #0
}
 801112e:	4618      	mov	r0, r3
 8011130:	3708      	adds	r7, #8
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
	...

08011138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011138:	b480      	push	{r7}
 801113a:	b085      	sub	sp, #20
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011146:	b2db      	uxtb	r3, r3
 8011148:	2b01      	cmp	r3, #1
 801114a:	d001      	beq.n	8011150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801114c:	2301      	movs	r3, #1
 801114e:	e054      	b.n	80111fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2202      	movs	r2, #2
 8011154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	68da      	ldr	r2, [r3, #12]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f042 0201 	orr.w	r2, r2, #1
 8011166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4a26      	ldr	r2, [pc, #152]	; (8011208 <HAL_TIM_Base_Start_IT+0xd0>)
 801116e:	4293      	cmp	r3, r2
 8011170:	d022      	beq.n	80111b8 <HAL_TIM_Base_Start_IT+0x80>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801117a:	d01d      	beq.n	80111b8 <HAL_TIM_Base_Start_IT+0x80>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a22      	ldr	r2, [pc, #136]	; (801120c <HAL_TIM_Base_Start_IT+0xd4>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d018      	beq.n	80111b8 <HAL_TIM_Base_Start_IT+0x80>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	4a21      	ldr	r2, [pc, #132]	; (8011210 <HAL_TIM_Base_Start_IT+0xd8>)
 801118c:	4293      	cmp	r3, r2
 801118e:	d013      	beq.n	80111b8 <HAL_TIM_Base_Start_IT+0x80>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	4a1f      	ldr	r2, [pc, #124]	; (8011214 <HAL_TIM_Base_Start_IT+0xdc>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d00e      	beq.n	80111b8 <HAL_TIM_Base_Start_IT+0x80>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	4a1e      	ldr	r2, [pc, #120]	; (8011218 <HAL_TIM_Base_Start_IT+0xe0>)
 80111a0:	4293      	cmp	r3, r2
 80111a2:	d009      	beq.n	80111b8 <HAL_TIM_Base_Start_IT+0x80>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	4a1c      	ldr	r2, [pc, #112]	; (801121c <HAL_TIM_Base_Start_IT+0xe4>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d004      	beq.n	80111b8 <HAL_TIM_Base_Start_IT+0x80>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4a1b      	ldr	r2, [pc, #108]	; (8011220 <HAL_TIM_Base_Start_IT+0xe8>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d115      	bne.n	80111e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	689a      	ldr	r2, [r3, #8]
 80111be:	4b19      	ldr	r3, [pc, #100]	; (8011224 <HAL_TIM_Base_Start_IT+0xec>)
 80111c0:	4013      	ands	r3, r2
 80111c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2b06      	cmp	r3, #6
 80111c8:	d015      	beq.n	80111f6 <HAL_TIM_Base_Start_IT+0xbe>
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111d0:	d011      	beq.n	80111f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f042 0201 	orr.w	r2, r2, #1
 80111e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111e2:	e008      	b.n	80111f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f042 0201 	orr.w	r2, r2, #1
 80111f2:	601a      	str	r2, [r3, #0]
 80111f4:	e000      	b.n	80111f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	40010000 	.word	0x40010000
 801120c:	40000400 	.word	0x40000400
 8011210:	40000800 	.word	0x40000800
 8011214:	40000c00 	.word	0x40000c00
 8011218:	40010400 	.word	0x40010400
 801121c:	40014000 	.word	0x40014000
 8011220:	40001800 	.word	0x40001800
 8011224:	00010007 	.word	0x00010007

08011228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d101      	bne.n	801123a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011236:	2301      	movs	r3, #1
 8011238:	e049      	b.n	80112ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011240:	b2db      	uxtb	r3, r3
 8011242:	2b00      	cmp	r3, #0
 8011244:	d106      	bne.n	8011254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 f841 	bl	80112d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2202      	movs	r2, #2
 8011258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	3304      	adds	r3, #4
 8011264:	4619      	mov	r1, r3
 8011266:	4610      	mov	r0, r2
 8011268:	f000 fc58 	bl	8011b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2201      	movs	r2, #1
 8011270:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2201      	movs	r2, #1
 8011278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2201      	movs	r2, #1
 8011280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2201      	movs	r2, #1
 8011288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2201      	movs	r2, #1
 8011290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2201      	movs	r2, #1
 8011298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2201      	movs	r2, #1
 80112a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2201      	movs	r2, #1
 80112a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2201      	movs	r2, #1
 80112b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2201      	movs	r2, #1
 80112c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80112cc:	2300      	movs	r3, #0
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80112d6:	b480      	push	{r7}
 80112d8:	b083      	sub	sp, #12
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80112de:	bf00      	nop
 80112e0:	370c      	adds	r7, #12
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
	...

080112ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d109      	bne.n	8011310 <HAL_TIM_PWM_Start+0x24>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011302:	b2db      	uxtb	r3, r3
 8011304:	2b01      	cmp	r3, #1
 8011306:	bf14      	ite	ne
 8011308:	2301      	movne	r3, #1
 801130a:	2300      	moveq	r3, #0
 801130c:	b2db      	uxtb	r3, r3
 801130e:	e03c      	b.n	801138a <HAL_TIM_PWM_Start+0x9e>
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	2b04      	cmp	r3, #4
 8011314:	d109      	bne.n	801132a <HAL_TIM_PWM_Start+0x3e>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b01      	cmp	r3, #1
 8011320:	bf14      	ite	ne
 8011322:	2301      	movne	r3, #1
 8011324:	2300      	moveq	r3, #0
 8011326:	b2db      	uxtb	r3, r3
 8011328:	e02f      	b.n	801138a <HAL_TIM_PWM_Start+0x9e>
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b08      	cmp	r3, #8
 801132e:	d109      	bne.n	8011344 <HAL_TIM_PWM_Start+0x58>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011336:	b2db      	uxtb	r3, r3
 8011338:	2b01      	cmp	r3, #1
 801133a:	bf14      	ite	ne
 801133c:	2301      	movne	r3, #1
 801133e:	2300      	moveq	r3, #0
 8011340:	b2db      	uxtb	r3, r3
 8011342:	e022      	b.n	801138a <HAL_TIM_PWM_Start+0x9e>
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	2b0c      	cmp	r3, #12
 8011348:	d109      	bne.n	801135e <HAL_TIM_PWM_Start+0x72>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011350:	b2db      	uxtb	r3, r3
 8011352:	2b01      	cmp	r3, #1
 8011354:	bf14      	ite	ne
 8011356:	2301      	movne	r3, #1
 8011358:	2300      	moveq	r3, #0
 801135a:	b2db      	uxtb	r3, r3
 801135c:	e015      	b.n	801138a <HAL_TIM_PWM_Start+0x9e>
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	2b10      	cmp	r3, #16
 8011362:	d109      	bne.n	8011378 <HAL_TIM_PWM_Start+0x8c>
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801136a:	b2db      	uxtb	r3, r3
 801136c:	2b01      	cmp	r3, #1
 801136e:	bf14      	ite	ne
 8011370:	2301      	movne	r3, #1
 8011372:	2300      	moveq	r3, #0
 8011374:	b2db      	uxtb	r3, r3
 8011376:	e008      	b.n	801138a <HAL_TIM_PWM_Start+0x9e>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801137e:	b2db      	uxtb	r3, r3
 8011380:	2b01      	cmp	r3, #1
 8011382:	bf14      	ite	ne
 8011384:	2301      	movne	r3, #1
 8011386:	2300      	moveq	r3, #0
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801138e:	2301      	movs	r3, #1
 8011390:	e092      	b.n	80114b8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d104      	bne.n	80113a2 <HAL_TIM_PWM_Start+0xb6>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2202      	movs	r2, #2
 801139c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80113a0:	e023      	b.n	80113ea <HAL_TIM_PWM_Start+0xfe>
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	2b04      	cmp	r3, #4
 80113a6:	d104      	bne.n	80113b2 <HAL_TIM_PWM_Start+0xc6>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2202      	movs	r2, #2
 80113ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80113b0:	e01b      	b.n	80113ea <HAL_TIM_PWM_Start+0xfe>
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	2b08      	cmp	r3, #8
 80113b6:	d104      	bne.n	80113c2 <HAL_TIM_PWM_Start+0xd6>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2202      	movs	r2, #2
 80113bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80113c0:	e013      	b.n	80113ea <HAL_TIM_PWM_Start+0xfe>
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	2b0c      	cmp	r3, #12
 80113c6:	d104      	bne.n	80113d2 <HAL_TIM_PWM_Start+0xe6>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2202      	movs	r2, #2
 80113cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80113d0:	e00b      	b.n	80113ea <HAL_TIM_PWM_Start+0xfe>
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	2b10      	cmp	r3, #16
 80113d6:	d104      	bne.n	80113e2 <HAL_TIM_PWM_Start+0xf6>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2202      	movs	r2, #2
 80113dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80113e0:	e003      	b.n	80113ea <HAL_TIM_PWM_Start+0xfe>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2202      	movs	r2, #2
 80113e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2201      	movs	r2, #1
 80113f0:	6839      	ldr	r1, [r7, #0]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f000 ff2a 	bl	801224c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a30      	ldr	r2, [pc, #192]	; (80114c0 <HAL_TIM_PWM_Start+0x1d4>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d004      	beq.n	801140c <HAL_TIM_PWM_Start+0x120>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a2f      	ldr	r2, [pc, #188]	; (80114c4 <HAL_TIM_PWM_Start+0x1d8>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d101      	bne.n	8011410 <HAL_TIM_PWM_Start+0x124>
 801140c:	2301      	movs	r3, #1
 801140e:	e000      	b.n	8011412 <HAL_TIM_PWM_Start+0x126>
 8011410:	2300      	movs	r3, #0
 8011412:	2b00      	cmp	r3, #0
 8011414:	d007      	beq.n	8011426 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4a25      	ldr	r2, [pc, #148]	; (80114c0 <HAL_TIM_PWM_Start+0x1d4>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d022      	beq.n	8011476 <HAL_TIM_PWM_Start+0x18a>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011438:	d01d      	beq.n	8011476 <HAL_TIM_PWM_Start+0x18a>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4a22      	ldr	r2, [pc, #136]	; (80114c8 <HAL_TIM_PWM_Start+0x1dc>)
 8011440:	4293      	cmp	r3, r2
 8011442:	d018      	beq.n	8011476 <HAL_TIM_PWM_Start+0x18a>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4a20      	ldr	r2, [pc, #128]	; (80114cc <HAL_TIM_PWM_Start+0x1e0>)
 801144a:	4293      	cmp	r3, r2
 801144c:	d013      	beq.n	8011476 <HAL_TIM_PWM_Start+0x18a>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	4a1f      	ldr	r2, [pc, #124]	; (80114d0 <HAL_TIM_PWM_Start+0x1e4>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d00e      	beq.n	8011476 <HAL_TIM_PWM_Start+0x18a>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	4a19      	ldr	r2, [pc, #100]	; (80114c4 <HAL_TIM_PWM_Start+0x1d8>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d009      	beq.n	8011476 <HAL_TIM_PWM_Start+0x18a>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	4a1b      	ldr	r2, [pc, #108]	; (80114d4 <HAL_TIM_PWM_Start+0x1e8>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d004      	beq.n	8011476 <HAL_TIM_PWM_Start+0x18a>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4a19      	ldr	r2, [pc, #100]	; (80114d8 <HAL_TIM_PWM_Start+0x1ec>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d115      	bne.n	80114a2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	689a      	ldr	r2, [r3, #8]
 801147c:	4b17      	ldr	r3, [pc, #92]	; (80114dc <HAL_TIM_PWM_Start+0x1f0>)
 801147e:	4013      	ands	r3, r2
 8011480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2b06      	cmp	r3, #6
 8011486:	d015      	beq.n	80114b4 <HAL_TIM_PWM_Start+0x1c8>
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801148e:	d011      	beq.n	80114b4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f042 0201 	orr.w	r2, r2, #1
 801149e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114a0:	e008      	b.n	80114b4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f042 0201 	orr.w	r2, r2, #1
 80114b0:	601a      	str	r2, [r3, #0]
 80114b2:	e000      	b.n	80114b6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80114b6:	2300      	movs	r3, #0
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3710      	adds	r7, #16
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	40010000 	.word	0x40010000
 80114c4:	40010400 	.word	0x40010400
 80114c8:	40000400 	.word	0x40000400
 80114cc:	40000800 	.word	0x40000800
 80114d0:	40000c00 	.word	0x40000c00
 80114d4:	40014000 	.word	0x40014000
 80114d8:	40001800 	.word	0x40001800
 80114dc:	00010007 	.word	0x00010007

080114e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	691b      	ldr	r3, [r3, #16]
 80114ee:	f003 0302 	and.w	r3, r3, #2
 80114f2:	2b02      	cmp	r3, #2
 80114f4:	d122      	bne.n	801153c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	f003 0302 	and.w	r3, r3, #2
 8011500:	2b02      	cmp	r3, #2
 8011502:	d11b      	bne.n	801153c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f06f 0202 	mvn.w	r2, #2
 801150c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2201      	movs	r2, #1
 8011512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	699b      	ldr	r3, [r3, #24]
 801151a:	f003 0303 	and.w	r3, r3, #3
 801151e:	2b00      	cmp	r3, #0
 8011520:	d003      	beq.n	801152a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 fadc 	bl	8011ae0 <HAL_TIM_IC_CaptureCallback>
 8011528:	e005      	b.n	8011536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f000 face 	bl	8011acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f000 fadf 	bl	8011af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	691b      	ldr	r3, [r3, #16]
 8011542:	f003 0304 	and.w	r3, r3, #4
 8011546:	2b04      	cmp	r3, #4
 8011548:	d122      	bne.n	8011590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	f003 0304 	and.w	r3, r3, #4
 8011554:	2b04      	cmp	r3, #4
 8011556:	d11b      	bne.n	8011590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f06f 0204 	mvn.w	r2, #4
 8011560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2202      	movs	r2, #2
 8011566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	699b      	ldr	r3, [r3, #24]
 801156e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011572:	2b00      	cmp	r3, #0
 8011574:	d003      	beq.n	801157e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 fab2 	bl	8011ae0 <HAL_TIM_IC_CaptureCallback>
 801157c:	e005      	b.n	801158a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 faa4 	bl	8011acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 fab5 	bl	8011af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	691b      	ldr	r3, [r3, #16]
 8011596:	f003 0308 	and.w	r3, r3, #8
 801159a:	2b08      	cmp	r3, #8
 801159c:	d122      	bne.n	80115e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	f003 0308 	and.w	r3, r3, #8
 80115a8:	2b08      	cmp	r3, #8
 80115aa:	d11b      	bne.n	80115e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f06f 0208 	mvn.w	r2, #8
 80115b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2204      	movs	r2, #4
 80115ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	69db      	ldr	r3, [r3, #28]
 80115c2:	f003 0303 	and.w	r3, r3, #3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d003      	beq.n	80115d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fa88 	bl	8011ae0 <HAL_TIM_IC_CaptureCallback>
 80115d0:	e005      	b.n	80115de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 fa7a 	bl	8011acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 fa8b 	bl	8011af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	691b      	ldr	r3, [r3, #16]
 80115ea:	f003 0310 	and.w	r3, r3, #16
 80115ee:	2b10      	cmp	r3, #16
 80115f0:	d122      	bne.n	8011638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	f003 0310 	and.w	r3, r3, #16
 80115fc:	2b10      	cmp	r3, #16
 80115fe:	d11b      	bne.n	8011638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f06f 0210 	mvn.w	r2, #16
 8011608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2208      	movs	r2, #8
 801160e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	69db      	ldr	r3, [r3, #28]
 8011616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801161a:	2b00      	cmp	r3, #0
 801161c:	d003      	beq.n	8011626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f000 fa5e 	bl	8011ae0 <HAL_TIM_IC_CaptureCallback>
 8011624:	e005      	b.n	8011632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 fa50 	bl	8011acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f000 fa61 	bl	8011af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2200      	movs	r2, #0
 8011636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	f003 0301 	and.w	r3, r3, #1
 8011642:	2b01      	cmp	r3, #1
 8011644:	d10e      	bne.n	8011664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	f003 0301 	and.w	r3, r3, #1
 8011650:	2b01      	cmp	r3, #1
 8011652:	d107      	bne.n	8011664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f06f 0201 	mvn.w	r2, #1
 801165c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7f1 fe8c 	bl	800337c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	691b      	ldr	r3, [r3, #16]
 801166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801166e:	2b80      	cmp	r3, #128	; 0x80
 8011670:	d10e      	bne.n	8011690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801167c:	2b80      	cmp	r3, #128	; 0x80
 801167e:	d107      	bne.n	8011690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f000 ff1a 	bl	80124c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801169a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801169e:	d10e      	bne.n	80116be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116aa:	2b80      	cmp	r3, #128	; 0x80
 80116ac:	d107      	bne.n	80116be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80116b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f000 ff0d 	bl	80124d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116c8:	2b40      	cmp	r3, #64	; 0x40
 80116ca:	d10e      	bne.n	80116ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	68db      	ldr	r3, [r3, #12]
 80116d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116d6:	2b40      	cmp	r3, #64	; 0x40
 80116d8:	d107      	bne.n	80116ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80116e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f000 fa0f 	bl	8011b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	691b      	ldr	r3, [r3, #16]
 80116f0:	f003 0320 	and.w	r3, r3, #32
 80116f4:	2b20      	cmp	r3, #32
 80116f6:	d10e      	bne.n	8011716 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	f003 0320 	and.w	r3, r3, #32
 8011702:	2b20      	cmp	r3, #32
 8011704:	d107      	bne.n	8011716 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f06f 0220 	mvn.w	r2, #32
 801170e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 fecd 	bl	80124b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011716:	bf00      	nop
 8011718:	3708      	adds	r7, #8
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
	...

08011720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011732:	2b01      	cmp	r3, #1
 8011734:	d101      	bne.n	801173a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8011736:	2302      	movs	r3, #2
 8011738:	e0fd      	b.n	8011936 <HAL_TIM_PWM_ConfigChannel+0x216>
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2201      	movs	r2, #1
 801173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2b14      	cmp	r3, #20
 8011746:	f200 80f0 	bhi.w	801192a <HAL_TIM_PWM_ConfigChannel+0x20a>
 801174a:	a201      	add	r2, pc, #4	; (adr r2, 8011750 <HAL_TIM_PWM_ConfigChannel+0x30>)
 801174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011750:	080117a5 	.word	0x080117a5
 8011754:	0801192b 	.word	0x0801192b
 8011758:	0801192b 	.word	0x0801192b
 801175c:	0801192b 	.word	0x0801192b
 8011760:	080117e5 	.word	0x080117e5
 8011764:	0801192b 	.word	0x0801192b
 8011768:	0801192b 	.word	0x0801192b
 801176c:	0801192b 	.word	0x0801192b
 8011770:	08011827 	.word	0x08011827
 8011774:	0801192b 	.word	0x0801192b
 8011778:	0801192b 	.word	0x0801192b
 801177c:	0801192b 	.word	0x0801192b
 8011780:	08011867 	.word	0x08011867
 8011784:	0801192b 	.word	0x0801192b
 8011788:	0801192b 	.word	0x0801192b
 801178c:	0801192b 	.word	0x0801192b
 8011790:	080118a9 	.word	0x080118a9
 8011794:	0801192b 	.word	0x0801192b
 8011798:	0801192b 	.word	0x0801192b
 801179c:	0801192b 	.word	0x0801192b
 80117a0:	080118e9 	.word	0x080118e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	68b9      	ldr	r1, [r7, #8]
 80117aa:	4618      	mov	r0, r3
 80117ac:	f000 fa56 	bl	8011c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	699a      	ldr	r2, [r3, #24]
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f042 0208 	orr.w	r2, r2, #8
 80117be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	699a      	ldr	r2, [r3, #24]
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f022 0204 	bic.w	r2, r2, #4
 80117ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	6999      	ldr	r1, [r3, #24]
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	691a      	ldr	r2, [r3, #16]
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	430a      	orrs	r2, r1
 80117e0:	619a      	str	r2, [r3, #24]
      break;
 80117e2:	e0a3      	b.n	801192c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	68b9      	ldr	r1, [r7, #8]
 80117ea:	4618      	mov	r0, r3
 80117ec:	f000 faa8 	bl	8011d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	699a      	ldr	r2, [r3, #24]
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	699a      	ldr	r2, [r3, #24]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801180e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	6999      	ldr	r1, [r3, #24]
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	021a      	lsls	r2, r3, #8
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	430a      	orrs	r2, r1
 8011822:	619a      	str	r2, [r3, #24]
      break;
 8011824:	e082      	b.n	801192c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	68b9      	ldr	r1, [r7, #8]
 801182c:	4618      	mov	r0, r3
 801182e:	f000 faff 	bl	8011e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	69da      	ldr	r2, [r3, #28]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f042 0208 	orr.w	r2, r2, #8
 8011840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	69da      	ldr	r2, [r3, #28]
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	f022 0204 	bic.w	r2, r2, #4
 8011850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	69d9      	ldr	r1, [r3, #28]
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	691a      	ldr	r2, [r3, #16]
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	430a      	orrs	r2, r1
 8011862:	61da      	str	r2, [r3, #28]
      break;
 8011864:	e062      	b.n	801192c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	68b9      	ldr	r1, [r7, #8]
 801186c:	4618      	mov	r0, r3
 801186e:	f000 fb55 	bl	8011f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	69da      	ldr	r2, [r3, #28]
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	69da      	ldr	r2, [r3, #28]
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	69d9      	ldr	r1, [r3, #28]
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	021a      	lsls	r2, r3, #8
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	430a      	orrs	r2, r1
 80118a4:	61da      	str	r2, [r3, #28]
      break;
 80118a6:	e041      	b.n	801192c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68b9      	ldr	r1, [r7, #8]
 80118ae:	4618      	mov	r0, r3
 80118b0:	f000 fb8c 	bl	8011fcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f042 0208 	orr.w	r2, r2, #8
 80118c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f022 0204 	bic.w	r2, r2, #4
 80118d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	691a      	ldr	r2, [r3, #16]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	430a      	orrs	r2, r1
 80118e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80118e6:	e021      	b.n	801192c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	68b9      	ldr	r1, [r7, #8]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f000 fbbe 	bl	8012070 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011902:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011912:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	691b      	ldr	r3, [r3, #16]
 801191e:	021a      	lsls	r2, r3, #8
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	430a      	orrs	r2, r1
 8011926:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011928:	e000      	b.n	801192c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 801192a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	2200      	movs	r2, #0
 8011930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop

08011940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b084      	sub	sp, #16
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011950:	2b01      	cmp	r3, #1
 8011952:	d101      	bne.n	8011958 <HAL_TIM_ConfigClockSource+0x18>
 8011954:	2302      	movs	r3, #2
 8011956:	e0b3      	b.n	8011ac0 <HAL_TIM_ConfigClockSource+0x180>
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2201      	movs	r2, #1
 801195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2202      	movs	r2, #2
 8011964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011970:	68fa      	ldr	r2, [r7, #12]
 8011972:	4b55      	ldr	r3, [pc, #340]	; (8011ac8 <HAL_TIM_ConfigClockSource+0x188>)
 8011974:	4013      	ands	r3, r2
 8011976:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801197e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	68fa      	ldr	r2, [r7, #12]
 8011986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011990:	d03e      	beq.n	8011a10 <HAL_TIM_ConfigClockSource+0xd0>
 8011992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011996:	f200 8087 	bhi.w	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
 801199a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801199e:	f000 8085 	beq.w	8011aac <HAL_TIM_ConfigClockSource+0x16c>
 80119a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119a6:	d87f      	bhi.n	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
 80119a8:	2b70      	cmp	r3, #112	; 0x70
 80119aa:	d01a      	beq.n	80119e2 <HAL_TIM_ConfigClockSource+0xa2>
 80119ac:	2b70      	cmp	r3, #112	; 0x70
 80119ae:	d87b      	bhi.n	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
 80119b0:	2b60      	cmp	r3, #96	; 0x60
 80119b2:	d050      	beq.n	8011a56 <HAL_TIM_ConfigClockSource+0x116>
 80119b4:	2b60      	cmp	r3, #96	; 0x60
 80119b6:	d877      	bhi.n	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
 80119b8:	2b50      	cmp	r3, #80	; 0x50
 80119ba:	d03c      	beq.n	8011a36 <HAL_TIM_ConfigClockSource+0xf6>
 80119bc:	2b50      	cmp	r3, #80	; 0x50
 80119be:	d873      	bhi.n	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
 80119c0:	2b40      	cmp	r3, #64	; 0x40
 80119c2:	d058      	beq.n	8011a76 <HAL_TIM_ConfigClockSource+0x136>
 80119c4:	2b40      	cmp	r3, #64	; 0x40
 80119c6:	d86f      	bhi.n	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
 80119c8:	2b30      	cmp	r3, #48	; 0x30
 80119ca:	d064      	beq.n	8011a96 <HAL_TIM_ConfigClockSource+0x156>
 80119cc:	2b30      	cmp	r3, #48	; 0x30
 80119ce:	d86b      	bhi.n	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
 80119d0:	2b20      	cmp	r3, #32
 80119d2:	d060      	beq.n	8011a96 <HAL_TIM_ConfigClockSource+0x156>
 80119d4:	2b20      	cmp	r3, #32
 80119d6:	d867      	bhi.n	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d05c      	beq.n	8011a96 <HAL_TIM_ConfigClockSource+0x156>
 80119dc:	2b10      	cmp	r3, #16
 80119de:	d05a      	beq.n	8011a96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80119e0:	e062      	b.n	8011aa8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6818      	ldr	r0, [r3, #0]
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	6899      	ldr	r1, [r3, #8]
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	685a      	ldr	r2, [r3, #4]
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	f000 fc0b 	bl	801220c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	689b      	ldr	r3, [r3, #8]
 80119fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011a04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	609a      	str	r2, [r3, #8]
      break;
 8011a0e:	e04e      	b.n	8011aae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6818      	ldr	r0, [r3, #0]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	6899      	ldr	r1, [r3, #8]
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	685a      	ldr	r2, [r3, #4]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	f000 fbf4 	bl	801220c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	689a      	ldr	r2, [r3, #8]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011a32:	609a      	str	r2, [r3, #8]
      break;
 8011a34:	e03b      	b.n	8011aae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6818      	ldr	r0, [r3, #0]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	6859      	ldr	r1, [r3, #4]
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	461a      	mov	r2, r3
 8011a44:	f000 fb68 	bl	8012118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2150      	movs	r1, #80	; 0x50
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 fbc1 	bl	80121d6 <TIM_ITRx_SetConfig>
      break;
 8011a54:	e02b      	b.n	8011aae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6818      	ldr	r0, [r3, #0]
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	6859      	ldr	r1, [r3, #4]
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	461a      	mov	r2, r3
 8011a64:	f000 fb87 	bl	8012176 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	2160      	movs	r1, #96	; 0x60
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f000 fbb1 	bl	80121d6 <TIM_ITRx_SetConfig>
      break;
 8011a74:	e01b      	b.n	8011aae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6818      	ldr	r0, [r3, #0]
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	6859      	ldr	r1, [r3, #4]
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	461a      	mov	r2, r3
 8011a84:	f000 fb48 	bl	8012118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2140      	movs	r1, #64	; 0x40
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f000 fba1 	bl	80121d6 <TIM_ITRx_SetConfig>
      break;
 8011a94:	e00b      	b.n	8011aae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681a      	ldr	r2, [r3, #0]
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	4610      	mov	r0, r2
 8011aa2:	f000 fb98 	bl	80121d6 <TIM_ITRx_SetConfig>
        break;
 8011aa6:	e002      	b.n	8011aae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8011aa8:	bf00      	nop
 8011aaa:	e000      	b.n	8011aae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8011aac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2201      	movs	r2, #1
 8011ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011abe:	2300      	movs	r3, #0
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	fffeff88 	.word	0xfffeff88

08011acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011ad4:	bf00      	nop
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr

08011ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011ae8:	bf00      	nop
 8011aea:	370c      	adds	r7, #12
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr

08011af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011afc:	bf00      	nop
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr

08011b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	b083      	sub	sp, #12
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011b10:	bf00      	nop
 8011b12:	370c      	adds	r7, #12
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr

08011b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	4a40      	ldr	r2, [pc, #256]	; (8011c30 <TIM_Base_SetConfig+0x114>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d013      	beq.n	8011b5c <TIM_Base_SetConfig+0x40>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b3a:	d00f      	beq.n	8011b5c <TIM_Base_SetConfig+0x40>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	4a3d      	ldr	r2, [pc, #244]	; (8011c34 <TIM_Base_SetConfig+0x118>)
 8011b40:	4293      	cmp	r3, r2
 8011b42:	d00b      	beq.n	8011b5c <TIM_Base_SetConfig+0x40>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	4a3c      	ldr	r2, [pc, #240]	; (8011c38 <TIM_Base_SetConfig+0x11c>)
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d007      	beq.n	8011b5c <TIM_Base_SetConfig+0x40>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	4a3b      	ldr	r2, [pc, #236]	; (8011c3c <TIM_Base_SetConfig+0x120>)
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d003      	beq.n	8011b5c <TIM_Base_SetConfig+0x40>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	4a3a      	ldr	r2, [pc, #232]	; (8011c40 <TIM_Base_SetConfig+0x124>)
 8011b58:	4293      	cmp	r3, r2
 8011b5a:	d108      	bne.n	8011b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	68fa      	ldr	r2, [r7, #12]
 8011b6a:	4313      	orrs	r3, r2
 8011b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	4a2f      	ldr	r2, [pc, #188]	; (8011c30 <TIM_Base_SetConfig+0x114>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d02b      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b7c:	d027      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4a2c      	ldr	r2, [pc, #176]	; (8011c34 <TIM_Base_SetConfig+0x118>)
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d023      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	4a2b      	ldr	r2, [pc, #172]	; (8011c38 <TIM_Base_SetConfig+0x11c>)
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d01f      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	4a2a      	ldr	r2, [pc, #168]	; (8011c3c <TIM_Base_SetConfig+0x120>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d01b      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	4a29      	ldr	r2, [pc, #164]	; (8011c40 <TIM_Base_SetConfig+0x124>)
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	d017      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	4a28      	ldr	r2, [pc, #160]	; (8011c44 <TIM_Base_SetConfig+0x128>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d013      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	4a27      	ldr	r2, [pc, #156]	; (8011c48 <TIM_Base_SetConfig+0x12c>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d00f      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	4a26      	ldr	r2, [pc, #152]	; (8011c4c <TIM_Base_SetConfig+0x130>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d00b      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4a25      	ldr	r2, [pc, #148]	; (8011c50 <TIM_Base_SetConfig+0x134>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d007      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	4a24      	ldr	r2, [pc, #144]	; (8011c54 <TIM_Base_SetConfig+0x138>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d003      	beq.n	8011bce <TIM_Base_SetConfig+0xb2>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4a23      	ldr	r2, [pc, #140]	; (8011c58 <TIM_Base_SetConfig+0x13c>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d108      	bne.n	8011be0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	68fa      	ldr	r2, [r7, #12]
 8011bdc:	4313      	orrs	r3, r2
 8011bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	695b      	ldr	r3, [r3, #20]
 8011bea:	4313      	orrs	r3, r2
 8011bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	689a      	ldr	r2, [r3, #8]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	4a0a      	ldr	r2, [pc, #40]	; (8011c30 <TIM_Base_SetConfig+0x114>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d003      	beq.n	8011c14 <TIM_Base_SetConfig+0xf8>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	4a0c      	ldr	r2, [pc, #48]	; (8011c40 <TIM_Base_SetConfig+0x124>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d103      	bne.n	8011c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	691a      	ldr	r2, [r3, #16]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2201      	movs	r2, #1
 8011c20:	615a      	str	r2, [r3, #20]
}
 8011c22:	bf00      	nop
 8011c24:	3714      	adds	r7, #20
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop
 8011c30:	40010000 	.word	0x40010000
 8011c34:	40000400 	.word	0x40000400
 8011c38:	40000800 	.word	0x40000800
 8011c3c:	40000c00 	.word	0x40000c00
 8011c40:	40010400 	.word	0x40010400
 8011c44:	40014000 	.word	0x40014000
 8011c48:	40014400 	.word	0x40014400
 8011c4c:	40014800 	.word	0x40014800
 8011c50:	40001800 	.word	0x40001800
 8011c54:	40001c00 	.word	0x40001c00
 8011c58:	40002000 	.word	0x40002000

08011c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b087      	sub	sp, #28
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a1b      	ldr	r3, [r3, #32]
 8011c6a:	f023 0201 	bic.w	r2, r3, #1
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6a1b      	ldr	r3, [r3, #32]
 8011c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	699b      	ldr	r3, [r3, #24]
 8011c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	4b2b      	ldr	r3, [pc, #172]	; (8011d34 <TIM_OC1_SetConfig+0xd8>)
 8011c88:	4013      	ands	r3, r2
 8011c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f023 0303 	bic.w	r3, r3, #3
 8011c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	68fa      	ldr	r2, [r7, #12]
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	f023 0302 	bic.w	r3, r3, #2
 8011ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	697a      	ldr	r2, [r7, #20]
 8011cac:	4313      	orrs	r3, r2
 8011cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	4a21      	ldr	r2, [pc, #132]	; (8011d38 <TIM_OC1_SetConfig+0xdc>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d003      	beq.n	8011cc0 <TIM_OC1_SetConfig+0x64>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	4a20      	ldr	r2, [pc, #128]	; (8011d3c <TIM_OC1_SetConfig+0xe0>)
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	d10c      	bne.n	8011cda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	f023 0308 	bic.w	r3, r3, #8
 8011cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	697a      	ldr	r2, [r7, #20]
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	f023 0304 	bic.w	r3, r3, #4
 8011cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	4a16      	ldr	r2, [pc, #88]	; (8011d38 <TIM_OC1_SetConfig+0xdc>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d003      	beq.n	8011cea <TIM_OC1_SetConfig+0x8e>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	4a15      	ldr	r2, [pc, #84]	; (8011d3c <TIM_OC1_SetConfig+0xe0>)
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	d111      	bne.n	8011d0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	695b      	ldr	r3, [r3, #20]
 8011cfe:	693a      	ldr	r2, [r7, #16]
 8011d00:	4313      	orrs	r3, r2
 8011d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	699b      	ldr	r3, [r3, #24]
 8011d08:	693a      	ldr	r2, [r7, #16]
 8011d0a:	4313      	orrs	r3, r2
 8011d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	693a      	ldr	r2, [r7, #16]
 8011d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	68fa      	ldr	r2, [r7, #12]
 8011d18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	685a      	ldr	r2, [r3, #4]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	697a      	ldr	r2, [r7, #20]
 8011d26:	621a      	str	r2, [r3, #32]
}
 8011d28:	bf00      	nop
 8011d2a:	371c      	adds	r7, #28
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	fffeff8f 	.word	0xfffeff8f
 8011d38:	40010000 	.word	0x40010000
 8011d3c:	40010400 	.word	0x40010400

08011d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b087      	sub	sp, #28
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6a1b      	ldr	r3, [r3, #32]
 8011d4e:	f023 0210 	bic.w	r2, r3, #16
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a1b      	ldr	r3, [r3, #32]
 8011d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	699b      	ldr	r3, [r3, #24]
 8011d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	4b2e      	ldr	r3, [pc, #184]	; (8011e24 <TIM_OC2_SetConfig+0xe4>)
 8011d6c:	4013      	ands	r3, r2
 8011d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	021b      	lsls	r3, r3, #8
 8011d7e:	68fa      	ldr	r2, [r7, #12]
 8011d80:	4313      	orrs	r3, r2
 8011d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	f023 0320 	bic.w	r3, r3, #32
 8011d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	689b      	ldr	r3, [r3, #8]
 8011d90:	011b      	lsls	r3, r3, #4
 8011d92:	697a      	ldr	r2, [r7, #20]
 8011d94:	4313      	orrs	r3, r2
 8011d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	4a23      	ldr	r2, [pc, #140]	; (8011e28 <TIM_OC2_SetConfig+0xe8>)
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	d003      	beq.n	8011da8 <TIM_OC2_SetConfig+0x68>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	4a22      	ldr	r2, [pc, #136]	; (8011e2c <TIM_OC2_SetConfig+0xec>)
 8011da4:	4293      	cmp	r3, r2
 8011da6:	d10d      	bne.n	8011dc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	011b      	lsls	r3, r3, #4
 8011db6:	697a      	ldr	r2, [r7, #20]
 8011db8:	4313      	orrs	r3, r2
 8011dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	4a18      	ldr	r2, [pc, #96]	; (8011e28 <TIM_OC2_SetConfig+0xe8>)
 8011dc8:	4293      	cmp	r3, r2
 8011dca:	d003      	beq.n	8011dd4 <TIM_OC2_SetConfig+0x94>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	4a17      	ldr	r2, [pc, #92]	; (8011e2c <TIM_OC2_SetConfig+0xec>)
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d113      	bne.n	8011dfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	695b      	ldr	r3, [r3, #20]
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	693a      	ldr	r2, [r7, #16]
 8011dec:	4313      	orrs	r3, r2
 8011dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	699b      	ldr	r3, [r3, #24]
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	693a      	ldr	r2, [r7, #16]
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	693a      	ldr	r2, [r7, #16]
 8011e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	68fa      	ldr	r2, [r7, #12]
 8011e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	685a      	ldr	r2, [r3, #4]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	697a      	ldr	r2, [r7, #20]
 8011e14:	621a      	str	r2, [r3, #32]
}
 8011e16:	bf00      	nop
 8011e18:	371c      	adds	r7, #28
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr
 8011e22:	bf00      	nop
 8011e24:	feff8fff 	.word	0xfeff8fff
 8011e28:	40010000 	.word	0x40010000
 8011e2c:	40010400 	.word	0x40010400

08011e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b087      	sub	sp, #28
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6a1b      	ldr	r3, [r3, #32]
 8011e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6a1b      	ldr	r3, [r3, #32]
 8011e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	69db      	ldr	r3, [r3, #28]
 8011e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011e58:	68fa      	ldr	r2, [r7, #12]
 8011e5a:	4b2d      	ldr	r3, [pc, #180]	; (8011f10 <TIM_OC3_SetConfig+0xe0>)
 8011e5c:	4013      	ands	r3, r2
 8011e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f023 0303 	bic.w	r3, r3, #3
 8011e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	4313      	orrs	r3, r2
 8011e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	689b      	ldr	r3, [r3, #8]
 8011e7e:	021b      	lsls	r3, r3, #8
 8011e80:	697a      	ldr	r2, [r7, #20]
 8011e82:	4313      	orrs	r3, r2
 8011e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	4a22      	ldr	r2, [pc, #136]	; (8011f14 <TIM_OC3_SetConfig+0xe4>)
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	d003      	beq.n	8011e96 <TIM_OC3_SetConfig+0x66>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	4a21      	ldr	r2, [pc, #132]	; (8011f18 <TIM_OC3_SetConfig+0xe8>)
 8011e92:	4293      	cmp	r3, r2
 8011e94:	d10d      	bne.n	8011eb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	68db      	ldr	r3, [r3, #12]
 8011ea2:	021b      	lsls	r3, r3, #8
 8011ea4:	697a      	ldr	r2, [r7, #20]
 8011ea6:	4313      	orrs	r3, r2
 8011ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	4a17      	ldr	r2, [pc, #92]	; (8011f14 <TIM_OC3_SetConfig+0xe4>)
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d003      	beq.n	8011ec2 <TIM_OC3_SetConfig+0x92>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	4a16      	ldr	r2, [pc, #88]	; (8011f18 <TIM_OC3_SetConfig+0xe8>)
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	d113      	bne.n	8011eea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	695b      	ldr	r3, [r3, #20]
 8011ed6:	011b      	lsls	r3, r3, #4
 8011ed8:	693a      	ldr	r2, [r7, #16]
 8011eda:	4313      	orrs	r3, r2
 8011edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	699b      	ldr	r3, [r3, #24]
 8011ee2:	011b      	lsls	r3, r3, #4
 8011ee4:	693a      	ldr	r2, [r7, #16]
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	693a      	ldr	r2, [r7, #16]
 8011eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	68fa      	ldr	r2, [r7, #12]
 8011ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	685a      	ldr	r2, [r3, #4]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	697a      	ldr	r2, [r7, #20]
 8011f02:	621a      	str	r2, [r3, #32]
}
 8011f04:	bf00      	nop
 8011f06:	371c      	adds	r7, #28
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr
 8011f10:	fffeff8f 	.word	0xfffeff8f
 8011f14:	40010000 	.word	0x40010000
 8011f18:	40010400 	.word	0x40010400

08011f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b087      	sub	sp, #28
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6a1b      	ldr	r3, [r3, #32]
 8011f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6a1b      	ldr	r3, [r3, #32]
 8011f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	69db      	ldr	r3, [r3, #28]
 8011f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011f44:	68fa      	ldr	r2, [r7, #12]
 8011f46:	4b1e      	ldr	r3, [pc, #120]	; (8011fc0 <TIM_OC4_SetConfig+0xa4>)
 8011f48:	4013      	ands	r3, r2
 8011f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	021b      	lsls	r3, r3, #8
 8011f5a:	68fa      	ldr	r2, [r7, #12]
 8011f5c:	4313      	orrs	r3, r2
 8011f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	031b      	lsls	r3, r3, #12
 8011f6e:	693a      	ldr	r2, [r7, #16]
 8011f70:	4313      	orrs	r3, r2
 8011f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	4a13      	ldr	r2, [pc, #76]	; (8011fc4 <TIM_OC4_SetConfig+0xa8>)
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	d003      	beq.n	8011f84 <TIM_OC4_SetConfig+0x68>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	4a12      	ldr	r2, [pc, #72]	; (8011fc8 <TIM_OC4_SetConfig+0xac>)
 8011f80:	4293      	cmp	r3, r2
 8011f82:	d109      	bne.n	8011f98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	695b      	ldr	r3, [r3, #20]
 8011f90:	019b      	lsls	r3, r3, #6
 8011f92:	697a      	ldr	r2, [r7, #20]
 8011f94:	4313      	orrs	r3, r2
 8011f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	697a      	ldr	r2, [r7, #20]
 8011f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	68fa      	ldr	r2, [r7, #12]
 8011fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	685a      	ldr	r2, [r3, #4]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	693a      	ldr	r2, [r7, #16]
 8011fb0:	621a      	str	r2, [r3, #32]
}
 8011fb2:	bf00      	nop
 8011fb4:	371c      	adds	r7, #28
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr
 8011fbe:	bf00      	nop
 8011fc0:	feff8fff 	.word	0xfeff8fff
 8011fc4:	40010000 	.word	0x40010000
 8011fc8:	40010400 	.word	0x40010400

08011fcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b087      	sub	sp, #28
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6a1b      	ldr	r3, [r3, #32]
 8011fda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6a1b      	ldr	r3, [r3, #32]
 8011fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	4b1b      	ldr	r3, [pc, #108]	; (8012064 <TIM_OC5_SetConfig+0x98>)
 8011ff8:	4013      	ands	r3, r2
 8011ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	4313      	orrs	r3, r2
 8012004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801200c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	689b      	ldr	r3, [r3, #8]
 8012012:	041b      	lsls	r3, r3, #16
 8012014:	693a      	ldr	r2, [r7, #16]
 8012016:	4313      	orrs	r3, r2
 8012018:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	4a12      	ldr	r2, [pc, #72]	; (8012068 <TIM_OC5_SetConfig+0x9c>)
 801201e:	4293      	cmp	r3, r2
 8012020:	d003      	beq.n	801202a <TIM_OC5_SetConfig+0x5e>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	4a11      	ldr	r2, [pc, #68]	; (801206c <TIM_OC5_SetConfig+0xa0>)
 8012026:	4293      	cmp	r3, r2
 8012028:	d109      	bne.n	801203e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012030:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	695b      	ldr	r3, [r3, #20]
 8012036:	021b      	lsls	r3, r3, #8
 8012038:	697a      	ldr	r2, [r7, #20]
 801203a:	4313      	orrs	r3, r2
 801203c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	697a      	ldr	r2, [r7, #20]
 8012042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	685a      	ldr	r2, [r3, #4]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	693a      	ldr	r2, [r7, #16]
 8012056:	621a      	str	r2, [r3, #32]
}
 8012058:	bf00      	nop
 801205a:	371c      	adds	r7, #28
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr
 8012064:	fffeff8f 	.word	0xfffeff8f
 8012068:	40010000 	.word	0x40010000
 801206c:	40010400 	.word	0x40010400

08012070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8012070:	b480      	push	{r7}
 8012072:	b087      	sub	sp, #28
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6a1b      	ldr	r3, [r3, #32]
 801207e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6a1b      	ldr	r3, [r3, #32]
 801208a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012098:	68fa      	ldr	r2, [r7, #12]
 801209a:	4b1c      	ldr	r3, [pc, #112]	; (801210c <TIM_OC6_SetConfig+0x9c>)
 801209c:	4013      	ands	r3, r2
 801209e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	021b      	lsls	r3, r3, #8
 80120a6:	68fa      	ldr	r2, [r7, #12]
 80120a8:	4313      	orrs	r3, r2
 80120aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80120b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	051b      	lsls	r3, r3, #20
 80120ba:	693a      	ldr	r2, [r7, #16]
 80120bc:	4313      	orrs	r3, r2
 80120be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	4a13      	ldr	r2, [pc, #76]	; (8012110 <TIM_OC6_SetConfig+0xa0>)
 80120c4:	4293      	cmp	r3, r2
 80120c6:	d003      	beq.n	80120d0 <TIM_OC6_SetConfig+0x60>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	4a12      	ldr	r2, [pc, #72]	; (8012114 <TIM_OC6_SetConfig+0xa4>)
 80120cc:	4293      	cmp	r3, r2
 80120ce:	d109      	bne.n	80120e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80120d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	695b      	ldr	r3, [r3, #20]
 80120dc:	029b      	lsls	r3, r3, #10
 80120de:	697a      	ldr	r2, [r7, #20]
 80120e0:	4313      	orrs	r3, r2
 80120e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	697a      	ldr	r2, [r7, #20]
 80120e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	68fa      	ldr	r2, [r7, #12]
 80120ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	685a      	ldr	r2, [r3, #4]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	693a      	ldr	r2, [r7, #16]
 80120fc:	621a      	str	r2, [r3, #32]
}
 80120fe:	bf00      	nop
 8012100:	371c      	adds	r7, #28
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr
 801210a:	bf00      	nop
 801210c:	feff8fff 	.word	0xfeff8fff
 8012110:	40010000 	.word	0x40010000
 8012114:	40010400 	.word	0x40010400

08012118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012118:	b480      	push	{r7}
 801211a:	b087      	sub	sp, #28
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	6a1b      	ldr	r3, [r3, #32]
 8012128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	6a1b      	ldr	r3, [r3, #32]
 801212e:	f023 0201 	bic.w	r2, r3, #1
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	699b      	ldr	r3, [r3, #24]
 801213a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	011b      	lsls	r3, r3, #4
 8012148:	693a      	ldr	r2, [r7, #16]
 801214a:	4313      	orrs	r3, r2
 801214c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	f023 030a 	bic.w	r3, r3, #10
 8012154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012156:	697a      	ldr	r2, [r7, #20]
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	4313      	orrs	r3, r2
 801215c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	693a      	ldr	r2, [r7, #16]
 8012162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	697a      	ldr	r2, [r7, #20]
 8012168:	621a      	str	r2, [r3, #32]
}
 801216a:	bf00      	nop
 801216c:	371c      	adds	r7, #28
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr

08012176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012176:	b480      	push	{r7}
 8012178:	b087      	sub	sp, #28
 801217a:	af00      	add	r7, sp, #0
 801217c:	60f8      	str	r0, [r7, #12]
 801217e:	60b9      	str	r1, [r7, #8]
 8012180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	6a1b      	ldr	r3, [r3, #32]
 8012186:	f023 0210 	bic.w	r2, r3, #16
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	699b      	ldr	r3, [r3, #24]
 8012192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	6a1b      	ldr	r3, [r3, #32]
 8012198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80121a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	031b      	lsls	r3, r3, #12
 80121a6:	697a      	ldr	r2, [r7, #20]
 80121a8:	4313      	orrs	r3, r2
 80121aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80121b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	011b      	lsls	r3, r3, #4
 80121b8:	693a      	ldr	r2, [r7, #16]
 80121ba:	4313      	orrs	r3, r2
 80121bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	697a      	ldr	r2, [r7, #20]
 80121c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	693a      	ldr	r2, [r7, #16]
 80121c8:	621a      	str	r2, [r3, #32]
}
 80121ca:	bf00      	nop
 80121cc:	371c      	adds	r7, #28
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80121d6:	b480      	push	{r7}
 80121d8:	b085      	sub	sp, #20
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
 80121de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	689b      	ldr	r3, [r3, #8]
 80121e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80121ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80121ee:	683a      	ldr	r2, [r7, #0]
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	4313      	orrs	r3, r2
 80121f4:	f043 0307 	orr.w	r3, r3, #7
 80121f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	68fa      	ldr	r2, [r7, #12]
 80121fe:	609a      	str	r2, [r3, #8]
}
 8012200:	bf00      	nop
 8012202:	3714      	adds	r7, #20
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801220c:	b480      	push	{r7}
 801220e:	b087      	sub	sp, #28
 8012210:	af00      	add	r7, sp, #0
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	60b9      	str	r1, [r7, #8]
 8012216:	607a      	str	r2, [r7, #4]
 8012218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	689b      	ldr	r3, [r3, #8]
 801221e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	021a      	lsls	r2, r3, #8
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	431a      	orrs	r2, r3
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	4313      	orrs	r3, r2
 8012234:	697a      	ldr	r2, [r7, #20]
 8012236:	4313      	orrs	r3, r2
 8012238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	697a      	ldr	r2, [r7, #20]
 801223e:	609a      	str	r2, [r3, #8]
}
 8012240:	bf00      	nop
 8012242:	371c      	adds	r7, #28
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801224c:	b480      	push	{r7}
 801224e:	b087      	sub	sp, #28
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	f003 031f 	and.w	r3, r3, #31
 801225e:	2201      	movs	r2, #1
 8012260:	fa02 f303 	lsl.w	r3, r2, r3
 8012264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	6a1a      	ldr	r2, [r3, #32]
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	43db      	mvns	r3, r3
 801226e:	401a      	ands	r2, r3
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	6a1a      	ldr	r2, [r3, #32]
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	f003 031f 	and.w	r3, r3, #31
 801227e:	6879      	ldr	r1, [r7, #4]
 8012280:	fa01 f303 	lsl.w	r3, r1, r3
 8012284:	431a      	orrs	r2, r3
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	621a      	str	r2, [r3, #32]
}
 801228a:	bf00      	nop
 801228c:	371c      	adds	r7, #28
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr
	...

08012298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012298:	b480      	push	{r7}
 801229a:	b085      	sub	sp, #20
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d101      	bne.n	80122b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80122ac:	2302      	movs	r3, #2
 80122ae:	e06d      	b.n	801238c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2201      	movs	r2, #1
 80122b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2202      	movs	r2, #2
 80122bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	689b      	ldr	r3, [r3, #8]
 80122ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4a30      	ldr	r2, [pc, #192]	; (8012398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80122d6:	4293      	cmp	r3, r2
 80122d8:	d004      	beq.n	80122e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	4a2f      	ldr	r2, [pc, #188]	; (801239c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d108      	bne.n	80122f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80122ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	68fa      	ldr	r2, [r7, #12]
 80122f2:	4313      	orrs	r3, r2
 80122f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	4313      	orrs	r3, r2
 8012306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	68fa      	ldr	r2, [r7, #12]
 801230e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	4a20      	ldr	r2, [pc, #128]	; (8012398 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012316:	4293      	cmp	r3, r2
 8012318:	d022      	beq.n	8012360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012322:	d01d      	beq.n	8012360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	4a1d      	ldr	r2, [pc, #116]	; (80123a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801232a:	4293      	cmp	r3, r2
 801232c:	d018      	beq.n	8012360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	4a1c      	ldr	r2, [pc, #112]	; (80123a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012334:	4293      	cmp	r3, r2
 8012336:	d013      	beq.n	8012360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4a1a      	ldr	r2, [pc, #104]	; (80123a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801233e:	4293      	cmp	r3, r2
 8012340:	d00e      	beq.n	8012360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4a15      	ldr	r2, [pc, #84]	; (801239c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d009      	beq.n	8012360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	4a16      	ldr	r2, [pc, #88]	; (80123ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012352:	4293      	cmp	r3, r2
 8012354:	d004      	beq.n	8012360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4a15      	ldr	r2, [pc, #84]	; (80123b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d10c      	bne.n	801237a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	68ba      	ldr	r2, [r7, #8]
 801236e:	4313      	orrs	r3, r2
 8012370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	68ba      	ldr	r2, [r7, #8]
 8012378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2201      	movs	r2, #1
 801237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2200      	movs	r2, #0
 8012386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801238a:	2300      	movs	r3, #0
}
 801238c:	4618      	mov	r0, r3
 801238e:	3714      	adds	r7, #20
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr
 8012398:	40010000 	.word	0x40010000
 801239c:	40010400 	.word	0x40010400
 80123a0:	40000400 	.word	0x40000400
 80123a4:	40000800 	.word	0x40000800
 80123a8:	40000c00 	.word	0x40000c00
 80123ac:	40014000 	.word	0x40014000
 80123b0:	40001800 	.word	0x40001800

080123b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80123be:	2300      	movs	r3, #0
 80123c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	d101      	bne.n	80123d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80123cc:	2302      	movs	r3, #2
 80123ce:	e065      	b.n	801249c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2201      	movs	r2, #1
 80123d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	4313      	orrs	r3, r2
 80123e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	4313      	orrs	r3, r2
 80123f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	4313      	orrs	r3, r2
 8012400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	4313      	orrs	r3, r2
 801240e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	691b      	ldr	r3, [r3, #16]
 801241a:	4313      	orrs	r3, r2
 801241c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	695b      	ldr	r3, [r3, #20]
 8012428:	4313      	orrs	r3, r2
 801242a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012436:	4313      	orrs	r3, r2
 8012438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	699b      	ldr	r3, [r3, #24]
 8012444:	041b      	lsls	r3, r3, #16
 8012446:	4313      	orrs	r3, r2
 8012448:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	4a16      	ldr	r2, [pc, #88]	; (80124a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8012450:	4293      	cmp	r3, r2
 8012452:	d004      	beq.n	801245e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4a14      	ldr	r2, [pc, #80]	; (80124ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801245a:	4293      	cmp	r3, r2
 801245c:	d115      	bne.n	801248a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012468:	051b      	lsls	r3, r3, #20
 801246a:	4313      	orrs	r3, r2
 801246c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	69db      	ldr	r3, [r3, #28]
 8012478:	4313      	orrs	r3, r2
 801247a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	6a1b      	ldr	r3, [r3, #32]
 8012486:	4313      	orrs	r3, r2
 8012488:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	68fa      	ldr	r2, [r7, #12]
 8012490:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2200      	movs	r2, #0
 8012496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3714      	adds	r7, #20
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr
 80124a8:	40010000 	.word	0x40010000
 80124ac:	40010400 	.word	0x40010400

080124b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80124b0:	b480      	push	{r7}
 80124b2:	b083      	sub	sp, #12
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80124b8:	bf00      	nop
 80124ba:	370c      	adds	r7, #12
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr

080124c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80124c4:	b480      	push	{r7}
 80124c6:	b083      	sub	sp, #12
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80124cc:	bf00      	nop
 80124ce:	370c      	adds	r7, #12
 80124d0:	46bd      	mov	sp, r7
 80124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d6:	4770      	bx	lr

080124d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80124e0:	bf00      	nop
 80124e2:	370c      	adds	r7, #12
 80124e4:	46bd      	mov	sp, r7
 80124e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ea:	4770      	bx	lr

080124ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d101      	bne.n	80124fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80124fa:	2301      	movs	r3, #1
 80124fc:	e040      	b.n	8012580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012502:	2b00      	cmp	r3, #0
 8012504:	d106      	bne.n	8012514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2200      	movs	r2, #0
 801250a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7f1 fd58 	bl	8003fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2224      	movs	r2, #36	; 0x24
 8012518:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	681a      	ldr	r2, [r3, #0]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f022 0201 	bic.w	r2, r2, #1
 8012528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f000 f8c0 	bl	80126b0 <UART_SetConfig>
 8012530:	4603      	mov	r3, r0
 8012532:	2b01      	cmp	r3, #1
 8012534:	d101      	bne.n	801253a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8012536:	2301      	movs	r3, #1
 8012538:	e022      	b.n	8012580 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801253e:	2b00      	cmp	r3, #0
 8012540:	d002      	beq.n	8012548 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 fb16 	bl	8012b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	685a      	ldr	r2, [r3, #4]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	689a      	ldr	r2, [r3, #8]
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f042 0201 	orr.w	r2, r2, #1
 8012576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 fb9d 	bl	8012cb8 <UART_CheckIdleState>
 801257e:	4603      	mov	r3, r0
}
 8012580:	4618      	mov	r0, r3
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b08a      	sub	sp, #40	; 0x28
 801258c:	af02      	add	r7, sp, #8
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	603b      	str	r3, [r7, #0]
 8012594:	4613      	mov	r3, r2
 8012596:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801259c:	2b20      	cmp	r3, #32
 801259e:	f040 8081 	bne.w	80126a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d002      	beq.n	80125ae <HAL_UART_Transmit+0x26>
 80125a8:	88fb      	ldrh	r3, [r7, #6]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d101      	bne.n	80125b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80125ae:	2301      	movs	r3, #1
 80125b0:	e079      	b.n	80126a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	d101      	bne.n	80125c0 <HAL_UART_Transmit+0x38>
 80125bc:	2302      	movs	r3, #2
 80125be:	e072      	b.n	80126a6 <HAL_UART_Transmit+0x11e>
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2201      	movs	r2, #1
 80125c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2200      	movs	r2, #0
 80125cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	2221      	movs	r2, #33	; 0x21
 80125d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80125d6:	f7f5 faef 	bl	8007bb8 <HAL_GetTick>
 80125da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	88fa      	ldrh	r2, [r7, #6]
 80125e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	88fa      	ldrh	r2, [r7, #6]
 80125e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	689b      	ldr	r3, [r3, #8]
 80125f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125f4:	d108      	bne.n	8012608 <HAL_UART_Transmit+0x80>
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	691b      	ldr	r3, [r3, #16]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d104      	bne.n	8012608 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80125fe:	2300      	movs	r3, #0
 8012600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	61bb      	str	r3, [r7, #24]
 8012606:	e003      	b.n	8012610 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801260c:	2300      	movs	r3, #0
 801260e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2200      	movs	r2, #0
 8012614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8012618:	e02c      	b.n	8012674 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	2200      	movs	r2, #0
 8012622:	2180      	movs	r1, #128	; 0x80
 8012624:	68f8      	ldr	r0, [r7, #12]
 8012626:	f000 fb7a 	bl	8012d1e <UART_WaitOnFlagUntilTimeout>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d001      	beq.n	8012634 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8012630:	2303      	movs	r3, #3
 8012632:	e038      	b.n	80126a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d10b      	bne.n	8012652 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	461a      	mov	r2, r3
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012648:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	3302      	adds	r3, #2
 801264e:	61bb      	str	r3, [r7, #24]
 8012650:	e007      	b.n	8012662 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	781a      	ldrb	r2, [r3, #0]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801265c:	69fb      	ldr	r3, [r7, #28]
 801265e:	3301      	adds	r3, #1
 8012660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012668:	b29b      	uxth	r3, r3
 801266a:	3b01      	subs	r3, #1
 801266c:	b29a      	uxth	r2, r3
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801267a:	b29b      	uxth	r3, r3
 801267c:	2b00      	cmp	r3, #0
 801267e:	d1cc      	bne.n	801261a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	9300      	str	r3, [sp, #0]
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	2200      	movs	r2, #0
 8012688:	2140      	movs	r1, #64	; 0x40
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f000 fb47 	bl	8012d1e <UART_WaitOnFlagUntilTimeout>
 8012690:	4603      	mov	r3, r0
 8012692:	2b00      	cmp	r3, #0
 8012694:	d001      	beq.n	801269a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8012696:	2303      	movs	r3, #3
 8012698:	e005      	b.n	80126a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2220      	movs	r2, #32
 801269e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80126a0:	2300      	movs	r3, #0
 80126a2:	e000      	b.n	80126a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80126a4:	2302      	movs	r3, #2
  }
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3720      	adds	r7, #32
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
	...

080126b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b088      	sub	sp, #32
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80126b8:	2300      	movs	r3, #0
 80126ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	689a      	ldr	r2, [r3, #8]
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	691b      	ldr	r3, [r3, #16]
 80126c4:	431a      	orrs	r2, r3
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	695b      	ldr	r3, [r3, #20]
 80126ca:	431a      	orrs	r2, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	69db      	ldr	r3, [r3, #28]
 80126d0:	4313      	orrs	r3, r2
 80126d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	4ba7      	ldr	r3, [pc, #668]	; (8012978 <UART_SetConfig+0x2c8>)
 80126dc:	4013      	ands	r3, r2
 80126de:	687a      	ldr	r2, [r7, #4]
 80126e0:	6812      	ldr	r2, [r2, #0]
 80126e2:	6979      	ldr	r1, [r7, #20]
 80126e4:	430b      	orrs	r3, r1
 80126e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	68da      	ldr	r2, [r3, #12]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	430a      	orrs	r2, r1
 80126fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	699b      	ldr	r3, [r3, #24]
 8012702:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6a1b      	ldr	r3, [r3, #32]
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	4313      	orrs	r3, r2
 801270c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	689b      	ldr	r3, [r3, #8]
 8012714:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	697a      	ldr	r2, [r7, #20]
 801271e:	430a      	orrs	r2, r1
 8012720:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4a95      	ldr	r2, [pc, #596]	; (801297c <UART_SetConfig+0x2cc>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d120      	bne.n	801276e <UART_SetConfig+0xbe>
 801272c:	4b94      	ldr	r3, [pc, #592]	; (8012980 <UART_SetConfig+0x2d0>)
 801272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012732:	f003 0303 	and.w	r3, r3, #3
 8012736:	2b03      	cmp	r3, #3
 8012738:	d816      	bhi.n	8012768 <UART_SetConfig+0xb8>
 801273a:	a201      	add	r2, pc, #4	; (adr r2, 8012740 <UART_SetConfig+0x90>)
 801273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012740:	08012751 	.word	0x08012751
 8012744:	0801275d 	.word	0x0801275d
 8012748:	08012757 	.word	0x08012757
 801274c:	08012763 	.word	0x08012763
 8012750:	2301      	movs	r3, #1
 8012752:	77fb      	strb	r3, [r7, #31]
 8012754:	e14f      	b.n	80129f6 <UART_SetConfig+0x346>
 8012756:	2302      	movs	r3, #2
 8012758:	77fb      	strb	r3, [r7, #31]
 801275a:	e14c      	b.n	80129f6 <UART_SetConfig+0x346>
 801275c:	2304      	movs	r3, #4
 801275e:	77fb      	strb	r3, [r7, #31]
 8012760:	e149      	b.n	80129f6 <UART_SetConfig+0x346>
 8012762:	2308      	movs	r3, #8
 8012764:	77fb      	strb	r3, [r7, #31]
 8012766:	e146      	b.n	80129f6 <UART_SetConfig+0x346>
 8012768:	2310      	movs	r3, #16
 801276a:	77fb      	strb	r3, [r7, #31]
 801276c:	e143      	b.n	80129f6 <UART_SetConfig+0x346>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a84      	ldr	r2, [pc, #528]	; (8012984 <UART_SetConfig+0x2d4>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d132      	bne.n	80127de <UART_SetConfig+0x12e>
 8012778:	4b81      	ldr	r3, [pc, #516]	; (8012980 <UART_SetConfig+0x2d0>)
 801277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801277e:	f003 030c 	and.w	r3, r3, #12
 8012782:	2b0c      	cmp	r3, #12
 8012784:	d828      	bhi.n	80127d8 <UART_SetConfig+0x128>
 8012786:	a201      	add	r2, pc, #4	; (adr r2, 801278c <UART_SetConfig+0xdc>)
 8012788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801278c:	080127c1 	.word	0x080127c1
 8012790:	080127d9 	.word	0x080127d9
 8012794:	080127d9 	.word	0x080127d9
 8012798:	080127d9 	.word	0x080127d9
 801279c:	080127cd 	.word	0x080127cd
 80127a0:	080127d9 	.word	0x080127d9
 80127a4:	080127d9 	.word	0x080127d9
 80127a8:	080127d9 	.word	0x080127d9
 80127ac:	080127c7 	.word	0x080127c7
 80127b0:	080127d9 	.word	0x080127d9
 80127b4:	080127d9 	.word	0x080127d9
 80127b8:	080127d9 	.word	0x080127d9
 80127bc:	080127d3 	.word	0x080127d3
 80127c0:	2300      	movs	r3, #0
 80127c2:	77fb      	strb	r3, [r7, #31]
 80127c4:	e117      	b.n	80129f6 <UART_SetConfig+0x346>
 80127c6:	2302      	movs	r3, #2
 80127c8:	77fb      	strb	r3, [r7, #31]
 80127ca:	e114      	b.n	80129f6 <UART_SetConfig+0x346>
 80127cc:	2304      	movs	r3, #4
 80127ce:	77fb      	strb	r3, [r7, #31]
 80127d0:	e111      	b.n	80129f6 <UART_SetConfig+0x346>
 80127d2:	2308      	movs	r3, #8
 80127d4:	77fb      	strb	r3, [r7, #31]
 80127d6:	e10e      	b.n	80129f6 <UART_SetConfig+0x346>
 80127d8:	2310      	movs	r3, #16
 80127da:	77fb      	strb	r3, [r7, #31]
 80127dc:	e10b      	b.n	80129f6 <UART_SetConfig+0x346>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4a69      	ldr	r2, [pc, #420]	; (8012988 <UART_SetConfig+0x2d8>)
 80127e4:	4293      	cmp	r3, r2
 80127e6:	d120      	bne.n	801282a <UART_SetConfig+0x17a>
 80127e8:	4b65      	ldr	r3, [pc, #404]	; (8012980 <UART_SetConfig+0x2d0>)
 80127ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80127f2:	2b30      	cmp	r3, #48	; 0x30
 80127f4:	d013      	beq.n	801281e <UART_SetConfig+0x16e>
 80127f6:	2b30      	cmp	r3, #48	; 0x30
 80127f8:	d814      	bhi.n	8012824 <UART_SetConfig+0x174>
 80127fa:	2b20      	cmp	r3, #32
 80127fc:	d009      	beq.n	8012812 <UART_SetConfig+0x162>
 80127fe:	2b20      	cmp	r3, #32
 8012800:	d810      	bhi.n	8012824 <UART_SetConfig+0x174>
 8012802:	2b00      	cmp	r3, #0
 8012804:	d002      	beq.n	801280c <UART_SetConfig+0x15c>
 8012806:	2b10      	cmp	r3, #16
 8012808:	d006      	beq.n	8012818 <UART_SetConfig+0x168>
 801280a:	e00b      	b.n	8012824 <UART_SetConfig+0x174>
 801280c:	2300      	movs	r3, #0
 801280e:	77fb      	strb	r3, [r7, #31]
 8012810:	e0f1      	b.n	80129f6 <UART_SetConfig+0x346>
 8012812:	2302      	movs	r3, #2
 8012814:	77fb      	strb	r3, [r7, #31]
 8012816:	e0ee      	b.n	80129f6 <UART_SetConfig+0x346>
 8012818:	2304      	movs	r3, #4
 801281a:	77fb      	strb	r3, [r7, #31]
 801281c:	e0eb      	b.n	80129f6 <UART_SetConfig+0x346>
 801281e:	2308      	movs	r3, #8
 8012820:	77fb      	strb	r3, [r7, #31]
 8012822:	e0e8      	b.n	80129f6 <UART_SetConfig+0x346>
 8012824:	2310      	movs	r3, #16
 8012826:	77fb      	strb	r3, [r7, #31]
 8012828:	e0e5      	b.n	80129f6 <UART_SetConfig+0x346>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	4a57      	ldr	r2, [pc, #348]	; (801298c <UART_SetConfig+0x2dc>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d120      	bne.n	8012876 <UART_SetConfig+0x1c6>
 8012834:	4b52      	ldr	r3, [pc, #328]	; (8012980 <UART_SetConfig+0x2d0>)
 8012836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801283a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801283e:	2bc0      	cmp	r3, #192	; 0xc0
 8012840:	d013      	beq.n	801286a <UART_SetConfig+0x1ba>
 8012842:	2bc0      	cmp	r3, #192	; 0xc0
 8012844:	d814      	bhi.n	8012870 <UART_SetConfig+0x1c0>
 8012846:	2b80      	cmp	r3, #128	; 0x80
 8012848:	d009      	beq.n	801285e <UART_SetConfig+0x1ae>
 801284a:	2b80      	cmp	r3, #128	; 0x80
 801284c:	d810      	bhi.n	8012870 <UART_SetConfig+0x1c0>
 801284e:	2b00      	cmp	r3, #0
 8012850:	d002      	beq.n	8012858 <UART_SetConfig+0x1a8>
 8012852:	2b40      	cmp	r3, #64	; 0x40
 8012854:	d006      	beq.n	8012864 <UART_SetConfig+0x1b4>
 8012856:	e00b      	b.n	8012870 <UART_SetConfig+0x1c0>
 8012858:	2300      	movs	r3, #0
 801285a:	77fb      	strb	r3, [r7, #31]
 801285c:	e0cb      	b.n	80129f6 <UART_SetConfig+0x346>
 801285e:	2302      	movs	r3, #2
 8012860:	77fb      	strb	r3, [r7, #31]
 8012862:	e0c8      	b.n	80129f6 <UART_SetConfig+0x346>
 8012864:	2304      	movs	r3, #4
 8012866:	77fb      	strb	r3, [r7, #31]
 8012868:	e0c5      	b.n	80129f6 <UART_SetConfig+0x346>
 801286a:	2308      	movs	r3, #8
 801286c:	77fb      	strb	r3, [r7, #31]
 801286e:	e0c2      	b.n	80129f6 <UART_SetConfig+0x346>
 8012870:	2310      	movs	r3, #16
 8012872:	77fb      	strb	r3, [r7, #31]
 8012874:	e0bf      	b.n	80129f6 <UART_SetConfig+0x346>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	4a45      	ldr	r2, [pc, #276]	; (8012990 <UART_SetConfig+0x2e0>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d125      	bne.n	80128cc <UART_SetConfig+0x21c>
 8012880:	4b3f      	ldr	r3, [pc, #252]	; (8012980 <UART_SetConfig+0x2d0>)
 8012882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801288a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801288e:	d017      	beq.n	80128c0 <UART_SetConfig+0x210>
 8012890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012894:	d817      	bhi.n	80128c6 <UART_SetConfig+0x216>
 8012896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801289a:	d00b      	beq.n	80128b4 <UART_SetConfig+0x204>
 801289c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128a0:	d811      	bhi.n	80128c6 <UART_SetConfig+0x216>
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d003      	beq.n	80128ae <UART_SetConfig+0x1fe>
 80128a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80128aa:	d006      	beq.n	80128ba <UART_SetConfig+0x20a>
 80128ac:	e00b      	b.n	80128c6 <UART_SetConfig+0x216>
 80128ae:	2300      	movs	r3, #0
 80128b0:	77fb      	strb	r3, [r7, #31]
 80128b2:	e0a0      	b.n	80129f6 <UART_SetConfig+0x346>
 80128b4:	2302      	movs	r3, #2
 80128b6:	77fb      	strb	r3, [r7, #31]
 80128b8:	e09d      	b.n	80129f6 <UART_SetConfig+0x346>
 80128ba:	2304      	movs	r3, #4
 80128bc:	77fb      	strb	r3, [r7, #31]
 80128be:	e09a      	b.n	80129f6 <UART_SetConfig+0x346>
 80128c0:	2308      	movs	r3, #8
 80128c2:	77fb      	strb	r3, [r7, #31]
 80128c4:	e097      	b.n	80129f6 <UART_SetConfig+0x346>
 80128c6:	2310      	movs	r3, #16
 80128c8:	77fb      	strb	r3, [r7, #31]
 80128ca:	e094      	b.n	80129f6 <UART_SetConfig+0x346>
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	4a30      	ldr	r2, [pc, #192]	; (8012994 <UART_SetConfig+0x2e4>)
 80128d2:	4293      	cmp	r3, r2
 80128d4:	d125      	bne.n	8012922 <UART_SetConfig+0x272>
 80128d6:	4b2a      	ldr	r3, [pc, #168]	; (8012980 <UART_SetConfig+0x2d0>)
 80128d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80128e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80128e4:	d017      	beq.n	8012916 <UART_SetConfig+0x266>
 80128e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80128ea:	d817      	bhi.n	801291c <UART_SetConfig+0x26c>
 80128ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80128f0:	d00b      	beq.n	801290a <UART_SetConfig+0x25a>
 80128f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80128f6:	d811      	bhi.n	801291c <UART_SetConfig+0x26c>
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d003      	beq.n	8012904 <UART_SetConfig+0x254>
 80128fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012900:	d006      	beq.n	8012910 <UART_SetConfig+0x260>
 8012902:	e00b      	b.n	801291c <UART_SetConfig+0x26c>
 8012904:	2301      	movs	r3, #1
 8012906:	77fb      	strb	r3, [r7, #31]
 8012908:	e075      	b.n	80129f6 <UART_SetConfig+0x346>
 801290a:	2302      	movs	r3, #2
 801290c:	77fb      	strb	r3, [r7, #31]
 801290e:	e072      	b.n	80129f6 <UART_SetConfig+0x346>
 8012910:	2304      	movs	r3, #4
 8012912:	77fb      	strb	r3, [r7, #31]
 8012914:	e06f      	b.n	80129f6 <UART_SetConfig+0x346>
 8012916:	2308      	movs	r3, #8
 8012918:	77fb      	strb	r3, [r7, #31]
 801291a:	e06c      	b.n	80129f6 <UART_SetConfig+0x346>
 801291c:	2310      	movs	r3, #16
 801291e:	77fb      	strb	r3, [r7, #31]
 8012920:	e069      	b.n	80129f6 <UART_SetConfig+0x346>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	4a1c      	ldr	r2, [pc, #112]	; (8012998 <UART_SetConfig+0x2e8>)
 8012928:	4293      	cmp	r3, r2
 801292a:	d137      	bne.n	801299c <UART_SetConfig+0x2ec>
 801292c:	4b14      	ldr	r3, [pc, #80]	; (8012980 <UART_SetConfig+0x2d0>)
 801292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012932:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801293a:	d017      	beq.n	801296c <UART_SetConfig+0x2bc>
 801293c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012940:	d817      	bhi.n	8012972 <UART_SetConfig+0x2c2>
 8012942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012946:	d00b      	beq.n	8012960 <UART_SetConfig+0x2b0>
 8012948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801294c:	d811      	bhi.n	8012972 <UART_SetConfig+0x2c2>
 801294e:	2b00      	cmp	r3, #0
 8012950:	d003      	beq.n	801295a <UART_SetConfig+0x2aa>
 8012952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012956:	d006      	beq.n	8012966 <UART_SetConfig+0x2b6>
 8012958:	e00b      	b.n	8012972 <UART_SetConfig+0x2c2>
 801295a:	2300      	movs	r3, #0
 801295c:	77fb      	strb	r3, [r7, #31]
 801295e:	e04a      	b.n	80129f6 <UART_SetConfig+0x346>
 8012960:	2302      	movs	r3, #2
 8012962:	77fb      	strb	r3, [r7, #31]
 8012964:	e047      	b.n	80129f6 <UART_SetConfig+0x346>
 8012966:	2304      	movs	r3, #4
 8012968:	77fb      	strb	r3, [r7, #31]
 801296a:	e044      	b.n	80129f6 <UART_SetConfig+0x346>
 801296c:	2308      	movs	r3, #8
 801296e:	77fb      	strb	r3, [r7, #31]
 8012970:	e041      	b.n	80129f6 <UART_SetConfig+0x346>
 8012972:	2310      	movs	r3, #16
 8012974:	77fb      	strb	r3, [r7, #31]
 8012976:	e03e      	b.n	80129f6 <UART_SetConfig+0x346>
 8012978:	efff69f3 	.word	0xefff69f3
 801297c:	40011000 	.word	0x40011000
 8012980:	40023800 	.word	0x40023800
 8012984:	40004400 	.word	0x40004400
 8012988:	40004800 	.word	0x40004800
 801298c:	40004c00 	.word	0x40004c00
 8012990:	40005000 	.word	0x40005000
 8012994:	40011400 	.word	0x40011400
 8012998:	40007800 	.word	0x40007800
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4a71      	ldr	r2, [pc, #452]	; (8012b68 <UART_SetConfig+0x4b8>)
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d125      	bne.n	80129f2 <UART_SetConfig+0x342>
 80129a6:	4b71      	ldr	r3, [pc, #452]	; (8012b6c <UART_SetConfig+0x4bc>)
 80129a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80129b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80129b4:	d017      	beq.n	80129e6 <UART_SetConfig+0x336>
 80129b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80129ba:	d817      	bhi.n	80129ec <UART_SetConfig+0x33c>
 80129bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80129c0:	d00b      	beq.n	80129da <UART_SetConfig+0x32a>
 80129c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80129c6:	d811      	bhi.n	80129ec <UART_SetConfig+0x33c>
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d003      	beq.n	80129d4 <UART_SetConfig+0x324>
 80129cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80129d0:	d006      	beq.n	80129e0 <UART_SetConfig+0x330>
 80129d2:	e00b      	b.n	80129ec <UART_SetConfig+0x33c>
 80129d4:	2300      	movs	r3, #0
 80129d6:	77fb      	strb	r3, [r7, #31]
 80129d8:	e00d      	b.n	80129f6 <UART_SetConfig+0x346>
 80129da:	2302      	movs	r3, #2
 80129dc:	77fb      	strb	r3, [r7, #31]
 80129de:	e00a      	b.n	80129f6 <UART_SetConfig+0x346>
 80129e0:	2304      	movs	r3, #4
 80129e2:	77fb      	strb	r3, [r7, #31]
 80129e4:	e007      	b.n	80129f6 <UART_SetConfig+0x346>
 80129e6:	2308      	movs	r3, #8
 80129e8:	77fb      	strb	r3, [r7, #31]
 80129ea:	e004      	b.n	80129f6 <UART_SetConfig+0x346>
 80129ec:	2310      	movs	r3, #16
 80129ee:	77fb      	strb	r3, [r7, #31]
 80129f0:	e001      	b.n	80129f6 <UART_SetConfig+0x346>
 80129f2:	2310      	movs	r3, #16
 80129f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	69db      	ldr	r3, [r3, #28]
 80129fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80129fe:	d15b      	bne.n	8012ab8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8012a00:	7ffb      	ldrb	r3, [r7, #31]
 8012a02:	2b08      	cmp	r3, #8
 8012a04:	d827      	bhi.n	8012a56 <UART_SetConfig+0x3a6>
 8012a06:	a201      	add	r2, pc, #4	; (adr r2, 8012a0c <UART_SetConfig+0x35c>)
 8012a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a0c:	08012a31 	.word	0x08012a31
 8012a10:	08012a39 	.word	0x08012a39
 8012a14:	08012a41 	.word	0x08012a41
 8012a18:	08012a57 	.word	0x08012a57
 8012a1c:	08012a47 	.word	0x08012a47
 8012a20:	08012a57 	.word	0x08012a57
 8012a24:	08012a57 	.word	0x08012a57
 8012a28:	08012a57 	.word	0x08012a57
 8012a2c:	08012a4f 	.word	0x08012a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012a30:	f7fb fc72 	bl	800e318 <HAL_RCC_GetPCLK1Freq>
 8012a34:	61b8      	str	r0, [r7, #24]
        break;
 8012a36:	e013      	b.n	8012a60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012a38:	f7fb fc82 	bl	800e340 <HAL_RCC_GetPCLK2Freq>
 8012a3c:	61b8      	str	r0, [r7, #24]
        break;
 8012a3e:	e00f      	b.n	8012a60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012a40:	4b4b      	ldr	r3, [pc, #300]	; (8012b70 <UART_SetConfig+0x4c0>)
 8012a42:	61bb      	str	r3, [r7, #24]
        break;
 8012a44:	e00c      	b.n	8012a60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012a46:	f7fb fba5 	bl	800e194 <HAL_RCC_GetSysClockFreq>
 8012a4a:	61b8      	str	r0, [r7, #24]
        break;
 8012a4c:	e008      	b.n	8012a60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a52:	61bb      	str	r3, [r7, #24]
        break;
 8012a54:	e004      	b.n	8012a60 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8012a56:	2300      	movs	r3, #0
 8012a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8012a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d074      	beq.n	8012b50 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	005a      	lsls	r2, r3, #1
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	085b      	lsrs	r3, r3, #1
 8012a70:	441a      	add	r2, r3
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	2b0f      	cmp	r3, #15
 8012a82:	d916      	bls.n	8012ab2 <UART_SetConfig+0x402>
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a8a:	d212      	bcs.n	8012ab2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	f023 030f 	bic.w	r3, r3, #15
 8012a94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	085b      	lsrs	r3, r3, #1
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	f003 0307 	and.w	r3, r3, #7
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	89fb      	ldrh	r3, [r7, #14]
 8012aa4:	4313      	orrs	r3, r2
 8012aa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	89fa      	ldrh	r2, [r7, #14]
 8012aae:	60da      	str	r2, [r3, #12]
 8012ab0:	e04e      	b.n	8012b50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	77bb      	strb	r3, [r7, #30]
 8012ab6:	e04b      	b.n	8012b50 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012ab8:	7ffb      	ldrb	r3, [r7, #31]
 8012aba:	2b08      	cmp	r3, #8
 8012abc:	d827      	bhi.n	8012b0e <UART_SetConfig+0x45e>
 8012abe:	a201      	add	r2, pc, #4	; (adr r2, 8012ac4 <UART_SetConfig+0x414>)
 8012ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ac4:	08012ae9 	.word	0x08012ae9
 8012ac8:	08012af1 	.word	0x08012af1
 8012acc:	08012af9 	.word	0x08012af9
 8012ad0:	08012b0f 	.word	0x08012b0f
 8012ad4:	08012aff 	.word	0x08012aff
 8012ad8:	08012b0f 	.word	0x08012b0f
 8012adc:	08012b0f 	.word	0x08012b0f
 8012ae0:	08012b0f 	.word	0x08012b0f
 8012ae4:	08012b07 	.word	0x08012b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012ae8:	f7fb fc16 	bl	800e318 <HAL_RCC_GetPCLK1Freq>
 8012aec:	61b8      	str	r0, [r7, #24]
        break;
 8012aee:	e013      	b.n	8012b18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012af0:	f7fb fc26 	bl	800e340 <HAL_RCC_GetPCLK2Freq>
 8012af4:	61b8      	str	r0, [r7, #24]
        break;
 8012af6:	e00f      	b.n	8012b18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012af8:	4b1d      	ldr	r3, [pc, #116]	; (8012b70 <UART_SetConfig+0x4c0>)
 8012afa:	61bb      	str	r3, [r7, #24]
        break;
 8012afc:	e00c      	b.n	8012b18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012afe:	f7fb fb49 	bl	800e194 <HAL_RCC_GetSysClockFreq>
 8012b02:	61b8      	str	r0, [r7, #24]
        break;
 8012b04:	e008      	b.n	8012b18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b0a:	61bb      	str	r3, [r7, #24]
        break;
 8012b0c:	e004      	b.n	8012b18 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012b12:	2301      	movs	r3, #1
 8012b14:	77bb      	strb	r3, [r7, #30]
        break;
 8012b16:	bf00      	nop
    }

    if (pclk != 0U)
 8012b18:	69bb      	ldr	r3, [r7, #24]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d018      	beq.n	8012b50 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	085a      	lsrs	r2, r3, #1
 8012b24:	69bb      	ldr	r3, [r7, #24]
 8012b26:	441a      	add	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	2b0f      	cmp	r3, #15
 8012b38:	d908      	bls.n	8012b4c <UART_SetConfig+0x49c>
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b40:	d204      	bcs.n	8012b4c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	693a      	ldr	r2, [r7, #16]
 8012b48:	60da      	str	r2, [r3, #12]
 8012b4a:	e001      	b.n	8012b50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8012b5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3720      	adds	r7, #32
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	40007c00 	.word	0x40007c00
 8012b6c:	40023800 	.word	0x40023800
 8012b70:	00f42400 	.word	0x00f42400

08012b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012b74:	b480      	push	{r7}
 8012b76:	b083      	sub	sp, #12
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b80:	f003 0301 	and.w	r3, r3, #1
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d00a      	beq.n	8012b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	430a      	orrs	r2, r1
 8012b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba2:	f003 0302 	and.w	r3, r3, #2
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d00a      	beq.n	8012bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	430a      	orrs	r2, r1
 8012bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc4:	f003 0304 	and.w	r3, r3, #4
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d00a      	beq.n	8012be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	685b      	ldr	r3, [r3, #4]
 8012bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	430a      	orrs	r2, r1
 8012be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be6:	f003 0308 	and.w	r3, r3, #8
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d00a      	beq.n	8012c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	430a      	orrs	r2, r1
 8012c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c08:	f003 0310 	and.w	r3, r3, #16
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00a      	beq.n	8012c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	689b      	ldr	r3, [r3, #8]
 8012c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	430a      	orrs	r2, r1
 8012c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c2a:	f003 0320 	and.w	r3, r3, #32
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d00a      	beq.n	8012c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	430a      	orrs	r2, r1
 8012c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d01a      	beq.n	8012c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	430a      	orrs	r2, r1
 8012c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012c72:	d10a      	bne.n	8012c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	685b      	ldr	r3, [r3, #4]
 8012c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	430a      	orrs	r2, r1
 8012c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d00a      	beq.n	8012cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	430a      	orrs	r2, r1
 8012caa:	605a      	str	r2, [r3, #4]
  }
}
 8012cac:	bf00      	nop
 8012cae:	370c      	adds	r7, #12
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr

08012cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b086      	sub	sp, #24
 8012cbc:	af02      	add	r7, sp, #8
 8012cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012cc8:	f7f4 ff76 	bl	8007bb8 <HAL_GetTick>
 8012ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	f003 0308 	and.w	r3, r3, #8
 8012cd8:	2b08      	cmp	r3, #8
 8012cda:	d10e      	bne.n	8012cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012ce0:	9300      	str	r3, [sp, #0]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f000 f817 	bl	8012d1e <UART_WaitOnFlagUntilTimeout>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012cf6:	2303      	movs	r3, #3
 8012cf8:	e00d      	b.n	8012d16 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2220      	movs	r2, #32
 8012cfe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2220      	movs	r2, #32
 8012d04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b084      	sub	sp, #16
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	60f8      	str	r0, [r7, #12]
 8012d26:	60b9      	str	r1, [r7, #8]
 8012d28:	603b      	str	r3, [r7, #0]
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012d2e:	e05e      	b.n	8012dee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012d30:	69bb      	ldr	r3, [r7, #24]
 8012d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d36:	d05a      	beq.n	8012dee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012d38:	f7f4 ff3e 	bl	8007bb8 <HAL_GetTick>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	1ad3      	subs	r3, r2, r3
 8012d42:	69ba      	ldr	r2, [r7, #24]
 8012d44:	429a      	cmp	r2, r3
 8012d46:	d302      	bcc.n	8012d4e <UART_WaitOnFlagUntilTimeout+0x30>
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d11b      	bne.n	8012d86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012d5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	689a      	ldr	r2, [r3, #8]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f022 0201 	bic.w	r2, r2, #1
 8012d6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	2220      	movs	r2, #32
 8012d72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2220      	movs	r2, #32
 8012d78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8012d82:	2303      	movs	r3, #3
 8012d84:	e043      	b.n	8012e0e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	f003 0304 	and.w	r3, r3, #4
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d02c      	beq.n	8012dee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	69db      	ldr	r3, [r3, #28]
 8012d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012da2:	d124      	bne.n	8012dee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012dac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012dbc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	689a      	ldr	r2, [r3, #8]
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f022 0201 	bic.w	r2, r2, #1
 8012dcc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	2220      	movs	r2, #32
 8012dd2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	2220      	movs	r2, #32
 8012dd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2220      	movs	r2, #32
 8012dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2200      	movs	r2, #0
 8012de6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8012dea:	2303      	movs	r3, #3
 8012dec:	e00f      	b.n	8012e0e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	69da      	ldr	r2, [r3, #28]
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	4013      	ands	r3, r2
 8012df8:	68ba      	ldr	r2, [r7, #8]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	bf0c      	ite	eq
 8012dfe:	2301      	moveq	r3, #1
 8012e00:	2300      	movne	r3, #0
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	461a      	mov	r2, r3
 8012e06:	79fb      	ldrb	r3, [r7, #7]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d091      	beq.n	8012d30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012e0c:	2300      	movs	r3, #0
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
	...

08012e18 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b085      	sub	sp, #20
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
 8012e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8012e22:	2300      	movs	r3, #0
 8012e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8012e26:	2300      	movs	r3, #0
 8012e28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2b01      	cmp	r3, #1
 8012e30:	d027      	beq.n	8012e82 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8012e38:	68fa      	ldr	r2, [r7, #12]
 8012e3a:	4b2f      	ldr	r3, [pc, #188]	; (8012ef8 <FMC_SDRAM_Init+0xe0>)
 8012e3c:	4013      	ands	r3, r2
 8012e3e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012e48:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8012e4e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8012e54:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8012e5a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8012e60:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8012e66:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8012e6c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8012e72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	4313      	orrs	r3, r2
 8012e78:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	68fa      	ldr	r2, [r7, #12]
 8012e7e:	601a      	str	r2, [r3, #0]
 8012e80:	e032      	b.n	8012ee8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012e8e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8012e98:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8012e9e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	4b12      	ldr	r3, [pc, #72]	; (8012ef8 <FMC_SDRAM_Init+0xe0>)
 8012eb0:	4013      	ands	r3, r2
 8012eb2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012ebc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8012ec2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8012ec8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8012ece:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8012ed4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8012ed6:	68ba      	ldr	r2, [r7, #8]
 8012ed8:	4313      	orrs	r3, r2
 8012eda:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	68fa      	ldr	r2, [r7, #12]
 8012ee0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	68ba      	ldr	r2, [r7, #8]
 8012ee6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8012ee8:	2300      	movs	r3, #0
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3714      	adds	r7, #20
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop
 8012ef8:	ffff8000 	.word	0xffff8000

08012efc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012efc:	b480      	push	{r7}
 8012efe:	b087      	sub	sp, #28
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	60f8      	str	r0, [r7, #12]
 8012f04:	60b9      	str	r1, [r7, #8]
 8012f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d02e      	beq.n	8012f74 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	689b      	ldr	r3, [r3, #8]
 8012f1a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012f22:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012f32:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	689b      	ldr	r3, [r3, #8]
 8012f38:	3b01      	subs	r3, #1
 8012f3a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8012f3c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	3b01      	subs	r3, #1
 8012f44:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8012f46:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	691b      	ldr	r3, [r3, #16]
 8012f4c:	3b01      	subs	r3, #1
 8012f4e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8012f50:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	695b      	ldr	r3, [r3, #20]
 8012f56:	3b01      	subs	r3, #1
 8012f58:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8012f5a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	699b      	ldr	r3, [r3, #24]
 8012f60:	3b01      	subs	r3, #1
 8012f62:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012f64:	4313      	orrs	r3, r2
 8012f66:	697a      	ldr	r2, [r7, #20]
 8012f68:	4313      	orrs	r3, r2
 8012f6a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	697a      	ldr	r2, [r7, #20]
 8012f70:	609a      	str	r2, [r3, #8]
 8012f72:	e039      	b.n	8012fe8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	689b      	ldr	r3, [r3, #8]
 8012f78:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8012f7a:	697a      	ldr	r2, [r7, #20]
 8012f7c:	4b1e      	ldr	r3, [pc, #120]	; (8012ff8 <FMC_SDRAM_Timing_Init+0xfc>)
 8012f7e:	4013      	ands	r3, r2
 8012f80:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	68db      	ldr	r3, [r3, #12]
 8012f86:	3b01      	subs	r3, #1
 8012f88:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	695b      	ldr	r3, [r3, #20]
 8012f8e:	3b01      	subs	r3, #1
 8012f90:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8012f92:	4313      	orrs	r3, r2
 8012f94:	697a      	ldr	r2, [r7, #20]
 8012f96:	4313      	orrs	r3, r2
 8012f98:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012fa6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	3b01      	subs	r3, #1
 8012fb4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012fb6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	689b      	ldr	r3, [r3, #8]
 8012fbc:	3b01      	subs	r3, #1
 8012fbe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8012fc0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	691b      	ldr	r3, [r3, #16]
 8012fc6:	3b01      	subs	r3, #1
 8012fc8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8012fca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	699b      	ldr	r3, [r3, #24]
 8012fd0:	3b01      	subs	r3, #1
 8012fd2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	693a      	ldr	r2, [r7, #16]
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	697a      	ldr	r2, [r7, #20]
 8012fe0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	693a      	ldr	r2, [r7, #16]
 8012fe6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8012fe8:	2300      	movs	r3, #0
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	371c      	adds	r7, #28
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr
 8012ff6:	bf00      	nop
 8012ff8:	ff0f0fff 	.word	0xff0f0fff

08012ffc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8012ffc:	b480      	push	{r7}
 8012ffe:	b085      	sub	sp, #20
 8013000:	af00      	add	r7, sp, #0
 8013002:	60f8      	str	r0, [r7, #12]
 8013004:	60b9      	str	r1, [r7, #8]
 8013006:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	691a      	ldr	r2, [r3, #16]
 801300c:	4b0c      	ldr	r3, [pc, #48]	; (8013040 <FMC_SDRAM_SendCommand+0x44>)
 801300e:	4013      	ands	r3, r2
 8013010:	68ba      	ldr	r2, [r7, #8]
 8013012:	6811      	ldr	r1, [r2, #0]
 8013014:	68ba      	ldr	r2, [r7, #8]
 8013016:	6852      	ldr	r2, [r2, #4]
 8013018:	4311      	orrs	r1, r2
 801301a:	68ba      	ldr	r2, [r7, #8]
 801301c:	6892      	ldr	r2, [r2, #8]
 801301e:	3a01      	subs	r2, #1
 8013020:	0152      	lsls	r2, r2, #5
 8013022:	4311      	orrs	r1, r2
 8013024:	68ba      	ldr	r2, [r7, #8]
 8013026:	68d2      	ldr	r2, [r2, #12]
 8013028:	0252      	lsls	r2, r2, #9
 801302a:	430a      	orrs	r2, r1
 801302c:	431a      	orrs	r2, r3
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr
 8013040:	ffc00000 	.word	0xffc00000

08013044 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8013044:	b480      	push	{r7}
 8013046:	b083      	sub	sp, #12
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	695a      	ldr	r2, [r3, #20]
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	431a      	orrs	r2, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 801305c:	2300      	movs	r3, #0
}
 801305e:	4618      	mov	r0, r3
 8013060:	370c      	adds	r7, #12
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr
	...

0801306c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801306c:	b084      	sub	sp, #16
 801306e:	b480      	push	{r7}
 8013070:	b085      	sub	sp, #20
 8013072:	af00      	add	r7, sp, #0
 8013074:	6078      	str	r0, [r7, #4]
 8013076:	f107 001c 	add.w	r0, r7, #28
 801307a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801307e:	2300      	movs	r3, #0
 8013080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8013082:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8013084:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8013086:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8013088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801308a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801308e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8013090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8013092:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8013096:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8013098:	68fa      	ldr	r2, [r7, #12]
 801309a:	4313      	orrs	r3, r2
 801309c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	685a      	ldr	r2, [r3, #4]
 80130a2:	4b07      	ldr	r3, [pc, #28]	; (80130c0 <SDMMC_Init+0x54>)
 80130a4:	4013      	ands	r3, r2
 80130a6:	68fa      	ldr	r2, [r7, #12]
 80130a8:	431a      	orrs	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80130ae:	2300      	movs	r3, #0
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3714      	adds	r7, #20
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	b004      	add	sp, #16
 80130bc:	4770      	bx	lr
 80130be:	bf00      	nop
 80130c0:	ffff8100 	.word	0xffff8100

080130c4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80130c4:	b480      	push	{r7}
 80130c6:	b083      	sub	sp, #12
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	370c      	adds	r7, #12
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr

080130de <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80130de:	b580      	push	{r7, lr}
 80130e0:	b082      	sub	sp, #8
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2203      	movs	r2, #3
 80130ea:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80130ec:	2002      	movs	r0, #2
 80130ee:	f7f4 fd6f 	bl	8007bd0 <HAL_Delay>
  
  return HAL_OK;
 80130f2:	2300      	movs	r3, #0
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3708      	adds	r7, #8
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80130fc:	b480      	push	{r7}
 80130fe:	b083      	sub	sp, #12
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f003 0303 	and.w	r3, r3, #3
}
 801310c:	4618      	mov	r0, r3
 801310e:	370c      	adds	r7, #12
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr

08013118 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013118:	b480      	push	{r7}
 801311a:	b085      	sub	sp, #20
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013122:	2300      	movs	r3, #0
 8013124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013136:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801313c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8013142:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8013144:	68fa      	ldr	r2, [r7, #12]
 8013146:	4313      	orrs	r3, r2
 8013148:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	68da      	ldr	r2, [r3, #12]
 801314e:	4b06      	ldr	r3, [pc, #24]	; (8013168 <SDMMC_SendCommand+0x50>)
 8013150:	4013      	ands	r3, r2
 8013152:	68fa      	ldr	r2, [r7, #12]
 8013154:	431a      	orrs	r2, r3
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801315a:	2300      	movs	r3, #0
}
 801315c:	4618      	mov	r0, r3
 801315e:	3714      	adds	r7, #20
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr
 8013168:	fffff000 	.word	0xfffff000

0801316c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801316c:	b480      	push	{r7}
 801316e:	b083      	sub	sp, #12
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	691b      	ldr	r3, [r3, #16]
 8013178:	b2db      	uxtb	r3, r3
}
 801317a:	4618      	mov	r0, r3
 801317c:	370c      	adds	r7, #12
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr

08013186 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013186:	b480      	push	{r7}
 8013188:	b085      	sub	sp, #20
 801318a:	af00      	add	r7, sp, #0
 801318c:	6078      	str	r0, [r7, #4]
 801318e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	3314      	adds	r3, #20
 8013194:	461a      	mov	r2, r3
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	4413      	add	r3, r2
 801319a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	681b      	ldr	r3, [r3, #0]
}  
 80131a0:	4618      	mov	r0, r3
 80131a2:	3714      	adds	r7, #20
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b085      	sub	sp, #20
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80131b6:	2300      	movs	r3, #0
 80131b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	685a      	ldr	r2, [r3, #4]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80131d2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80131d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80131de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80131e0:	68fa      	ldr	r2, [r7, #12]
 80131e2:	4313      	orrs	r3, r2
 80131e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131ea:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	431a      	orrs	r2, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80131f6:	2300      	movs	r3, #0

}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3714      	adds	r7, #20
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr

08013204 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b088      	sub	sp, #32
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013212:	2310      	movs	r3, #16
 8013214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013216:	2340      	movs	r3, #64	; 0x40
 8013218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801321a:	2300      	movs	r3, #0
 801321c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801321e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013224:	f107 0308 	add.w	r3, r7, #8
 8013228:	4619      	mov	r1, r3
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f7ff ff74 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013230:	f241 3288 	movw	r2, #5000	; 0x1388
 8013234:	2110      	movs	r1, #16
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f000 fa46 	bl	80136c8 <SDMMC_GetCmdResp1>
 801323c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801323e:	69fb      	ldr	r3, [r7, #28]
}
 8013240:	4618      	mov	r0, r3
 8013242:	3720      	adds	r7, #32
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}

08013248 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b088      	sub	sp, #32
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013256:	2311      	movs	r3, #17
 8013258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801325a:	2340      	movs	r3, #64	; 0x40
 801325c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801325e:	2300      	movs	r3, #0
 8013260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013266:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013268:	f107 0308 	add.w	r3, r7, #8
 801326c:	4619      	mov	r1, r3
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f7ff ff52 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013274:	f241 3288 	movw	r2, #5000	; 0x1388
 8013278:	2111      	movs	r1, #17
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f000 fa24 	bl	80136c8 <SDMMC_GetCmdResp1>
 8013280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013282:	69fb      	ldr	r3, [r7, #28]
}
 8013284:	4618      	mov	r0, r3
 8013286:	3720      	adds	r7, #32
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}

0801328c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b088      	sub	sp, #32
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
 8013294:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801329a:	2312      	movs	r3, #18
 801329c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801329e:	2340      	movs	r3, #64	; 0x40
 80132a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132a2:	2300      	movs	r3, #0
 80132a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132ac:	f107 0308 	add.w	r3, r7, #8
 80132b0:	4619      	mov	r1, r3
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f7ff ff30 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80132b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80132bc:	2112      	movs	r1, #18
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f000 fa02 	bl	80136c8 <SDMMC_GetCmdResp1>
 80132c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132c6:	69fb      	ldr	r3, [r7, #28]
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3720      	adds	r7, #32
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b088      	sub	sp, #32
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80132de:	2318      	movs	r3, #24
 80132e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132e2:	2340      	movs	r3, #64	; 0x40
 80132e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132e6:	2300      	movs	r3, #0
 80132e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132f0:	f107 0308 	add.w	r3, r7, #8
 80132f4:	4619      	mov	r1, r3
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f7ff ff0e 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80132fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013300:	2118      	movs	r1, #24
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f000 f9e0 	bl	80136c8 <SDMMC_GetCmdResp1>
 8013308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801330a:	69fb      	ldr	r3, [r7, #28]
}
 801330c:	4618      	mov	r0, r3
 801330e:	3720      	adds	r7, #32
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}

08013314 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b088      	sub	sp, #32
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013322:	2319      	movs	r3, #25
 8013324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013326:	2340      	movs	r3, #64	; 0x40
 8013328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801332a:	2300      	movs	r3, #0
 801332c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801332e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013332:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013334:	f107 0308 	add.w	r3, r7, #8
 8013338:	4619      	mov	r1, r3
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f7ff feec 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013340:	f241 3288 	movw	r2, #5000	; 0x1388
 8013344:	2119      	movs	r1, #25
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f000 f9be 	bl	80136c8 <SDMMC_GetCmdResp1>
 801334c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801334e:	69fb      	ldr	r3, [r7, #28]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3720      	adds	r7, #32
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b088      	sub	sp, #32
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013360:	2300      	movs	r3, #0
 8013362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013364:	230c      	movs	r3, #12
 8013366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013368:	2340      	movs	r3, #64	; 0x40
 801336a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801336c:	2300      	movs	r3, #0
 801336e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013374:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013376:	f107 0308 	add.w	r3, r7, #8
 801337a:	4619      	mov	r1, r3
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f7ff fecb 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013382:	4a05      	ldr	r2, [pc, #20]	; (8013398 <SDMMC_CmdStopTransfer+0x40>)
 8013384:	210c      	movs	r1, #12
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f000 f99e 	bl	80136c8 <SDMMC_GetCmdResp1>
 801338c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801338e:	69fb      	ldr	r3, [r7, #28]
}
 8013390:	4618      	mov	r0, r3
 8013392:	3720      	adds	r7, #32
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	05f5e100 	.word	0x05f5e100

0801339c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b08a      	sub	sp, #40	; 0x28
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80133ac:	2307      	movs	r3, #7
 80133ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80133b0:	2340      	movs	r3, #64	; 0x40
 80133b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133b4:	2300      	movs	r3, #0
 80133b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133bc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80133be:	f107 0310 	add.w	r3, r7, #16
 80133c2:	4619      	mov	r1, r3
 80133c4:	68f8      	ldr	r0, [r7, #12]
 80133c6:	f7ff fea7 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80133ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80133ce:	2107      	movs	r1, #7
 80133d0:	68f8      	ldr	r0, [r7, #12]
 80133d2:	f000 f979 	bl	80136c8 <SDMMC_GetCmdResp1>
 80133d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80133d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3728      	adds	r7, #40	; 0x28
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b088      	sub	sp, #32
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80133ea:	2300      	movs	r3, #0
 80133ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80133ee:	2300      	movs	r3, #0
 80133f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80133f2:	2300      	movs	r3, #0
 80133f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133f6:	2300      	movs	r3, #0
 80133f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013400:	f107 0308 	add.w	r3, r7, #8
 8013404:	4619      	mov	r1, r3
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f7ff fe86 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f000 f92f 	bl	8013670 <SDMMC_GetCmdError>
 8013412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013414:	69fb      	ldr	r3, [r7, #28]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3720      	adds	r7, #32
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801341e:	b580      	push	{r7, lr}
 8013420:	b088      	sub	sp, #32
 8013422:	af00      	add	r7, sp, #0
 8013424:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013426:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801342a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801342c:	2308      	movs	r3, #8
 801342e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013430:	2340      	movs	r3, #64	; 0x40
 8013432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013434:	2300      	movs	r3, #0
 8013436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801343c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801343e:	f107 0308 	add.w	r3, r7, #8
 8013442:	4619      	mov	r1, r3
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f7ff fe67 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 fb26 	bl	8013a9c <SDMMC_GetCmdResp7>
 8013450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013452:	69fb      	ldr	r3, [r7, #28]
}
 8013454:	4618      	mov	r0, r3
 8013456:	3720      	adds	r7, #32
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b088      	sub	sp, #32
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801346a:	2337      	movs	r3, #55	; 0x37
 801346c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801346e:	2340      	movs	r3, #64	; 0x40
 8013470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013472:	2300      	movs	r3, #0
 8013474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801347a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801347c:	f107 0308 	add.w	r3, r7, #8
 8013480:	4619      	mov	r1, r3
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7ff fe48 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013488:	f241 3288 	movw	r2, #5000	; 0x1388
 801348c:	2137      	movs	r1, #55	; 0x37
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 f91a 	bl	80136c8 <SDMMC_GetCmdResp1>
 8013494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013496:	69fb      	ldr	r3, [r7, #28]
}
 8013498:	4618      	mov	r0, r3
 801349a:	3720      	adds	r7, #32
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b088      	sub	sp, #32
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80134aa:	683a      	ldr	r2, [r7, #0]
 80134ac:	4b0d      	ldr	r3, [pc, #52]	; (80134e4 <SDMMC_CmdAppOperCommand+0x44>)
 80134ae:	4313      	orrs	r3, r2
 80134b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80134b2:	2329      	movs	r3, #41	; 0x29
 80134b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134b6:	2340      	movs	r3, #64	; 0x40
 80134b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134ba:	2300      	movs	r3, #0
 80134bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134c4:	f107 0308 	add.w	r3, r7, #8
 80134c8:	4619      	mov	r1, r3
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f7ff fe24 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f000 fa2f 	bl	8013934 <SDMMC_GetCmdResp3>
 80134d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134d8:	69fb      	ldr	r3, [r7, #28]
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3720      	adds	r7, #32
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	80100000 	.word	0x80100000

080134e8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b088      	sub	sp, #32
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80134f6:	2306      	movs	r3, #6
 80134f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134fa:	2340      	movs	r3, #64	; 0x40
 80134fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134fe:	2300      	movs	r3, #0
 8013500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013506:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013508:	f107 0308 	add.w	r3, r7, #8
 801350c:	4619      	mov	r1, r3
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f7ff fe02 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013514:	f241 3288 	movw	r2, #5000	; 0x1388
 8013518:	2106      	movs	r1, #6
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f000 f8d4 	bl	80136c8 <SDMMC_GetCmdResp1>
 8013520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013522:	69fb      	ldr	r3, [r7, #28]
}
 8013524:	4618      	mov	r0, r3
 8013526:	3720      	adds	r7, #32
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b088      	sub	sp, #32
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013534:	2300      	movs	r3, #0
 8013536:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013538:	2333      	movs	r3, #51	; 0x33
 801353a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801353c:	2340      	movs	r3, #64	; 0x40
 801353e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013540:	2300      	movs	r3, #0
 8013542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801354a:	f107 0308 	add.w	r3, r7, #8
 801354e:	4619      	mov	r1, r3
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ff fde1 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013556:	f241 3288 	movw	r2, #5000	; 0x1388
 801355a:	2133      	movs	r1, #51	; 0x33
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f000 f8b3 	bl	80136c8 <SDMMC_GetCmdResp1>
 8013562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013564:	69fb      	ldr	r3, [r7, #28]
}
 8013566:	4618      	mov	r0, r3
 8013568:	3720      	adds	r7, #32
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}

0801356e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b088      	sub	sp, #32
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013576:	2300      	movs	r3, #0
 8013578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801357a:	2302      	movs	r3, #2
 801357c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801357e:	23c0      	movs	r3, #192	; 0xc0
 8013580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013582:	2300      	movs	r3, #0
 8013584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801358a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801358c:	f107 0308 	add.w	r3, r7, #8
 8013590:	4619      	mov	r1, r3
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7ff fdc0 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f000 f983 	bl	80138a4 <SDMMC_GetCmdResp2>
 801359e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135a0:	69fb      	ldr	r3, [r7, #28]
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3720      	adds	r7, #32
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}

080135aa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b088      	sub	sp, #32
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
 80135b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80135b8:	2309      	movs	r3, #9
 80135ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80135bc:	23c0      	movs	r3, #192	; 0xc0
 80135be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135c0:	2300      	movs	r3, #0
 80135c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80135c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80135ca:	f107 0308 	add.w	r3, r7, #8
 80135ce:	4619      	mov	r1, r3
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f7ff fda1 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f000 f964 	bl	80138a4 <SDMMC_GetCmdResp2>
 80135dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80135de:	69fb      	ldr	r3, [r7, #28]
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3720      	adds	r7, #32
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b088      	sub	sp, #32
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80135f2:	2300      	movs	r3, #0
 80135f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80135f6:	2303      	movs	r3, #3
 80135f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80135fa:	2340      	movs	r3, #64	; 0x40
 80135fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80135fe:	2300      	movs	r3, #0
 8013600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013608:	f107 0308 	add.w	r3, r7, #8
 801360c:	4619      	mov	r1, r3
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f7ff fd82 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013614:	683a      	ldr	r2, [r7, #0]
 8013616:	2103      	movs	r1, #3
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f000 f9c9 	bl	80139b0 <SDMMC_GetCmdResp6>
 801361e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013620:	69fb      	ldr	r3, [r7, #28]
}
 8013622:	4618      	mov	r0, r3
 8013624:	3720      	adds	r7, #32
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801362a:	b580      	push	{r7, lr}
 801362c:	b088      	sub	sp, #32
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
 8013632:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013638:	230d      	movs	r3, #13
 801363a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801363c:	2340      	movs	r3, #64	; 0x40
 801363e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013640:	2300      	movs	r3, #0
 8013642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013648:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801364a:	f107 0308 	add.w	r3, r7, #8
 801364e:	4619      	mov	r1, r3
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f7ff fd61 	bl	8013118 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013656:	f241 3288 	movw	r2, #5000	; 0x1388
 801365a:	210d      	movs	r1, #13
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f000 f833 	bl	80136c8 <SDMMC_GetCmdResp1>
 8013662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013664:	69fb      	ldr	r3, [r7, #28]
}
 8013666:	4618      	mov	r0, r3
 8013668:	3720      	adds	r7, #32
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
	...

08013670 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013670:	b480      	push	{r7}
 8013672:	b085      	sub	sp, #20
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013678:	4b11      	ldr	r3, [pc, #68]	; (80136c0 <SDMMC_GetCmdError+0x50>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	4a11      	ldr	r2, [pc, #68]	; (80136c4 <SDMMC_GetCmdError+0x54>)
 801367e:	fba2 2303 	umull	r2, r3, r2, r3
 8013682:	0a5b      	lsrs	r3, r3, #9
 8013684:	f241 3288 	movw	r2, #5000	; 0x1388
 8013688:	fb02 f303 	mul.w	r3, r2, r3
 801368c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	1e5a      	subs	r2, r3, #1
 8013692:	60fa      	str	r2, [r7, #12]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d102      	bne.n	801369e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013698:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801369c:	e009      	b.n	80136b2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d0f1      	beq.n	801368e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	22c5      	movs	r2, #197	; 0xc5
 80136ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3714      	adds	r7, #20
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr
 80136be:	bf00      	nop
 80136c0:	20000028 	.word	0x20000028
 80136c4:	10624dd3 	.word	0x10624dd3

080136c8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b088      	sub	sp, #32
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	460b      	mov	r3, r1
 80136d2:	607a      	str	r2, [r7, #4]
 80136d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80136d6:	4b70      	ldr	r3, [pc, #448]	; (8013898 <SDMMC_GetCmdResp1+0x1d0>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	4a70      	ldr	r2, [pc, #448]	; (801389c <SDMMC_GetCmdResp1+0x1d4>)
 80136dc:	fba2 2303 	umull	r2, r3, r2, r3
 80136e0:	0a5a      	lsrs	r2, r3, #9
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	fb02 f303 	mul.w	r3, r2, r3
 80136e8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	1e5a      	subs	r2, r3, #1
 80136ee:	61fa      	str	r2, [r7, #28]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d102      	bne.n	80136fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80136f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80136f8:	e0c9      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136fe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013706:	2b00      	cmp	r3, #0
 8013708:	d0ef      	beq.n	80136ea <SDMMC_GetCmdResp1+0x22>
 801370a:	69bb      	ldr	r3, [r7, #24]
 801370c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013710:	2b00      	cmp	r3, #0
 8013712:	d1ea      	bne.n	80136ea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013718:	f003 0304 	and.w	r3, r3, #4
 801371c:	2b00      	cmp	r3, #0
 801371e:	d004      	beq.n	801372a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	2204      	movs	r2, #4
 8013724:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013726:	2304      	movs	r3, #4
 8013728:	e0b1      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801372e:	f003 0301 	and.w	r3, r3, #1
 8013732:	2b00      	cmp	r3, #0
 8013734:	d004      	beq.n	8013740 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2201      	movs	r2, #1
 801373a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801373c:	2301      	movs	r3, #1
 801373e:	e0a6      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	22c5      	movs	r2, #197	; 0xc5
 8013744:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013746:	68f8      	ldr	r0, [r7, #12]
 8013748:	f7ff fd10 	bl	801316c <SDMMC_GetCommandResponse>
 801374c:	4603      	mov	r3, r0
 801374e:	461a      	mov	r2, r3
 8013750:	7afb      	ldrb	r3, [r7, #11]
 8013752:	4293      	cmp	r3, r2
 8013754:	d001      	beq.n	801375a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013756:	2301      	movs	r3, #1
 8013758:	e099      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801375a:	2100      	movs	r1, #0
 801375c:	68f8      	ldr	r0, [r7, #12]
 801375e:	f7ff fd12 	bl	8013186 <SDMMC_GetResponse>
 8013762:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013764:	697a      	ldr	r2, [r7, #20]
 8013766:	4b4e      	ldr	r3, [pc, #312]	; (80138a0 <SDMMC_GetCmdResp1+0x1d8>)
 8013768:	4013      	ands	r3, r2
 801376a:	2b00      	cmp	r3, #0
 801376c:	d101      	bne.n	8013772 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801376e:	2300      	movs	r3, #0
 8013770:	e08d      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013772:	697b      	ldr	r3, [r7, #20]
 8013774:	2b00      	cmp	r3, #0
 8013776:	da02      	bge.n	801377e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801377c:	e087      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013784:	2b00      	cmp	r3, #0
 8013786:	d001      	beq.n	801378c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013788:	2340      	movs	r3, #64	; 0x40
 801378a:	e080      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013792:	2b00      	cmp	r3, #0
 8013794:	d001      	beq.n	801379a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013796:	2380      	movs	r3, #128	; 0x80
 8013798:	e079      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d002      	beq.n	80137aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80137a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80137a8:	e071      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d002      	beq.n	80137ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80137b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137b8:	e069      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80137c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137c8:	e061      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d002      	beq.n	80137da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80137d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80137d8:	e059      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d002      	beq.n	80137ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80137e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137e8:	e051      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d002      	beq.n	80137fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80137f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80137f8:	e049      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013800:	2b00      	cmp	r3, #0
 8013802:	d002      	beq.n	801380a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013804:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013808:	e041      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013810:	2b00      	cmp	r3, #0
 8013812:	d002      	beq.n	801381a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013818:	e039      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013820:	2b00      	cmp	r3, #0
 8013822:	d002      	beq.n	801382a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013828:	e031      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013830:	2b00      	cmp	r3, #0
 8013832:	d002      	beq.n	801383a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013838:	e029      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013840:	2b00      	cmp	r3, #0
 8013842:	d002      	beq.n	801384a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013844:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013848:	e021      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013850:	2b00      	cmp	r3, #0
 8013852:	d002      	beq.n	801385a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013854:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013858:	e019      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013860:	2b00      	cmp	r3, #0
 8013862:	d002      	beq.n	801386a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013868:	e011      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013870:	2b00      	cmp	r3, #0
 8013872:	d002      	beq.n	801387a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013878:	e009      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	f003 0308 	and.w	r3, r3, #8
 8013880:	2b00      	cmp	r3, #0
 8013882:	d002      	beq.n	801388a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013884:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013888:	e001      	b.n	801388e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801388a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801388e:	4618      	mov	r0, r3
 8013890:	3720      	adds	r7, #32
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	20000028 	.word	0x20000028
 801389c:	10624dd3 	.word	0x10624dd3
 80138a0:	fdffe008 	.word	0xfdffe008

080138a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b085      	sub	sp, #20
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80138ac:	4b1f      	ldr	r3, [pc, #124]	; (801392c <SDMMC_GetCmdResp2+0x88>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a1f      	ldr	r2, [pc, #124]	; (8013930 <SDMMC_GetCmdResp2+0x8c>)
 80138b2:	fba2 2303 	umull	r2, r3, r2, r3
 80138b6:	0a5b      	lsrs	r3, r3, #9
 80138b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80138bc:	fb02 f303 	mul.w	r3, r2, r3
 80138c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	1e5a      	subs	r2, r3, #1
 80138c6:	60fa      	str	r2, [r7, #12]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d102      	bne.n	80138d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80138cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80138d0:	e026      	b.n	8013920 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d0ef      	beq.n	80138c2 <SDMMC_GetCmdResp2+0x1e>
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d1ea      	bne.n	80138c2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138f0:	f003 0304 	and.w	r3, r3, #4
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d004      	beq.n	8013902 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2204      	movs	r2, #4
 80138fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80138fe:	2304      	movs	r3, #4
 8013900:	e00e      	b.n	8013920 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013906:	f003 0301 	and.w	r3, r3, #1
 801390a:	2b00      	cmp	r3, #0
 801390c:	d004      	beq.n	8013918 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2201      	movs	r2, #1
 8013912:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013914:	2301      	movs	r3, #1
 8013916:	e003      	b.n	8013920 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	22c5      	movs	r2, #197	; 0xc5
 801391c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801391e:	2300      	movs	r3, #0
}
 8013920:	4618      	mov	r0, r3
 8013922:	3714      	adds	r7, #20
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr
 801392c:	20000028 	.word	0x20000028
 8013930:	10624dd3 	.word	0x10624dd3

08013934 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013934:	b480      	push	{r7}
 8013936:	b085      	sub	sp, #20
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801393c:	4b1a      	ldr	r3, [pc, #104]	; (80139a8 <SDMMC_GetCmdResp3+0x74>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4a1a      	ldr	r2, [pc, #104]	; (80139ac <SDMMC_GetCmdResp3+0x78>)
 8013942:	fba2 2303 	umull	r2, r3, r2, r3
 8013946:	0a5b      	lsrs	r3, r3, #9
 8013948:	f241 3288 	movw	r2, #5000	; 0x1388
 801394c:	fb02 f303 	mul.w	r3, r2, r3
 8013950:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	1e5a      	subs	r2, r3, #1
 8013956:	60fa      	str	r2, [r7, #12]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d102      	bne.n	8013962 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801395c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013960:	e01b      	b.n	801399a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013966:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801396e:	2b00      	cmp	r3, #0
 8013970:	d0ef      	beq.n	8013952 <SDMMC_GetCmdResp3+0x1e>
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013978:	2b00      	cmp	r3, #0
 801397a:	d1ea      	bne.n	8013952 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013980:	f003 0304 	and.w	r3, r3, #4
 8013984:	2b00      	cmp	r3, #0
 8013986:	d004      	beq.n	8013992 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2204      	movs	r2, #4
 801398c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801398e:	2304      	movs	r3, #4
 8013990:	e003      	b.n	801399a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	22c5      	movs	r2, #197	; 0xc5
 8013996:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8013998:	2300      	movs	r3, #0
}
 801399a:	4618      	mov	r0, r3
 801399c:	3714      	adds	r7, #20
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr
 80139a6:	bf00      	nop
 80139a8:	20000028 	.word	0x20000028
 80139ac:	10624dd3 	.word	0x10624dd3

080139b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b088      	sub	sp, #32
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	460b      	mov	r3, r1
 80139ba:	607a      	str	r2, [r7, #4]
 80139bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139be:	4b35      	ldr	r3, [pc, #212]	; (8013a94 <SDMMC_GetCmdResp6+0xe4>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	4a35      	ldr	r2, [pc, #212]	; (8013a98 <SDMMC_GetCmdResp6+0xe8>)
 80139c4:	fba2 2303 	umull	r2, r3, r2, r3
 80139c8:	0a5b      	lsrs	r3, r3, #9
 80139ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80139ce:	fb02 f303 	mul.w	r3, r2, r3
 80139d2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	1e5a      	subs	r2, r3, #1
 80139d8:	61fa      	str	r2, [r7, #28]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d102      	bne.n	80139e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80139de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80139e2:	e052      	b.n	8013a8a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139e8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80139ea:	69bb      	ldr	r3, [r7, #24]
 80139ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d0ef      	beq.n	80139d4 <SDMMC_GetCmdResp6+0x24>
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d1ea      	bne.n	80139d4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a02:	f003 0304 	and.w	r3, r3, #4
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d004      	beq.n	8013a14 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	2204      	movs	r2, #4
 8013a0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013a10:	2304      	movs	r3, #4
 8013a12:	e03a      	b.n	8013a8a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a18:	f003 0301 	and.w	r3, r3, #1
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d004      	beq.n	8013a2a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	2201      	movs	r2, #1
 8013a24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013a26:	2301      	movs	r3, #1
 8013a28:	e02f      	b.n	8013a8a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013a2a:	68f8      	ldr	r0, [r7, #12]
 8013a2c:	f7ff fb9e 	bl	801316c <SDMMC_GetCommandResponse>
 8013a30:	4603      	mov	r3, r0
 8013a32:	461a      	mov	r2, r3
 8013a34:	7afb      	ldrb	r3, [r7, #11]
 8013a36:	4293      	cmp	r3, r2
 8013a38:	d001      	beq.n	8013a3e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	e025      	b.n	8013a8a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	22c5      	movs	r2, #197	; 0xc5
 8013a42:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013a44:	2100      	movs	r1, #0
 8013a46:	68f8      	ldr	r0, [r7, #12]
 8013a48:	f7ff fb9d 	bl	8013186 <SDMMC_GetResponse>
 8013a4c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d106      	bne.n	8013a66 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	0c1b      	lsrs	r3, r3, #16
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8013a62:	2300      	movs	r3, #0
 8013a64:	e011      	b.n	8013a8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d002      	beq.n	8013a76 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a74:	e009      	b.n	8013a8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d002      	beq.n	8013a86 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013a84:	e001      	b.n	8013a8a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3720      	adds	r7, #32
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	20000028 	.word	0x20000028
 8013a98:	10624dd3 	.word	0x10624dd3

08013a9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013a9c:	b480      	push	{r7}
 8013a9e:	b085      	sub	sp, #20
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013aa4:	4b22      	ldr	r3, [pc, #136]	; (8013b30 <SDMMC_GetCmdResp7+0x94>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	4a22      	ldr	r2, [pc, #136]	; (8013b34 <SDMMC_GetCmdResp7+0x98>)
 8013aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8013aae:	0a5b      	lsrs	r3, r3, #9
 8013ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ab4:	fb02 f303 	mul.w	r3, r2, r3
 8013ab8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	1e5a      	subs	r2, r3, #1
 8013abe:	60fa      	str	r2, [r7, #12]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d102      	bne.n	8013aca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013ac8:	e02c      	b.n	8013b24 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ace:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d0ef      	beq.n	8013aba <SDMMC_GetCmdResp7+0x1e>
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d1ea      	bne.n	8013aba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ae8:	f003 0304 	and.w	r3, r3, #4
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d004      	beq.n	8013afa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2204      	movs	r2, #4
 8013af4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013af6:	2304      	movs	r3, #4
 8013af8:	e014      	b.n	8013b24 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013afe:	f003 0301 	and.w	r3, r3, #1
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d004      	beq.n	8013b10 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2201      	movs	r2, #1
 8013b0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e009      	b.n	8013b24 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d002      	beq.n	8013b22 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2240      	movs	r2, #64	; 0x40
 8013b20:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8013b22:	2300      	movs	r3, #0
  
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3714      	adds	r7, #20
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr
 8013b30:	20000028 	.word	0x20000028
 8013b34:	10624dd3 	.word	0x10624dd3

08013b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013b38:	b084      	sub	sp, #16
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b084      	sub	sp, #16
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
 8013b42:	f107 001c 	add.w	r0, r7, #28
 8013b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d120      	bne.n	8013b92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	68da      	ldr	r2, [r3, #12]
 8013b60:	4b20      	ldr	r3, [pc, #128]	; (8013be4 <USB_CoreInit+0xac>)
 8013b62:	4013      	ands	r3, r2
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d105      	bne.n	8013b86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	68db      	ldr	r3, [r3, #12]
 8013b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8013b86:	6878      	ldr	r0, [r7, #4]
 8013b88:	f000 f942 	bl	8013e10 <USB_CoreReset>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	73fb      	strb	r3, [r7, #15]
 8013b90:	e010      	b.n	8013bb4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f000 f936 	bl	8013e10 <USB_CoreReset>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8013bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb6:	2b01      	cmp	r3, #1
 8013bb8:	d10b      	bne.n	8013bd2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	f043 0206 	orr.w	r2, r3, #6
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	689b      	ldr	r3, [r3, #8]
 8013bca:	f043 0220 	orr.w	r2, r3, #32
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3710      	adds	r7, #16
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013bde:	b004      	add	sp, #16
 8013be0:	4770      	bx	lr
 8013be2:	bf00      	nop
 8013be4:	ffbdffbf 	.word	0xffbdffbf

08013be8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013be8:	b480      	push	{r7}
 8013bea:	b083      	sub	sp, #12
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	689b      	ldr	r3, [r3, #8]
 8013bf4:	f043 0201 	orr.w	r2, r3, #1
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013bfc:	2300      	movs	r3, #0
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	370c      	adds	r7, #12
 8013c02:	46bd      	mov	sp, r7
 8013c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c08:	4770      	bx	lr

08013c0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c0a:	b480      	push	{r7}
 8013c0c:	b083      	sub	sp, #12
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	689b      	ldr	r3, [r3, #8]
 8013c16:	f023 0201 	bic.w	r2, r3, #1
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013c1e:	2300      	movs	r3, #0
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr

08013c2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	460b      	mov	r3, r1
 8013c36:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013c44:	78fb      	ldrb	r3, [r7, #3]
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d106      	bne.n	8013c58 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	68db      	ldr	r3, [r3, #12]
 8013c4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	60da      	str	r2, [r3, #12]
 8013c56:	e00b      	b.n	8013c70 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8013c58:	78fb      	ldrb	r3, [r7, #3]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d106      	bne.n	8013c6c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	68db      	ldr	r3, [r3, #12]
 8013c62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	60da      	str	r2, [r3, #12]
 8013c6a:	e001      	b.n	8013c70 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	e003      	b.n	8013c78 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8013c70:	2032      	movs	r0, #50	; 0x32
 8013c72:	f7f3 ffad 	bl	8007bd0 <HAL_Delay>

  return HAL_OK;
 8013c76:	2300      	movs	r3, #0
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3708      	adds	r7, #8
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013c80:	b480      	push	{r7}
 8013c82:	b085      	sub	sp, #20
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	019b      	lsls	r3, r3, #6
 8013c92:	f043 0220 	orr.w	r2, r3, #32
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	60fb      	str	r3, [r7, #12]
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	4a09      	ldr	r2, [pc, #36]	; (8013cc8 <USB_FlushTxFifo+0x48>)
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	d901      	bls.n	8013cac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8013ca8:	2303      	movs	r3, #3
 8013caa:	e006      	b.n	8013cba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	691b      	ldr	r3, [r3, #16]
 8013cb0:	f003 0320 	and.w	r3, r3, #32
 8013cb4:	2b20      	cmp	r3, #32
 8013cb6:	d0f0      	beq.n	8013c9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3714      	adds	r7, #20
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr
 8013cc6:	bf00      	nop
 8013cc8:	00030d40 	.word	0x00030d40

08013ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b085      	sub	sp, #20
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2210      	movs	r2, #16
 8013cdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	60fb      	str	r3, [r7, #12]
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	4a09      	ldr	r2, [pc, #36]	; (8013d0c <USB_FlushRxFifo+0x40>)
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d901      	bls.n	8013cf0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8013cec:	2303      	movs	r3, #3
 8013cee:	e006      	b.n	8013cfe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	691b      	ldr	r3, [r3, #16]
 8013cf4:	f003 0310 	and.w	r3, r3, #16
 8013cf8:	2b10      	cmp	r3, #16
 8013cfa:	d0f0      	beq.n	8013cde <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013cfc:	2300      	movs	r3, #0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3714      	adds	r7, #20
 8013d02:	46bd      	mov	sp, r7
 8013d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d08:	4770      	bx	lr
 8013d0a:	bf00      	nop
 8013d0c:	00030d40 	.word	0x00030d40

08013d10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013d10:	b480      	push	{r7}
 8013d12:	b089      	sub	sp, #36	; 0x24
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	4611      	mov	r1, r2
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	460b      	mov	r3, r1
 8013d20:	71fb      	strb	r3, [r7, #7]
 8013d22:	4613      	mov	r3, r2
 8013d24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8013d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d11a      	bne.n	8013d6c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013d36:	88bb      	ldrh	r3, [r7, #4]
 8013d38:	3303      	adds	r3, #3
 8013d3a:	089b      	lsrs	r3, r3, #2
 8013d3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013d3e:	2300      	movs	r3, #0
 8013d40:	61bb      	str	r3, [r7, #24]
 8013d42:	e00f      	b.n	8013d64 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013d44:	79fb      	ldrb	r3, [r7, #7]
 8013d46:	031a      	lsls	r2, r3, #12
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d50:	461a      	mov	r2, r3
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	3304      	adds	r3, #4
 8013d5c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	3301      	adds	r3, #1
 8013d62:	61bb      	str	r3, [r7, #24]
 8013d64:	69ba      	ldr	r2, [r7, #24]
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d3eb      	bcc.n	8013d44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013d6c:	2300      	movs	r3, #0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3724      	adds	r7, #36	; 0x24
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr

08013d7a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013d7a:	b480      	push	{r7}
 8013d7c:	b089      	sub	sp, #36	; 0x24
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	60f8      	str	r0, [r7, #12]
 8013d82:	60b9      	str	r1, [r7, #8]
 8013d84:	4613      	mov	r3, r2
 8013d86:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8013d8c:	68bb      	ldr	r3, [r7, #8]
 8013d8e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8013d90:	88fb      	ldrh	r3, [r7, #6]
 8013d92:	3303      	adds	r3, #3
 8013d94:	089b      	lsrs	r3, r3, #2
 8013d96:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8013d98:	2300      	movs	r3, #0
 8013d9a:	61bb      	str	r3, [r7, #24]
 8013d9c:	e00b      	b.n	8013db6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	601a      	str	r2, [r3, #0]
    pDest++;
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	3304      	adds	r3, #4
 8013dae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	3301      	adds	r3, #1
 8013db4:	61bb      	str	r3, [r7, #24]
 8013db6:	69ba      	ldr	r2, [r7, #24]
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d3ef      	bcc.n	8013d9e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8013dbe:	69fb      	ldr	r3, [r7, #28]
}
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	3724      	adds	r7, #36	; 0x24
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dca:	4770      	bx	lr

08013dcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b085      	sub	sp, #20
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	695b      	ldr	r3, [r3, #20]
 8013dd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	699b      	ldr	r3, [r3, #24]
 8013dde:	68fa      	ldr	r2, [r7, #12]
 8013de0:	4013      	ands	r3, r2
 8013de2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013de4:	68fb      	ldr	r3, [r7, #12]
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3714      	adds	r7, #20
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr

08013df2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013df2:	b480      	push	{r7}
 8013df4:	b083      	sub	sp, #12
 8013df6:	af00      	add	r7, sp, #0
 8013df8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	695b      	ldr	r3, [r3, #20]
 8013dfe:	f003 0301 	and.w	r3, r3, #1
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	370c      	adds	r7, #12
 8013e06:	46bd      	mov	sp, r7
 8013e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0c:	4770      	bx	lr
	...

08013e10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013e10:	b480      	push	{r7}
 8013e12:	b085      	sub	sp, #20
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013e18:	2300      	movs	r3, #0
 8013e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	60fb      	str	r3, [r7, #12]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	4a13      	ldr	r2, [pc, #76]	; (8013e74 <USB_CoreReset+0x64>)
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d901      	bls.n	8013e2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013e2a:	2303      	movs	r3, #3
 8013e2c:	e01b      	b.n	8013e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	691b      	ldr	r3, [r3, #16]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	daf2      	bge.n	8013e1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013e36:	2300      	movs	r3, #0
 8013e38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	691b      	ldr	r3, [r3, #16]
 8013e3e:	f043 0201 	orr.w	r2, r3, #1
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	60fb      	str	r3, [r7, #12]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	4a09      	ldr	r2, [pc, #36]	; (8013e74 <USB_CoreReset+0x64>)
 8013e50:	4293      	cmp	r3, r2
 8013e52:	d901      	bls.n	8013e58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013e54:	2303      	movs	r3, #3
 8013e56:	e006      	b.n	8013e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	691b      	ldr	r3, [r3, #16]
 8013e5c:	f003 0301 	and.w	r3, r3, #1
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d0f0      	beq.n	8013e46 <USB_CoreReset+0x36>

  return HAL_OK;
 8013e64:	2300      	movs	r3, #0
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3714      	adds	r7, #20
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e70:	4770      	bx	lr
 8013e72:	bf00      	nop
 8013e74:	00030d40 	.word	0x00030d40

08013e78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013e78:	b084      	sub	sp, #16
 8013e7a:	b580      	push	{r7, lr}
 8013e7c:	b084      	sub	sp, #16
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	6078      	str	r0, [r7, #4]
 8013e82:	f107 001c 	add.w	r0, r7, #28
 8013e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e94:	461a      	mov	r2, r3
 8013e96:	2300      	movs	r3, #0
 8013e98:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d018      	beq.n	8013ee4 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d10a      	bne.n	8013ece <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	68ba      	ldr	r2, [r7, #8]
 8013ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013ec6:	f043 0304 	orr.w	r3, r3, #4
 8013eca:	6013      	str	r3, [r2, #0]
 8013ecc:	e014      	b.n	8013ef8 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	68ba      	ldr	r2, [r7, #8]
 8013ed8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013edc:	f023 0304 	bic.w	r3, r3, #4
 8013ee0:	6013      	str	r3, [r2, #0]
 8013ee2:	e009      	b.n	8013ef8 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	68ba      	ldr	r2, [r7, #8]
 8013eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013ef2:	f023 0304 	bic.w	r3, r3, #4
 8013ef6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8013ef8:	2110      	movs	r1, #16
 8013efa:	6878      	ldr	r0, [r7, #4]
 8013efc:	f7ff fec0 	bl	8013c80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7ff fee3 	bl	8013ccc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8013f06:	2300      	movs	r3, #0
 8013f08:	60fb      	str	r3, [r7, #12]
 8013f0a:	e015      	b.n	8013f38 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	015a      	lsls	r2, r3, #5
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	4413      	add	r3, r2
 8013f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013f18:	461a      	mov	r2, r3
 8013f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013f1e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	015a      	lsls	r2, r3, #5
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	4413      	add	r3, r2
 8013f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013f2c:	461a      	mov	r2, r3
 8013f2e:	2300      	movs	r3, #0
 8013f30:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	3301      	adds	r3, #1
 8013f36:	60fb      	str	r3, [r7, #12]
 8013f38:	6a3b      	ldr	r3, [r7, #32]
 8013f3a:	68fa      	ldr	r2, [r7, #12]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d3e5      	bcc.n	8013f0c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8013f40:	2101      	movs	r1, #1
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f000 f8ac 	bl	80140a0 <USB_DriveVbus>

  HAL_Delay(200U);
 8013f48:	20c8      	movs	r0, #200	; 0xc8
 8013f4a:	f7f3 fe41 	bl	8007bd0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2200      	movs	r2, #0
 8013f52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f04f 32ff 	mov.w	r2, #4294967295
 8013f5a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00b      	beq.n	8013f80 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	4a14      	ldr	r2, [pc, #80]	; (8013fc4 <USB_HostInit+0x14c>)
 8013f74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	4a13      	ldr	r2, [pc, #76]	; (8013fc8 <USB_HostInit+0x150>)
 8013f7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8013f7e:	e009      	b.n	8013f94 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2280      	movs	r2, #128	; 0x80
 8013f84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	4a10      	ldr	r2, [pc, #64]	; (8013fcc <USB_HostInit+0x154>)
 8013f8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	4a10      	ldr	r2, [pc, #64]	; (8013fd0 <USB_HostInit+0x158>)
 8013f90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d105      	bne.n	8013fa6 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	699b      	ldr	r3, [r3, #24]
 8013f9e:	f043 0210 	orr.w	r2, r3, #16
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	699a      	ldr	r2, [r3, #24]
 8013faa:	4b0a      	ldr	r3, [pc, #40]	; (8013fd4 <USB_HostInit+0x15c>)
 8013fac:	4313      	orrs	r3, r2
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8013fb2:	2300      	movs	r3, #0
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013fbe:	b004      	add	sp, #16
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	01000200 	.word	0x01000200
 8013fc8:	00e00300 	.word	0x00e00300
 8013fcc:	00600080 	.word	0x00600080
 8013fd0:	004000e0 	.word	0x004000e0
 8013fd4:	a3200008 	.word	0xa3200008

08013fd8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b085      	sub	sp, #20
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013ff6:	f023 0303 	bic.w	r3, r3, #3
 8013ffa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	78fb      	ldrb	r3, [r7, #3]
 8014006:	f003 0303 	and.w	r3, r3, #3
 801400a:	68f9      	ldr	r1, [r7, #12]
 801400c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014010:	4313      	orrs	r3, r2
 8014012:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8014014:	78fb      	ldrb	r3, [r7, #3]
 8014016:	2b01      	cmp	r3, #1
 8014018:	d107      	bne.n	801402a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014020:	461a      	mov	r2, r3
 8014022:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8014026:	6053      	str	r3, [r2, #4]
 8014028:	e009      	b.n	801403e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801402a:	78fb      	ldrb	r3, [r7, #3]
 801402c:	2b02      	cmp	r3, #2
 801402e:	d106      	bne.n	801403e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014036:	461a      	mov	r2, r3
 8014038:	f241 7370 	movw	r3, #6000	; 0x1770
 801403c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801403e:	2300      	movs	r3, #0
}
 8014040:	4618      	mov	r0, r3
 8014042:	3714      	adds	r7, #20
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr

0801404c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b084      	sub	sp, #16
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8014058:	2300      	movs	r3, #0
 801405a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801406c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	68fa      	ldr	r2, [r7, #12]
 8014072:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801407a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801407c:	2064      	movs	r0, #100	; 0x64
 801407e:	f7f3 fda7 	bl	8007bd0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801408a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801408e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8014090:	200a      	movs	r0, #10
 8014092:	f7f3 fd9d 	bl	8007bd0 <HAL_Delay>

  return HAL_OK;
 8014096:	2300      	movs	r3, #0
}
 8014098:	4618      	mov	r0, r3
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}

080140a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80140a0:	b480      	push	{r7}
 80140a2:	b085      	sub	sp, #20
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	460b      	mov	r3, r1
 80140aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80140b0:	2300      	movs	r3, #0
 80140b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80140c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d109      	bne.n	80140e4 <USB_DriveVbus+0x44>
 80140d0:	78fb      	ldrb	r3, [r7, #3]
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	d106      	bne.n	80140e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80140de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80140e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80140ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80140ee:	d109      	bne.n	8014104 <USB_DriveVbus+0x64>
 80140f0:	78fb      	ldrb	r3, [r7, #3]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d106      	bne.n	8014104 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	68fa      	ldr	r2, [r7, #12]
 80140fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80140fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014102:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	3714      	adds	r7, #20
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr

08014112 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014112:	b480      	push	{r7}
 8014114:	b085      	sub	sp, #20
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801411e:	2300      	movs	r3, #0
 8014120:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	0c5b      	lsrs	r3, r3, #17
 8014130:	f003 0303 	and.w	r3, r3, #3
}
 8014134:	4618      	mov	r0, r3
 8014136:	3714      	adds	r7, #20
 8014138:	46bd      	mov	sp, r7
 801413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413e:	4770      	bx	lr

08014140 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8014140:	b480      	push	{r7}
 8014142:	b085      	sub	sp, #20
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014152:	689b      	ldr	r3, [r3, #8]
 8014154:	b29b      	uxth	r3, r3
}
 8014156:	4618      	mov	r0, r3
 8014158:	3714      	adds	r7, #20
 801415a:	46bd      	mov	sp, r7
 801415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014160:	4770      	bx	lr
	...

08014164 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b088      	sub	sp, #32
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	4608      	mov	r0, r1
 801416e:	4611      	mov	r1, r2
 8014170:	461a      	mov	r2, r3
 8014172:	4603      	mov	r3, r0
 8014174:	70fb      	strb	r3, [r7, #3]
 8014176:	460b      	mov	r3, r1
 8014178:	70bb      	strb	r3, [r7, #2]
 801417a:	4613      	mov	r3, r2
 801417c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801417e:	2300      	movs	r3, #0
 8014180:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8014186:	78fb      	ldrb	r3, [r7, #3]
 8014188:	015a      	lsls	r2, r3, #5
 801418a:	693b      	ldr	r3, [r7, #16]
 801418c:	4413      	add	r3, r2
 801418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014192:	461a      	mov	r2, r3
 8014194:	f04f 33ff 	mov.w	r3, #4294967295
 8014198:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801419a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801419e:	2b03      	cmp	r3, #3
 80141a0:	d87e      	bhi.n	80142a0 <USB_HC_Init+0x13c>
 80141a2:	a201      	add	r2, pc, #4	; (adr r2, 80141a8 <USB_HC_Init+0x44>)
 80141a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141a8:	080141b9 	.word	0x080141b9
 80141ac:	08014263 	.word	0x08014263
 80141b0:	080141b9 	.word	0x080141b9
 80141b4:	08014225 	.word	0x08014225
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80141b8:	78fb      	ldrb	r3, [r7, #3]
 80141ba:	015a      	lsls	r2, r3, #5
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	4413      	add	r3, r2
 80141c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141c4:	461a      	mov	r2, r3
 80141c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80141ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80141cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	da10      	bge.n	80141f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80141d4:	78fb      	ldrb	r3, [r7, #3]
 80141d6:	015a      	lsls	r2, r3, #5
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	4413      	add	r3, r2
 80141dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141e0:	68db      	ldr	r3, [r3, #12]
 80141e2:	78fa      	ldrb	r2, [r7, #3]
 80141e4:	0151      	lsls	r1, r2, #5
 80141e6:	693a      	ldr	r2, [r7, #16]
 80141e8:	440a      	add	r2, r1
 80141ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80141ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80141f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80141f4:	e057      	b.n	80142a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d051      	beq.n	80142a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8014202:	78fb      	ldrb	r3, [r7, #3]
 8014204:	015a      	lsls	r2, r3, #5
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	4413      	add	r3, r2
 801420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	78fa      	ldrb	r2, [r7, #3]
 8014212:	0151      	lsls	r1, r2, #5
 8014214:	693a      	ldr	r2, [r7, #16]
 8014216:	440a      	add	r2, r1
 8014218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801421c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8014220:	60d3      	str	r3, [r2, #12]
      break;
 8014222:	e040      	b.n	80142a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014224:	78fb      	ldrb	r3, [r7, #3]
 8014226:	015a      	lsls	r2, r3, #5
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	4413      	add	r3, r2
 801422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014230:	461a      	mov	r2, r3
 8014232:	f240 639d 	movw	r3, #1693	; 0x69d
 8014236:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801423c:	2b00      	cmp	r3, #0
 801423e:	da34      	bge.n	80142aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8014240:	78fb      	ldrb	r3, [r7, #3]
 8014242:	015a      	lsls	r2, r3, #5
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	4413      	add	r3, r2
 8014248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	78fa      	ldrb	r2, [r7, #3]
 8014250:	0151      	lsls	r1, r2, #5
 8014252:	693a      	ldr	r2, [r7, #16]
 8014254:	440a      	add	r2, r1
 8014256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801425a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801425e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8014260:	e023      	b.n	80142aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014262:	78fb      	ldrb	r3, [r7, #3]
 8014264:	015a      	lsls	r2, r3, #5
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	4413      	add	r3, r2
 801426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801426e:	461a      	mov	r2, r3
 8014270:	f240 2325 	movw	r3, #549	; 0x225
 8014274:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014276:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801427a:	2b00      	cmp	r3, #0
 801427c:	da17      	bge.n	80142ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801427e:	78fb      	ldrb	r3, [r7, #3]
 8014280:	015a      	lsls	r2, r3, #5
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	4413      	add	r3, r2
 8014286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801428a:	68db      	ldr	r3, [r3, #12]
 801428c:	78fa      	ldrb	r2, [r7, #3]
 801428e:	0151      	lsls	r1, r2, #5
 8014290:	693a      	ldr	r2, [r7, #16]
 8014292:	440a      	add	r2, r1
 8014294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014298:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801429c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801429e:	e006      	b.n	80142ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80142a0:	2301      	movs	r3, #1
 80142a2:	77fb      	strb	r3, [r7, #31]
      break;
 80142a4:	e004      	b.n	80142b0 <USB_HC_Init+0x14c>
      break;
 80142a6:	bf00      	nop
 80142a8:	e002      	b.n	80142b0 <USB_HC_Init+0x14c>
      break;
 80142aa:	bf00      	nop
 80142ac:	e000      	b.n	80142b0 <USB_HC_Init+0x14c>
      break;
 80142ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80142b6:	699a      	ldr	r2, [r3, #24]
 80142b8:	78fb      	ldrb	r3, [r7, #3]
 80142ba:	f003 030f 	and.w	r3, r3, #15
 80142be:	2101      	movs	r1, #1
 80142c0:	fa01 f303 	lsl.w	r3, r1, r3
 80142c4:	6939      	ldr	r1, [r7, #16]
 80142c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80142ca:	4313      	orrs	r3, r2
 80142cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	699b      	ldr	r3, [r3, #24]
 80142d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80142da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	da03      	bge.n	80142ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80142e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80142e6:	61bb      	str	r3, [r7, #24]
 80142e8:	e001      	b.n	80142ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80142ea:	2300      	movs	r3, #0
 80142ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f7ff ff0f 	bl	8014112 <USB_GetHostSpeed>
 80142f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80142f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80142fa:	2b02      	cmp	r3, #2
 80142fc:	d106      	bne.n	801430c <USB_HC_Init+0x1a8>
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	2b02      	cmp	r3, #2
 8014302:	d003      	beq.n	801430c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8014304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014308:	617b      	str	r3, [r7, #20]
 801430a:	e001      	b.n	8014310 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801430c:	2300      	movs	r3, #0
 801430e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014310:	787b      	ldrb	r3, [r7, #1]
 8014312:	059b      	lsls	r3, r3, #22
 8014314:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8014318:	78bb      	ldrb	r3, [r7, #2]
 801431a:	02db      	lsls	r3, r3, #11
 801431c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014320:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8014322:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014326:	049b      	lsls	r3, r3, #18
 8014328:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801432c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801432e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014330:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8014334:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801433a:	78fb      	ldrb	r3, [r7, #3]
 801433c:	0159      	lsls	r1, r3, #5
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	440b      	add	r3, r1
 8014342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014346:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801434c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 801434e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014352:	2b03      	cmp	r3, #3
 8014354:	d10f      	bne.n	8014376 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8014356:	78fb      	ldrb	r3, [r7, #3]
 8014358:	015a      	lsls	r2, r3, #5
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	4413      	add	r3, r2
 801435e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	78fa      	ldrb	r2, [r7, #3]
 8014366:	0151      	lsls	r1, r2, #5
 8014368:	693a      	ldr	r2, [r7, #16]
 801436a:	440a      	add	r2, r1
 801436c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014374:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8014376:	7ffb      	ldrb	r3, [r7, #31]
}
 8014378:	4618      	mov	r0, r3
 801437a:	3720      	adds	r7, #32
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}

08014380 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b08c      	sub	sp, #48	; 0x30
 8014384:	af02      	add	r7, sp, #8
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	60b9      	str	r1, [r7, #8]
 801438a:	4613      	mov	r3, r2
 801438c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	785b      	ldrb	r3, [r3, #1]
 8014396:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8014398:	f44f 7380 	mov.w	r3, #256	; 0x100
 801439c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d02d      	beq.n	8014406 <USB_HC_StartXfer+0x86>
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	791b      	ldrb	r3, [r3, #4]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d129      	bne.n	8014406 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80143b2:	79fb      	ldrb	r3, [r7, #7]
 80143b4:	2b01      	cmp	r3, #1
 80143b6:	d117      	bne.n	80143e8 <USB_HC_StartXfer+0x68>
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	79db      	ldrb	r3, [r3, #7]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d003      	beq.n	80143c8 <USB_HC_StartXfer+0x48>
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	79db      	ldrb	r3, [r3, #7]
 80143c4:	2b02      	cmp	r3, #2
 80143c6:	d10f      	bne.n	80143e8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80143c8:	69fb      	ldr	r3, [r7, #28]
 80143ca:	015a      	lsls	r2, r3, #5
 80143cc:	6a3b      	ldr	r3, [r7, #32]
 80143ce:	4413      	add	r3, r2
 80143d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80143d4:	68db      	ldr	r3, [r3, #12]
 80143d6:	69fa      	ldr	r2, [r7, #28]
 80143d8:	0151      	lsls	r1, r2, #5
 80143da:	6a3a      	ldr	r2, [r7, #32]
 80143dc:	440a      	add	r2, r1
 80143de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80143e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80143e6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80143e8:	79fb      	ldrb	r3, [r7, #7]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d10b      	bne.n	8014406 <USB_HC_StartXfer+0x86>
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	795b      	ldrb	r3, [r3, #5]
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	d107      	bne.n	8014406 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	785b      	ldrb	r3, [r3, #1]
 80143fa:	4619      	mov	r1, r3
 80143fc:	68f8      	ldr	r0, [r7, #12]
 80143fe:	f000 fa2f 	bl	8014860 <USB_DoPing>
      return HAL_OK;
 8014402:	2300      	movs	r3, #0
 8014404:	e0f8      	b.n	80145f8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	695b      	ldr	r3, [r3, #20]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d018      	beq.n	8014440 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	695b      	ldr	r3, [r3, #20]
 8014412:	68ba      	ldr	r2, [r7, #8]
 8014414:	8912      	ldrh	r2, [r2, #8]
 8014416:	4413      	add	r3, r2
 8014418:	3b01      	subs	r3, #1
 801441a:	68ba      	ldr	r2, [r7, #8]
 801441c:	8912      	ldrh	r2, [r2, #8]
 801441e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014422:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8014424:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014426:	8b7b      	ldrh	r3, [r7, #26]
 8014428:	429a      	cmp	r2, r3
 801442a:	d90b      	bls.n	8014444 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 801442c:	8b7b      	ldrh	r3, [r7, #26]
 801442e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8014430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014432:	68ba      	ldr	r2, [r7, #8]
 8014434:	8912      	ldrh	r2, [r2, #8]
 8014436:	fb02 f203 	mul.w	r2, r2, r3
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	611a      	str	r2, [r3, #16]
 801443e:	e001      	b.n	8014444 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8014440:	2301      	movs	r3, #1
 8014442:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	78db      	ldrb	r3, [r3, #3]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d007      	beq.n	801445c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801444c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801444e:	68ba      	ldr	r2, [r7, #8]
 8014450:	8912      	ldrh	r2, [r2, #8]
 8014452:	fb02 f203 	mul.w	r2, r2, r3
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	611a      	str	r2, [r3, #16]
 801445a:	e003      	b.n	8014464 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	695a      	ldr	r2, [r3, #20]
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	691b      	ldr	r3, [r3, #16]
 8014468:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801446c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801446e:	04d9      	lsls	r1, r3, #19
 8014470:	4b63      	ldr	r3, [pc, #396]	; (8014600 <USB_HC_StartXfer+0x280>)
 8014472:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014474:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	7a9b      	ldrb	r3, [r3, #10]
 801447a:	075b      	lsls	r3, r3, #29
 801447c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014480:	69f9      	ldr	r1, [r7, #28]
 8014482:	0148      	lsls	r0, r1, #5
 8014484:	6a39      	ldr	r1, [r7, #32]
 8014486:	4401      	add	r1, r0
 8014488:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801448c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801448e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8014490:	79fb      	ldrb	r3, [r7, #7]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d009      	beq.n	80144aa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	68d9      	ldr	r1, [r3, #12]
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	015a      	lsls	r2, r3, #5
 801449e:	6a3b      	ldr	r3, [r7, #32]
 80144a0:	4413      	add	r3, r2
 80144a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80144a6:	460a      	mov	r2, r1
 80144a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80144aa:	6a3b      	ldr	r3, [r7, #32]
 80144ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80144b0:	689b      	ldr	r3, [r3, #8]
 80144b2:	f003 0301 	and.w	r3, r3, #1
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	bf0c      	ite	eq
 80144ba:	2301      	moveq	r3, #1
 80144bc:	2300      	movne	r3, #0
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	015a      	lsls	r2, r3, #5
 80144c6:	6a3b      	ldr	r3, [r7, #32]
 80144c8:	4413      	add	r3, r2
 80144ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	69fa      	ldr	r2, [r7, #28]
 80144d2:	0151      	lsls	r1, r2, #5
 80144d4:	6a3a      	ldr	r2, [r7, #32]
 80144d6:	440a      	add	r2, r1
 80144d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80144dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80144e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80144e2:	69fb      	ldr	r3, [r7, #28]
 80144e4:	015a      	lsls	r2, r3, #5
 80144e6:	6a3b      	ldr	r3, [r7, #32]
 80144e8:	4413      	add	r3, r2
 80144ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80144ee:	681a      	ldr	r2, [r3, #0]
 80144f0:	7e7b      	ldrb	r3, [r7, #25]
 80144f2:	075b      	lsls	r3, r3, #29
 80144f4:	69f9      	ldr	r1, [r7, #28]
 80144f6:	0148      	lsls	r0, r1, #5
 80144f8:	6a39      	ldr	r1, [r7, #32]
 80144fa:	4401      	add	r1, r0
 80144fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8014500:	4313      	orrs	r3, r2
 8014502:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	015a      	lsls	r2, r3, #5
 8014508:	6a3b      	ldr	r3, [r7, #32]
 801450a:	4413      	add	r3, r2
 801450c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801451a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	78db      	ldrb	r3, [r3, #3]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d004      	beq.n	801452e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801452a:	613b      	str	r3, [r7, #16]
 801452c:	e003      	b.n	8014536 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014534:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801453c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801453e:	69fb      	ldr	r3, [r7, #28]
 8014540:	015a      	lsls	r2, r3, #5
 8014542:	6a3b      	ldr	r3, [r7, #32]
 8014544:	4413      	add	r3, r2
 8014546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801454a:	461a      	mov	r2, r3
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8014550:	79fb      	ldrb	r3, [r7, #7]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d001      	beq.n	801455a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8014556:	2300      	movs	r3, #0
 8014558:	e04e      	b.n	80145f8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	78db      	ldrb	r3, [r3, #3]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d149      	bne.n	80145f6 <USB_HC_StartXfer+0x276>
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	695b      	ldr	r3, [r3, #20]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d045      	beq.n	80145f6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	79db      	ldrb	r3, [r3, #7]
 801456e:	2b03      	cmp	r3, #3
 8014570:	d830      	bhi.n	80145d4 <USB_HC_StartXfer+0x254>
 8014572:	a201      	add	r2, pc, #4	; (adr r2, 8014578 <USB_HC_StartXfer+0x1f8>)
 8014574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014578:	08014589 	.word	0x08014589
 801457c:	080145ad 	.word	0x080145ad
 8014580:	08014589 	.word	0x08014589
 8014584:	080145ad 	.word	0x080145ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	695b      	ldr	r3, [r3, #20]
 801458c:	3303      	adds	r3, #3
 801458e:	089b      	lsrs	r3, r3, #2
 8014590:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8014592:	8afa      	ldrh	r2, [r7, #22]
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014598:	b29b      	uxth	r3, r3
 801459a:	429a      	cmp	r2, r3
 801459c:	d91c      	bls.n	80145d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	699b      	ldr	r3, [r3, #24]
 80145a2:	f043 0220 	orr.w	r2, r3, #32
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80145aa:	e015      	b.n	80145d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	695b      	ldr	r3, [r3, #20]
 80145b0:	3303      	adds	r3, #3
 80145b2:	089b      	lsrs	r3, r3, #2
 80145b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80145b6:	8afa      	ldrh	r2, [r7, #22]
 80145b8:	6a3b      	ldr	r3, [r7, #32]
 80145ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80145be:	691b      	ldr	r3, [r3, #16]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d90a      	bls.n	80145dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	699b      	ldr	r3, [r3, #24]
 80145ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80145d2:	e003      	b.n	80145dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80145d4:	bf00      	nop
 80145d6:	e002      	b.n	80145de <USB_HC_StartXfer+0x25e>
        break;
 80145d8:	bf00      	nop
 80145da:	e000      	b.n	80145de <USB_HC_StartXfer+0x25e>
        break;
 80145dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	68d9      	ldr	r1, [r3, #12]
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	785a      	ldrb	r2, [r3, #1]
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	695b      	ldr	r3, [r3, #20]
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	2000      	movs	r0, #0
 80145ee:	9000      	str	r0, [sp, #0]
 80145f0:	68f8      	ldr	r0, [r7, #12]
 80145f2:	f7ff fb8d 	bl	8013d10 <USB_WritePacket>
  }

  return HAL_OK;
 80145f6:	2300      	movs	r3, #0
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3728      	adds	r7, #40	; 0x28
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}
 8014600:	1ff80000 	.word	0x1ff80000

08014604 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014604:	b480      	push	{r7}
 8014606:	b085      	sub	sp, #20
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014616:	695b      	ldr	r3, [r3, #20]
 8014618:	b29b      	uxth	r3, r3
}
 801461a:	4618      	mov	r0, r3
 801461c:	3714      	adds	r7, #20
 801461e:	46bd      	mov	sp, r7
 8014620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014624:	4770      	bx	lr

08014626 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8014626:	b480      	push	{r7}
 8014628:	b089      	sub	sp, #36	; 0x24
 801462a:	af00      	add	r7, sp, #0
 801462c:	6078      	str	r0, [r7, #4]
 801462e:	460b      	mov	r3, r1
 8014630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8014636:	78fb      	ldrb	r3, [r7, #3]
 8014638:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 801463a:	2300      	movs	r3, #0
 801463c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	015a      	lsls	r2, r3, #5
 8014642:	69bb      	ldr	r3, [r7, #24]
 8014644:	4413      	add	r3, r2
 8014646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	0c9b      	lsrs	r3, r3, #18
 801464e:	f003 0303 	and.w	r3, r3, #3
 8014652:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	015a      	lsls	r2, r3, #5
 8014658:	69bb      	ldr	r3, [r7, #24]
 801465a:	4413      	add	r3, r2
 801465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	0fdb      	lsrs	r3, r3, #31
 8014664:	f003 0301 	and.w	r3, r3, #1
 8014668:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	689b      	ldr	r3, [r3, #8]
 801466e:	f003 0320 	and.w	r3, r3, #32
 8014672:	2b20      	cmp	r3, #32
 8014674:	d104      	bne.n	8014680 <USB_HC_Halt+0x5a>
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d101      	bne.n	8014680 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 801467c:	2300      	movs	r3, #0
 801467e:	e0e8      	b.n	8014852 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d002      	beq.n	801468c <USB_HC_Halt+0x66>
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	2b02      	cmp	r3, #2
 801468a:	d173      	bne.n	8014774 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	015a      	lsls	r2, r3, #5
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	4413      	add	r3, r2
 8014694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	697a      	ldr	r2, [r7, #20]
 801469c:	0151      	lsls	r1, r2, #5
 801469e:	69ba      	ldr	r2, [r7, #24]
 80146a0:	440a      	add	r2, r1
 80146a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80146a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80146aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	689b      	ldr	r3, [r3, #8]
 80146b0:	f003 0320 	and.w	r3, r3, #32
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	f040 80cb 	bne.w	8014850 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d143      	bne.n	801474e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	015a      	lsls	r2, r3, #5
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	4413      	add	r3, r2
 80146ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	697a      	ldr	r2, [r7, #20]
 80146d6:	0151      	lsls	r1, r2, #5
 80146d8:	69ba      	ldr	r2, [r7, #24]
 80146da:	440a      	add	r2, r1
 80146dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80146e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80146e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	015a      	lsls	r2, r3, #5
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	4413      	add	r3, r2
 80146ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	697a      	ldr	r2, [r7, #20]
 80146f6:	0151      	lsls	r1, r2, #5
 80146f8:	69ba      	ldr	r2, [r7, #24]
 80146fa:	440a      	add	r2, r1
 80146fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014704:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	015a      	lsls	r2, r3, #5
 801470a:	69bb      	ldr	r3, [r7, #24]
 801470c:	4413      	add	r3, r2
 801470e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	697a      	ldr	r2, [r7, #20]
 8014716:	0151      	lsls	r1, r2, #5
 8014718:	69ba      	ldr	r2, [r7, #24]
 801471a:	440a      	add	r2, r1
 801471c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014720:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014724:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8014726:	69fb      	ldr	r3, [r7, #28]
 8014728:	3301      	adds	r3, #1
 801472a:	61fb      	str	r3, [r7, #28]
 801472c:	69fb      	ldr	r3, [r7, #28]
 801472e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014732:	d81d      	bhi.n	8014770 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	015a      	lsls	r2, r3, #5
 8014738:	69bb      	ldr	r3, [r7, #24]
 801473a:	4413      	add	r3, r2
 801473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801474a:	d0ec      	beq.n	8014726 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801474c:	e080      	b.n	8014850 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	015a      	lsls	r2, r3, #5
 8014752:	69bb      	ldr	r3, [r7, #24]
 8014754:	4413      	add	r3, r2
 8014756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	697a      	ldr	r2, [r7, #20]
 801475e:	0151      	lsls	r1, r2, #5
 8014760:	69ba      	ldr	r2, [r7, #24]
 8014762:	440a      	add	r2, r1
 8014764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801476c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801476e:	e06f      	b.n	8014850 <USB_HC_Halt+0x22a>
            break;
 8014770:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8014772:	e06d      	b.n	8014850 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	015a      	lsls	r2, r3, #5
 8014778:	69bb      	ldr	r3, [r7, #24]
 801477a:	4413      	add	r3, r2
 801477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	697a      	ldr	r2, [r7, #20]
 8014784:	0151      	lsls	r1, r2, #5
 8014786:	69ba      	ldr	r2, [r7, #24]
 8014788:	440a      	add	r2, r1
 801478a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801478e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014792:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801479a:	691b      	ldr	r3, [r3, #16]
 801479c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d143      	bne.n	801482c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	015a      	lsls	r2, r3, #5
 80147a8:	69bb      	ldr	r3, [r7, #24]
 80147aa:	4413      	add	r3, r2
 80147ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	697a      	ldr	r2, [r7, #20]
 80147b4:	0151      	lsls	r1, r2, #5
 80147b6:	69ba      	ldr	r2, [r7, #24]
 80147b8:	440a      	add	r2, r1
 80147ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80147be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80147c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	015a      	lsls	r2, r3, #5
 80147c8:	69bb      	ldr	r3, [r7, #24]
 80147ca:	4413      	add	r3, r2
 80147cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	697a      	ldr	r2, [r7, #20]
 80147d4:	0151      	lsls	r1, r2, #5
 80147d6:	69ba      	ldr	r2, [r7, #24]
 80147d8:	440a      	add	r2, r1
 80147da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80147de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80147e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	015a      	lsls	r2, r3, #5
 80147e8:	69bb      	ldr	r3, [r7, #24]
 80147ea:	4413      	add	r3, r2
 80147ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	697a      	ldr	r2, [r7, #20]
 80147f4:	0151      	lsls	r1, r2, #5
 80147f6:	69ba      	ldr	r2, [r7, #24]
 80147f8:	440a      	add	r2, r1
 80147fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80147fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014802:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	3301      	adds	r3, #1
 8014808:	61fb      	str	r3, [r7, #28]
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014810:	d81d      	bhi.n	801484e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	015a      	lsls	r2, r3, #5
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	4413      	add	r3, r2
 801481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014828:	d0ec      	beq.n	8014804 <USB_HC_Halt+0x1de>
 801482a:	e011      	b.n	8014850 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	015a      	lsls	r2, r3, #5
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	4413      	add	r3, r2
 8014834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	697a      	ldr	r2, [r7, #20]
 801483c:	0151      	lsls	r1, r2, #5
 801483e:	69ba      	ldr	r2, [r7, #24]
 8014840:	440a      	add	r2, r1
 8014842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	e000      	b.n	8014850 <USB_HC_Halt+0x22a>
          break;
 801484e:	bf00      	nop
    }
  }

  return HAL_OK;
 8014850:	2300      	movs	r3, #0
}
 8014852:	4618      	mov	r0, r3
 8014854:	3724      	adds	r7, #36	; 0x24
 8014856:	46bd      	mov	sp, r7
 8014858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485c:	4770      	bx	lr
	...

08014860 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8014860:	b480      	push	{r7}
 8014862:	b087      	sub	sp, #28
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	460b      	mov	r3, r1
 801486a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8014870:	78fb      	ldrb	r3, [r7, #3]
 8014872:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8014874:	2301      	movs	r3, #1
 8014876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	04da      	lsls	r2, r3, #19
 801487c:	4b15      	ldr	r3, [pc, #84]	; (80148d4 <USB_DoPing+0x74>)
 801487e:	4013      	ands	r3, r2
 8014880:	693a      	ldr	r2, [r7, #16]
 8014882:	0151      	lsls	r1, r2, #5
 8014884:	697a      	ldr	r2, [r7, #20]
 8014886:	440a      	add	r2, r1
 8014888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801488c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014890:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	015a      	lsls	r2, r3, #5
 8014896:	697b      	ldr	r3, [r7, #20]
 8014898:	4413      	add	r3, r2
 801489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80148a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80148b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	015a      	lsls	r2, r3, #5
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	4413      	add	r3, r2
 80148ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80148be:	461a      	mov	r2, r3
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80148c4:	2300      	movs	r3, #0
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	371c      	adds	r7, #28
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop
 80148d4:	1ff80000 	.word	0x1ff80000

080148d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b086      	sub	sp, #24
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80148e4:	2300      	movs	r3, #0
 80148e6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f7ff f98e 	bl	8013c0a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80148ee:	2110      	movs	r1, #16
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f7ff f9c5 	bl	8013c80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f7ff f9e8 	bl	8013ccc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80148fc:	2300      	movs	r3, #0
 80148fe:	613b      	str	r3, [r7, #16]
 8014900:	e01f      	b.n	8014942 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	015a      	lsls	r2, r3, #5
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	4413      	add	r3, r2
 801490a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014918:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014920:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014928:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	015a      	lsls	r2, r3, #5
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	4413      	add	r3, r2
 8014932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014936:	461a      	mov	r2, r3
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801493c:	693b      	ldr	r3, [r7, #16]
 801493e:	3301      	adds	r3, #1
 8014940:	613b      	str	r3, [r7, #16]
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	2b0f      	cmp	r3, #15
 8014946:	d9dc      	bls.n	8014902 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8014948:	2300      	movs	r3, #0
 801494a:	613b      	str	r3, [r7, #16]
 801494c:	e034      	b.n	80149b8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	015a      	lsls	r2, r3, #5
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	4413      	add	r3, r2
 8014956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014964:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801496c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014974:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8014976:	693b      	ldr	r3, [r7, #16]
 8014978:	015a      	lsls	r2, r3, #5
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	4413      	add	r3, r2
 801497e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014982:	461a      	mov	r2, r3
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	3301      	adds	r3, #1
 801498c:	617b      	str	r3, [r7, #20]
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014994:	d80c      	bhi.n	80149b0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	015a      	lsls	r2, r3, #5
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	4413      	add	r3, r2
 801499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80149a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80149ac:	d0ec      	beq.n	8014988 <USB_StopHost+0xb0>
 80149ae:	e000      	b.n	80149b2 <USB_StopHost+0xda>
        break;
 80149b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80149b2:	693b      	ldr	r3, [r7, #16]
 80149b4:	3301      	adds	r3, #1
 80149b6:	613b      	str	r3, [r7, #16]
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	2b0f      	cmp	r3, #15
 80149bc:	d9c7      	bls.n	801494e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80149c4:	461a      	mov	r2, r3
 80149c6:	f04f 33ff 	mov.w	r3, #4294967295
 80149ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f04f 32ff 	mov.w	r2, #4294967295
 80149d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f7ff f907 	bl	8013be8 <USB_EnableGlobalInt>

  return HAL_OK;
 80149da:	2300      	movs	r3, #0
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3718      	adds	r7, #24
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80149e8:	4904      	ldr	r1, [pc, #16]	; (80149fc <MX_FATFS_Init+0x18>)
 80149ea:	4805      	ldr	r0, [pc, #20]	; (8014a00 <MX_FATFS_Init+0x1c>)
 80149ec:	f002 fbf0 	bl	80171d0 <FATFS_LinkDriver>
 80149f0:	4603      	mov	r3, r0
 80149f2:	461a      	mov	r2, r3
 80149f4:	4b03      	ldr	r3, [pc, #12]	; (8014a04 <MX_FATFS_Init+0x20>)
 80149f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80149f8:	bf00      	nop
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	2004d340 	.word	0x2004d340
 8014a00:	0801f7e0 	.word	0x0801f7e0
 8014a04:	2004d33c 	.word	0x2004d33c

08014a08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b082      	sub	sp, #8
 8014a0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014a12:	f000 f87b 	bl	8014b0c <BSP_SD_IsDetected>
 8014a16:	4603      	mov	r3, r0
 8014a18:	2b01      	cmp	r3, #1
 8014a1a:	d001      	beq.n	8014a20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014a1c:	2302      	movs	r3, #2
 8014a1e:	e012      	b.n	8014a46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8014a20:	480b      	ldr	r0, [pc, #44]	; (8014a50 <BSP_SD_Init+0x48>)
 8014a22:	f7fb f9b8 	bl	800fd96 <HAL_SD_Init>
 8014a26:	4603      	mov	r3, r0
 8014a28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014a2a:	79fb      	ldrb	r3, [r7, #7]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d109      	bne.n	8014a44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014a34:	4806      	ldr	r0, [pc, #24]	; (8014a50 <BSP_SD_Init+0x48>)
 8014a36:	f7fb fe07 	bl	8010648 <HAL_SD_ConfigWideBusOperation>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d001      	beq.n	8014a44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014a40:	2301      	movs	r3, #1
 8014a42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014a44:	79fb      	ldrb	r3, [r7, #7]
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3708      	adds	r7, #8
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	2000d15c 	.word	0x2000d15c

08014a54 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b086      	sub	sp, #24
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014a60:	2300      	movs	r3, #0
 8014a62:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	68ba      	ldr	r2, [r7, #8]
 8014a68:	68f9      	ldr	r1, [r7, #12]
 8014a6a:	4806      	ldr	r0, [pc, #24]	; (8014a84 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014a6c:	f7fb fa4a 	bl	800ff04 <HAL_SD_ReadBlocks_DMA>
 8014a70:	4603      	mov	r3, r0
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d001      	beq.n	8014a7a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014a76:	2301      	movs	r3, #1
 8014a78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3718      	adds	r7, #24
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}
 8014a84:	2000d15c 	.word	0x2000d15c

08014a88 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b086      	sub	sp, #24
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014a94:	2300      	movs	r3, #0
 8014a96:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	68ba      	ldr	r2, [r7, #8]
 8014a9c:	68f9      	ldr	r1, [r7, #12]
 8014a9e:	4806      	ldr	r0, [pc, #24]	; (8014ab8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014aa0:	f7fb fb12 	bl	80100c8 <HAL_SD_WriteBlocks_DMA>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d001      	beq.n	8014aae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014aaa:	2301      	movs	r3, #1
 8014aac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3718      	adds	r7, #24
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	2000d15c 	.word	0x2000d15c

08014abc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014ac0:	4805      	ldr	r0, [pc, #20]	; (8014ad8 <BSP_SD_GetCardState+0x1c>)
 8014ac2:	f7fb fe5b 	bl	801077c <HAL_SD_GetCardState>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b04      	cmp	r3, #4
 8014aca:	bf14      	ite	ne
 8014acc:	2301      	movne	r3, #1
 8014ace:	2300      	moveq	r3, #0
 8014ad0:	b2db      	uxtb	r3, r3
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	bd80      	pop	{r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	2000d15c 	.word	0x2000d15c

08014adc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b082      	sub	sp, #8
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8014ae4:	6879      	ldr	r1, [r7, #4]
 8014ae6:	4803      	ldr	r0, [pc, #12]	; (8014af4 <BSP_SD_GetCardInfo+0x18>)
 8014ae8:	f7fb fd82 	bl	80105f0 <HAL_SD_GetCardInfo>
}
 8014aec:	bf00      	nop
 8014aee:	3708      	adds	r7, #8
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	2000d15c 	.word	0x2000d15c

08014af8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014b00:	f000 f9b2 	bl	8014e68 <BSP_SD_ReadCpltCallback>
}
 8014b04:	bf00      	nop
 8014b06:	3708      	adds	r7, #8
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014b12:	2301      	movs	r3, #1
 8014b14:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014b16:	f000 f80b 	bl	8014b30 <BSP_PlatformIsDetected>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d101      	bne.n	8014b24 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014b20:	2300      	movs	r3, #0
 8014b22:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014b24:	79fb      	ldrb	r3, [r7, #7]
 8014b26:	b2db      	uxtb	r3, r3
}
 8014b28:	4618      	mov	r0, r3
 8014b2a:	3708      	adds	r7, #8
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}

08014b30 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014b36:	2301      	movs	r3, #1
 8014b38:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014b3e:	4806      	ldr	r0, [pc, #24]	; (8014b58 <BSP_PlatformIsDetected+0x28>)
 8014b40:	f7f5 f920 	bl	8009d84 <HAL_GPIO_ReadPin>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d001      	beq.n	8014b4e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3708      	adds	r7, #8
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}
 8014b58:	40020800 	.word	0x40020800

08014b5c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b084      	sub	sp, #16
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8014b64:	f002 fb80 	bl	8017268 <osKernelSysTick>
 8014b68:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8014b6a:	e006      	b.n	8014b7a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014b6c:	f7ff ffa6 	bl	8014abc <BSP_SD_GetCardState>
 8014b70:	4603      	mov	r3, r0
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d101      	bne.n	8014b7a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	e009      	b.n	8014b8e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8014b7a:	f002 fb75 	bl	8017268 <osKernelSysTick>
 8014b7e:	4602      	mov	r2, r0
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d8f0      	bhi.n	8014b6c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
	...

08014b98 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014ba2:	4b0b      	ldr	r3, [pc, #44]	; (8014bd0 <SD_CheckStatus+0x38>)
 8014ba4:	2201      	movs	r2, #1
 8014ba6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014ba8:	f7ff ff88 	bl	8014abc <BSP_SD_GetCardState>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d107      	bne.n	8014bc2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014bb2:	4b07      	ldr	r3, [pc, #28]	; (8014bd0 <SD_CheckStatus+0x38>)
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	b2db      	uxtb	r3, r3
 8014bb8:	f023 0301 	bic.w	r3, r3, #1
 8014bbc:	b2da      	uxtb	r2, r3
 8014bbe:	4b04      	ldr	r3, [pc, #16]	; (8014bd0 <SD_CheckStatus+0x38>)
 8014bc0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014bc2:	4b03      	ldr	r3, [pc, #12]	; (8014bd0 <SD_CheckStatus+0x38>)
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	b2db      	uxtb	r3, r3
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3708      	adds	r7, #8
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}
 8014bd0:	20000055 	.word	0x20000055

08014bd4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014bd4:	b590      	push	{r4, r7, lr}
 8014bd6:	b087      	sub	sp, #28
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	4603      	mov	r3, r0
 8014bdc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8014bde:	4b20      	ldr	r3, [pc, #128]	; (8014c60 <SD_initialize+0x8c>)
 8014be0:	2201      	movs	r2, #1
 8014be2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8014be4:	f002 fb34 	bl	8017250 <osKernelRunning>
 8014be8:	4603      	mov	r3, r0
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d030      	beq.n	8014c50 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8014bee:	f7ff ff0b 	bl	8014a08 <BSP_SD_Init>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d107      	bne.n	8014c08 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8014bf8:	79fb      	ldrb	r3, [r7, #7]
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7ff ffcc 	bl	8014b98 <SD_CheckStatus>
 8014c00:	4603      	mov	r3, r0
 8014c02:	461a      	mov	r2, r3
 8014c04:	4b16      	ldr	r3, [pc, #88]	; (8014c60 <SD_initialize+0x8c>)
 8014c06:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8014c08:	4b15      	ldr	r3, [pc, #84]	; (8014c60 <SD_initialize+0x8c>)
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	b2db      	uxtb	r3, r3
 8014c0e:	2b01      	cmp	r3, #1
 8014c10:	d01e      	beq.n	8014c50 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8014c12:	4b14      	ldr	r3, [pc, #80]	; (8014c64 <SD_initialize+0x90>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d10e      	bne.n	8014c38 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8014c1a:	4b13      	ldr	r3, [pc, #76]	; (8014c68 <SD_initialize+0x94>)
 8014c1c:	f107 0408 	add.w	r4, r7, #8
 8014c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8014c26:	f107 0308 	add.w	r3, r7, #8
 8014c2a:	2100      	movs	r1, #0
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f002 fc17 	bl	8017460 <osMessageCreate>
 8014c32:	4603      	mov	r3, r0
 8014c34:	4a0b      	ldr	r2, [pc, #44]	; (8014c64 <SD_initialize+0x90>)
 8014c36:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8014c38:	4b0a      	ldr	r3, [pc, #40]	; (8014c64 <SD_initialize+0x90>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d107      	bne.n	8014c50 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8014c40:	4b07      	ldr	r3, [pc, #28]	; (8014c60 <SD_initialize+0x8c>)
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	f043 0301 	orr.w	r3, r3, #1
 8014c4a:	b2da      	uxtb	r2, r3
 8014c4c:	4b04      	ldr	r3, [pc, #16]	; (8014c60 <SD_initialize+0x8c>)
 8014c4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8014c50:	4b03      	ldr	r3, [pc, #12]	; (8014c60 <SD_initialize+0x8c>)
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	b2db      	uxtb	r3, r3
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	371c      	adds	r7, #28
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd90      	pop	{r4, r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	20000055 	.word	0x20000055
 8014c64:	20000444 	.word	0x20000444
 8014c68:	0801cc60 	.word	0x0801cc60

08014c6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	4603      	mov	r3, r0
 8014c74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014c76:	79fb      	ldrb	r3, [r7, #7]
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7ff ff8d 	bl	8014b98 <SD_CheckStatus>
 8014c7e:	4603      	mov	r3, r0
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b08a      	sub	sp, #40	; 0x28
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60b9      	str	r1, [r7, #8]
 8014c90:	607a      	str	r2, [r7, #4]
 8014c92:	603b      	str	r3, [r7, #0]
 8014c94:	4603      	mov	r3, r0
 8014c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014c9e:	f247 5030 	movw	r0, #30000	; 0x7530
 8014ca2:	f7ff ff5b 	bl	8014b5c <SD_CheckStatusWithTimeout>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	da02      	bge.n	8014cb2 <SD_read+0x2a>
  {
    return res;
 8014cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cb0:	e032      	b.n	8014d18 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8014cb2:	683a      	ldr	r2, [r7, #0]
 8014cb4:	6879      	ldr	r1, [r7, #4]
 8014cb6:	68b8      	ldr	r0, [r7, #8]
 8014cb8:	f7ff fecc 	bl	8014a54 <BSP_SD_ReadBlocks_DMA>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8014cc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d124      	bne.n	8014d14 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014cca:	4b15      	ldr	r3, [pc, #84]	; (8014d20 <SD_read+0x98>)
 8014ccc:	6819      	ldr	r1, [r3, #0]
 8014cce:	f107 0314 	add.w	r3, r7, #20
 8014cd2:	f247 5230 	movw	r2, #30000	; 0x7530
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f002 fc2a 	bl	8017530 <osMessageGet>

    if (event.status == osEventMessage)
 8014cdc:	697b      	ldr	r3, [r7, #20]
 8014cde:	2b10      	cmp	r3, #16
 8014ce0:	d118      	bne.n	8014d14 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	2b01      	cmp	r3, #1
 8014ce6:	d115      	bne.n	8014d14 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8014ce8:	f002 fabe 	bl	8017268 <osKernelSysTick>
 8014cec:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8014cee:	e008      	b.n	8014d02 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014cf0:	f7ff fee4 	bl	8014abc <BSP_SD_GetCardState>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d103      	bne.n	8014d02 <SD_read+0x7a>
              {
                res = RES_OK;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8014d00:	e008      	b.n	8014d14 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8014d02:	f002 fab1 	bl	8017268 <osKernelSysTick>
 8014d06:	4602      	mov	r2, r0
 8014d08:	6a3b      	ldr	r3, [r7, #32]
 8014d0a:	1ad3      	subs	r3, r2, r3
 8014d0c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014d10:	4293      	cmp	r3, r2
 8014d12:	d9ed      	bls.n	8014cf0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8014d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3728      	adds	r7, #40	; 0x28
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	20000444 	.word	0x20000444

08014d24 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b08a      	sub	sp, #40	; 0x28
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60b9      	str	r1, [r7, #8]
 8014d2c:	607a      	str	r2, [r7, #4]
 8014d2e:	603b      	str	r3, [r7, #0]
 8014d30:	4603      	mov	r3, r0
 8014d32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014d34:	2301      	movs	r3, #1
 8014d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014d3a:	f247 5030 	movw	r0, #30000	; 0x7530
 8014d3e:	f7ff ff0d 	bl	8014b5c <SD_CheckStatusWithTimeout>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	da02      	bge.n	8014d4e <SD_write+0x2a>
  {
    return res;
 8014d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d4c:	e02e      	b.n	8014dac <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	6879      	ldr	r1, [r7, #4]
 8014d52:	68b8      	ldr	r0, [r7, #8]
 8014d54:	f7ff fe98 	bl	8014a88 <BSP_SD_WriteBlocks_DMA>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d124      	bne.n	8014da8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014d5e:	4b15      	ldr	r3, [pc, #84]	; (8014db4 <SD_write+0x90>)
 8014d60:	6819      	ldr	r1, [r3, #0]
 8014d62:	f107 0314 	add.w	r3, r7, #20
 8014d66:	f247 5230 	movw	r2, #30000	; 0x7530
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f002 fbe0 	bl	8017530 <osMessageGet>

    if (event.status == osEventMessage)
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	2b10      	cmp	r3, #16
 8014d74:	d118      	bne.n	8014da8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8014d76:	69bb      	ldr	r3, [r7, #24]
 8014d78:	2b02      	cmp	r3, #2
 8014d7a:	d115      	bne.n	8014da8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8014d7c:	f002 fa74 	bl	8017268 <osKernelSysTick>
 8014d80:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8014d82:	e008      	b.n	8014d96 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014d84:	f7ff fe9a 	bl	8014abc <BSP_SD_GetCardState>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d103      	bne.n	8014d96 <SD_write+0x72>
          {
            res = RES_OK;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014d94:	e008      	b.n	8014da8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8014d96:	f002 fa67 	bl	8017268 <osKernelSysTick>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	6a3b      	ldr	r3, [r7, #32]
 8014d9e:	1ad3      	subs	r3, r2, r3
 8014da0:	f247 522f 	movw	r2, #29999	; 0x752f
 8014da4:	4293      	cmp	r3, r2
 8014da6:	d9ed      	bls.n	8014d84 <SD_write+0x60>
    }

  }
#endif

  return res;
 8014da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3728      	adds	r7, #40	; 0x28
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	20000444 	.word	0x20000444

08014db8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b08c      	sub	sp, #48	; 0x30
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	603a      	str	r2, [r7, #0]
 8014dc2:	71fb      	strb	r3, [r7, #7]
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014dc8:	2301      	movs	r3, #1
 8014dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014dce:	4b25      	ldr	r3, [pc, #148]	; (8014e64 <SD_ioctl+0xac>)
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	b2db      	uxtb	r3, r3
 8014dd4:	f003 0301 	and.w	r3, r3, #1
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d001      	beq.n	8014de0 <SD_ioctl+0x28>
 8014ddc:	2303      	movs	r3, #3
 8014dde:	e03c      	b.n	8014e5a <SD_ioctl+0xa2>

  switch (cmd)
 8014de0:	79bb      	ldrb	r3, [r7, #6]
 8014de2:	2b03      	cmp	r3, #3
 8014de4:	d834      	bhi.n	8014e50 <SD_ioctl+0x98>
 8014de6:	a201      	add	r2, pc, #4	; (adr r2, 8014dec <SD_ioctl+0x34>)
 8014de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dec:	08014dfd 	.word	0x08014dfd
 8014df0:	08014e05 	.word	0x08014e05
 8014df4:	08014e1d 	.word	0x08014e1d
 8014df8:	08014e37 	.word	0x08014e37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e02:	e028      	b.n	8014e56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e04:	f107 030c 	add.w	r3, r7, #12
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7ff fe67 	bl	8014adc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014e14:	2300      	movs	r3, #0
 8014e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e1a:	e01c      	b.n	8014e56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e1c:	f107 030c 	add.w	r3, r7, #12
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7ff fe5b 	bl	8014adc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e28:	b29a      	uxth	r2, r3
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e34:	e00f      	b.n	8014e56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e36:	f107 030c 	add.w	r3, r7, #12
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7ff fe4e 	bl	8014adc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e42:	0a5a      	lsrs	r2, r3, #9
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e4e:	e002      	b.n	8014e56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014e50:	2304      	movs	r3, #4
 8014e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3730      	adds	r7, #48	; 0x30
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop
 8014e64:	20000055 	.word	0x20000055

08014e68 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8014e6c:	4b04      	ldr	r3, [pc, #16]	; (8014e80 <BSP_SD_ReadCpltCallback+0x18>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	2200      	movs	r2, #0
 8014e72:	2101      	movs	r1, #1
 8014e74:	4618      	mov	r0, r3
 8014e76:	f002 fb1b 	bl	80174b0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8014e7a:	bf00      	nop
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	20000444 	.word	0x20000444

08014e84 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8014e84:	b480      	push	{r7}
 8014e86:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8014e88:	bf00      	nop
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr

08014e92 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8014e92:	b590      	push	{r4, r7, lr}
 8014e94:	b089      	sub	sp, #36	; 0x24
 8014e96:	af04      	add	r7, sp, #16
 8014e98:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	2202      	movs	r2, #2
 8014e9e:	2102      	movs	r1, #2
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f000 fcb9 	bl	8015818 <USBH_FindInterface>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8014eaa:	7bfb      	ldrb	r3, [r7, #15]
 8014eac:	2bff      	cmp	r3, #255	; 0xff
 8014eae:	d002      	beq.n	8014eb6 <USBH_CDC_InterfaceInit+0x24>
 8014eb0:	7bfb      	ldrb	r3, [r7, #15]
 8014eb2:	2b01      	cmp	r3, #1
 8014eb4:	d901      	bls.n	8014eba <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8014eb6:	2302      	movs	r3, #2
 8014eb8:	e13d      	b.n	8015136 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8014eba:	7bfb      	ldrb	r3, [r7, #15]
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f000 fc8e 	bl	80157e0 <USBH_SelectInterface>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8014ec8:	7bbb      	ldrb	r3, [r7, #14]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d001      	beq.n	8014ed2 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8014ece:	2302      	movs	r3, #2
 8014ed0:	e131      	b.n	8015136 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8014ed8:	2050      	movs	r0, #80	; 0x50
 8014eda:	f006 fb2f 	bl	801b53c <malloc>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014ee8:	69db      	ldr	r3, [r3, #28]
 8014eea:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d101      	bne.n	8014ef6 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8014ef2:	2302      	movs	r3, #2
 8014ef4:	e11f      	b.n	8015136 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8014ef6:	2250      	movs	r2, #80	; 0x50
 8014ef8:	2100      	movs	r1, #0
 8014efa:	68b8      	ldr	r0, [r7, #8]
 8014efc:	f006 fb3c 	bl	801b578 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014f00:	7bfb      	ldrb	r3, [r7, #15]
 8014f02:	687a      	ldr	r2, [r7, #4]
 8014f04:	211a      	movs	r1, #26
 8014f06:	fb01 f303 	mul.w	r3, r1, r3
 8014f0a:	4413      	add	r3, r2
 8014f0c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	b25b      	sxtb	r3, r3
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	da15      	bge.n	8014f44 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014f18:	7bfb      	ldrb	r3, [r7, #15]
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	211a      	movs	r1, #26
 8014f1e:	fb01 f303 	mul.w	r3, r1, r3
 8014f22:	4413      	add	r3, r2
 8014f24:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014f28:	781a      	ldrb	r2, [r3, #0]
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014f2e:	7bfb      	ldrb	r3, [r7, #15]
 8014f30:	687a      	ldr	r2, [r7, #4]
 8014f32:	211a      	movs	r1, #26
 8014f34:	fb01 f303 	mul.w	r3, r1, r3
 8014f38:	4413      	add	r3, r2
 8014f3a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8014f3e:	881a      	ldrh	r2, [r3, #0]
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	785b      	ldrb	r3, [r3, #1]
 8014f48:	4619      	mov	r1, r3
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f002 f891 	bl	8017072 <USBH_AllocPipe>
 8014f50:	4603      	mov	r3, r0
 8014f52:	461a      	mov	r2, r3
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	7819      	ldrb	r1, [r3, #0]
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	7858      	ldrb	r0, [r3, #1]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014f6c:	68ba      	ldr	r2, [r7, #8]
 8014f6e:	8952      	ldrh	r2, [r2, #10]
 8014f70:	9202      	str	r2, [sp, #8]
 8014f72:	2203      	movs	r2, #3
 8014f74:	9201      	str	r2, [sp, #4]
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	4623      	mov	r3, r4
 8014f7a:	4602      	mov	r2, r0
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f002 f849 	bl	8017014 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	2200      	movs	r2, #0
 8014f88:	4619      	mov	r1, r3
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f005 f936 	bl	801a1fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8014f90:	2300      	movs	r3, #0
 8014f92:	2200      	movs	r2, #0
 8014f94:	210a      	movs	r1, #10
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f000 fc3e 	bl	8015818 <USBH_FindInterface>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8014fa0:	7bfb      	ldrb	r3, [r7, #15]
 8014fa2:	2bff      	cmp	r3, #255	; 0xff
 8014fa4:	d002      	beq.n	8014fac <USBH_CDC_InterfaceInit+0x11a>
 8014fa6:	7bfb      	ldrb	r3, [r7, #15]
 8014fa8:	2b01      	cmp	r3, #1
 8014faa:	d901      	bls.n	8014fb0 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8014fac:	2302      	movs	r3, #2
 8014fae:	e0c2      	b.n	8015136 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8014fb0:	7bfb      	ldrb	r3, [r7, #15]
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	211a      	movs	r1, #26
 8014fb6:	fb01 f303 	mul.w	r3, r1, r3
 8014fba:	4413      	add	r3, r2
 8014fbc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	b25b      	sxtb	r3, r3
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	da16      	bge.n	8014ff6 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014fc8:	7bfb      	ldrb	r3, [r7, #15]
 8014fca:	687a      	ldr	r2, [r7, #4]
 8014fcc:	211a      	movs	r1, #26
 8014fce:	fb01 f303 	mul.w	r3, r1, r3
 8014fd2:	4413      	add	r3, r2
 8014fd4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014fd8:	781a      	ldrb	r2, [r3, #0]
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014fde:	7bfb      	ldrb	r3, [r7, #15]
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	211a      	movs	r1, #26
 8014fe4:	fb01 f303 	mul.w	r3, r1, r3
 8014fe8:	4413      	add	r3, r2
 8014fea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8014fee:	881a      	ldrh	r2, [r3, #0]
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	835a      	strh	r2, [r3, #26]
 8014ff4:	e015      	b.n	8015022 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014ff6:	7bfb      	ldrb	r3, [r7, #15]
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	211a      	movs	r1, #26
 8014ffc:	fb01 f303 	mul.w	r3, r1, r3
 8015000:	4413      	add	r3, r2
 8015002:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015006:	781a      	ldrb	r2, [r3, #0]
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801500c:	7bfb      	ldrb	r3, [r7, #15]
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	211a      	movs	r1, #26
 8015012:	fb01 f303 	mul.w	r3, r1, r3
 8015016:	4413      	add	r3, r2
 8015018:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801501c:	881a      	ldrh	r2, [r3, #0]
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8015022:	7bfb      	ldrb	r3, [r7, #15]
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	211a      	movs	r1, #26
 8015028:	fb01 f303 	mul.w	r3, r1, r3
 801502c:	4413      	add	r3, r2
 801502e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8015032:	781b      	ldrb	r3, [r3, #0]
 8015034:	b25b      	sxtb	r3, r3
 8015036:	2b00      	cmp	r3, #0
 8015038:	da16      	bge.n	8015068 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801503a:	7bfb      	ldrb	r3, [r7, #15]
 801503c:	687a      	ldr	r2, [r7, #4]
 801503e:	211a      	movs	r1, #26
 8015040:	fb01 f303 	mul.w	r3, r1, r3
 8015044:	4413      	add	r3, r2
 8015046:	f203 3356 	addw	r3, r3, #854	; 0x356
 801504a:	781a      	ldrb	r2, [r3, #0]
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8015050:	7bfb      	ldrb	r3, [r7, #15]
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	211a      	movs	r1, #26
 8015056:	fb01 f303 	mul.w	r3, r1, r3
 801505a:	4413      	add	r3, r2
 801505c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8015060:	881a      	ldrh	r2, [r3, #0]
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	835a      	strh	r2, [r3, #26]
 8015066:	e015      	b.n	8015094 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8015068:	7bfb      	ldrb	r3, [r7, #15]
 801506a:	687a      	ldr	r2, [r7, #4]
 801506c:	211a      	movs	r1, #26
 801506e:	fb01 f303 	mul.w	r3, r1, r3
 8015072:	4413      	add	r3, r2
 8015074:	f203 3356 	addw	r3, r3, #854	; 0x356
 8015078:	781a      	ldrb	r2, [r3, #0]
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801507e:	7bfb      	ldrb	r3, [r7, #15]
 8015080:	687a      	ldr	r2, [r7, #4]
 8015082:	211a      	movs	r1, #26
 8015084:	fb01 f303 	mul.w	r3, r1, r3
 8015088:	4413      	add	r3, r2
 801508a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801508e:	881a      	ldrh	r2, [r3, #0]
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	7b9b      	ldrb	r3, [r3, #14]
 8015098:	4619      	mov	r1, r3
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f001 ffe9 	bl	8017072 <USBH_AllocPipe>
 80150a0:	4603      	mov	r3, r0
 80150a2:	461a      	mov	r2, r3
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	7bdb      	ldrb	r3, [r3, #15]
 80150ac:	4619      	mov	r1, r3
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	f001 ffdf 	bl	8017072 <USBH_AllocPipe>
 80150b4:	4603      	mov	r3, r0
 80150b6:	461a      	mov	r2, r3
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	7b59      	ldrb	r1, [r3, #13]
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	7b98      	ldrb	r0, [r3, #14]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80150d0:	68ba      	ldr	r2, [r7, #8]
 80150d2:	8b12      	ldrh	r2, [r2, #24]
 80150d4:	9202      	str	r2, [sp, #8]
 80150d6:	2202      	movs	r2, #2
 80150d8:	9201      	str	r2, [sp, #4]
 80150da:	9300      	str	r3, [sp, #0]
 80150dc:	4623      	mov	r3, r4
 80150de:	4602      	mov	r2, r0
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f001 ff97 	bl	8017014 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	7b19      	ldrb	r1, [r3, #12]
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	7bd8      	ldrb	r0, [r3, #15]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80150fa:	68ba      	ldr	r2, [r7, #8]
 80150fc:	8b52      	ldrh	r2, [r2, #26]
 80150fe:	9202      	str	r2, [sp, #8]
 8015100:	2202      	movs	r2, #2
 8015102:	9201      	str	r2, [sp, #4]
 8015104:	9300      	str	r3, [sp, #0]
 8015106:	4623      	mov	r3, r4
 8015108:	4602      	mov	r2, r0
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f001 ff82 	bl	8017014 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	2200      	movs	r2, #0
 8015114:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	7b5b      	ldrb	r3, [r3, #13]
 801511c:	2200      	movs	r2, #0
 801511e:	4619      	mov	r1, r3
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f005 f86b 	bl	801a1fc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	7b1b      	ldrb	r3, [r3, #12]
 801512a:	2200      	movs	r2, #0
 801512c:	4619      	mov	r1, r3
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f005 f864 	bl	801a1fc <USBH_LL_SetToggle>

  return USBH_OK;
 8015134:	2300      	movs	r3, #0
}
 8015136:	4618      	mov	r0, r3
 8015138:	3714      	adds	r7, #20
 801513a:	46bd      	mov	sp, r7
 801513c:	bd90      	pop	{r4, r7, pc}

0801513e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801513e:	b580      	push	{r7, lr}
 8015140:	b084      	sub	sp, #16
 8015142:	af00      	add	r7, sp, #0
 8015144:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801514c:	69db      	ldr	r3, [r3, #28]
 801514e:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	781b      	ldrb	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d00e      	beq.n	8015176 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	4619      	mov	r1, r3
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f001 ff77 	bl	8017052 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	4619      	mov	r1, r3
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f001 ffa2 	bl	80170b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2200      	movs	r2, #0
 8015174:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	7b1b      	ldrb	r3, [r3, #12]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00e      	beq.n	801519c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	7b1b      	ldrb	r3, [r3, #12]
 8015182:	4619      	mov	r1, r3
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f001 ff64 	bl	8017052 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	7b1b      	ldrb	r3, [r3, #12]
 801518e:	4619      	mov	r1, r3
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f001 ff8f 	bl	80170b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	2200      	movs	r2, #0
 801519a:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	7b5b      	ldrb	r3, [r3, #13]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d00e      	beq.n	80151c2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	7b5b      	ldrb	r3, [r3, #13]
 80151a8:	4619      	mov	r1, r3
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f001 ff51 	bl	8017052 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	7b5b      	ldrb	r3, [r3, #13]
 80151b4:	4619      	mov	r1, r3
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f001 ff7c 	bl	80170b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2200      	movs	r2, #0
 80151c0:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80151c8:	69db      	ldr	r3, [r3, #28]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d00b      	beq.n	80151e6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80151d4:	69db      	ldr	r3, [r3, #28]
 80151d6:	4618      	mov	r0, r3
 80151d8:	f006 f9b8 	bl	801b54c <free>
    phost->pActiveClass->pData = 0U;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80151e2:	2200      	movs	r2, #0
 80151e4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80151e6:	2300      	movs	r3, #0
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	3710      	adds	r7, #16
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}

080151f0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b084      	sub	sp, #16
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80151fe:	69db      	ldr	r3, [r3, #28]
 8015200:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	3340      	adds	r3, #64	; 0x40
 8015206:	4619      	mov	r1, r3
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	f000 f8b2 	bl	8015372 <GetLineCoding>
 801520e:	4603      	mov	r3, r0
 8015210:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8015212:	7afb      	ldrb	r3, [r7, #11]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d105      	bne.n	8015224 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801521e:	2102      	movs	r1, #2
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8015224:	7afb      	ldrb	r3, [r7, #11]
}
 8015226:	4618      	mov	r0, r3
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
	...

08015230 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b084      	sub	sp, #16
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8015238:	2301      	movs	r3, #1
 801523a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 801523c:	2300      	movs	r3, #0
 801523e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015246:	69db      	ldr	r3, [r3, #28]
 8015248:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801524a:	68bb      	ldr	r3, [r7, #8]
 801524c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8015250:	2b04      	cmp	r3, #4
 8015252:	d877      	bhi.n	8015344 <USBH_CDC_Process+0x114>
 8015254:	a201      	add	r2, pc, #4	; (adr r2, 801525c <USBH_CDC_Process+0x2c>)
 8015256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801525a:	bf00      	nop
 801525c:	08015271 	.word	0x08015271
 8015260:	08015277 	.word	0x08015277
 8015264:	080152a7 	.word	0x080152a7
 8015268:	0801531b 	.word	0x0801531b
 801526c:	08015329 	.word	0x08015329
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8015270:	2300      	movs	r3, #0
 8015272:	73fb      	strb	r3, [r7, #15]
      break;
 8015274:	e06d      	b.n	8015352 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801527a:	4619      	mov	r1, r3
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f000 f897 	bl	80153b0 <SetLineCoding>
 8015282:	4603      	mov	r3, r0
 8015284:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8015286:	7bbb      	ldrb	r3, [r7, #14]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d104      	bne.n	8015296 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	2202      	movs	r2, #2
 8015290:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8015294:	e058      	b.n	8015348 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8015296:	7bbb      	ldrb	r3, [r7, #14]
 8015298:	2b01      	cmp	r3, #1
 801529a:	d055      	beq.n	8015348 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	2204      	movs	r2, #4
 80152a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80152a4:	e050      	b.n	8015348 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	3340      	adds	r3, #64	; 0x40
 80152aa:	4619      	mov	r1, r3
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f000 f860 	bl	8015372 <GetLineCoding>
 80152b2:	4603      	mov	r3, r0
 80152b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80152b6:	7bbb      	ldrb	r3, [r7, #14]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d126      	bne.n	801530a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	2200      	movs	r2, #0
 80152c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80152ce:	791b      	ldrb	r3, [r3, #4]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d13b      	bne.n	801534c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80152de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d133      	bne.n	801534c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80152ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d12b      	bne.n	801534c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80152fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80152fe:	429a      	cmp	r2, r3
 8015300:	d124      	bne.n	801534c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f000 f982 	bl	801560c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8015308:	e020      	b.n	801534c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801530a:	7bbb      	ldrb	r3, [r7, #14]
 801530c:	2b01      	cmp	r3, #1
 801530e:	d01d      	beq.n	801534c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	2204      	movs	r2, #4
 8015314:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8015318:	e018      	b.n	801534c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f000 f867 	bl	80153ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f000 f8f6 	bl	8015512 <CDC_ProcessReception>
      break;
 8015326:	e014      	b.n	8015352 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8015328:	2100      	movs	r1, #0
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f001 f951 	bl	80165d2 <USBH_ClrFeature>
 8015330:	4603      	mov	r3, r0
 8015332:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8015334:	7bbb      	ldrb	r3, [r7, #14]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d10a      	bne.n	8015350 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	2200      	movs	r2, #0
 801533e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8015342:	e005      	b.n	8015350 <USBH_CDC_Process+0x120>

    default:
      break;
 8015344:	bf00      	nop
 8015346:	e004      	b.n	8015352 <USBH_CDC_Process+0x122>
      break;
 8015348:	bf00      	nop
 801534a:	e002      	b.n	8015352 <USBH_CDC_Process+0x122>
      break;
 801534c:	bf00      	nop
 801534e:	e000      	b.n	8015352 <USBH_CDC_Process+0x122>
      break;
 8015350:	bf00      	nop

  }

  return status;
 8015352:	7bfb      	ldrb	r3, [r7, #15]
}
 8015354:	4618      	mov	r0, r3
 8015356:	3710      	adds	r7, #16
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}

0801535c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801535c:	b480      	push	{r7}
 801535e:	b083      	sub	sp, #12
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	370c      	adds	r7, #12
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr

08015372 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b082      	sub	sp, #8
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
 801537a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	22a1      	movs	r2, #161	; 0xa1
 8015380:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2221      	movs	r2, #33	; 0x21
 8015386:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2200      	movs	r2, #0
 801538c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2200      	movs	r2, #0
 8015392:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2207      	movs	r2, #7
 8015398:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	2207      	movs	r2, #7
 801539e:	4619      	mov	r1, r3
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f001 faf6 	bl	8016992 <USBH_CtlReq>
 80153a6:	4603      	mov	r3, r0
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3708      	adds	r7, #8
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	2221      	movs	r2, #33	; 0x21
 80153be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2220      	movs	r2, #32
 80153c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	2200      	movs	r2, #0
 80153ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2207      	movs	r2, #7
 80153d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	2207      	movs	r2, #7
 80153dc:	4619      	mov	r1, r3
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f001 fad7 	bl	8016992 <USBH_CtlReq>
 80153e4:	4603      	mov	r3, r0
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}

080153ee <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b086      	sub	sp, #24
 80153f2:	af02      	add	r7, sp, #8
 80153f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80153fc:	69db      	ldr	r3, [r3, #28]
 80153fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015400:	2300      	movs	r3, #0
 8015402:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801540a:	2b01      	cmp	r3, #1
 801540c:	d002      	beq.n	8015414 <CDC_ProcessTransmission+0x26>
 801540e:	2b02      	cmp	r3, #2
 8015410:	d023      	beq.n	801545a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8015412:	e07a      	b.n	801550a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015418:	68fa      	ldr	r2, [r7, #12]
 801541a:	8b12      	ldrh	r2, [r2, #24]
 801541c:	4293      	cmp	r3, r2
 801541e:	d90b      	bls.n	8015438 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	69d9      	ldr	r1, [r3, #28]
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	8b1a      	ldrh	r2, [r3, #24]
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	7b5b      	ldrb	r3, [r3, #13]
 801542c:	2001      	movs	r0, #1
 801542e:	9000      	str	r0, [sp, #0]
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f001 fdac 	bl	8016f8e <USBH_BulkSendData>
 8015436:	e00b      	b.n	8015450 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8015440:	b29a      	uxth	r2, r3
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	7b5b      	ldrb	r3, [r3, #13]
 8015446:	2001      	movs	r0, #1
 8015448:	9000      	str	r0, [sp, #0]
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f001 fd9f 	bl	8016f8e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2202      	movs	r2, #2
 8015454:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8015458:	e057      	b.n	801550a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	7b5b      	ldrb	r3, [r3, #13]
 801545e:	4619      	mov	r1, r3
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f004 fea1 	bl	801a1a8 <USBH_LL_GetURBState>
 8015466:	4603      	mov	r3, r0
 8015468:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801546a:	7afb      	ldrb	r3, [r7, #11]
 801546c:	2b01      	cmp	r3, #1
 801546e:	d136      	bne.n	80154de <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015474:	68fa      	ldr	r2, [r7, #12]
 8015476:	8b12      	ldrh	r2, [r2, #24]
 8015478:	4293      	cmp	r3, r2
 801547a:	d90e      	bls.n	801549a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015480:	68fa      	ldr	r2, [r7, #12]
 8015482:	8b12      	ldrh	r2, [r2, #24]
 8015484:	1a9a      	subs	r2, r3, r2
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	69db      	ldr	r3, [r3, #28]
 801548e:	68fa      	ldr	r2, [r7, #12]
 8015490:	8b12      	ldrh	r2, [r2, #24]
 8015492:	441a      	add	r2, r3
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	61da      	str	r2, [r3, #28]
 8015498:	e002      	b.n	80154a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	2200      	movs	r2, #0
 801549e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d004      	beq.n	80154b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2201      	movs	r2, #1
 80154ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80154b0:	e006      	b.n	80154c0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	2200      	movs	r2, #0
 80154b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f000 f892 	bl	80155e4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2204      	movs	r2, #4
 80154c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80154d4:	2200      	movs	r2, #0
 80154d6:	4619      	mov	r1, r3
 80154d8:	f001 ffea 	bl	80174b0 <osMessagePut>
      break;
 80154dc:	e014      	b.n	8015508 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80154de:	7afb      	ldrb	r3, [r7, #11]
 80154e0:	2b02      	cmp	r3, #2
 80154e2:	d111      	bne.n	8015508 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	2201      	movs	r2, #1
 80154e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2204      	movs	r2, #4
 80154f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015500:	2200      	movs	r2, #0
 8015502:	4619      	mov	r1, r3
 8015504:	f001 ffd4 	bl	80174b0 <osMessagePut>
      break;
 8015508:	bf00      	nop
  }
}
 801550a:	bf00      	nop
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}

08015512 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8015512:	b580      	push	{r7, lr}
 8015514:	b086      	sub	sp, #24
 8015516:	af00      	add	r7, sp, #0
 8015518:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015520:	69db      	ldr	r3, [r3, #28]
 8015522:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015524:	2300      	movs	r3, #0
 8015526:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801552e:	2b03      	cmp	r3, #3
 8015530:	d002      	beq.n	8015538 <CDC_ProcessReception+0x26>
 8015532:	2b04      	cmp	r3, #4
 8015534:	d00e      	beq.n	8015554 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8015536:	e051      	b.n	80155dc <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	6a19      	ldr	r1, [r3, #32]
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	8b5a      	ldrh	r2, [r3, #26]
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	7b1b      	ldrb	r3, [r3, #12]
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f001 fd47 	bl	8016fd8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	2204      	movs	r2, #4
 801554e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8015552:	e043      	b.n	80155dc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	7b1b      	ldrb	r3, [r3, #12]
 8015558:	4619      	mov	r1, r3
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f004 fe24 	bl	801a1a8 <USBH_LL_GetURBState>
 8015560:	4603      	mov	r3, r0
 8015562:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8015564:	7cfb      	ldrb	r3, [r7, #19]
 8015566:	2b01      	cmp	r3, #1
 8015568:	d137      	bne.n	80155da <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	7b1b      	ldrb	r3, [r3, #12]
 801556e:	4619      	mov	r1, r3
 8015570:	6878      	ldr	r0, [r7, #4]
 8015572:	f004 fd87 	bl	801a084 <USBH_LL_GetLastXferSize>
 8015576:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801557c:	68fa      	ldr	r2, [r7, #12]
 801557e:	429a      	cmp	r2, r3
 8015580:	d016      	beq.n	80155b0 <CDC_ProcessReception+0x9e>
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	8b5b      	ldrh	r3, [r3, #26]
 8015586:	461a      	mov	r2, r3
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	4293      	cmp	r3, r2
 801558c:	d910      	bls.n	80155b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 801558e:	697b      	ldr	r3, [r7, #20]
 8015590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	1ad2      	subs	r2, r2, r3
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801559a:	697b      	ldr	r3, [r7, #20]
 801559c:	6a1a      	ldr	r2, [r3, #32]
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	441a      	add	r2, r3
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	2203      	movs	r2, #3
 80155aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80155ae:	e006      	b.n	80155be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	2200      	movs	r2, #0
 80155b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f000 f81d 	bl	80155f8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2204      	movs	r2, #4
 80155c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80155d2:	2200      	movs	r2, #0
 80155d4:	4619      	mov	r1, r3
 80155d6:	f001 ff6b 	bl	80174b0 <osMessagePut>
      break;
 80155da:	bf00      	nop
  }
}
 80155dc:	bf00      	nop
 80155de:	3718      	adds	r7, #24
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}

080155e4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80155e4:	b480      	push	{r7}
 80155e6:	b083      	sub	sp, #12
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80155ec:	bf00      	nop
 80155ee:	370c      	adds	r7, #12
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr

080155f8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80155f8:	b480      	push	{r7}
 80155fa:	b083      	sub	sp, #12
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015600:	bf00      	nop
 8015602:	370c      	adds	r7, #12
 8015604:	46bd      	mov	sp, r7
 8015606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560a:	4770      	bx	lr

0801560c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801560c:	b480      	push	{r7}
 801560e:	b083      	sub	sp, #12
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015614:	bf00      	nop
 8015616:	370c      	adds	r7, #12
 8015618:	46bd      	mov	sp, r7
 801561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561e:	4770      	bx	lr

08015620 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8015620:	b5b0      	push	{r4, r5, r7, lr}
 8015622:	b090      	sub	sp, #64	; 0x40
 8015624:	af00      	add	r7, sp, #0
 8015626:	60f8      	str	r0, [r7, #12]
 8015628:	60b9      	str	r1, [r7, #8]
 801562a:	4613      	mov	r3, r2
 801562c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d101      	bne.n	8015638 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8015634:	2302      	movs	r3, #2
 8015636:	e04d      	b.n	80156d4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	79fa      	ldrb	r2, [r7, #7]
 801563c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	2200      	movs	r2, #0
 8015644:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	2200      	movs	r2, #0
 801564c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8015650:	68f8      	ldr	r0, [r7, #12]
 8015652:	f000 f847 	bl	80156e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	2200      	movs	r2, #0
 801565a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	2200      	movs	r2, #0
 8015662:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	2200      	movs	r2, #0
 801566a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	2200      	movs	r2, #0
 8015672:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d003      	beq.n	8015684 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	68ba      	ldr	r2, [r7, #8]
 8015680:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8015684:	4b15      	ldr	r3, [pc, #84]	; (80156dc <USBH_Init+0xbc>)
 8015686:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801568a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801568c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8015690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015694:	2100      	movs	r1, #0
 8015696:	4618      	mov	r0, r3
 8015698:	f001 fee2 	bl	8017460 <osMessageCreate>
 801569c:	4602      	mov	r2, r0
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80156a4:	4b0e      	ldr	r3, [pc, #56]	; (80156e0 <USBH_Init+0xc0>)
 80156a6:	f107 0414 	add.w	r4, r7, #20
 80156aa:	461d      	mov	r5, r3
 80156ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80156b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80156b8:	f107 0314 	add.w	r3, r7, #20
 80156bc:	68f9      	ldr	r1, [r7, #12]
 80156be:	4618      	mov	r0, r3
 80156c0:	f001 fde2 	bl	8017288 <osThreadCreate>
 80156c4:	4602      	mov	r2, r0
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80156cc:	68f8      	ldr	r0, [r7, #12]
 80156ce:	f004 fc25 	bl	8019f1c <USBH_LL_Init>

  return USBH_OK;
 80156d2:	2300      	movs	r3, #0
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3740      	adds	r7, #64	; 0x40
 80156d8:	46bd      	mov	sp, r7
 80156da:	bdb0      	pop	{r4, r5, r7, pc}
 80156dc:	0801cc80 	.word	0x0801cc80
 80156e0:	0801cc90 	.word	0x0801cc90

080156e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80156e4:	b480      	push	{r7}
 80156e6:	b085      	sub	sp, #20
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80156ec:	2300      	movs	r3, #0
 80156ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80156f0:	2300      	movs	r3, #0
 80156f2:	60fb      	str	r3, [r7, #12]
 80156f4:	e009      	b.n	801570a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	33e0      	adds	r3, #224	; 0xe0
 80156fc:	009b      	lsls	r3, r3, #2
 80156fe:	4413      	add	r3, r2
 8015700:	2200      	movs	r2, #0
 8015702:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	3301      	adds	r3, #1
 8015708:	60fb      	str	r3, [r7, #12]
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	2b0e      	cmp	r3, #14
 801570e:	d9f2      	bls.n	80156f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015710:	2300      	movs	r3, #0
 8015712:	60fb      	str	r3, [r7, #12]
 8015714:	e009      	b.n	801572a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8015716:	687a      	ldr	r2, [r7, #4]
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	4413      	add	r3, r2
 801571c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015720:	2200      	movs	r2, #0
 8015722:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	3301      	adds	r3, #1
 8015728:	60fb      	str	r3, [r7, #12]
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015730:	d3f1      	bcc.n	8015716 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2200      	movs	r2, #0
 8015736:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2200      	movs	r2, #0
 801573c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2201      	movs	r2, #1
 8015742:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2200      	movs	r2, #0
 8015748:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2201      	movs	r2, #1
 8015750:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2240      	movs	r2, #64	; 0x40
 8015756:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2200      	movs	r2, #0
 801575c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2200      	movs	r2, #0
 8015762:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2201      	movs	r2, #1
 801576a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2200      	movs	r2, #0
 8015772:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2200      	movs	r2, #0
 801577a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 801577e:	2300      	movs	r3, #0
}
 8015780:	4618      	mov	r0, r3
 8015782:	3714      	adds	r7, #20
 8015784:	46bd      	mov	sp, r7
 8015786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578a:	4770      	bx	lr

0801578c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801578c:	b480      	push	{r7}
 801578e:	b085      	sub	sp, #20
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
 8015794:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015796:	2300      	movs	r3, #0
 8015798:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d016      	beq.n	80157ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d10e      	bne.n	80157c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80157b0:	1c59      	adds	r1, r3, #1
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	33de      	adds	r3, #222	; 0xde
 80157bc:	6839      	ldr	r1, [r7, #0]
 80157be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80157c2:	2300      	movs	r3, #0
 80157c4:	73fb      	strb	r3, [r7, #15]
 80157c6:	e004      	b.n	80157d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80157c8:	2302      	movs	r3, #2
 80157ca:	73fb      	strb	r3, [r7, #15]
 80157cc:	e001      	b.n	80157d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80157ce:	2302      	movs	r3, #2
 80157d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80157d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3714      	adds	r7, #20
 80157d8:	46bd      	mov	sp, r7
 80157da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157de:	4770      	bx	lr

080157e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80157e0:	b480      	push	{r7}
 80157e2:	b085      	sub	sp, #20
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	460b      	mov	r3, r1
 80157ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80157ec:	2300      	movs	r3, #0
 80157ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80157f6:	78fa      	ldrb	r2, [r7, #3]
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d204      	bcs.n	8015806 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	78fa      	ldrb	r2, [r7, #3]
 8015800:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015804:	e001      	b.n	801580a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8015806:	2302      	movs	r3, #2
 8015808:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801580a:	7bfb      	ldrb	r3, [r7, #15]
}
 801580c:	4618      	mov	r0, r3
 801580e:	3714      	adds	r7, #20
 8015810:	46bd      	mov	sp, r7
 8015812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015816:	4770      	bx	lr

08015818 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8015818:	b480      	push	{r7}
 801581a:	b087      	sub	sp, #28
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	4608      	mov	r0, r1
 8015822:	4611      	mov	r1, r2
 8015824:	461a      	mov	r2, r3
 8015826:	4603      	mov	r3, r0
 8015828:	70fb      	strb	r3, [r7, #3]
 801582a:	460b      	mov	r3, r1
 801582c:	70bb      	strb	r3, [r7, #2]
 801582e:	4613      	mov	r3, r2
 8015830:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015832:	2300      	movs	r3, #0
 8015834:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8015836:	2300      	movs	r3, #0
 8015838:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015840:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015842:	e025      	b.n	8015890 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015844:	7dfb      	ldrb	r3, [r7, #23]
 8015846:	221a      	movs	r2, #26
 8015848:	fb02 f303 	mul.w	r3, r2, r3
 801584c:	3308      	adds	r3, #8
 801584e:	68fa      	ldr	r2, [r7, #12]
 8015850:	4413      	add	r3, r2
 8015852:	3302      	adds	r3, #2
 8015854:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	795b      	ldrb	r3, [r3, #5]
 801585a:	78fa      	ldrb	r2, [r7, #3]
 801585c:	429a      	cmp	r2, r3
 801585e:	d002      	beq.n	8015866 <USBH_FindInterface+0x4e>
 8015860:	78fb      	ldrb	r3, [r7, #3]
 8015862:	2bff      	cmp	r3, #255	; 0xff
 8015864:	d111      	bne.n	801588a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801586a:	78ba      	ldrb	r2, [r7, #2]
 801586c:	429a      	cmp	r2, r3
 801586e:	d002      	beq.n	8015876 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015870:	78bb      	ldrb	r3, [r7, #2]
 8015872:	2bff      	cmp	r3, #255	; 0xff
 8015874:	d109      	bne.n	801588a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801587a:	787a      	ldrb	r2, [r7, #1]
 801587c:	429a      	cmp	r2, r3
 801587e:	d002      	beq.n	8015886 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015880:	787b      	ldrb	r3, [r7, #1]
 8015882:	2bff      	cmp	r3, #255	; 0xff
 8015884:	d101      	bne.n	801588a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8015886:	7dfb      	ldrb	r3, [r7, #23]
 8015888:	e006      	b.n	8015898 <USBH_FindInterface+0x80>
    }
    if_ix++;
 801588a:	7dfb      	ldrb	r3, [r7, #23]
 801588c:	3301      	adds	r3, #1
 801588e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015890:	7dfb      	ldrb	r3, [r7, #23]
 8015892:	2b01      	cmp	r3, #1
 8015894:	d9d6      	bls.n	8015844 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8015896:	23ff      	movs	r3, #255	; 0xff
}
 8015898:	4618      	mov	r0, r3
 801589a:	371c      	adds	r7, #28
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr

080158a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f004 fb71 	bl	8019f94 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80158b2:	2101      	movs	r1, #1
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f004 fc8a 	bl	801a1ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 80158ba:	2300      	movs	r3, #0
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3708      	adds	r7, #8
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b088      	sub	sp, #32
 80158c8:	af04      	add	r7, sp, #16
 80158ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80158cc:	2302      	movs	r3, #2
 80158ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80158d0:	2300      	movs	r3, #0
 80158d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80158da:	b2db      	uxtb	r3, r3
 80158dc:	2b01      	cmp	r3, #1
 80158de:	d102      	bne.n	80158e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2203      	movs	r2, #3
 80158e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	2b0b      	cmp	r3, #11
 80158ee:	f200 823c 	bhi.w	8015d6a <USBH_Process+0x4a6>
 80158f2:	a201      	add	r2, pc, #4	; (adr r2, 80158f8 <USBH_Process+0x34>)
 80158f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158f8:	08015929 	.word	0x08015929
 80158fc:	08015977 	.word	0x08015977
 8015900:	080159fb 	.word	0x080159fb
 8015904:	08015ce9 	.word	0x08015ce9
 8015908:	08015d6b 	.word	0x08015d6b
 801590c:	08015abb 	.word	0x08015abb
 8015910:	08015c73 	.word	0x08015c73
 8015914:	08015b0d 	.word	0x08015b0d
 8015918:	08015b49 	.word	0x08015b49
 801591c:	08015b83 	.word	0x08015b83
 8015920:	08015bcb 	.word	0x08015bcb
 8015924:	08015cd1 	.word	0x08015cd1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 801592e:	b2db      	uxtb	r3, r3
 8015930:	2b00      	cmp	r3, #0
 8015932:	f000 821c 	beq.w	8015d6e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	2201      	movs	r2, #1
 801593a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 801593c:	20c8      	movs	r0, #200	; 0xc8
 801593e:	f004 fc8d 	bl	801a25c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f004 fb83 	bl	801a04e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2200      	movs	r2, #0
 801594c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	2200      	movs	r2, #0
 8015954:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	2201      	movs	r2, #1
 801595c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801596c:	2200      	movs	r2, #0
 801596e:	4619      	mov	r1, r3
 8015970:	f001 fd9e 	bl	80174b0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8015974:	e1fb      	b.n	8015d6e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 801597c:	2b01      	cmp	r3, #1
 801597e:	d107      	bne.n	8015990 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2200      	movs	r2, #0
 8015984:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2202      	movs	r2, #2
 801598c:	701a      	strb	r2, [r3, #0]
 801598e:	e025      	b.n	80159dc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8015996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801599a:	d914      	bls.n	80159c6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80159a2:	3301      	adds	r3, #1
 80159a4:	b2da      	uxtb	r2, r3
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80159b2:	2b03      	cmp	r3, #3
 80159b4:	d903      	bls.n	80159be <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	220d      	movs	r2, #13
 80159ba:	701a      	strb	r2, [r3, #0]
 80159bc:	e00e      	b.n	80159dc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	2200      	movs	r2, #0
 80159c2:	701a      	strb	r2, [r3, #0]
 80159c4:	e00a      	b.n	80159dc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80159cc:	f103 020a 	add.w	r2, r3, #10
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80159d6:	200a      	movs	r0, #10
 80159d8:	f004 fc40 	bl	801a25c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	2201      	movs	r2, #1
 80159e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80159f0:	2200      	movs	r2, #0
 80159f2:	4619      	mov	r1, r3
 80159f4:	f001 fd5c 	bl	80174b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80159f8:	e1c0      	b.n	8015d7c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d005      	beq.n	8015a10 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015a0a:	2104      	movs	r1, #4
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8015a10:	2064      	movs	r0, #100	; 0x64
 8015a12:	f004 fc23 	bl	801a25c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f004 faf2 	bl	801a000 <USBH_LL_GetSpeed>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	461a      	mov	r2, r3
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2205      	movs	r2, #5
 8015a2a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8015a2c:	2100      	movs	r1, #0
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	f001 fb1f 	bl	8017072 <USBH_AllocPipe>
 8015a34:	4603      	mov	r3, r0
 8015a36:	461a      	mov	r2, r3
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8015a3c:	2180      	movs	r1, #128	; 0x80
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f001 fb17 	bl	8017072 <USBH_AllocPipe>
 8015a44:	4603      	mov	r3, r0
 8015a46:	461a      	mov	r2, r3
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	7919      	ldrb	r1, [r3, #4]
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015a5c:	687a      	ldr	r2, [r7, #4]
 8015a5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8015a60:	b292      	uxth	r2, r2
 8015a62:	9202      	str	r2, [sp, #8]
 8015a64:	2200      	movs	r2, #0
 8015a66:	9201      	str	r2, [sp, #4]
 8015a68:	9300      	str	r3, [sp, #0]
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	2280      	movs	r2, #128	; 0x80
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f001 fad0 	bl	8017014 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	7959      	ldrb	r1, [r3, #5]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015a88:	b292      	uxth	r2, r2
 8015a8a:	9202      	str	r2, [sp, #8]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	9201      	str	r2, [sp, #4]
 8015a90:	9300      	str	r3, [sp, #0]
 8015a92:	4603      	mov	r3, r0
 8015a94:	2200      	movs	r2, #0
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	f001 fabc 	bl	8017014 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2201      	movs	r2, #1
 8015aa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	f001 fcfc 	bl	80174b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015ab8:	e160      	b.n	8015d7c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 f964 	bl	8015d88 <USBH_HandleEnum>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8015ac4:	7bbb      	ldrb	r3, [r7, #14]
 8015ac6:	b2db      	uxtb	r3, r3
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	f040 8152 	bne.w	8015d72 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8015adc:	2b01      	cmp	r3, #1
 8015ade:	d103      	bne.n	8015ae8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2208      	movs	r2, #8
 8015ae4:	701a      	strb	r2, [r3, #0]
 8015ae6:	e002      	b.n	8015aee <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	2207      	movs	r2, #7
 8015aec:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2205      	movs	r2, #5
 8015af2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b02:	2200      	movs	r2, #0
 8015b04:	4619      	mov	r1, r3
 8015b06:	f001 fcd3 	bl	80174b0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8015b0a:	e132      	b.n	8015d72 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	f000 812f 	beq.w	8015d76 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015b1e:	2101      	movs	r1, #1
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2208      	movs	r2, #8
 8015b28:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	2205      	movs	r2, #5
 8015b2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b3e:	2200      	movs	r2, #0
 8015b40:	4619      	mov	r1, r3
 8015b42:	f001 fcb5 	bl	80174b0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8015b46:	e116      	b.n	8015d76 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8015b4e:	b29b      	uxth	r3, r3
 8015b50:	4619      	mov	r1, r3
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f000 fcf6 	bl	8016544 <USBH_SetCfg>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d102      	bne.n	8015b64 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2209      	movs	r2, #9
 8015b62:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2201      	movs	r2, #1
 8015b68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015b78:	2200      	movs	r2, #0
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	f001 fc98 	bl	80174b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015b80:	e0fc      	b.n	8015d7c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8015b88:	f003 0320 	and.w	r3, r3, #32
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d00a      	beq.n	8015ba6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8015b90:	2101      	movs	r1, #1
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f000 fcf9 	bl	801658a <USBH_SetFeature>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d106      	bne.n	8015bac <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	220a      	movs	r2, #10
 8015ba2:	701a      	strb	r2, [r3, #0]
 8015ba4:	e002      	b.n	8015bac <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	220a      	movs	r2, #10
 8015baa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	2201      	movs	r2, #1
 8015bb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	f001 fc74 	bl	80174b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015bc8:	e0d8      	b.n	8015d7c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d03f      	beq.n	8015c54 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015bdc:	2300      	movs	r3, #0
 8015bde:	73fb      	strb	r3, [r7, #15]
 8015be0:	e016      	b.n	8015c10 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8015be2:	7bfa      	ldrb	r2, [r7, #15]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	32de      	adds	r2, #222	; 0xde
 8015be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bec:	791a      	ldrb	r2, [r3, #4]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d108      	bne.n	8015c0a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8015bf8:	7bfa      	ldrb	r2, [r7, #15]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	32de      	adds	r2, #222	; 0xde
 8015bfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8015c08:	e005      	b.n	8015c16 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015c0a:	7bfb      	ldrb	r3, [r7, #15]
 8015c0c:	3301      	adds	r3, #1
 8015c0e:	73fb      	strb	r3, [r7, #15]
 8015c10:	7bfb      	ldrb	r3, [r7, #15]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d0e5      	beq.n	8015be2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d016      	beq.n	8015c4e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015c26:	689b      	ldr	r3, [r3, #8]
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	4798      	blx	r3
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d109      	bne.n	8015c46 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2206      	movs	r2, #6
 8015c36:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015c3e:	2103      	movs	r1, #3
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	4798      	blx	r3
 8015c44:	e006      	b.n	8015c54 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	220d      	movs	r2, #13
 8015c4a:	701a      	strb	r2, [r3, #0]
 8015c4c:	e002      	b.n	8015c54 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	220d      	movs	r2, #13
 8015c52:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2205      	movs	r2, #5
 8015c58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015c68:	2200      	movs	r2, #0
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	f001 fc20 	bl	80174b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015c70:	e084      	b.n	8015d7c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d017      	beq.n	8015cac <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015c82:	691b      	ldr	r3, [r3, #16]
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	4798      	blx	r3
 8015c88:	4603      	mov	r3, r0
 8015c8a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015c8c:	7bbb      	ldrb	r3, [r7, #14]
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d103      	bne.n	8015c9c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	220b      	movs	r2, #11
 8015c98:	701a      	strb	r2, [r3, #0]
 8015c9a:	e00a      	b.n	8015cb2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8015c9c:	7bbb      	ldrb	r3, [r7, #14]
 8015c9e:	b2db      	uxtb	r3, r3
 8015ca0:	2b02      	cmp	r3, #2
 8015ca2:	d106      	bne.n	8015cb2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	220d      	movs	r2, #13
 8015ca8:	701a      	strb	r2, [r3, #0]
 8015caa:	e002      	b.n	8015cb2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	220d      	movs	r2, #13
 8015cb0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2205      	movs	r2, #5
 8015cb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	4619      	mov	r1, r3
 8015cca:	f001 fbf1 	bl	80174b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015cce:	e055      	b.n	8015d7c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d04f      	beq.n	8015d7a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015ce0:	695b      	ldr	r3, [r3, #20]
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	4798      	blx	r3
      }
      break;
 8015ce6:	e048      	b.n	8015d7a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2200      	movs	r2, #0
 8015cec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	f7ff fcf7 	bl	80156e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d009      	beq.n	8015d14 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015d06:	68db      	ldr	r3, [r3, #12]
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d005      	beq.n	8015d2a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015d24:	2105      	movs	r1, #5
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	2b01      	cmp	r3, #1
 8015d34:	d107      	bne.n	8015d46 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f7ff fdb0 	bl	80158a4 <USBH_Start>
 8015d44:	e002      	b.n	8015d4c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f004 f924 	bl	8019f94 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2201      	movs	r2, #1
 8015d50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015d60:	2200      	movs	r2, #0
 8015d62:	4619      	mov	r1, r3
 8015d64:	f001 fba4 	bl	80174b0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8015d68:	e008      	b.n	8015d7c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8015d6a:	bf00      	nop
 8015d6c:	e006      	b.n	8015d7c <USBH_Process+0x4b8>
      break;
 8015d6e:	bf00      	nop
 8015d70:	e004      	b.n	8015d7c <USBH_Process+0x4b8>
      break;
 8015d72:	bf00      	nop
 8015d74:	e002      	b.n	8015d7c <USBH_Process+0x4b8>
    break;
 8015d76:	bf00      	nop
 8015d78:	e000      	b.n	8015d7c <USBH_Process+0x4b8>
      break;
 8015d7a:	bf00      	nop
  }
  return USBH_OK;
 8015d7c:	2300      	movs	r3, #0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3710      	adds	r7, #16
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop

08015d88 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b088      	sub	sp, #32
 8015d8c:	af04      	add	r7, sp, #16
 8015d8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8015d90:	2301      	movs	r3, #1
 8015d92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8015d94:	2301      	movs	r3, #1
 8015d96:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	785b      	ldrb	r3, [r3, #1]
 8015d9c:	2b07      	cmp	r3, #7
 8015d9e:	f200 8208 	bhi.w	80161b2 <USBH_HandleEnum+0x42a>
 8015da2:	a201      	add	r2, pc, #4	; (adr r2, 8015da8 <USBH_HandleEnum+0x20>)
 8015da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015da8:	08015dc9 	.word	0x08015dc9
 8015dac:	08015e87 	.word	0x08015e87
 8015db0:	08015ef1 	.word	0x08015ef1
 8015db4:	08015f7f 	.word	0x08015f7f
 8015db8:	08015fe9 	.word	0x08015fe9
 8015dbc:	08016059 	.word	0x08016059
 8015dc0:	080160f5 	.word	0x080160f5
 8015dc4:	08016173 	.word	0x08016173
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8015dc8:	2108      	movs	r1, #8
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f000 faea 	bl	80163a4 <USBH_Get_DevDesc>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015dd4:	7bbb      	ldrb	r3, [r7, #14]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d130      	bne.n	8015e3c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	2201      	movs	r2, #1
 8015de8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	7919      	ldrb	r1, [r3, #4]
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015dfe:	b292      	uxth	r2, r2
 8015e00:	9202      	str	r2, [sp, #8]
 8015e02:	2200      	movs	r2, #0
 8015e04:	9201      	str	r2, [sp, #4]
 8015e06:	9300      	str	r3, [sp, #0]
 8015e08:	4603      	mov	r3, r0
 8015e0a:	2280      	movs	r2, #128	; 0x80
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f001 f901 	bl	8017014 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	7959      	ldrb	r1, [r3, #5]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8015e22:	687a      	ldr	r2, [r7, #4]
 8015e24:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015e26:	b292      	uxth	r2, r2
 8015e28:	9202      	str	r2, [sp, #8]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	9201      	str	r2, [sp, #4]
 8015e2e:	9300      	str	r3, [sp, #0]
 8015e30:	4603      	mov	r3, r0
 8015e32:	2200      	movs	r2, #0
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f001 f8ed 	bl	8017014 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8015e3a:	e1bc      	b.n	80161b6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015e3c:	7bbb      	ldrb	r3, [r7, #14]
 8015e3e:	2b03      	cmp	r3, #3
 8015e40:	f040 81b9 	bne.w	80161b6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	b2da      	uxtb	r2, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015e5a:	2b03      	cmp	r3, #3
 8015e5c:	d903      	bls.n	8015e66 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	220d      	movs	r2, #13
 8015e62:	701a      	strb	r2, [r3, #0]
      break;
 8015e64:	e1a7      	b.n	80161b6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	795b      	ldrb	r3, [r3, #5]
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f001 f921 	bl	80170b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	791b      	ldrb	r3, [r3, #4]
 8015e76:	4619      	mov	r1, r3
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f001 f91b 	bl	80170b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2200      	movs	r2, #0
 8015e82:	701a      	strb	r2, [r3, #0]
      break;
 8015e84:	e197      	b.n	80161b6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8015e86:	2112      	movs	r1, #18
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f000 fa8b 	bl	80163a4 <USBH_Get_DevDesc>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015e92:	7bbb      	ldrb	r3, [r7, #14]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d103      	bne.n	8015ea0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2202      	movs	r2, #2
 8015e9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015e9e:	e18c      	b.n	80161ba <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015ea0:	7bbb      	ldrb	r3, [r7, #14]
 8015ea2:	2b03      	cmp	r3, #3
 8015ea4:	f040 8189 	bne.w	80161ba <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015eae:	3301      	adds	r3, #1
 8015eb0:	b2da      	uxtb	r2, r3
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015ebe:	2b03      	cmp	r3, #3
 8015ec0:	d903      	bls.n	8015eca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	220d      	movs	r2, #13
 8015ec6:	701a      	strb	r2, [r3, #0]
      break;
 8015ec8:	e177      	b.n	80161ba <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	795b      	ldrb	r3, [r3, #5]
 8015ece:	4619      	mov	r1, r3
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f001 f8ef 	bl	80170b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	791b      	ldrb	r3, [r3, #4]
 8015eda:	4619      	mov	r1, r3
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f001 f8e9 	bl	80170b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2200      	movs	r2, #0
 8015eec:	701a      	strb	r2, [r3, #0]
      break;
 8015eee:	e164      	b.n	80161ba <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8015ef0:	2101      	movs	r1, #1
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f000 fb02 	bl	80164fc <USBH_SetAddress>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015efc:	7bbb      	ldrb	r3, [r7, #14]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d132      	bne.n	8015f68 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8015f02:	2002      	movs	r0, #2
 8015f04:	f004 f9aa 	bl	801a25c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2201      	movs	r2, #1
 8015f0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2203      	movs	r2, #3
 8015f14:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	7919      	ldrb	r1, [r3, #4]
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015f2a:	b292      	uxth	r2, r2
 8015f2c:	9202      	str	r2, [sp, #8]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	9201      	str	r2, [sp, #4]
 8015f32:	9300      	str	r3, [sp, #0]
 8015f34:	4603      	mov	r3, r0
 8015f36:	2280      	movs	r2, #128	; 0x80
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f001 f86b 	bl	8017014 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	7959      	ldrb	r1, [r3, #5]
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8015f4e:	687a      	ldr	r2, [r7, #4]
 8015f50:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015f52:	b292      	uxth	r2, r2
 8015f54:	9202      	str	r2, [sp, #8]
 8015f56:	2200      	movs	r2, #0
 8015f58:	9201      	str	r2, [sp, #4]
 8015f5a:	9300      	str	r3, [sp, #0]
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	2200      	movs	r2, #0
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f001 f857 	bl	8017014 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8015f66:	e12a      	b.n	80161be <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015f68:	7bbb      	ldrb	r3, [r7, #14]
 8015f6a:	2b03      	cmp	r3, #3
 8015f6c:	f040 8127 	bne.w	80161be <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	220d      	movs	r2, #13
 8015f74:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	705a      	strb	r2, [r3, #1]
      break;
 8015f7c:	e11f      	b.n	80161be <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8015f7e:	2109      	movs	r1, #9
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f000 fa37 	bl	80163f4 <USBH_Get_CfgDesc>
 8015f86:	4603      	mov	r3, r0
 8015f88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015f8a:	7bbb      	ldrb	r3, [r7, #14]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d103      	bne.n	8015f98 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2204      	movs	r2, #4
 8015f94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015f96:	e114      	b.n	80161c2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015f98:	7bbb      	ldrb	r3, [r7, #14]
 8015f9a:	2b03      	cmp	r3, #3
 8015f9c:	f040 8111 	bne.w	80161c2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015fa6:	3301      	adds	r3, #1
 8015fa8:	b2da      	uxtb	r2, r3
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015fb6:	2b03      	cmp	r3, #3
 8015fb8:	d903      	bls.n	8015fc2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	220d      	movs	r2, #13
 8015fbe:	701a      	strb	r2, [r3, #0]
      break;
 8015fc0:	e0ff      	b.n	80161c2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	795b      	ldrb	r3, [r3, #5]
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f001 f873 	bl	80170b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	791b      	ldrb	r3, [r3, #4]
 8015fd2:	4619      	mov	r1, r3
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f001 f86d 	bl	80170b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2200      	movs	r2, #0
 8015fde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	701a      	strb	r2, [r3, #0]
      break;
 8015fe6:	e0ec      	b.n	80161c2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8015fee:	4619      	mov	r1, r3
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f000 f9ff 	bl	80163f4 <USBH_Get_CfgDesc>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015ffa:	7bbb      	ldrb	r3, [r7, #14]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d103      	bne.n	8016008 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2205      	movs	r2, #5
 8016004:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8016006:	e0de      	b.n	80161c6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016008:	7bbb      	ldrb	r3, [r7, #14]
 801600a:	2b03      	cmp	r3, #3
 801600c:	f040 80db 	bne.w	80161c6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016016:	3301      	adds	r3, #1
 8016018:	b2da      	uxtb	r2, r3
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016026:	2b03      	cmp	r3, #3
 8016028:	d903      	bls.n	8016032 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	220d      	movs	r2, #13
 801602e:	701a      	strb	r2, [r3, #0]
      break;
 8016030:	e0c9      	b.n	80161c6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	795b      	ldrb	r3, [r3, #5]
 8016036:	4619      	mov	r1, r3
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f001 f83b 	bl	80170b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	791b      	ldrb	r3, [r3, #4]
 8016042:	4619      	mov	r1, r3
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f001 f835 	bl	80170b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2200      	movs	r2, #0
 801604e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2200      	movs	r2, #0
 8016054:	701a      	strb	r2, [r3, #0]
      break;
 8016056:	e0b6      	b.n	80161c6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801605e:	2b00      	cmp	r3, #0
 8016060:	d036      	beq.n	80160d0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801606e:	23ff      	movs	r3, #255	; 0xff
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f000 f9e3 	bl	801643c <USBH_Get_StringDesc>
 8016076:	4603      	mov	r3, r0
 8016078:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801607a:	7bbb      	ldrb	r3, [r7, #14]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d111      	bne.n	80160a4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2206      	movs	r2, #6
 8016084:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2205      	movs	r2, #5
 801608a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801609a:	2200      	movs	r2, #0
 801609c:	4619      	mov	r1, r3
 801609e:	f001 fa07 	bl	80174b0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80160a2:	e092      	b.n	80161ca <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80160a4:	7bbb      	ldrb	r3, [r7, #14]
 80160a6:	2b03      	cmp	r3, #3
 80160a8:	f040 808f 	bne.w	80161ca <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2206      	movs	r2, #6
 80160b0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2205      	movs	r2, #5
 80160b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80160c6:	2200      	movs	r2, #0
 80160c8:	4619      	mov	r1, r3
 80160ca:	f001 f9f1 	bl	80174b0 <osMessagePut>
      break;
 80160ce:	e07c      	b.n	80161ca <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2206      	movs	r2, #6
 80160d4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	2205      	movs	r2, #5
 80160da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80160ea:	2200      	movs	r2, #0
 80160ec:	4619      	mov	r1, r3
 80160ee:	f001 f9df 	bl	80174b0 <osMessagePut>
      break;
 80160f2:	e06a      	b.n	80161ca <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d027      	beq.n	801614e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801610a:	23ff      	movs	r3, #255	; 0xff
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f000 f995 	bl	801643c <USBH_Get_StringDesc>
 8016112:	4603      	mov	r3, r0
 8016114:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016116:	7bbb      	ldrb	r3, [r7, #14]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d103      	bne.n	8016124 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2207      	movs	r2, #7
 8016120:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8016122:	e054      	b.n	80161ce <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016124:	7bbb      	ldrb	r3, [r7, #14]
 8016126:	2b03      	cmp	r3, #3
 8016128:	d151      	bne.n	80161ce <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	2207      	movs	r2, #7
 801612e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2205      	movs	r2, #5
 8016134:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016144:	2200      	movs	r2, #0
 8016146:	4619      	mov	r1, r3
 8016148:	f001 f9b2 	bl	80174b0 <osMessagePut>
      break;
 801614c:	e03f      	b.n	80161ce <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	2207      	movs	r2, #7
 8016152:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2205      	movs	r2, #5
 8016158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016168:	2200      	movs	r2, #0
 801616a:	4619      	mov	r1, r3
 801616c:	f001 f9a0 	bl	80174b0 <osMessagePut>
      break;
 8016170:	e02d      	b.n	80161ce <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8016178:	2b00      	cmp	r3, #0
 801617a:	d017      	beq.n	80161ac <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8016188:	23ff      	movs	r3, #255	; 0xff
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f000 f956 	bl	801643c <USBH_Get_StringDesc>
 8016190:	4603      	mov	r3, r0
 8016192:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016194:	7bbb      	ldrb	r3, [r7, #14]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d102      	bne.n	80161a0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801619a:	2300      	movs	r3, #0
 801619c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801619e:	e018      	b.n	80161d2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80161a0:	7bbb      	ldrb	r3, [r7, #14]
 80161a2:	2b03      	cmp	r3, #3
 80161a4:	d115      	bne.n	80161d2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80161a6:	2300      	movs	r3, #0
 80161a8:	73fb      	strb	r3, [r7, #15]
      break;
 80161aa:	e012      	b.n	80161d2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80161ac:	2300      	movs	r3, #0
 80161ae:	73fb      	strb	r3, [r7, #15]
      break;
 80161b0:	e00f      	b.n	80161d2 <USBH_HandleEnum+0x44a>

    default:
      break;
 80161b2:	bf00      	nop
 80161b4:	e00e      	b.n	80161d4 <USBH_HandleEnum+0x44c>
      break;
 80161b6:	bf00      	nop
 80161b8:	e00c      	b.n	80161d4 <USBH_HandleEnum+0x44c>
      break;
 80161ba:	bf00      	nop
 80161bc:	e00a      	b.n	80161d4 <USBH_HandleEnum+0x44c>
      break;
 80161be:	bf00      	nop
 80161c0:	e008      	b.n	80161d4 <USBH_HandleEnum+0x44c>
      break;
 80161c2:	bf00      	nop
 80161c4:	e006      	b.n	80161d4 <USBH_HandleEnum+0x44c>
      break;
 80161c6:	bf00      	nop
 80161c8:	e004      	b.n	80161d4 <USBH_HandleEnum+0x44c>
      break;
 80161ca:	bf00      	nop
 80161cc:	e002      	b.n	80161d4 <USBH_HandleEnum+0x44c>
      break;
 80161ce:	bf00      	nop
 80161d0:	e000      	b.n	80161d4 <USBH_HandleEnum+0x44c>
      break;
 80161d2:	bf00      	nop
  }
  return Status;
 80161d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3710      	adds	r7, #16
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop

080161e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b083      	sub	sp, #12
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	683a      	ldr	r2, [r7, #0]
 80161ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80161f2:	bf00      	nop
 80161f4:	370c      	adds	r7, #12
 80161f6:	46bd      	mov	sp, r7
 80161f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fc:	4770      	bx	lr

080161fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80161fe:	b580      	push	{r7, lr}
 8016200:	b082      	sub	sp, #8
 8016202:	af00      	add	r7, sp, #0
 8016204:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801620c:	1c5a      	adds	r2, r3, #1
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f000 f804 	bl	8016222 <USBH_HandleSof>
}
 801621a:	bf00      	nop
 801621c:	3708      	adds	r7, #8
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}

08016222 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8016222:	b580      	push	{r7, lr}
 8016224:	b082      	sub	sp, #8
 8016226:	af00      	add	r7, sp, #0
 8016228:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	b2db      	uxtb	r3, r3
 8016230:	2b0b      	cmp	r3, #11
 8016232:	d10a      	bne.n	801624a <USBH_HandleSof+0x28>
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801623a:	2b00      	cmp	r3, #0
 801623c:	d005      	beq.n	801624a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016244:	699b      	ldr	r3, [r3, #24]
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	4798      	blx	r3
  }
}
 801624a:	bf00      	nop
 801624c:	3708      	adds	r7, #8
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}

08016252 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8016252:	b580      	push	{r7, lr}
 8016254:	b082      	sub	sp, #8
 8016256:	af00      	add	r7, sp, #0
 8016258:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2201      	movs	r2, #1
 801625e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2201      	movs	r2, #1
 8016266:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016276:	2200      	movs	r2, #0
 8016278:	4619      	mov	r1, r3
 801627a:	f001 f919 	bl	80174b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 801627e:	bf00      	nop
}
 8016280:	3708      	adds	r7, #8
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}

08016286 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8016286:	b480      	push	{r7}
 8016288:	b083      	sub	sp, #12
 801628a:	af00      	add	r7, sp, #0
 801628c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2200      	movs	r2, #0
 8016292:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8016296:	bf00      	nop
}
 8016298:	370c      	adds	r7, #12
 801629a:	46bd      	mov	sp, r7
 801629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a0:	4770      	bx	lr

080162a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80162a2:	b580      	push	{r7, lr}
 80162a4:	b082      	sub	sp, #8
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2201      	movs	r2, #1
 80162ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2200      	movs	r2, #0
 80162b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2200      	movs	r2, #0
 80162be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2201      	movs	r2, #1
 80162c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80162d6:	2200      	movs	r2, #0
 80162d8:	4619      	mov	r1, r3
 80162da:	f001 f8e9 	bl	80174b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80162de:	2300      	movs	r3, #0
}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3708      	adds	r7, #8
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd80      	pop	{r7, pc}

080162e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b082      	sub	sp, #8
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2201      	movs	r2, #1
 80162f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2200      	movs	r2, #0
 80162fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2200      	movs	r2, #0
 8016304:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f003 fe5e 	bl	8019fca <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	791b      	ldrb	r3, [r3, #4]
 8016312:	4619      	mov	r1, r3
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f000 fecd 	bl	80170b4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	795b      	ldrb	r3, [r3, #5]
 801631e:	4619      	mov	r1, r3
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f000 fec7 	bl	80170b4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2201      	movs	r2, #1
 801632a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801633a:	2200      	movs	r2, #0
 801633c:	4619      	mov	r1, r3
 801633e:	f001 f8b7 	bl	80174b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8016342:	2300      	movs	r3, #0
}
 8016344:	4618      	mov	r0, r3
 8016346:	3708      	adds	r7, #8
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b086      	sub	sp, #24
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 801635a:	f107 030c 	add.w	r3, r7, #12
 801635e:	f04f 32ff 	mov.w	r2, #4294967295
 8016362:	4618      	mov	r0, r3
 8016364:	f001 f8e4 	bl	8017530 <osMessageGet>
    if (event.status == osEventMessage)
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	2b10      	cmp	r3, #16
 801636c:	d1f2      	bne.n	8016354 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7ff faa8 	bl	80158c4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8016374:	e7ee      	b.n	8016354 <USBH_Process_OS+0x8>

08016376 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8016376:	b580      	push	{r7, lr}
 8016378:	b082      	sub	sp, #8
 801637a:	af00      	add	r7, sp, #0
 801637c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2201      	movs	r2, #1
 8016382:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016392:	2200      	movs	r2, #0
 8016394:	4619      	mov	r1, r3
 8016396:	f001 f88b 	bl	80174b0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 801639a:	2300      	movs	r3, #0
}
 801639c:	4618      	mov	r0, r3
 801639e:	3708      	adds	r7, #8
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}

080163a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b086      	sub	sp, #24
 80163a8:	af02      	add	r7, sp, #8
 80163aa:	6078      	str	r0, [r7, #4]
 80163ac:	460b      	mov	r3, r1
 80163ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80163b6:	78fb      	ldrb	r3, [r7, #3]
 80163b8:	b29b      	uxth	r3, r3
 80163ba:	9300      	str	r3, [sp, #0]
 80163bc:	4613      	mov	r3, r2
 80163be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80163c2:	2100      	movs	r1, #0
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f000 f864 	bl	8016492 <USBH_GetDescriptor>
 80163ca:	4603      	mov	r3, r0
 80163cc:	73fb      	strb	r3, [r7, #15]
 80163ce:	7bfb      	ldrb	r3, [r7, #15]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d10a      	bne.n	80163ea <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80163e0:	78fa      	ldrb	r2, [r7, #3]
 80163e2:	b292      	uxth	r2, r2
 80163e4:	4619      	mov	r1, r3
 80163e6:	f000 f918 	bl	801661a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80163ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	3710      	adds	r7, #16
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}

080163f4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b086      	sub	sp, #24
 80163f8:	af02      	add	r7, sp, #8
 80163fa:	6078      	str	r0, [r7, #4]
 80163fc:	460b      	mov	r3, r1
 80163fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	331c      	adds	r3, #28
 8016404:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8016406:	887b      	ldrh	r3, [r7, #2]
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016410:	2100      	movs	r1, #0
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	f000 f83d 	bl	8016492 <USBH_GetDescriptor>
 8016418:	4603      	mov	r3, r0
 801641a:	72fb      	strb	r3, [r7, #11]
 801641c:	7afb      	ldrb	r3, [r7, #11]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d107      	bne.n	8016432 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016428:	887a      	ldrh	r2, [r7, #2]
 801642a:	68f9      	ldr	r1, [r7, #12]
 801642c:	4618      	mov	r0, r3
 801642e:	f000 f964 	bl	80166fa <USBH_ParseCfgDesc>
  }

  return status;
 8016432:	7afb      	ldrb	r3, [r7, #11]
}
 8016434:	4618      	mov	r0, r3
 8016436:	3710      	adds	r7, #16
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}

0801643c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b088      	sub	sp, #32
 8016440:	af02      	add	r7, sp, #8
 8016442:	60f8      	str	r0, [r7, #12]
 8016444:	607a      	str	r2, [r7, #4]
 8016446:	461a      	mov	r2, r3
 8016448:	460b      	mov	r3, r1
 801644a:	72fb      	strb	r3, [r7, #11]
 801644c:	4613      	mov	r3, r2
 801644e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8016450:	7afb      	ldrb	r3, [r7, #11]
 8016452:	b29b      	uxth	r3, r3
 8016454:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8016458:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8016460:	893b      	ldrh	r3, [r7, #8]
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	460b      	mov	r3, r1
 8016466:	2100      	movs	r1, #0
 8016468:	68f8      	ldr	r0, [r7, #12]
 801646a:	f000 f812 	bl	8016492 <USBH_GetDescriptor>
 801646e:	4603      	mov	r3, r0
 8016470:	75fb      	strb	r3, [r7, #23]
 8016472:	7dfb      	ldrb	r3, [r7, #23]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d107      	bne.n	8016488 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801647e:	893a      	ldrh	r2, [r7, #8]
 8016480:	6879      	ldr	r1, [r7, #4]
 8016482:	4618      	mov	r0, r3
 8016484:	f000 fa37 	bl	80168f6 <USBH_ParseStringDesc>
  }

  return status;
 8016488:	7dfb      	ldrb	r3, [r7, #23]
}
 801648a:	4618      	mov	r0, r3
 801648c:	3718      	adds	r7, #24
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}

08016492 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8016492:	b580      	push	{r7, lr}
 8016494:	b084      	sub	sp, #16
 8016496:	af00      	add	r7, sp, #0
 8016498:	60f8      	str	r0, [r7, #12]
 801649a:	607b      	str	r3, [r7, #4]
 801649c:	460b      	mov	r3, r1
 801649e:	72fb      	strb	r3, [r7, #11]
 80164a0:	4613      	mov	r3, r2
 80164a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	789b      	ldrb	r3, [r3, #2]
 80164a8:	2b01      	cmp	r3, #1
 80164aa:	d11c      	bne.n	80164e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80164ac:	7afb      	ldrb	r3, [r7, #11]
 80164ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80164b2:	b2da      	uxtb	r2, r3
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	2206      	movs	r2, #6
 80164bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	893a      	ldrh	r2, [r7, #8]
 80164c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80164c4:	893b      	ldrh	r3, [r7, #8]
 80164c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80164ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80164ce:	d104      	bne.n	80164da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	f240 4209 	movw	r2, #1033	; 0x409
 80164d6:	829a      	strh	r2, [r3, #20]
 80164d8:	e002      	b.n	80164e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	2200      	movs	r2, #0
 80164de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	8b3a      	ldrh	r2, [r7, #24]
 80164e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80164e6:	8b3b      	ldrh	r3, [r7, #24]
 80164e8:	461a      	mov	r2, r3
 80164ea:	6879      	ldr	r1, [r7, #4]
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	f000 fa50 	bl	8016992 <USBH_CtlReq>
 80164f2:	4603      	mov	r3, r0
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3710      	adds	r7, #16
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}

080164fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	460b      	mov	r3, r1
 8016506:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	789b      	ldrb	r3, [r3, #2]
 801650c:	2b01      	cmp	r3, #1
 801650e:	d10f      	bne.n	8016530 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	2200      	movs	r2, #0
 8016514:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	2205      	movs	r2, #5
 801651a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801651c:	78fb      	ldrb	r3, [r7, #3]
 801651e:	b29a      	uxth	r2, r3
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2200      	movs	r2, #0
 8016528:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	2200      	movs	r2, #0
 801652e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8016530:	2200      	movs	r2, #0
 8016532:	2100      	movs	r1, #0
 8016534:	6878      	ldr	r0, [r7, #4]
 8016536:	f000 fa2c 	bl	8016992 <USBH_CtlReq>
 801653a:	4603      	mov	r3, r0
}
 801653c:	4618      	mov	r0, r3
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}

08016544 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	460b      	mov	r3, r1
 801654e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	789b      	ldrb	r3, [r3, #2]
 8016554:	2b01      	cmp	r3, #1
 8016556:	d10e      	bne.n	8016576 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2200      	movs	r2, #0
 801655c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2209      	movs	r2, #9
 8016562:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	887a      	ldrh	r2, [r7, #2]
 8016568:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2200      	movs	r2, #0
 801656e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2200      	movs	r2, #0
 8016574:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8016576:	2200      	movs	r2, #0
 8016578:	2100      	movs	r1, #0
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f000 fa09 	bl	8016992 <USBH_CtlReq>
 8016580:	4603      	mov	r3, r0
}
 8016582:	4618      	mov	r0, r3
 8016584:	3708      	adds	r7, #8
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}

0801658a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801658a:	b580      	push	{r7, lr}
 801658c:	b082      	sub	sp, #8
 801658e:	af00      	add	r7, sp, #0
 8016590:	6078      	str	r0, [r7, #4]
 8016592:	460b      	mov	r3, r1
 8016594:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	789b      	ldrb	r3, [r3, #2]
 801659a:	2b01      	cmp	r3, #1
 801659c:	d10f      	bne.n	80165be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2200      	movs	r2, #0
 80165a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2203      	movs	r2, #3
 80165a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80165aa:	78fb      	ldrb	r3, [r7, #3]
 80165ac:	b29a      	uxth	r2, r3
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2200      	movs	r2, #0
 80165b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2200      	movs	r2, #0
 80165bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80165be:	2200      	movs	r2, #0
 80165c0:	2100      	movs	r1, #0
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f000 f9e5 	bl	8016992 <USBH_CtlReq>
 80165c8:	4603      	mov	r3, r0
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3708      	adds	r7, #8
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b082      	sub	sp, #8
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	460b      	mov	r3, r1
 80165dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	789b      	ldrb	r3, [r3, #2]
 80165e2:	2b01      	cmp	r3, #1
 80165e4:	d10f      	bne.n	8016606 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	2202      	movs	r2, #2
 80165ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2201      	movs	r2, #1
 80165f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	2200      	movs	r2, #0
 80165f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80165f8:	78fb      	ldrb	r3, [r7, #3]
 80165fa:	b29a      	uxth	r2, r3
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2200      	movs	r2, #0
 8016604:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8016606:	2200      	movs	r2, #0
 8016608:	2100      	movs	r1, #0
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 f9c1 	bl	8016992 <USBH_CtlReq>
 8016610:	4603      	mov	r3, r0
}
 8016612:	4618      	mov	r0, r3
 8016614:	3708      	adds	r7, #8
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}

0801661a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 801661a:	b480      	push	{r7}
 801661c:	b085      	sub	sp, #20
 801661e:	af00      	add	r7, sp, #0
 8016620:	60f8      	str	r0, [r7, #12]
 8016622:	60b9      	str	r1, [r7, #8]
 8016624:	4613      	mov	r3, r2
 8016626:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8016628:	68bb      	ldr	r3, [r7, #8]
 801662a:	781a      	ldrb	r2, [r3, #0]
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	785a      	ldrb	r2, [r3, #1]
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	3302      	adds	r3, #2
 801663c:	781b      	ldrb	r3, [r3, #0]
 801663e:	b29a      	uxth	r2, r3
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	3303      	adds	r3, #3
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	b29b      	uxth	r3, r3
 8016648:	021b      	lsls	r3, r3, #8
 801664a:	b29b      	uxth	r3, r3
 801664c:	4313      	orrs	r3, r2
 801664e:	b29a      	uxth	r2, r3
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	791a      	ldrb	r2, [r3, #4]
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	795a      	ldrb	r2, [r3, #5]
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	799a      	ldrb	r2, [r3, #6]
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	79da      	ldrb	r2, [r3, #7]
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8016674:	88fb      	ldrh	r3, [r7, #6]
 8016676:	2b08      	cmp	r3, #8
 8016678:	d939      	bls.n	80166ee <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	3308      	adds	r3, #8
 801667e:	781b      	ldrb	r3, [r3, #0]
 8016680:	b29a      	uxth	r2, r3
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	3309      	adds	r3, #9
 8016686:	781b      	ldrb	r3, [r3, #0]
 8016688:	b29b      	uxth	r3, r3
 801668a:	021b      	lsls	r3, r3, #8
 801668c:	b29b      	uxth	r3, r3
 801668e:	4313      	orrs	r3, r2
 8016690:	b29a      	uxth	r2, r3
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	330a      	adds	r3, #10
 801669a:	781b      	ldrb	r3, [r3, #0]
 801669c:	b29a      	uxth	r2, r3
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	330b      	adds	r3, #11
 80166a2:	781b      	ldrb	r3, [r3, #0]
 80166a4:	b29b      	uxth	r3, r3
 80166a6:	021b      	lsls	r3, r3, #8
 80166a8:	b29b      	uxth	r3, r3
 80166aa:	4313      	orrs	r3, r2
 80166ac:	b29a      	uxth	r2, r3
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80166b2:	68bb      	ldr	r3, [r7, #8]
 80166b4:	330c      	adds	r3, #12
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	b29a      	uxth	r2, r3
 80166ba:	68bb      	ldr	r3, [r7, #8]
 80166bc:	330d      	adds	r3, #13
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	b29b      	uxth	r3, r3
 80166c2:	021b      	lsls	r3, r3, #8
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	4313      	orrs	r3, r2
 80166c8:	b29a      	uxth	r2, r3
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	7b9a      	ldrb	r2, [r3, #14]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	7bda      	ldrb	r2, [r3, #15]
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80166de:	68bb      	ldr	r3, [r7, #8]
 80166e0:	7c1a      	ldrb	r2, [r3, #16]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	7c5a      	ldrb	r2, [r3, #17]
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	745a      	strb	r2, [r3, #17]
  }
}
 80166ee:	bf00      	nop
 80166f0:	3714      	adds	r7, #20
 80166f2:	46bd      	mov	sp, r7
 80166f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f8:	4770      	bx	lr

080166fa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80166fa:	b580      	push	{r7, lr}
 80166fc:	b08a      	sub	sp, #40	; 0x28
 80166fe:	af00      	add	r7, sp, #0
 8016700:	60f8      	str	r0, [r7, #12]
 8016702:	60b9      	str	r1, [r7, #8]
 8016704:	4613      	mov	r3, r2
 8016706:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801670c:	2300      	movs	r3, #0
 801670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8016712:	2300      	movs	r3, #0
 8016714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	781a      	ldrb	r2, [r3, #0]
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	785a      	ldrb	r2, [r3, #1]
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	3302      	adds	r3, #2
 8016730:	781b      	ldrb	r3, [r3, #0]
 8016732:	b29a      	uxth	r2, r3
 8016734:	68bb      	ldr	r3, [r7, #8]
 8016736:	3303      	adds	r3, #3
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	b29b      	uxth	r3, r3
 801673c:	021b      	lsls	r3, r3, #8
 801673e:	b29b      	uxth	r3, r3
 8016740:	4313      	orrs	r3, r2
 8016742:	b29a      	uxth	r2, r3
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8016748:	68bb      	ldr	r3, [r7, #8]
 801674a:	791a      	ldrb	r2, [r3, #4]
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8016750:	68bb      	ldr	r3, [r7, #8]
 8016752:	795a      	ldrb	r2, [r3, #5]
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	799a      	ldrb	r2, [r3, #6]
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	79da      	ldrb	r2, [r3, #7]
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8016768:	68bb      	ldr	r3, [r7, #8]
 801676a:	7a1a      	ldrb	r2, [r3, #8]
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016770:	88fb      	ldrh	r3, [r7, #6]
 8016772:	2b09      	cmp	r3, #9
 8016774:	d95f      	bls.n	8016836 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8016776:	2309      	movs	r3, #9
 8016778:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 801677a:	2300      	movs	r3, #0
 801677c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801677e:	e051      	b.n	8016824 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016780:	f107 0316 	add.w	r3, r7, #22
 8016784:	4619      	mov	r1, r3
 8016786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016788:	f000 f8e8 	bl	801695c <USBH_GetNextDesc>
 801678c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016790:	785b      	ldrb	r3, [r3, #1]
 8016792:	2b04      	cmp	r3, #4
 8016794:	d146      	bne.n	8016824 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8016796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801679a:	221a      	movs	r2, #26
 801679c:	fb02 f303 	mul.w	r3, r2, r3
 80167a0:	3308      	adds	r3, #8
 80167a2:	68fa      	ldr	r2, [r7, #12]
 80167a4:	4413      	add	r3, r2
 80167a6:	3302      	adds	r3, #2
 80167a8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80167aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167ac:	69f8      	ldr	r0, [r7, #28]
 80167ae:	f000 f846 	bl	801683e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80167b2:	2300      	movs	r3, #0
 80167b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80167b8:	2300      	movs	r3, #0
 80167ba:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80167bc:	e022      	b.n	8016804 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80167be:	f107 0316 	add.w	r3, r7, #22
 80167c2:	4619      	mov	r1, r3
 80167c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167c6:	f000 f8c9 	bl	801695c <USBH_GetNextDesc>
 80167ca:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80167cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ce:	785b      	ldrb	r3, [r3, #1]
 80167d0:	2b05      	cmp	r3, #5
 80167d2:	d117      	bne.n	8016804 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80167d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80167d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80167dc:	3201      	adds	r2, #1
 80167de:	00d2      	lsls	r2, r2, #3
 80167e0:	211a      	movs	r1, #26
 80167e2:	fb01 f303 	mul.w	r3, r1, r3
 80167e6:	4413      	add	r3, r2
 80167e8:	3308      	adds	r3, #8
 80167ea:	68fa      	ldr	r2, [r7, #12]
 80167ec:	4413      	add	r3, r2
 80167ee:	3304      	adds	r3, #4
 80167f0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80167f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167f4:	69b8      	ldr	r0, [r7, #24]
 80167f6:	f000 f851 	bl	801689c <USBH_ParseEPDesc>
            ep_ix++;
 80167fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80167fe:	3301      	adds	r3, #1
 8016800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	791b      	ldrb	r3, [r3, #4]
 8016808:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801680c:	429a      	cmp	r2, r3
 801680e:	d204      	bcs.n	801681a <USBH_ParseCfgDesc+0x120>
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	885a      	ldrh	r2, [r3, #2]
 8016814:	8afb      	ldrh	r3, [r7, #22]
 8016816:	429a      	cmp	r2, r3
 8016818:	d8d1      	bhi.n	80167be <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 801681a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801681e:	3301      	adds	r3, #1
 8016820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016828:	2b01      	cmp	r3, #1
 801682a:	d804      	bhi.n	8016836 <USBH_ParseCfgDesc+0x13c>
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	885a      	ldrh	r2, [r3, #2]
 8016830:	8afb      	ldrh	r3, [r7, #22]
 8016832:	429a      	cmp	r2, r3
 8016834:	d8a4      	bhi.n	8016780 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8016836:	bf00      	nop
 8016838:	3728      	adds	r7, #40	; 0x28
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}

0801683e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 801683e:	b480      	push	{r7}
 8016840:	b083      	sub	sp, #12
 8016842:	af00      	add	r7, sp, #0
 8016844:	6078      	str	r0, [r7, #4]
 8016846:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	781a      	ldrb	r2, [r3, #0]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	785a      	ldrb	r2, [r3, #1]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	789a      	ldrb	r2, [r3, #2]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	78da      	ldrb	r2, [r3, #3]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8016868:	683b      	ldr	r3, [r7, #0]
 801686a:	791a      	ldrb	r2, [r3, #4]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	795a      	ldrb	r2, [r3, #5]
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	799a      	ldrb	r2, [r3, #6]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	79da      	ldrb	r2, [r3, #7]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	7a1a      	ldrb	r2, [r3, #8]
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	721a      	strb	r2, [r3, #8]
}
 8016890:	bf00      	nop
 8016892:	370c      	adds	r7, #12
 8016894:	46bd      	mov	sp, r7
 8016896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689a:	4770      	bx	lr

0801689c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 801689c:	b480      	push	{r7}
 801689e:	b083      	sub	sp, #12
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
 80168a4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	781a      	ldrb	r2, [r3, #0]
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	785a      	ldrb	r2, [r3, #1]
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	789a      	ldrb	r2, [r3, #2]
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	78da      	ldrb	r2, [r3, #3]
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80168c6:	683b      	ldr	r3, [r7, #0]
 80168c8:	3304      	adds	r3, #4
 80168ca:	781b      	ldrb	r3, [r3, #0]
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	3305      	adds	r3, #5
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	021b      	lsls	r3, r3, #8
 80168d8:	b29b      	uxth	r3, r3
 80168da:	4313      	orrs	r3, r2
 80168dc:	b29a      	uxth	r2, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	799a      	ldrb	r2, [r3, #6]
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	719a      	strb	r2, [r3, #6]
}
 80168ea:	bf00      	nop
 80168ec:	370c      	adds	r7, #12
 80168ee:	46bd      	mov	sp, r7
 80168f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f4:	4770      	bx	lr

080168f6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80168f6:	b480      	push	{r7}
 80168f8:	b087      	sub	sp, #28
 80168fa:	af00      	add	r7, sp, #0
 80168fc:	60f8      	str	r0, [r7, #12]
 80168fe:	60b9      	str	r1, [r7, #8]
 8016900:	4613      	mov	r3, r2
 8016902:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	3301      	adds	r3, #1
 8016908:	781b      	ldrb	r3, [r3, #0]
 801690a:	2b03      	cmp	r3, #3
 801690c:	d120      	bne.n	8016950 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	781b      	ldrb	r3, [r3, #0]
 8016912:	1e9a      	subs	r2, r3, #2
 8016914:	88fb      	ldrh	r3, [r7, #6]
 8016916:	4293      	cmp	r3, r2
 8016918:	bf28      	it	cs
 801691a:	4613      	movcs	r3, r2
 801691c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	3302      	adds	r3, #2
 8016922:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016924:	2300      	movs	r3, #0
 8016926:	82fb      	strh	r3, [r7, #22]
 8016928:	e00b      	b.n	8016942 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801692a:	8afb      	ldrh	r3, [r7, #22]
 801692c:	68fa      	ldr	r2, [r7, #12]
 801692e:	4413      	add	r3, r2
 8016930:	781a      	ldrb	r2, [r3, #0]
 8016932:	68bb      	ldr	r3, [r7, #8]
 8016934:	701a      	strb	r2, [r3, #0]
      pdest++;
 8016936:	68bb      	ldr	r3, [r7, #8]
 8016938:	3301      	adds	r3, #1
 801693a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801693c:	8afb      	ldrh	r3, [r7, #22]
 801693e:	3302      	adds	r3, #2
 8016940:	82fb      	strh	r3, [r7, #22]
 8016942:	8afa      	ldrh	r2, [r7, #22]
 8016944:	8abb      	ldrh	r3, [r7, #20]
 8016946:	429a      	cmp	r2, r3
 8016948:	d3ef      	bcc.n	801692a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	2200      	movs	r2, #0
 801694e:	701a      	strb	r2, [r3, #0]
  }
}
 8016950:	bf00      	nop
 8016952:	371c      	adds	r7, #28
 8016954:	46bd      	mov	sp, r7
 8016956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695a:	4770      	bx	lr

0801695c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 801695c:	b480      	push	{r7}
 801695e:	b085      	sub	sp, #20
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8016966:	683b      	ldr	r3, [r7, #0]
 8016968:	881a      	ldrh	r2, [r3, #0]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	b29b      	uxth	r3, r3
 8016970:	4413      	add	r3, r2
 8016972:	b29a      	uxth	r2, r3
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	4413      	add	r3, r2
 8016982:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016984:	68fb      	ldr	r3, [r7, #12]
}
 8016986:	4618      	mov	r0, r3
 8016988:	3714      	adds	r7, #20
 801698a:	46bd      	mov	sp, r7
 801698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016990:	4770      	bx	lr

08016992 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8016992:	b580      	push	{r7, lr}
 8016994:	b086      	sub	sp, #24
 8016996:	af00      	add	r7, sp, #0
 8016998:	60f8      	str	r0, [r7, #12]
 801699a:	60b9      	str	r1, [r7, #8]
 801699c:	4613      	mov	r3, r2
 801699e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80169a0:	2301      	movs	r3, #1
 80169a2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	789b      	ldrb	r3, [r3, #2]
 80169a8:	2b01      	cmp	r3, #1
 80169aa:	d002      	beq.n	80169b2 <USBH_CtlReq+0x20>
 80169ac:	2b02      	cmp	r3, #2
 80169ae:	d01d      	beq.n	80169ec <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80169b0:	e043      	b.n	8016a3a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	68ba      	ldr	r2, [r7, #8]
 80169b6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	88fa      	ldrh	r2, [r7, #6]
 80169bc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2201      	movs	r2, #1
 80169c2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2202      	movs	r2, #2
 80169c8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80169ca:	2301      	movs	r3, #1
 80169cc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	2203      	movs	r2, #3
 80169d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80169e2:	2200      	movs	r2, #0
 80169e4:	4619      	mov	r1, r3
 80169e6:	f000 fd63 	bl	80174b0 <osMessagePut>
      break;
 80169ea:	e026      	b.n	8016a3a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80169ec:	68f8      	ldr	r0, [r7, #12]
 80169ee:	f000 f829 	bl	8016a44 <USBH_HandleControl>
 80169f2:	4603      	mov	r3, r0
 80169f4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80169f6:	7dfb      	ldrb	r3, [r7, #23]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d002      	beq.n	8016a02 <USBH_CtlReq+0x70>
 80169fc:	7dfb      	ldrb	r3, [r7, #23]
 80169fe:	2b03      	cmp	r3, #3
 8016a00:	d106      	bne.n	8016a10 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2201      	movs	r2, #1
 8016a06:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	761a      	strb	r2, [r3, #24]
 8016a0e:	e005      	b.n	8016a1c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8016a10:	7dfb      	ldrb	r3, [r7, #23]
 8016a12:	2b02      	cmp	r3, #2
 8016a14:	d102      	bne.n	8016a1c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	2201      	movs	r2, #1
 8016a1a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2203      	movs	r2, #3
 8016a20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016a30:	2200      	movs	r2, #0
 8016a32:	4619      	mov	r1, r3
 8016a34:	f000 fd3c 	bl	80174b0 <osMessagePut>
      break;
 8016a38:	bf00      	nop
  }
  return status;
 8016a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3718      	adds	r7, #24
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b086      	sub	sp, #24
 8016a48:	af02      	add	r7, sp, #8
 8016a4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8016a4c:	2301      	movs	r3, #1
 8016a4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8016a50:	2300      	movs	r3, #0
 8016a52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	7e1b      	ldrb	r3, [r3, #24]
 8016a58:	3b01      	subs	r3, #1
 8016a5a:	2b0a      	cmp	r3, #10
 8016a5c:	f200 8229 	bhi.w	8016eb2 <USBH_HandleControl+0x46e>
 8016a60:	a201      	add	r2, pc, #4	; (adr r2, 8016a68 <USBH_HandleControl+0x24>)
 8016a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a66:	bf00      	nop
 8016a68:	08016a95 	.word	0x08016a95
 8016a6c:	08016aaf 	.word	0x08016aaf
 8016a70:	08016b51 	.word	0x08016b51
 8016a74:	08016b77 	.word	0x08016b77
 8016a78:	08016c03 	.word	0x08016c03
 8016a7c:	08016c2d 	.word	0x08016c2d
 8016a80:	08016cef 	.word	0x08016cef
 8016a84:	08016d11 	.word	0x08016d11
 8016a88:	08016da3 	.word	0x08016da3
 8016a8c:	08016dc9 	.word	0x08016dc9
 8016a90:	08016e5b 	.word	0x08016e5b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f103 0110 	add.w	r1, r3, #16
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	795b      	ldrb	r3, [r3, #5]
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f000 fa17 	bl	8016ed4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2202      	movs	r2, #2
 8016aaa:	761a      	strb	r2, [r3, #24]
      break;
 8016aac:	e20c      	b.n	8016ec8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	795b      	ldrb	r3, [r3, #5]
 8016ab2:	4619      	mov	r1, r3
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f003 fb77 	bl	801a1a8 <USBH_LL_GetURBState>
 8016aba:	4603      	mov	r3, r0
 8016abc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8016abe:	7bbb      	ldrb	r3, [r7, #14]
 8016ac0:	2b01      	cmp	r3, #1
 8016ac2:	d12c      	bne.n	8016b1e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	7c1b      	ldrb	r3, [r3, #16]
 8016ac8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016acc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	8adb      	ldrh	r3, [r3, #22]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d00a      	beq.n	8016aec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8016ad6:	7b7b      	ldrb	r3, [r7, #13]
 8016ad8:	2b80      	cmp	r3, #128	; 0x80
 8016ada:	d103      	bne.n	8016ae4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2203      	movs	r2, #3
 8016ae0:	761a      	strb	r2, [r3, #24]
 8016ae2:	e00d      	b.n	8016b00 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2205      	movs	r2, #5
 8016ae8:	761a      	strb	r2, [r3, #24]
 8016aea:	e009      	b.n	8016b00 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8016aec:	7b7b      	ldrb	r3, [r7, #13]
 8016aee:	2b80      	cmp	r3, #128	; 0x80
 8016af0:	d103      	bne.n	8016afa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2209      	movs	r2, #9
 8016af6:	761a      	strb	r2, [r3, #24]
 8016af8:	e002      	b.n	8016b00 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	2207      	movs	r2, #7
 8016afe:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2203      	movs	r2, #3
 8016b04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016b14:	2200      	movs	r2, #0
 8016b16:	4619      	mov	r1, r3
 8016b18:	f000 fcca 	bl	80174b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016b1c:	e1cb      	b.n	8016eb6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8016b1e:	7bbb      	ldrb	r3, [r7, #14]
 8016b20:	2b04      	cmp	r3, #4
 8016b22:	d003      	beq.n	8016b2c <USBH_HandleControl+0xe8>
 8016b24:	7bbb      	ldrb	r3, [r7, #14]
 8016b26:	2b02      	cmp	r3, #2
 8016b28:	f040 81c5 	bne.w	8016eb6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	220b      	movs	r2, #11
 8016b30:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	2203      	movs	r2, #3
 8016b36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016b46:	2200      	movs	r2, #0
 8016b48:	4619      	mov	r1, r3
 8016b4a:	f000 fcb1 	bl	80174b0 <osMessagePut>
      break;
 8016b4e:	e1b2      	b.n	8016eb6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016b56:	b29a      	uxth	r2, r3
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	6899      	ldr	r1, [r3, #8]
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	899a      	ldrh	r2, [r3, #12]
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	791b      	ldrb	r3, [r3, #4]
 8016b68:	6878      	ldr	r0, [r7, #4]
 8016b6a:	f000 f9f2 	bl	8016f52 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2204      	movs	r2, #4
 8016b72:	761a      	strb	r2, [r3, #24]
      break;
 8016b74:	e1a8      	b.n	8016ec8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	791b      	ldrb	r3, [r3, #4]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f003 fb13 	bl	801a1a8 <USBH_LL_GetURBState>
 8016b82:	4603      	mov	r3, r0
 8016b84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8016b86:	7bbb      	ldrb	r3, [r7, #14]
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d110      	bne.n	8016bae <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2209      	movs	r2, #9
 8016b90:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	2203      	movs	r2, #3
 8016b96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	4619      	mov	r1, r3
 8016baa:	f000 fc81 	bl	80174b0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8016bae:	7bbb      	ldrb	r3, [r7, #14]
 8016bb0:	2b05      	cmp	r3, #5
 8016bb2:	d110      	bne.n	8016bd6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016bb4:	2303      	movs	r3, #3
 8016bb6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2203      	movs	r2, #3
 8016bbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016bcc:	2200      	movs	r2, #0
 8016bce:	4619      	mov	r1, r3
 8016bd0:	f000 fc6e 	bl	80174b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016bd4:	e171      	b.n	8016eba <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8016bd6:	7bbb      	ldrb	r3, [r7, #14]
 8016bd8:	2b04      	cmp	r3, #4
 8016bda:	f040 816e 	bne.w	8016eba <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	220b      	movs	r2, #11
 8016be2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2203      	movs	r2, #3
 8016be8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	f000 fc58 	bl	80174b0 <osMessagePut>
      break;
 8016c00:	e15b      	b.n	8016eba <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	6899      	ldr	r1, [r3, #8]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	899a      	ldrh	r2, [r3, #12]
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	795b      	ldrb	r3, [r3, #5]
 8016c0e:	2001      	movs	r0, #1
 8016c10:	9000      	str	r0, [sp, #0]
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f000 f978 	bl	8016f08 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016c1e:	b29a      	uxth	r2, r3
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2206      	movs	r2, #6
 8016c28:	761a      	strb	r2, [r3, #24]
      break;
 8016c2a:	e14d      	b.n	8016ec8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	795b      	ldrb	r3, [r3, #5]
 8016c30:	4619      	mov	r1, r3
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f003 fab8 	bl	801a1a8 <USBH_LL_GetURBState>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016c3c:	7bbb      	ldrb	r3, [r7, #14]
 8016c3e:	2b01      	cmp	r3, #1
 8016c40:	d111      	bne.n	8016c66 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2207      	movs	r2, #7
 8016c46:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2203      	movs	r2, #3
 8016c4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	4619      	mov	r1, r3
 8016c60:	f000 fc26 	bl	80174b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016c64:	e12b      	b.n	8016ebe <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8016c66:	7bbb      	ldrb	r3, [r7, #14]
 8016c68:	2b05      	cmp	r3, #5
 8016c6a:	d113      	bne.n	8016c94 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	220c      	movs	r2, #12
 8016c70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8016c72:	2303      	movs	r3, #3
 8016c74:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	2203      	movs	r2, #3
 8016c7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	4619      	mov	r1, r3
 8016c8e:	f000 fc0f 	bl	80174b0 <osMessagePut>
      break;
 8016c92:	e114      	b.n	8016ebe <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016c94:	7bbb      	ldrb	r3, [r7, #14]
 8016c96:	2b02      	cmp	r3, #2
 8016c98:	d111      	bne.n	8016cbe <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2205      	movs	r2, #5
 8016c9e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2203      	movs	r2, #3
 8016ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	4619      	mov	r1, r3
 8016cb8:	f000 fbfa 	bl	80174b0 <osMessagePut>
      break;
 8016cbc:	e0ff      	b.n	8016ebe <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8016cbe:	7bbb      	ldrb	r3, [r7, #14]
 8016cc0:	2b04      	cmp	r3, #4
 8016cc2:	f040 80fc 	bne.w	8016ebe <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	220b      	movs	r2, #11
 8016cca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8016ccc:	2302      	movs	r3, #2
 8016cce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2203      	movs	r2, #3
 8016cd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	f000 fbe2 	bl	80174b0 <osMessagePut>
      break;
 8016cec:	e0e7      	b.n	8016ebe <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	791b      	ldrb	r3, [r3, #4]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	2100      	movs	r1, #0
 8016cf6:	6878      	ldr	r0, [r7, #4]
 8016cf8:	f000 f92b 	bl	8016f52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016d02:	b29a      	uxth	r2, r3
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	2208      	movs	r2, #8
 8016d0c:	761a      	strb	r2, [r3, #24]

      break;
 8016d0e:	e0db      	b.n	8016ec8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	791b      	ldrb	r3, [r3, #4]
 8016d14:	4619      	mov	r1, r3
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	f003 fa46 	bl	801a1a8 <USBH_LL_GetURBState>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016d20:	7bbb      	ldrb	r3, [r7, #14]
 8016d22:	2b01      	cmp	r3, #1
 8016d24:	d113      	bne.n	8016d4e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	220d      	movs	r2, #13
 8016d2a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	2203      	movs	r2, #3
 8016d34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016d44:	2200      	movs	r2, #0
 8016d46:	4619      	mov	r1, r3
 8016d48:	f000 fbb2 	bl	80174b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016d4c:	e0b9      	b.n	8016ec2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8016d4e:	7bbb      	ldrb	r3, [r7, #14]
 8016d50:	2b04      	cmp	r3, #4
 8016d52:	d111      	bne.n	8016d78 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	220b      	movs	r2, #11
 8016d58:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2203      	movs	r2, #3
 8016d5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016d6e:	2200      	movs	r2, #0
 8016d70:	4619      	mov	r1, r3
 8016d72:	f000 fb9d 	bl	80174b0 <osMessagePut>
      break;
 8016d76:	e0a4      	b.n	8016ec2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8016d78:	7bbb      	ldrb	r3, [r7, #14]
 8016d7a:	2b05      	cmp	r3, #5
 8016d7c:	f040 80a1 	bne.w	8016ec2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8016d80:	2303      	movs	r3, #3
 8016d82:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2203      	movs	r2, #3
 8016d88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016d98:	2200      	movs	r2, #0
 8016d9a:	4619      	mov	r1, r3
 8016d9c:	f000 fb88 	bl	80174b0 <osMessagePut>
      break;
 8016da0:	e08f      	b.n	8016ec2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	795b      	ldrb	r3, [r3, #5]
 8016da6:	2201      	movs	r2, #1
 8016da8:	9200      	str	r2, [sp, #0]
 8016daa:	2200      	movs	r2, #0
 8016dac:	2100      	movs	r1, #0
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f000 f8aa 	bl	8016f08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	220a      	movs	r2, #10
 8016dc4:	761a      	strb	r2, [r3, #24]
      break;
 8016dc6:	e07f      	b.n	8016ec8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	795b      	ldrb	r3, [r3, #5]
 8016dcc:	4619      	mov	r1, r3
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	f003 f9ea 	bl	801a1a8 <USBH_LL_GetURBState>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8016dd8:	7bbb      	ldrb	r3, [r7, #14]
 8016dda:	2b01      	cmp	r3, #1
 8016ddc:	d113      	bne.n	8016e06 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8016dde:	2300      	movs	r3, #0
 8016de0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	220d      	movs	r2, #13
 8016de6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2203      	movs	r2, #3
 8016dec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	4619      	mov	r1, r3
 8016e00:	f000 fb56 	bl	80174b0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016e04:	e05f      	b.n	8016ec6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016e06:	7bbb      	ldrb	r3, [r7, #14]
 8016e08:	2b02      	cmp	r3, #2
 8016e0a:	d111      	bne.n	8016e30 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2209      	movs	r2, #9
 8016e10:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2203      	movs	r2, #3
 8016e16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016e26:	2200      	movs	r2, #0
 8016e28:	4619      	mov	r1, r3
 8016e2a:	f000 fb41 	bl	80174b0 <osMessagePut>
      break;
 8016e2e:	e04a      	b.n	8016ec6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8016e30:	7bbb      	ldrb	r3, [r7, #14]
 8016e32:	2b04      	cmp	r3, #4
 8016e34:	d147      	bne.n	8016ec6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	220b      	movs	r2, #11
 8016e3a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2203      	movs	r2, #3
 8016e40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8016e50:	2200      	movs	r2, #0
 8016e52:	4619      	mov	r1, r3
 8016e54:	f000 fb2c 	bl	80174b0 <osMessagePut>
      break;
 8016e58:	e035      	b.n	8016ec6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	7e5b      	ldrb	r3, [r3, #25]
 8016e5e:	3301      	adds	r3, #1
 8016e60:	b2da      	uxtb	r2, r3
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	765a      	strb	r2, [r3, #25]
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	7e5b      	ldrb	r3, [r3, #25]
 8016e6a:	2b02      	cmp	r3, #2
 8016e6c:	d806      	bhi.n	8016e7c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2201      	movs	r2, #1
 8016e72:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2201      	movs	r2, #1
 8016e78:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8016e7a:	e025      	b.n	8016ec8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8016e82:	2106      	movs	r1, #6
 8016e84:	6878      	ldr	r0, [r7, #4]
 8016e86:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	795b      	ldrb	r3, [r3, #5]
 8016e92:	4619      	mov	r1, r3
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f000 f90d 	bl	80170b4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	791b      	ldrb	r3, [r3, #4]
 8016e9e:	4619      	mov	r1, r3
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f000 f907 	bl	80170b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8016eac:	2302      	movs	r3, #2
 8016eae:	73fb      	strb	r3, [r7, #15]
      break;
 8016eb0:	e00a      	b.n	8016ec8 <USBH_HandleControl+0x484>

    default:
      break;
 8016eb2:	bf00      	nop
 8016eb4:	e008      	b.n	8016ec8 <USBH_HandleControl+0x484>
      break;
 8016eb6:	bf00      	nop
 8016eb8:	e006      	b.n	8016ec8 <USBH_HandleControl+0x484>
      break;
 8016eba:	bf00      	nop
 8016ebc:	e004      	b.n	8016ec8 <USBH_HandleControl+0x484>
      break;
 8016ebe:	bf00      	nop
 8016ec0:	e002      	b.n	8016ec8 <USBH_HandleControl+0x484>
      break;
 8016ec2:	bf00      	nop
 8016ec4:	e000      	b.n	8016ec8 <USBH_HandleControl+0x484>
      break;
 8016ec6:	bf00      	nop
  }

  return status;
 8016ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3710      	adds	r7, #16
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
 8016ed2:	bf00      	nop

08016ed4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b088      	sub	sp, #32
 8016ed8:	af04      	add	r7, sp, #16
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	60b9      	str	r1, [r7, #8]
 8016ede:	4613      	mov	r3, r2
 8016ee0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016ee2:	79f9      	ldrb	r1, [r7, #7]
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	9303      	str	r3, [sp, #12]
 8016ee8:	2308      	movs	r3, #8
 8016eea:	9302      	str	r3, [sp, #8]
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	9301      	str	r3, [sp, #4]
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	9300      	str	r3, [sp, #0]
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	f003 f924 	bl	801a146 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8016efe:	2300      	movs	r3, #0
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3710      	adds	r7, #16
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}

08016f08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b088      	sub	sp, #32
 8016f0c:	af04      	add	r7, sp, #16
 8016f0e:	60f8      	str	r0, [r7, #12]
 8016f10:	60b9      	str	r1, [r7, #8]
 8016f12:	4611      	mov	r1, r2
 8016f14:	461a      	mov	r2, r3
 8016f16:	460b      	mov	r3, r1
 8016f18:	80fb      	strh	r3, [r7, #6]
 8016f1a:	4613      	mov	r3, r2
 8016f1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d001      	beq.n	8016f2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8016f28:	2300      	movs	r3, #0
 8016f2a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016f2c:	7979      	ldrb	r1, [r7, #5]
 8016f2e:	7e3b      	ldrb	r3, [r7, #24]
 8016f30:	9303      	str	r3, [sp, #12]
 8016f32:	88fb      	ldrh	r3, [r7, #6]
 8016f34:	9302      	str	r3, [sp, #8]
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	9301      	str	r3, [sp, #4]
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	9300      	str	r3, [sp, #0]
 8016f3e:	2300      	movs	r3, #0
 8016f40:	2200      	movs	r2, #0
 8016f42:	68f8      	ldr	r0, [r7, #12]
 8016f44:	f003 f8ff 	bl	801a146 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8016f48:	2300      	movs	r3, #0
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3710      	adds	r7, #16
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}

08016f52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8016f52:	b580      	push	{r7, lr}
 8016f54:	b088      	sub	sp, #32
 8016f56:	af04      	add	r7, sp, #16
 8016f58:	60f8      	str	r0, [r7, #12]
 8016f5a:	60b9      	str	r1, [r7, #8]
 8016f5c:	4611      	mov	r1, r2
 8016f5e:	461a      	mov	r2, r3
 8016f60:	460b      	mov	r3, r1
 8016f62:	80fb      	strh	r3, [r7, #6]
 8016f64:	4613      	mov	r3, r2
 8016f66:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016f68:	7979      	ldrb	r1, [r7, #5]
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	9303      	str	r3, [sp, #12]
 8016f6e:	88fb      	ldrh	r3, [r7, #6]
 8016f70:	9302      	str	r3, [sp, #8]
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	9301      	str	r3, [sp, #4]
 8016f76:	2301      	movs	r3, #1
 8016f78:	9300      	str	r3, [sp, #0]
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	2201      	movs	r2, #1
 8016f7e:	68f8      	ldr	r0, [r7, #12]
 8016f80:	f003 f8e1 	bl	801a146 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8016f84:	2300      	movs	r3, #0

}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3710      	adds	r7, #16
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}

08016f8e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8016f8e:	b580      	push	{r7, lr}
 8016f90:	b088      	sub	sp, #32
 8016f92:	af04      	add	r7, sp, #16
 8016f94:	60f8      	str	r0, [r7, #12]
 8016f96:	60b9      	str	r1, [r7, #8]
 8016f98:	4611      	mov	r1, r2
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	80fb      	strh	r3, [r7, #6]
 8016fa0:	4613      	mov	r3, r2
 8016fa2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d001      	beq.n	8016fb2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016fb2:	7979      	ldrb	r1, [r7, #5]
 8016fb4:	7e3b      	ldrb	r3, [r7, #24]
 8016fb6:	9303      	str	r3, [sp, #12]
 8016fb8:	88fb      	ldrh	r3, [r7, #6]
 8016fba:	9302      	str	r3, [sp, #8]
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	9301      	str	r3, [sp, #4]
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	9300      	str	r3, [sp, #0]
 8016fc4:	2302      	movs	r3, #2
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	68f8      	ldr	r0, [r7, #12]
 8016fca:	f003 f8bc 	bl	801a146 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8016fce:	2300      	movs	r3, #0
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	3710      	adds	r7, #16
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}

08016fd8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b088      	sub	sp, #32
 8016fdc:	af04      	add	r7, sp, #16
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	4611      	mov	r1, r2
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	460b      	mov	r3, r1
 8016fe8:	80fb      	strh	r3, [r7, #6]
 8016fea:	4613      	mov	r3, r2
 8016fec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016fee:	7979      	ldrb	r1, [r7, #5]
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	9303      	str	r3, [sp, #12]
 8016ff4:	88fb      	ldrh	r3, [r7, #6]
 8016ff6:	9302      	str	r3, [sp, #8]
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	9301      	str	r3, [sp, #4]
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	2302      	movs	r3, #2
 8017002:	2201      	movs	r2, #1
 8017004:	68f8      	ldr	r0, [r7, #12]
 8017006:	f003 f89e 	bl	801a146 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801700a:	2300      	movs	r3, #0
}
 801700c:	4618      	mov	r0, r3
 801700e:	3710      	adds	r7, #16
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}

08017014 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b086      	sub	sp, #24
 8017018:	af04      	add	r7, sp, #16
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	4608      	mov	r0, r1
 801701e:	4611      	mov	r1, r2
 8017020:	461a      	mov	r2, r3
 8017022:	4603      	mov	r3, r0
 8017024:	70fb      	strb	r3, [r7, #3]
 8017026:	460b      	mov	r3, r1
 8017028:	70bb      	strb	r3, [r7, #2]
 801702a:	4613      	mov	r3, r2
 801702c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801702e:	7878      	ldrb	r0, [r7, #1]
 8017030:	78ba      	ldrb	r2, [r7, #2]
 8017032:	78f9      	ldrb	r1, [r7, #3]
 8017034:	8b3b      	ldrh	r3, [r7, #24]
 8017036:	9302      	str	r3, [sp, #8]
 8017038:	7d3b      	ldrb	r3, [r7, #20]
 801703a:	9301      	str	r3, [sp, #4]
 801703c:	7c3b      	ldrb	r3, [r7, #16]
 801703e:	9300      	str	r3, [sp, #0]
 8017040:	4603      	mov	r3, r0
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f003 f831 	bl	801a0aa <USBH_LL_OpenPipe>

  return USBH_OK;
 8017048:	2300      	movs	r3, #0
}
 801704a:	4618      	mov	r0, r3
 801704c:	3708      	adds	r7, #8
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}

08017052 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8017052:	b580      	push	{r7, lr}
 8017054:	b082      	sub	sp, #8
 8017056:	af00      	add	r7, sp, #0
 8017058:	6078      	str	r0, [r7, #4]
 801705a:	460b      	mov	r3, r1
 801705c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801705e:	78fb      	ldrb	r3, [r7, #3]
 8017060:	4619      	mov	r1, r3
 8017062:	6878      	ldr	r0, [r7, #4]
 8017064:	f003 f850 	bl	801a108 <USBH_LL_ClosePipe>

  return USBH_OK;
 8017068:	2300      	movs	r3, #0
}
 801706a:	4618      	mov	r0, r3
 801706c:	3708      	adds	r7, #8
 801706e:	46bd      	mov	sp, r7
 8017070:	bd80      	pop	{r7, pc}

08017072 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8017072:	b580      	push	{r7, lr}
 8017074:	b084      	sub	sp, #16
 8017076:	af00      	add	r7, sp, #0
 8017078:	6078      	str	r0, [r7, #4]
 801707a:	460b      	mov	r3, r1
 801707c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 f836 	bl	80170f0 <USBH_GetFreePipe>
 8017084:	4603      	mov	r3, r0
 8017086:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8017088:	89fb      	ldrh	r3, [r7, #14]
 801708a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801708e:	4293      	cmp	r3, r2
 8017090:	d00a      	beq.n	80170a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8017092:	78fa      	ldrb	r2, [r7, #3]
 8017094:	89fb      	ldrh	r3, [r7, #14]
 8017096:	f003 030f 	and.w	r3, r3, #15
 801709a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801709e:	6879      	ldr	r1, [r7, #4]
 80170a0:	33e0      	adds	r3, #224	; 0xe0
 80170a2:	009b      	lsls	r3, r3, #2
 80170a4:	440b      	add	r3, r1
 80170a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80170a8:	89fb      	ldrh	r3, [r7, #14]
 80170aa:	b2db      	uxtb	r3, r3
}
 80170ac:	4618      	mov	r0, r3
 80170ae:	3710      	adds	r7, #16
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}

080170b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80170b4:	b480      	push	{r7}
 80170b6:	b083      	sub	sp, #12
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
 80170bc:	460b      	mov	r3, r1
 80170be:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80170c0:	78fb      	ldrb	r3, [r7, #3]
 80170c2:	2b0a      	cmp	r3, #10
 80170c4:	d80d      	bhi.n	80170e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80170c6:	78fb      	ldrb	r3, [r7, #3]
 80170c8:	687a      	ldr	r2, [r7, #4]
 80170ca:	33e0      	adds	r3, #224	; 0xe0
 80170cc:	009b      	lsls	r3, r3, #2
 80170ce:	4413      	add	r3, r2
 80170d0:	685a      	ldr	r2, [r3, #4]
 80170d2:	78fb      	ldrb	r3, [r7, #3]
 80170d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80170d8:	6879      	ldr	r1, [r7, #4]
 80170da:	33e0      	adds	r3, #224	; 0xe0
 80170dc:	009b      	lsls	r3, r3, #2
 80170de:	440b      	add	r3, r1
 80170e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80170e2:	2300      	movs	r3, #0
}
 80170e4:	4618      	mov	r0, r3
 80170e6:	370c      	adds	r7, #12
 80170e8:	46bd      	mov	sp, r7
 80170ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ee:	4770      	bx	lr

080170f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80170f0:	b480      	push	{r7}
 80170f2:	b085      	sub	sp, #20
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80170f8:	2300      	movs	r3, #0
 80170fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80170fc:	2300      	movs	r3, #0
 80170fe:	73fb      	strb	r3, [r7, #15]
 8017100:	e00f      	b.n	8017122 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8017102:	7bfb      	ldrb	r3, [r7, #15]
 8017104:	687a      	ldr	r2, [r7, #4]
 8017106:	33e0      	adds	r3, #224	; 0xe0
 8017108:	009b      	lsls	r3, r3, #2
 801710a:	4413      	add	r3, r2
 801710c:	685b      	ldr	r3, [r3, #4]
 801710e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017112:	2b00      	cmp	r3, #0
 8017114:	d102      	bne.n	801711c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8017116:	7bfb      	ldrb	r3, [r7, #15]
 8017118:	b29b      	uxth	r3, r3
 801711a:	e007      	b.n	801712c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801711c:	7bfb      	ldrb	r3, [r7, #15]
 801711e:	3301      	adds	r3, #1
 8017120:	73fb      	strb	r3, [r7, #15]
 8017122:	7bfb      	ldrb	r3, [r7, #15]
 8017124:	2b0a      	cmp	r3, #10
 8017126:	d9ec      	bls.n	8017102 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8017128:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801712c:	4618      	mov	r0, r3
 801712e:	3714      	adds	r7, #20
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr

08017138 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017138:	b480      	push	{r7}
 801713a:	b087      	sub	sp, #28
 801713c:	af00      	add	r7, sp, #0
 801713e:	60f8      	str	r0, [r7, #12]
 8017140:	60b9      	str	r1, [r7, #8]
 8017142:	4613      	mov	r3, r2
 8017144:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017146:	2301      	movs	r3, #1
 8017148:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801714a:	2300      	movs	r3, #0
 801714c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801714e:	4b1f      	ldr	r3, [pc, #124]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 8017150:	7a5b      	ldrb	r3, [r3, #9]
 8017152:	b2db      	uxtb	r3, r3
 8017154:	2b00      	cmp	r3, #0
 8017156:	d131      	bne.n	80171bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017158:	4b1c      	ldr	r3, [pc, #112]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 801715a:	7a5b      	ldrb	r3, [r3, #9]
 801715c:	b2db      	uxtb	r3, r3
 801715e:	461a      	mov	r2, r3
 8017160:	4b1a      	ldr	r3, [pc, #104]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 8017162:	2100      	movs	r1, #0
 8017164:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017166:	4b19      	ldr	r3, [pc, #100]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 8017168:	7a5b      	ldrb	r3, [r3, #9]
 801716a:	b2db      	uxtb	r3, r3
 801716c:	4a17      	ldr	r2, [pc, #92]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 801716e:	009b      	lsls	r3, r3, #2
 8017170:	4413      	add	r3, r2
 8017172:	68fa      	ldr	r2, [r7, #12]
 8017174:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017176:	4b15      	ldr	r3, [pc, #84]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 8017178:	7a5b      	ldrb	r3, [r3, #9]
 801717a:	b2db      	uxtb	r3, r3
 801717c:	461a      	mov	r2, r3
 801717e:	4b13      	ldr	r3, [pc, #76]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 8017180:	4413      	add	r3, r2
 8017182:	79fa      	ldrb	r2, [r7, #7]
 8017184:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017186:	4b11      	ldr	r3, [pc, #68]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 8017188:	7a5b      	ldrb	r3, [r3, #9]
 801718a:	b2db      	uxtb	r3, r3
 801718c:	1c5a      	adds	r2, r3, #1
 801718e:	b2d1      	uxtb	r1, r2
 8017190:	4a0e      	ldr	r2, [pc, #56]	; (80171cc <FATFS_LinkDriverEx+0x94>)
 8017192:	7251      	strb	r1, [r2, #9]
 8017194:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017196:	7dbb      	ldrb	r3, [r7, #22]
 8017198:	3330      	adds	r3, #48	; 0x30
 801719a:	b2da      	uxtb	r2, r3
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	3301      	adds	r3, #1
 80171a4:	223a      	movs	r2, #58	; 0x3a
 80171a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	3302      	adds	r3, #2
 80171ac:	222f      	movs	r2, #47	; 0x2f
 80171ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	3303      	adds	r3, #3
 80171b4:	2200      	movs	r2, #0
 80171b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80171b8:	2300      	movs	r3, #0
 80171ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80171bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80171be:	4618      	mov	r0, r3
 80171c0:	371c      	adds	r7, #28
 80171c2:	46bd      	mov	sp, r7
 80171c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c8:	4770      	bx	lr
 80171ca:	bf00      	nop
 80171cc:	20000448 	.word	0x20000448

080171d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b082      	sub	sp, #8
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
 80171d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80171da:	2200      	movs	r2, #0
 80171dc:	6839      	ldr	r1, [r7, #0]
 80171de:	6878      	ldr	r0, [r7, #4]
 80171e0:	f7ff ffaa 	bl	8017138 <FATFS_LinkDriverEx>
 80171e4:	4603      	mov	r3, r0
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	3708      	adds	r7, #8
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}

080171ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80171ee:	b480      	push	{r7}
 80171f0:	b085      	sub	sp, #20
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	4603      	mov	r3, r0
 80171f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80171f8:	2300      	movs	r3, #0
 80171fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80171fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017200:	2b84      	cmp	r3, #132	; 0x84
 8017202:	d005      	beq.n	8017210 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8017204:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	4413      	add	r3, r2
 801720c:	3303      	adds	r3, #3
 801720e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8017210:	68fb      	ldr	r3, [r7, #12]
}
 8017212:	4618      	mov	r0, r3
 8017214:	3714      	adds	r7, #20
 8017216:	46bd      	mov	sp, r7
 8017218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721c:	4770      	bx	lr

0801721e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801721e:	b480      	push	{r7}
 8017220:	b083      	sub	sp, #12
 8017222:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017224:	f3ef 8305 	mrs	r3, IPSR
 8017228:	607b      	str	r3, [r7, #4]
  return(result);
 801722a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801722c:	2b00      	cmp	r3, #0
 801722e:	bf14      	ite	ne
 8017230:	2301      	movne	r3, #1
 8017232:	2300      	moveq	r3, #0
 8017234:	b2db      	uxtb	r3, r3
}
 8017236:	4618      	mov	r0, r3
 8017238:	370c      	adds	r7, #12
 801723a:	46bd      	mov	sp, r7
 801723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017240:	4770      	bx	lr

08017242 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017242:	b580      	push	{r7, lr}
 8017244:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8017246:	f001 f9e7 	bl	8018618 <vTaskStartScheduler>
  
  return osOK;
 801724a:	2300      	movs	r3, #0
}
 801724c:	4618      	mov	r0, r3
 801724e:	bd80      	pop	{r7, pc}

08017250 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8017254:	f001 fe3a 	bl	8018ecc <xTaskGetSchedulerState>
 8017258:	4603      	mov	r3, r0
 801725a:	2b01      	cmp	r3, #1
 801725c:	d101      	bne.n	8017262 <osKernelRunning+0x12>
    return 0;
 801725e:	2300      	movs	r3, #0
 8017260:	e000      	b.n	8017264 <osKernelRunning+0x14>
  else
    return 1;
 8017262:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8017264:	4618      	mov	r0, r3
 8017266:	bd80      	pop	{r7, pc}

08017268 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801726c:	f7ff ffd7 	bl	801721e <inHandlerMode>
 8017270:	4603      	mov	r3, r0
 8017272:	2b00      	cmp	r3, #0
 8017274:	d003      	beq.n	801727e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8017276:	f001 faef 	bl	8018858 <xTaskGetTickCountFromISR>
 801727a:	4603      	mov	r3, r0
 801727c:	e002      	b.n	8017284 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801727e:	f001 fadb 	bl	8018838 <xTaskGetTickCount>
 8017282:	4603      	mov	r3, r0
  }
}
 8017284:	4618      	mov	r0, r3
 8017286:	bd80      	pop	{r7, pc}

08017288 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801728a:	b089      	sub	sp, #36	; 0x24
 801728c:	af04      	add	r7, sp, #16
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	695b      	ldr	r3, [r3, #20]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d020      	beq.n	80172dc <osThreadCreate+0x54>
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	699b      	ldr	r3, [r3, #24]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d01c      	beq.n	80172dc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	685c      	ldr	r4, [r3, #4]
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	681d      	ldr	r5, [r3, #0]
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	691e      	ldr	r6, [r3, #16]
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80172b4:	4618      	mov	r0, r3
 80172b6:	f7ff ff9a 	bl	80171ee <makeFreeRtosPriority>
 80172ba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	695b      	ldr	r3, [r3, #20]
 80172c0:	687a      	ldr	r2, [r7, #4]
 80172c2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80172c4:	9202      	str	r2, [sp, #8]
 80172c6:	9301      	str	r3, [sp, #4]
 80172c8:	9100      	str	r1, [sp, #0]
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	4632      	mov	r2, r6
 80172ce:	4629      	mov	r1, r5
 80172d0:	4620      	mov	r0, r4
 80172d2:	f000 ffc5 	bl	8018260 <xTaskCreateStatic>
 80172d6:	4603      	mov	r3, r0
 80172d8:	60fb      	str	r3, [r7, #12]
 80172da:	e01c      	b.n	8017316 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	685c      	ldr	r4, [r3, #4]
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80172e8:	b29e      	uxth	r6, r3
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7ff ff7c 	bl	80171ee <makeFreeRtosPriority>
 80172f6:	4602      	mov	r2, r0
 80172f8:	f107 030c 	add.w	r3, r7, #12
 80172fc:	9301      	str	r3, [sp, #4]
 80172fe:	9200      	str	r2, [sp, #0]
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	4632      	mov	r2, r6
 8017304:	4629      	mov	r1, r5
 8017306:	4620      	mov	r0, r4
 8017308:	f001 f80d 	bl	8018326 <xTaskCreate>
 801730c:	4603      	mov	r3, r0
 801730e:	2b01      	cmp	r3, #1
 8017310:	d001      	beq.n	8017316 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8017312:	2300      	movs	r3, #0
 8017314:	e000      	b.n	8017318 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8017316:	68fb      	ldr	r3, [r7, #12]
}
 8017318:	4618      	mov	r0, r3
 801731a:	3714      	adds	r7, #20
 801731c:	46bd      	mov	sp, r7
 801731e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017320 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b084      	sub	sp, #16
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d001      	beq.n	8017336 <osDelay+0x16>
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	e000      	b.n	8017338 <osDelay+0x18>
 8017336:	2301      	movs	r3, #1
 8017338:	4618      	mov	r0, r3
 801733a:	f001 f937 	bl	80185ac <vTaskDelay>
  
  return osOK;
 801733e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8017340:	4618      	mov	r0, r3
 8017342:	3710      	adds	r7, #16
 8017344:	46bd      	mov	sp, r7
 8017346:	bd80      	pop	{r7, pc}

08017348 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b086      	sub	sp, #24
 801734c:	af02      	add	r7, sp, #8
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017352:	2300      	movs	r3, #0
 8017354:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8017356:	2300      	movs	r3, #0
 8017358:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 801735a:	f7ff ff60 	bl	801721e <inHandlerMode>
 801735e:	4603      	mov	r3, r0
 8017360:	2b00      	cmp	r3, #0
 8017362:	d01c      	beq.n	801739e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8017364:	6839      	ldr	r1, [r7, #0]
 8017366:	f107 0208 	add.w	r2, r7, #8
 801736a:	f107 030c 	add.w	r3, r7, #12
 801736e:	9300      	str	r3, [sp, #0]
 8017370:	4613      	mov	r3, r2
 8017372:	2201      	movs	r2, #1
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f001 ff67 	bl	8019248 <xTaskGenericNotifyFromISR>
 801737a:	4603      	mov	r3, r0
 801737c:	2b01      	cmp	r3, #1
 801737e:	d002      	beq.n	8017386 <osSignalSet+0x3e>
      return 0x80000000;
 8017380:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017384:	e019      	b.n	80173ba <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d015      	beq.n	80173b8 <osSignalSet+0x70>
 801738c:	4b0d      	ldr	r3, [pc, #52]	; (80173c4 <osSignalSet+0x7c>)
 801738e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017392:	601a      	str	r2, [r3, #0]
 8017394:	f3bf 8f4f 	dsb	sy
 8017398:	f3bf 8f6f 	isb	sy
 801739c:	e00c      	b.n	80173b8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 801739e:	6839      	ldr	r1, [r7, #0]
 80173a0:	f107 0308 	add.w	r3, r7, #8
 80173a4:	2201      	movs	r2, #1
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f001 fe92 	bl	80190d0 <xTaskGenericNotify>
 80173ac:	4603      	mov	r3, r0
 80173ae:	2b01      	cmp	r3, #1
 80173b0:	d002      	beq.n	80173b8 <osSignalSet+0x70>
    return 0x80000000;
 80173b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80173b6:	e000      	b.n	80173ba <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80173b8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3710      	adds	r7, #16
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
 80173c2:	bf00      	nop
 80173c4:	e000ed04 	.word	0xe000ed04

080173c8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80173c8:	b590      	push	{r4, r7, lr}
 80173ca:	b089      	sub	sp, #36	; 0x24
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	60f8      	str	r0, [r7, #12]
 80173d0:	60b9      	str	r1, [r7, #8]
 80173d2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80173d4:	2300      	movs	r3, #0
 80173d6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80173d8:	2300      	movs	r3, #0
 80173da:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173e2:	d103      	bne.n	80173ec <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80173e4:	f04f 33ff 	mov.w	r3, #4294967295
 80173e8:	61fb      	str	r3, [r7, #28]
 80173ea:	e009      	b.n	8017400 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d006      	beq.n	8017400 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80173f6:	69fb      	ldr	r3, [r7, #28]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d101      	bne.n	8017400 <osSignalWait+0x38>
      ticks = 1;
 80173fc:	2301      	movs	r3, #1
 80173fe:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8017400:	f7ff ff0d 	bl	801721e <inHandlerMode>
 8017404:	4603      	mov	r3, r0
 8017406:	2b00      	cmp	r3, #0
 8017408:	d002      	beq.n	8017410 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801740a:	2382      	movs	r3, #130	; 0x82
 801740c:	613b      	str	r3, [r7, #16]
 801740e:	e01b      	b.n	8017448 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8017410:	68b9      	ldr	r1, [r7, #8]
 8017412:	f107 0310 	add.w	r3, r7, #16
 8017416:	1d1a      	adds	r2, r3, #4
 8017418:	69fb      	ldr	r3, [r7, #28]
 801741a:	2000      	movs	r0, #0
 801741c:	f001 fdfe 	bl	801901c <xTaskNotifyWait>
 8017420:	4603      	mov	r3, r0
 8017422:	2b01      	cmp	r3, #1
 8017424:	d008      	beq.n	8017438 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8017426:	69fb      	ldr	r3, [r7, #28]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d102      	bne.n	8017432 <osSignalWait+0x6a>
 801742c:	2300      	movs	r3, #0
 801742e:	613b      	str	r3, [r7, #16]
 8017430:	e00a      	b.n	8017448 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8017432:	2340      	movs	r3, #64	; 0x40
 8017434:	613b      	str	r3, [r7, #16]
 8017436:	e007      	b.n	8017448 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	2b00      	cmp	r3, #0
 801743c:	da02      	bge.n	8017444 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 801743e:	2386      	movs	r3, #134	; 0x86
 8017440:	613b      	str	r3, [r7, #16]
 8017442:	e001      	b.n	8017448 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8017444:	2308      	movs	r3, #8
 8017446:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	461c      	mov	r4, r3
 801744c:	f107 0310 	add.w	r3, r7, #16
 8017450:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8017458:	68f8      	ldr	r0, [r7, #12]
 801745a:	3724      	adds	r7, #36	; 0x24
 801745c:	46bd      	mov	sp, r7
 801745e:	bd90      	pop	{r4, r7, pc}

08017460 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8017460:	b590      	push	{r4, r7, lr}
 8017462:	b085      	sub	sp, #20
 8017464:	af02      	add	r7, sp, #8
 8017466:	6078      	str	r0, [r7, #4]
 8017468:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	689b      	ldr	r3, [r3, #8]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d011      	beq.n	8017496 <osMessageCreate+0x36>
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	68db      	ldr	r3, [r3, #12]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d00d      	beq.n	8017496 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6818      	ldr	r0, [r3, #0]
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6859      	ldr	r1, [r3, #4]
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	689a      	ldr	r2, [r3, #8]
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	68db      	ldr	r3, [r3, #12]
 801748a:	2400      	movs	r4, #0
 801748c:	9400      	str	r4, [sp, #0]
 801748e:	f000 f9e1 	bl	8017854 <xQueueGenericCreateStatic>
 8017492:	4603      	mov	r3, r0
 8017494:	e008      	b.n	80174a8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6818      	ldr	r0, [r3, #0]
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	685b      	ldr	r3, [r3, #4]
 801749e:	2200      	movs	r2, #0
 80174a0:	4619      	mov	r1, r3
 80174a2:	f000 fa59 	bl	8017958 <xQueueGenericCreate>
 80174a6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd90      	pop	{r4, r7, pc}

080174b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b086      	sub	sp, #24
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	60f8      	str	r0, [r7, #12]
 80174b8:	60b9      	str	r1, [r7, #8]
 80174ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80174bc:	2300      	movs	r3, #0
 80174be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d101      	bne.n	80174ce <osMessagePut+0x1e>
    ticks = 1;
 80174ca:	2301      	movs	r3, #1
 80174cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80174ce:	f7ff fea6 	bl	801721e <inHandlerMode>
 80174d2:	4603      	mov	r3, r0
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d018      	beq.n	801750a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80174d8:	f107 0210 	add.w	r2, r7, #16
 80174dc:	f107 0108 	add.w	r1, r7, #8
 80174e0:	2300      	movs	r3, #0
 80174e2:	68f8      	ldr	r0, [r7, #12]
 80174e4:	f000 fba0 	bl	8017c28 <xQueueGenericSendFromISR>
 80174e8:	4603      	mov	r3, r0
 80174ea:	2b01      	cmp	r3, #1
 80174ec:	d001      	beq.n	80174f2 <osMessagePut+0x42>
      return osErrorOS;
 80174ee:	23ff      	movs	r3, #255	; 0xff
 80174f0:	e018      	b.n	8017524 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80174f2:	693b      	ldr	r3, [r7, #16]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d014      	beq.n	8017522 <osMessagePut+0x72>
 80174f8:	4b0c      	ldr	r3, [pc, #48]	; (801752c <osMessagePut+0x7c>)
 80174fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174fe:	601a      	str	r2, [r3, #0]
 8017500:	f3bf 8f4f 	dsb	sy
 8017504:	f3bf 8f6f 	isb	sy
 8017508:	e00b      	b.n	8017522 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801750a:	f107 0108 	add.w	r1, r7, #8
 801750e:	2300      	movs	r3, #0
 8017510:	697a      	ldr	r2, [r7, #20]
 8017512:	68f8      	ldr	r0, [r7, #12]
 8017514:	f000 fa82 	bl	8017a1c <xQueueGenericSend>
 8017518:	4603      	mov	r3, r0
 801751a:	2b01      	cmp	r3, #1
 801751c:	d001      	beq.n	8017522 <osMessagePut+0x72>
      return osErrorOS;
 801751e:	23ff      	movs	r3, #255	; 0xff
 8017520:	e000      	b.n	8017524 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8017522:	2300      	movs	r3, #0
}
 8017524:	4618      	mov	r0, r3
 8017526:	3718      	adds	r7, #24
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}
 801752c:	e000ed04 	.word	0xe000ed04

08017530 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8017530:	b590      	push	{r4, r7, lr}
 8017532:	b08b      	sub	sp, #44	; 0x2c
 8017534:	af00      	add	r7, sp, #0
 8017536:	60f8      	str	r0, [r7, #12]
 8017538:	60b9      	str	r1, [r7, #8]
 801753a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801753c:	68bb      	ldr	r3, [r7, #8]
 801753e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8017540:	2300      	movs	r3, #0
 8017542:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8017544:	68bb      	ldr	r3, [r7, #8]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d10a      	bne.n	8017560 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801754a:	2380      	movs	r3, #128	; 0x80
 801754c:	617b      	str	r3, [r7, #20]
    return event;
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	461c      	mov	r4, r3
 8017552:	f107 0314 	add.w	r3, r7, #20
 8017556:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801755a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801755e:	e054      	b.n	801760a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8017560:	2300      	movs	r3, #0
 8017562:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8017564:	2300      	movs	r3, #0
 8017566:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801756e:	d103      	bne.n	8017578 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8017570:	f04f 33ff 	mov.w	r3, #4294967295
 8017574:	627b      	str	r3, [r7, #36]	; 0x24
 8017576:	e009      	b.n	801758c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d006      	beq.n	801758c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8017582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017584:	2b00      	cmp	r3, #0
 8017586:	d101      	bne.n	801758c <osMessageGet+0x5c>
      ticks = 1;
 8017588:	2301      	movs	r3, #1
 801758a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801758c:	f7ff fe47 	bl	801721e <inHandlerMode>
 8017590:	4603      	mov	r3, r0
 8017592:	2b00      	cmp	r3, #0
 8017594:	d01c      	beq.n	80175d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8017596:	f107 0220 	add.w	r2, r7, #32
 801759a:	f107 0314 	add.w	r3, r7, #20
 801759e:	3304      	adds	r3, #4
 80175a0:	4619      	mov	r1, r3
 80175a2:	68b8      	ldr	r0, [r7, #8]
 80175a4:	f000 fcc6 	bl	8017f34 <xQueueReceiveFromISR>
 80175a8:	4603      	mov	r3, r0
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	d102      	bne.n	80175b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80175ae:	2310      	movs	r3, #16
 80175b0:	617b      	str	r3, [r7, #20]
 80175b2:	e001      	b.n	80175b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80175b4:	2300      	movs	r3, #0
 80175b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80175b8:	6a3b      	ldr	r3, [r7, #32]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d01d      	beq.n	80175fa <osMessageGet+0xca>
 80175be:	4b15      	ldr	r3, [pc, #84]	; (8017614 <osMessageGet+0xe4>)
 80175c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175c4:	601a      	str	r2, [r3, #0]
 80175c6:	f3bf 8f4f 	dsb	sy
 80175ca:	f3bf 8f6f 	isb	sy
 80175ce:	e014      	b.n	80175fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80175d0:	f107 0314 	add.w	r3, r7, #20
 80175d4:	3304      	adds	r3, #4
 80175d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175d8:	4619      	mov	r1, r3
 80175da:	68b8      	ldr	r0, [r7, #8]
 80175dc:	f000 fbc4 	bl	8017d68 <xQueueReceive>
 80175e0:	4603      	mov	r3, r0
 80175e2:	2b01      	cmp	r3, #1
 80175e4:	d102      	bne.n	80175ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80175e6:	2310      	movs	r3, #16
 80175e8:	617b      	str	r3, [r7, #20]
 80175ea:	e006      	b.n	80175fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80175ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d101      	bne.n	80175f6 <osMessageGet+0xc6>
 80175f2:	2300      	movs	r3, #0
 80175f4:	e000      	b.n	80175f8 <osMessageGet+0xc8>
 80175f6:	2340      	movs	r3, #64	; 0x40
 80175f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	461c      	mov	r4, r3
 80175fe:	f107 0314 	add.w	r3, r7, #20
 8017602:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801760a:	68f8      	ldr	r0, [r7, #12]
 801760c:	372c      	adds	r7, #44	; 0x2c
 801760e:	46bd      	mov	sp, r7
 8017610:	bd90      	pop	{r4, r7, pc}
 8017612:	bf00      	nop
 8017614:	e000ed04 	.word	0xe000ed04

08017618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017618:	b480      	push	{r7}
 801761a:	b083      	sub	sp, #12
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f103 0208 	add.w	r2, r3, #8
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f04f 32ff 	mov.w	r2, #4294967295
 8017630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f103 0208 	add.w	r2, r3, #8
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f103 0208 	add.w	r2, r3, #8
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2200      	movs	r2, #0
 801764a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801764c:	bf00      	nop
 801764e:	370c      	adds	r7, #12
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr

08017658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017658:	b480      	push	{r7}
 801765a:	b083      	sub	sp, #12
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2200      	movs	r2, #0
 8017664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017666:	bf00      	nop
 8017668:	370c      	adds	r7, #12
 801766a:	46bd      	mov	sp, r7
 801766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017670:	4770      	bx	lr

08017672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017672:	b480      	push	{r7}
 8017674:	b085      	sub	sp, #20
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
 801767a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	68fa      	ldr	r2, [r7, #12]
 8017686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	689a      	ldr	r2, [r3, #8]
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	689b      	ldr	r3, [r3, #8]
 8017694:	683a      	ldr	r2, [r7, #0]
 8017696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	683a      	ldr	r2, [r7, #0]
 801769c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	687a      	ldr	r2, [r7, #4]
 80176a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	1c5a      	adds	r2, r3, #1
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	601a      	str	r2, [r3, #0]
}
 80176ae:	bf00      	nop
 80176b0:	3714      	adds	r7, #20
 80176b2:	46bd      	mov	sp, r7
 80176b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b8:	4770      	bx	lr

080176ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80176ba:	b480      	push	{r7}
 80176bc:	b085      	sub	sp, #20
 80176be:	af00      	add	r7, sp, #0
 80176c0:	6078      	str	r0, [r7, #4]
 80176c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176d0:	d103      	bne.n	80176da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	691b      	ldr	r3, [r3, #16]
 80176d6:	60fb      	str	r3, [r7, #12]
 80176d8:	e00c      	b.n	80176f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	3308      	adds	r3, #8
 80176de:	60fb      	str	r3, [r7, #12]
 80176e0:	e002      	b.n	80176e8 <vListInsert+0x2e>
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	685b      	ldr	r3, [r3, #4]
 80176e6:	60fb      	str	r3, [r7, #12]
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	685b      	ldr	r3, [r3, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	68ba      	ldr	r2, [r7, #8]
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d2f6      	bcs.n	80176e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	683b      	ldr	r3, [r7, #0]
 80176fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80176fc:	683b      	ldr	r3, [r7, #0]
 80176fe:	685b      	ldr	r3, [r3, #4]
 8017700:	683a      	ldr	r2, [r7, #0]
 8017702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	68fa      	ldr	r2, [r7, #12]
 8017708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	683a      	ldr	r2, [r7, #0]
 801770e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017710:	683b      	ldr	r3, [r7, #0]
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	1c5a      	adds	r2, r3, #1
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	601a      	str	r2, [r3, #0]
}
 8017720:	bf00      	nop
 8017722:	3714      	adds	r7, #20
 8017724:	46bd      	mov	sp, r7
 8017726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772a:	4770      	bx	lr

0801772c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801772c:	b480      	push	{r7}
 801772e:	b085      	sub	sp, #20
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	691b      	ldr	r3, [r3, #16]
 8017738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	685b      	ldr	r3, [r3, #4]
 801773e:	687a      	ldr	r2, [r7, #4]
 8017740:	6892      	ldr	r2, [r2, #8]
 8017742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	689b      	ldr	r3, [r3, #8]
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	6852      	ldr	r2, [r2, #4]
 801774c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	685b      	ldr	r3, [r3, #4]
 8017752:	687a      	ldr	r2, [r7, #4]
 8017754:	429a      	cmp	r2, r3
 8017756:	d103      	bne.n	8017760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	689a      	ldr	r2, [r3, #8]
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	2200      	movs	r2, #0
 8017764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	1e5a      	subs	r2, r3, #1
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	681b      	ldr	r3, [r3, #0]
}
 8017774:	4618      	mov	r0, r3
 8017776:	3714      	adds	r7, #20
 8017778:	46bd      	mov	sp, r7
 801777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801777e:	4770      	bx	lr

08017780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b084      	sub	sp, #16
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
 8017788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d10c      	bne.n	80177ae <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017798:	b672      	cpsid	i
 801779a:	f383 8811 	msr	BASEPRI, r3
 801779e:	f3bf 8f6f 	isb	sy
 80177a2:	f3bf 8f4f 	dsb	sy
 80177a6:	b662      	cpsie	i
 80177a8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80177aa:	bf00      	nop
 80177ac:	e7fe      	b.n	80177ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80177ae:	f001 ff9d 	bl	80196ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	681a      	ldr	r2, [r3, #0]
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177ba:	68f9      	ldr	r1, [r7, #12]
 80177bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80177be:	fb01 f303 	mul.w	r3, r1, r3
 80177c2:	441a      	add	r2, r3
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	2200      	movs	r2, #0
 80177cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	681a      	ldr	r2, [r3, #0]
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177de:	3b01      	subs	r3, #1
 80177e0:	68f9      	ldr	r1, [r7, #12]
 80177e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80177e4:	fb01 f303 	mul.w	r3, r1, r3
 80177e8:	441a      	add	r2, r3
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	22ff      	movs	r2, #255	; 0xff
 80177f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	22ff      	movs	r2, #255	; 0xff
 80177fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d114      	bne.n	801782e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	691b      	ldr	r3, [r3, #16]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d01a      	beq.n	8017842 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	3310      	adds	r3, #16
 8017810:	4618      	mov	r0, r3
 8017812:	f001 f995 	bl	8018b40 <xTaskRemoveFromEventList>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d012      	beq.n	8017842 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801781c:	4b0c      	ldr	r3, [pc, #48]	; (8017850 <xQueueGenericReset+0xd0>)
 801781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017822:	601a      	str	r2, [r3, #0]
 8017824:	f3bf 8f4f 	dsb	sy
 8017828:	f3bf 8f6f 	isb	sy
 801782c:	e009      	b.n	8017842 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	3310      	adds	r3, #16
 8017832:	4618      	mov	r0, r3
 8017834:	f7ff fef0 	bl	8017618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	3324      	adds	r3, #36	; 0x24
 801783c:	4618      	mov	r0, r3
 801783e:	f7ff feeb 	bl	8017618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017842:	f001 ff87 	bl	8019754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017846:	2301      	movs	r3, #1
}
 8017848:	4618      	mov	r0, r3
 801784a:	3710      	adds	r7, #16
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}
 8017850:	e000ed04 	.word	0xe000ed04

08017854 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017854:	b580      	push	{r7, lr}
 8017856:	b08e      	sub	sp, #56	; 0x38
 8017858:	af02      	add	r7, sp, #8
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	60b9      	str	r1, [r7, #8]
 801785e:	607a      	str	r2, [r7, #4]
 8017860:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d10c      	bne.n	8017882 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8017868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801786c:	b672      	cpsid	i
 801786e:	f383 8811 	msr	BASEPRI, r3
 8017872:	f3bf 8f6f 	isb	sy
 8017876:	f3bf 8f4f 	dsb	sy
 801787a:	b662      	cpsie	i
 801787c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801787e:	bf00      	nop
 8017880:	e7fe      	b.n	8017880 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d10c      	bne.n	80178a2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8017888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801788c:	b672      	cpsid	i
 801788e:	f383 8811 	msr	BASEPRI, r3
 8017892:	f3bf 8f6f 	isb	sy
 8017896:	f3bf 8f4f 	dsb	sy
 801789a:	b662      	cpsie	i
 801789c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801789e:	bf00      	nop
 80178a0:	e7fe      	b.n	80178a0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d002      	beq.n	80178ae <xQueueGenericCreateStatic+0x5a>
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d001      	beq.n	80178b2 <xQueueGenericCreateStatic+0x5e>
 80178ae:	2301      	movs	r3, #1
 80178b0:	e000      	b.n	80178b4 <xQueueGenericCreateStatic+0x60>
 80178b2:	2300      	movs	r3, #0
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d10c      	bne.n	80178d2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80178b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178bc:	b672      	cpsid	i
 80178be:	f383 8811 	msr	BASEPRI, r3
 80178c2:	f3bf 8f6f 	isb	sy
 80178c6:	f3bf 8f4f 	dsb	sy
 80178ca:	b662      	cpsie	i
 80178cc:	623b      	str	r3, [r7, #32]
}
 80178ce:	bf00      	nop
 80178d0:	e7fe      	b.n	80178d0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d102      	bne.n	80178de <xQueueGenericCreateStatic+0x8a>
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d101      	bne.n	80178e2 <xQueueGenericCreateStatic+0x8e>
 80178de:	2301      	movs	r3, #1
 80178e0:	e000      	b.n	80178e4 <xQueueGenericCreateStatic+0x90>
 80178e2:	2300      	movs	r3, #0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d10c      	bne.n	8017902 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80178e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ec:	b672      	cpsid	i
 80178ee:	f383 8811 	msr	BASEPRI, r3
 80178f2:	f3bf 8f6f 	isb	sy
 80178f6:	f3bf 8f4f 	dsb	sy
 80178fa:	b662      	cpsie	i
 80178fc:	61fb      	str	r3, [r7, #28]
}
 80178fe:	bf00      	nop
 8017900:	e7fe      	b.n	8017900 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017902:	2348      	movs	r3, #72	; 0x48
 8017904:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017906:	697b      	ldr	r3, [r7, #20]
 8017908:	2b48      	cmp	r3, #72	; 0x48
 801790a:	d00c      	beq.n	8017926 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 801790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017910:	b672      	cpsid	i
 8017912:	f383 8811 	msr	BASEPRI, r3
 8017916:	f3bf 8f6f 	isb	sy
 801791a:	f3bf 8f4f 	dsb	sy
 801791e:	b662      	cpsie	i
 8017920:	61bb      	str	r3, [r7, #24]
}
 8017922:	bf00      	nop
 8017924:	e7fe      	b.n	8017924 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017926:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801792e:	2b00      	cmp	r3, #0
 8017930:	d00d      	beq.n	801794e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017934:	2201      	movs	r2, #1
 8017936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801793a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017940:	9300      	str	r3, [sp, #0]
 8017942:	4613      	mov	r3, r2
 8017944:	687a      	ldr	r2, [r7, #4]
 8017946:	68b9      	ldr	r1, [r7, #8]
 8017948:	68f8      	ldr	r0, [r7, #12]
 801794a:	f000 f847 	bl	80179dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017950:	4618      	mov	r0, r3
 8017952:	3730      	adds	r7, #48	; 0x30
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}

08017958 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8017958:	b580      	push	{r7, lr}
 801795a:	b08a      	sub	sp, #40	; 0x28
 801795c:	af02      	add	r7, sp, #8
 801795e:	60f8      	str	r0, [r7, #12]
 8017960:	60b9      	str	r1, [r7, #8]
 8017962:	4613      	mov	r3, r2
 8017964:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d10c      	bne.n	8017986 <xQueueGenericCreate+0x2e>
	__asm volatile
 801796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017970:	b672      	cpsid	i
 8017972:	f383 8811 	msr	BASEPRI, r3
 8017976:	f3bf 8f6f 	isb	sy
 801797a:	f3bf 8f4f 	dsb	sy
 801797e:	b662      	cpsie	i
 8017980:	613b      	str	r3, [r7, #16]
}
 8017982:	bf00      	nop
 8017984:	e7fe      	b.n	8017984 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d102      	bne.n	8017992 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801798c:	2300      	movs	r3, #0
 801798e:	61fb      	str	r3, [r7, #28]
 8017990:	e004      	b.n	801799c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	68ba      	ldr	r2, [r7, #8]
 8017996:	fb02 f303 	mul.w	r3, r2, r3
 801799a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801799c:	69fb      	ldr	r3, [r7, #28]
 801799e:	3348      	adds	r3, #72	; 0x48
 80179a0:	4618      	mov	r0, r3
 80179a2:	f001 ffcf 	bl	8019944 <pvPortMalloc>
 80179a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80179a8:	69bb      	ldr	r3, [r7, #24]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d011      	beq.n	80179d2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80179ae:	69bb      	ldr	r3, [r7, #24]
 80179b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	3348      	adds	r3, #72	; 0x48
 80179b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80179b8:	69bb      	ldr	r3, [r7, #24]
 80179ba:	2200      	movs	r2, #0
 80179bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80179c0:	79fa      	ldrb	r2, [r7, #7]
 80179c2:	69bb      	ldr	r3, [r7, #24]
 80179c4:	9300      	str	r3, [sp, #0]
 80179c6:	4613      	mov	r3, r2
 80179c8:	697a      	ldr	r2, [r7, #20]
 80179ca:	68b9      	ldr	r1, [r7, #8]
 80179cc:	68f8      	ldr	r0, [r7, #12]
 80179ce:	f000 f805 	bl	80179dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80179d2:	69bb      	ldr	r3, [r7, #24]
	}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3720      	adds	r7, #32
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}

080179dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	60f8      	str	r0, [r7, #12]
 80179e4:	60b9      	str	r1, [r7, #8]
 80179e6:	607a      	str	r2, [r7, #4]
 80179e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d103      	bne.n	80179f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80179f0:	69bb      	ldr	r3, [r7, #24]
 80179f2:	69ba      	ldr	r2, [r7, #24]
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	e002      	b.n	80179fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80179f8:	69bb      	ldr	r3, [r7, #24]
 80179fa:	687a      	ldr	r2, [r7, #4]
 80179fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80179fe:	69bb      	ldr	r3, [r7, #24]
 8017a00:	68fa      	ldr	r2, [r7, #12]
 8017a02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017a04:	69bb      	ldr	r3, [r7, #24]
 8017a06:	68ba      	ldr	r2, [r7, #8]
 8017a08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017a0a:	2101      	movs	r1, #1
 8017a0c:	69b8      	ldr	r0, [r7, #24]
 8017a0e:	f7ff feb7 	bl	8017780 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017a12:	bf00      	nop
 8017a14:	3710      	adds	r7, #16
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
	...

08017a1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b08e      	sub	sp, #56	; 0x38
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	60f8      	str	r0, [r7, #12]
 8017a24:	60b9      	str	r1, [r7, #8]
 8017a26:	607a      	str	r2, [r7, #4]
 8017a28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d10c      	bne.n	8017a52 <xQueueGenericSend+0x36>
	__asm volatile
 8017a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a3c:	b672      	cpsid	i
 8017a3e:	f383 8811 	msr	BASEPRI, r3
 8017a42:	f3bf 8f6f 	isb	sy
 8017a46:	f3bf 8f4f 	dsb	sy
 8017a4a:	b662      	cpsie	i
 8017a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017a4e:	bf00      	nop
 8017a50:	e7fe      	b.n	8017a50 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a52:	68bb      	ldr	r3, [r7, #8]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d103      	bne.n	8017a60 <xQueueGenericSend+0x44>
 8017a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d101      	bne.n	8017a64 <xQueueGenericSend+0x48>
 8017a60:	2301      	movs	r3, #1
 8017a62:	e000      	b.n	8017a66 <xQueueGenericSend+0x4a>
 8017a64:	2300      	movs	r3, #0
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d10c      	bne.n	8017a84 <xQueueGenericSend+0x68>
	__asm volatile
 8017a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a6e:	b672      	cpsid	i
 8017a70:	f383 8811 	msr	BASEPRI, r3
 8017a74:	f3bf 8f6f 	isb	sy
 8017a78:	f3bf 8f4f 	dsb	sy
 8017a7c:	b662      	cpsie	i
 8017a7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017a80:	bf00      	nop
 8017a82:	e7fe      	b.n	8017a82 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	2b02      	cmp	r3, #2
 8017a88:	d103      	bne.n	8017a92 <xQueueGenericSend+0x76>
 8017a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a8e:	2b01      	cmp	r3, #1
 8017a90:	d101      	bne.n	8017a96 <xQueueGenericSend+0x7a>
 8017a92:	2301      	movs	r3, #1
 8017a94:	e000      	b.n	8017a98 <xQueueGenericSend+0x7c>
 8017a96:	2300      	movs	r3, #0
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d10c      	bne.n	8017ab6 <xQueueGenericSend+0x9a>
	__asm volatile
 8017a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aa0:	b672      	cpsid	i
 8017aa2:	f383 8811 	msr	BASEPRI, r3
 8017aa6:	f3bf 8f6f 	isb	sy
 8017aaa:	f3bf 8f4f 	dsb	sy
 8017aae:	b662      	cpsie	i
 8017ab0:	623b      	str	r3, [r7, #32]
}
 8017ab2:	bf00      	nop
 8017ab4:	e7fe      	b.n	8017ab4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017ab6:	f001 fa09 	bl	8018ecc <xTaskGetSchedulerState>
 8017aba:	4603      	mov	r3, r0
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d102      	bne.n	8017ac6 <xQueueGenericSend+0xaa>
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d101      	bne.n	8017aca <xQueueGenericSend+0xae>
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	e000      	b.n	8017acc <xQueueGenericSend+0xb0>
 8017aca:	2300      	movs	r3, #0
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d10c      	bne.n	8017aea <xQueueGenericSend+0xce>
	__asm volatile
 8017ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ad4:	b672      	cpsid	i
 8017ad6:	f383 8811 	msr	BASEPRI, r3
 8017ada:	f3bf 8f6f 	isb	sy
 8017ade:	f3bf 8f4f 	dsb	sy
 8017ae2:	b662      	cpsie	i
 8017ae4:	61fb      	str	r3, [r7, #28]
}
 8017ae6:	bf00      	nop
 8017ae8:	e7fe      	b.n	8017ae8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017aea:	f001 fdff 	bl	80196ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017af6:	429a      	cmp	r2, r3
 8017af8:	d302      	bcc.n	8017b00 <xQueueGenericSend+0xe4>
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	2b02      	cmp	r3, #2
 8017afe:	d129      	bne.n	8017b54 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017b00:	683a      	ldr	r2, [r7, #0]
 8017b02:	68b9      	ldr	r1, [r7, #8]
 8017b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b06:	f000 fa9b 	bl	8018040 <prvCopyDataToQueue>
 8017b0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d010      	beq.n	8017b36 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b16:	3324      	adds	r3, #36	; 0x24
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f001 f811 	bl	8018b40 <xTaskRemoveFromEventList>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d013      	beq.n	8017b4c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017b24:	4b3f      	ldr	r3, [pc, #252]	; (8017c24 <xQueueGenericSend+0x208>)
 8017b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b2a:	601a      	str	r2, [r3, #0]
 8017b2c:	f3bf 8f4f 	dsb	sy
 8017b30:	f3bf 8f6f 	isb	sy
 8017b34:	e00a      	b.n	8017b4c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d007      	beq.n	8017b4c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017b3c:	4b39      	ldr	r3, [pc, #228]	; (8017c24 <xQueueGenericSend+0x208>)
 8017b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b42:	601a      	str	r2, [r3, #0]
 8017b44:	f3bf 8f4f 	dsb	sy
 8017b48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017b4c:	f001 fe02 	bl	8019754 <vPortExitCritical>
				return pdPASS;
 8017b50:	2301      	movs	r3, #1
 8017b52:	e063      	b.n	8017c1c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d103      	bne.n	8017b62 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017b5a:	f001 fdfb 	bl	8019754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	e05c      	b.n	8017c1c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d106      	bne.n	8017b76 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017b68:	f107 0314 	add.w	r3, r7, #20
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f001 f84b 	bl	8018c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017b72:	2301      	movs	r3, #1
 8017b74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017b76:	f001 fded 	bl	8019754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017b7a:	f000 fdb1 	bl	80186e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017b7e:	f001 fdb5 	bl	80196ec <vPortEnterCritical>
 8017b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b88:	b25b      	sxtb	r3, r3
 8017b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b8e:	d103      	bne.n	8017b98 <xQueueGenericSend+0x17c>
 8017b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b92:	2200      	movs	r2, #0
 8017b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b9e:	b25b      	sxtb	r3, r3
 8017ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ba4:	d103      	bne.n	8017bae <xQueueGenericSend+0x192>
 8017ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ba8:	2200      	movs	r2, #0
 8017baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017bae:	f001 fdd1 	bl	8019754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017bb2:	1d3a      	adds	r2, r7, #4
 8017bb4:	f107 0314 	add.w	r3, r7, #20
 8017bb8:	4611      	mov	r1, r2
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f001 f83a 	bl	8018c34 <xTaskCheckForTimeOut>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d124      	bne.n	8017c10 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017bc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bc8:	f000 fb32 	bl	8018230 <prvIsQueueFull>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d018      	beq.n	8017c04 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bd4:	3310      	adds	r3, #16
 8017bd6:	687a      	ldr	r2, [r7, #4]
 8017bd8:	4611      	mov	r1, r2
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f000 ff8a 	bl	8018af4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017be2:	f000 fabd 	bl	8018160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017be6:	f000 fd89 	bl	80186fc <xTaskResumeAll>
 8017bea:	4603      	mov	r3, r0
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	f47f af7c 	bne.w	8017aea <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8017bf2:	4b0c      	ldr	r3, [pc, #48]	; (8017c24 <xQueueGenericSend+0x208>)
 8017bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bf8:	601a      	str	r2, [r3, #0]
 8017bfa:	f3bf 8f4f 	dsb	sy
 8017bfe:	f3bf 8f6f 	isb	sy
 8017c02:	e772      	b.n	8017aea <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c06:	f000 faab 	bl	8018160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017c0a:	f000 fd77 	bl	80186fc <xTaskResumeAll>
 8017c0e:	e76c      	b.n	8017aea <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c12:	f000 faa5 	bl	8018160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017c16:	f000 fd71 	bl	80186fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017c1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	3738      	adds	r7, #56	; 0x38
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}
 8017c24:	e000ed04 	.word	0xe000ed04

08017c28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b08e      	sub	sp, #56	; 0x38
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	60f8      	str	r0, [r7, #12]
 8017c30:	60b9      	str	r1, [r7, #8]
 8017c32:	607a      	str	r2, [r7, #4]
 8017c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d10c      	bne.n	8017c5a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8017c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c44:	b672      	cpsid	i
 8017c46:	f383 8811 	msr	BASEPRI, r3
 8017c4a:	f3bf 8f6f 	isb	sy
 8017c4e:	f3bf 8f4f 	dsb	sy
 8017c52:	b662      	cpsie	i
 8017c54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017c56:	bf00      	nop
 8017c58:	e7fe      	b.n	8017c58 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d103      	bne.n	8017c68 <xQueueGenericSendFromISR+0x40>
 8017c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d101      	bne.n	8017c6c <xQueueGenericSendFromISR+0x44>
 8017c68:	2301      	movs	r3, #1
 8017c6a:	e000      	b.n	8017c6e <xQueueGenericSendFromISR+0x46>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d10c      	bne.n	8017c8c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8017c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c76:	b672      	cpsid	i
 8017c78:	f383 8811 	msr	BASEPRI, r3
 8017c7c:	f3bf 8f6f 	isb	sy
 8017c80:	f3bf 8f4f 	dsb	sy
 8017c84:	b662      	cpsie	i
 8017c86:	623b      	str	r3, [r7, #32]
}
 8017c88:	bf00      	nop
 8017c8a:	e7fe      	b.n	8017c8a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	2b02      	cmp	r3, #2
 8017c90:	d103      	bne.n	8017c9a <xQueueGenericSendFromISR+0x72>
 8017c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c96:	2b01      	cmp	r3, #1
 8017c98:	d101      	bne.n	8017c9e <xQueueGenericSendFromISR+0x76>
 8017c9a:	2301      	movs	r3, #1
 8017c9c:	e000      	b.n	8017ca0 <xQueueGenericSendFromISR+0x78>
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d10c      	bne.n	8017cbe <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8017ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ca8:	b672      	cpsid	i
 8017caa:	f383 8811 	msr	BASEPRI, r3
 8017cae:	f3bf 8f6f 	isb	sy
 8017cb2:	f3bf 8f4f 	dsb	sy
 8017cb6:	b662      	cpsie	i
 8017cb8:	61fb      	str	r3, [r7, #28]
}
 8017cba:	bf00      	nop
 8017cbc:	e7fe      	b.n	8017cbc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017cbe:	f001 fdfd 	bl	80198bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8017cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cca:	b672      	cpsid	i
 8017ccc:	f383 8811 	msr	BASEPRI, r3
 8017cd0:	f3bf 8f6f 	isb	sy
 8017cd4:	f3bf 8f4f 	dsb	sy
 8017cd8:	b662      	cpsie	i
 8017cda:	61ba      	str	r2, [r7, #24]
 8017cdc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017cde:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d302      	bcc.n	8017cf4 <xQueueGenericSendFromISR+0xcc>
 8017cee:	683b      	ldr	r3, [r7, #0]
 8017cf0:	2b02      	cmp	r3, #2
 8017cf2:	d12c      	bne.n	8017d4e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017cfe:	683a      	ldr	r2, [r7, #0]
 8017d00:	68b9      	ldr	r1, [r7, #8]
 8017d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d04:	f000 f99c 	bl	8018040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017d08:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d10:	d112      	bne.n	8017d38 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d016      	beq.n	8017d48 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d1c:	3324      	adds	r3, #36	; 0x24
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f000 ff0e 	bl	8018b40 <xTaskRemoveFromEventList>
 8017d24:	4603      	mov	r3, r0
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d00e      	beq.n	8017d48 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d00b      	beq.n	8017d48 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2201      	movs	r2, #1
 8017d34:	601a      	str	r2, [r3, #0]
 8017d36:	e007      	b.n	8017d48 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d3c:	3301      	adds	r3, #1
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	b25a      	sxtb	r2, r3
 8017d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017d48:	2301      	movs	r3, #1
 8017d4a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8017d4c:	e001      	b.n	8017d52 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	637b      	str	r3, [r7, #52]	; 0x34
 8017d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d54:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017d56:	693b      	ldr	r3, [r7, #16]
 8017d58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017d5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017d60:	4618      	mov	r0, r3
 8017d62:	3738      	adds	r7, #56	; 0x38
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b08c      	sub	sp, #48	; 0x30
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	60f8      	str	r0, [r7, #12]
 8017d70:	60b9      	str	r1, [r7, #8]
 8017d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017d74:	2300      	movs	r3, #0
 8017d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d10c      	bne.n	8017d9c <xQueueReceive+0x34>
	__asm volatile
 8017d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d86:	b672      	cpsid	i
 8017d88:	f383 8811 	msr	BASEPRI, r3
 8017d8c:	f3bf 8f6f 	isb	sy
 8017d90:	f3bf 8f4f 	dsb	sy
 8017d94:	b662      	cpsie	i
 8017d96:	623b      	str	r3, [r7, #32]
}
 8017d98:	bf00      	nop
 8017d9a:	e7fe      	b.n	8017d9a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d103      	bne.n	8017daa <xQueueReceive+0x42>
 8017da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d101      	bne.n	8017dae <xQueueReceive+0x46>
 8017daa:	2301      	movs	r3, #1
 8017dac:	e000      	b.n	8017db0 <xQueueReceive+0x48>
 8017dae:	2300      	movs	r3, #0
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d10c      	bne.n	8017dce <xQueueReceive+0x66>
	__asm volatile
 8017db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017db8:	b672      	cpsid	i
 8017dba:	f383 8811 	msr	BASEPRI, r3
 8017dbe:	f3bf 8f6f 	isb	sy
 8017dc2:	f3bf 8f4f 	dsb	sy
 8017dc6:	b662      	cpsie	i
 8017dc8:	61fb      	str	r3, [r7, #28]
}
 8017dca:	bf00      	nop
 8017dcc:	e7fe      	b.n	8017dcc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017dce:	f001 f87d 	bl	8018ecc <xTaskGetSchedulerState>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d102      	bne.n	8017dde <xQueueReceive+0x76>
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d101      	bne.n	8017de2 <xQueueReceive+0x7a>
 8017dde:	2301      	movs	r3, #1
 8017de0:	e000      	b.n	8017de4 <xQueueReceive+0x7c>
 8017de2:	2300      	movs	r3, #0
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d10c      	bne.n	8017e02 <xQueueReceive+0x9a>
	__asm volatile
 8017de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dec:	b672      	cpsid	i
 8017dee:	f383 8811 	msr	BASEPRI, r3
 8017df2:	f3bf 8f6f 	isb	sy
 8017df6:	f3bf 8f4f 	dsb	sy
 8017dfa:	b662      	cpsie	i
 8017dfc:	61bb      	str	r3, [r7, #24]
}
 8017dfe:	bf00      	nop
 8017e00:	e7fe      	b.n	8017e00 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017e02:	f001 fc73 	bl	80196ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d01f      	beq.n	8017e52 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017e12:	68b9      	ldr	r1, [r7, #8]
 8017e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e16:	f000 f97d 	bl	8018114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1c:	1e5a      	subs	r2, r3, #1
 8017e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e24:	691b      	ldr	r3, [r3, #16]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d00f      	beq.n	8017e4a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2c:	3310      	adds	r3, #16
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f000 fe86 	bl	8018b40 <xTaskRemoveFromEventList>
 8017e34:	4603      	mov	r3, r0
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d007      	beq.n	8017e4a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017e3a:	4b3d      	ldr	r3, [pc, #244]	; (8017f30 <xQueueReceive+0x1c8>)
 8017e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e40:	601a      	str	r2, [r3, #0]
 8017e42:	f3bf 8f4f 	dsb	sy
 8017e46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017e4a:	f001 fc83 	bl	8019754 <vPortExitCritical>
				return pdPASS;
 8017e4e:	2301      	movs	r3, #1
 8017e50:	e069      	b.n	8017f26 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d103      	bne.n	8017e60 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017e58:	f001 fc7c 	bl	8019754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	e062      	b.n	8017f26 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d106      	bne.n	8017e74 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017e66:	f107 0310 	add.w	r3, r7, #16
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f000 fecc 	bl	8018c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017e70:	2301      	movs	r3, #1
 8017e72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017e74:	f001 fc6e 	bl	8019754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017e78:	f000 fc32 	bl	80186e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017e7c:	f001 fc36 	bl	80196ec <vPortEnterCritical>
 8017e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017e86:	b25b      	sxtb	r3, r3
 8017e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e8c:	d103      	bne.n	8017e96 <xQueueReceive+0x12e>
 8017e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e90:	2200      	movs	r2, #0
 8017e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e9c:	b25b      	sxtb	r3, r3
 8017e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ea2:	d103      	bne.n	8017eac <xQueueReceive+0x144>
 8017ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017eac:	f001 fc52 	bl	8019754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017eb0:	1d3a      	adds	r2, r7, #4
 8017eb2:	f107 0310 	add.w	r3, r7, #16
 8017eb6:	4611      	mov	r1, r2
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f000 febb 	bl	8018c34 <xTaskCheckForTimeOut>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d123      	bne.n	8017f0c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ec6:	f000 f99d 	bl	8018204 <prvIsQueueEmpty>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d017      	beq.n	8017f00 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed2:	3324      	adds	r3, #36	; 0x24
 8017ed4:	687a      	ldr	r2, [r7, #4]
 8017ed6:	4611      	mov	r1, r2
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f000 fe0b 	bl	8018af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ee0:	f000 f93e 	bl	8018160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017ee4:	f000 fc0a 	bl	80186fc <xTaskResumeAll>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d189      	bne.n	8017e02 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8017eee:	4b10      	ldr	r3, [pc, #64]	; (8017f30 <xQueueReceive+0x1c8>)
 8017ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ef4:	601a      	str	r2, [r3, #0]
 8017ef6:	f3bf 8f4f 	dsb	sy
 8017efa:	f3bf 8f6f 	isb	sy
 8017efe:	e780      	b.n	8017e02 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f02:	f000 f92d 	bl	8018160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017f06:	f000 fbf9 	bl	80186fc <xTaskResumeAll>
 8017f0a:	e77a      	b.n	8017e02 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f0e:	f000 f927 	bl	8018160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017f12:	f000 fbf3 	bl	80186fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f18:	f000 f974 	bl	8018204 <prvIsQueueEmpty>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	f43f af6f 	beq.w	8017e02 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017f26:	4618      	mov	r0, r3
 8017f28:	3730      	adds	r7, #48	; 0x30
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}
 8017f2e:	bf00      	nop
 8017f30:	e000ed04 	.word	0xe000ed04

08017f34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b08e      	sub	sp, #56	; 0x38
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d10c      	bne.n	8017f64 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8017f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f4e:	b672      	cpsid	i
 8017f50:	f383 8811 	msr	BASEPRI, r3
 8017f54:	f3bf 8f6f 	isb	sy
 8017f58:	f3bf 8f4f 	dsb	sy
 8017f5c:	b662      	cpsie	i
 8017f5e:	623b      	str	r3, [r7, #32]
}
 8017f60:	bf00      	nop
 8017f62:	e7fe      	b.n	8017f62 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d103      	bne.n	8017f72 <xQueueReceiveFromISR+0x3e>
 8017f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d101      	bne.n	8017f76 <xQueueReceiveFromISR+0x42>
 8017f72:	2301      	movs	r3, #1
 8017f74:	e000      	b.n	8017f78 <xQueueReceiveFromISR+0x44>
 8017f76:	2300      	movs	r3, #0
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d10c      	bne.n	8017f96 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8017f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f80:	b672      	cpsid	i
 8017f82:	f383 8811 	msr	BASEPRI, r3
 8017f86:	f3bf 8f6f 	isb	sy
 8017f8a:	f3bf 8f4f 	dsb	sy
 8017f8e:	b662      	cpsie	i
 8017f90:	61fb      	str	r3, [r7, #28]
}
 8017f92:	bf00      	nop
 8017f94:	e7fe      	b.n	8017f94 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017f96:	f001 fc91 	bl	80198bc <vPortValidateInterruptPriority>
	__asm volatile
 8017f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8017f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fa2:	b672      	cpsid	i
 8017fa4:	f383 8811 	msr	BASEPRI, r3
 8017fa8:	f3bf 8f6f 	isb	sy
 8017fac:	f3bf 8f4f 	dsb	sy
 8017fb0:	b662      	cpsie	i
 8017fb2:	61ba      	str	r2, [r7, #24]
 8017fb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017fb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d02f      	beq.n	8018026 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017fd0:	68b9      	ldr	r1, [r7, #8]
 8017fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fd4:	f000 f89e 	bl	8018114 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fda:	1e5a      	subs	r2, r3, #1
 8017fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017fe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fe8:	d112      	bne.n	8018010 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fec:	691b      	ldr	r3, [r3, #16]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d016      	beq.n	8018020 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff4:	3310      	adds	r3, #16
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f000 fda2 	bl	8018b40 <xTaskRemoveFromEventList>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d00e      	beq.n	8018020 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d00b      	beq.n	8018020 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2201      	movs	r2, #1
 801800c:	601a      	str	r2, [r3, #0]
 801800e:	e007      	b.n	8018020 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018014:	3301      	adds	r3, #1
 8018016:	b2db      	uxtb	r3, r3
 8018018:	b25a      	sxtb	r2, r3
 801801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801801c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8018020:	2301      	movs	r3, #1
 8018022:	637b      	str	r3, [r7, #52]	; 0x34
 8018024:	e001      	b.n	801802a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8018026:	2300      	movs	r3, #0
 8018028:	637b      	str	r3, [r7, #52]	; 0x34
 801802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801802e:	693b      	ldr	r3, [r7, #16]
 8018030:	f383 8811 	msr	BASEPRI, r3
}
 8018034:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018038:	4618      	mov	r0, r3
 801803a:	3738      	adds	r7, #56	; 0x38
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b086      	sub	sp, #24
 8018044:	af00      	add	r7, sp, #0
 8018046:	60f8      	str	r0, [r7, #12]
 8018048:	60b9      	str	r1, [r7, #8]
 801804a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801804c:	2300      	movs	r3, #0
 801804e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801805a:	2b00      	cmp	r3, #0
 801805c:	d10d      	bne.n	801807a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d14d      	bne.n	8018102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	689b      	ldr	r3, [r3, #8]
 801806a:	4618      	mov	r0, r3
 801806c:	f000 ff4c 	bl	8018f08 <xTaskPriorityDisinherit>
 8018070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	2200      	movs	r2, #0
 8018076:	609a      	str	r2, [r3, #8]
 8018078:	e043      	b.n	8018102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d119      	bne.n	80180b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	6858      	ldr	r0, [r3, #4]
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018088:	461a      	mov	r2, r3
 801808a:	68b9      	ldr	r1, [r7, #8]
 801808c:	f003 fa66 	bl	801b55c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	685a      	ldr	r2, [r3, #4]
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018098:	441a      	add	r2, r3
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	685a      	ldr	r2, [r3, #4]
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	689b      	ldr	r3, [r3, #8]
 80180a6:	429a      	cmp	r2, r3
 80180a8:	d32b      	bcc.n	8018102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	681a      	ldr	r2, [r3, #0]
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	605a      	str	r2, [r3, #4]
 80180b2:	e026      	b.n	8018102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	68d8      	ldr	r0, [r3, #12]
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180bc:	461a      	mov	r2, r3
 80180be:	68b9      	ldr	r1, [r7, #8]
 80180c0:	f003 fa4c 	bl	801b55c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	68da      	ldr	r2, [r3, #12]
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180cc:	425b      	negs	r3, r3
 80180ce:	441a      	add	r2, r3
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	68da      	ldr	r2, [r3, #12]
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	429a      	cmp	r2, r3
 80180de:	d207      	bcs.n	80180f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	689a      	ldr	r2, [r3, #8]
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180e8:	425b      	negs	r3, r3
 80180ea:	441a      	add	r2, r3
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2b02      	cmp	r3, #2
 80180f4:	d105      	bne.n	8018102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80180f6:	693b      	ldr	r3, [r7, #16]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d002      	beq.n	8018102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	3b01      	subs	r3, #1
 8018100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018102:	693b      	ldr	r3, [r7, #16]
 8018104:	1c5a      	adds	r2, r3, #1
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801810a:	697b      	ldr	r3, [r7, #20]
}
 801810c:	4618      	mov	r0, r3
 801810e:	3718      	adds	r7, #24
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}

08018114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b082      	sub	sp, #8
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018122:	2b00      	cmp	r3, #0
 8018124:	d018      	beq.n	8018158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	68da      	ldr	r2, [r3, #12]
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801812e:	441a      	add	r2, r3
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	68da      	ldr	r2, [r3, #12]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	689b      	ldr	r3, [r3, #8]
 801813c:	429a      	cmp	r2, r3
 801813e:	d303      	bcc.n	8018148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681a      	ldr	r2, [r3, #0]
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	68d9      	ldr	r1, [r3, #12]
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018150:	461a      	mov	r2, r3
 8018152:	6838      	ldr	r0, [r7, #0]
 8018154:	f003 fa02 	bl	801b55c <memcpy>
	}
}
 8018158:	bf00      	nop
 801815a:	3708      	adds	r7, #8
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}

08018160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b084      	sub	sp, #16
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018168:	f001 fac0 	bl	80196ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018174:	e011      	b.n	801819a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801817a:	2b00      	cmp	r3, #0
 801817c:	d012      	beq.n	80181a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	3324      	adds	r3, #36	; 0x24
 8018182:	4618      	mov	r0, r3
 8018184:	f000 fcdc 	bl	8018b40 <xTaskRemoveFromEventList>
 8018188:	4603      	mov	r3, r0
 801818a:	2b00      	cmp	r3, #0
 801818c:	d001      	beq.n	8018192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801818e:	f000 fdb7 	bl	8018d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018192:	7bfb      	ldrb	r3, [r7, #15]
 8018194:	3b01      	subs	r3, #1
 8018196:	b2db      	uxtb	r3, r3
 8018198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801819a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	dce9      	bgt.n	8018176 <prvUnlockQueue+0x16>
 80181a2:	e000      	b.n	80181a6 <prvUnlockQueue+0x46>
					break;
 80181a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	22ff      	movs	r2, #255	; 0xff
 80181aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80181ae:	f001 fad1 	bl	8019754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80181b2:	f001 fa9b 	bl	80196ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80181bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80181be:	e011      	b.n	80181e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	691b      	ldr	r3, [r3, #16]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d012      	beq.n	80181ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	3310      	adds	r3, #16
 80181cc:	4618      	mov	r0, r3
 80181ce:	f000 fcb7 	bl	8018b40 <xTaskRemoveFromEventList>
 80181d2:	4603      	mov	r3, r0
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d001      	beq.n	80181dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80181d8:	f000 fd92 	bl	8018d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80181dc:	7bbb      	ldrb	r3, [r7, #14]
 80181de:	3b01      	subs	r3, #1
 80181e0:	b2db      	uxtb	r3, r3
 80181e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80181e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	dce9      	bgt.n	80181c0 <prvUnlockQueue+0x60>
 80181ec:	e000      	b.n	80181f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80181ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	22ff      	movs	r2, #255	; 0xff
 80181f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80181f8:	f001 faac 	bl	8019754 <vPortExitCritical>
}
 80181fc:	bf00      	nop
 80181fe:	3710      	adds	r7, #16
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}

08018204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b084      	sub	sp, #16
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801820c:	f001 fa6e 	bl	80196ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018214:	2b00      	cmp	r3, #0
 8018216:	d102      	bne.n	801821e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018218:	2301      	movs	r3, #1
 801821a:	60fb      	str	r3, [r7, #12]
 801821c:	e001      	b.n	8018222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801821e:	2300      	movs	r3, #0
 8018220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018222:	f001 fa97 	bl	8019754 <vPortExitCritical>

	return xReturn;
 8018226:	68fb      	ldr	r3, [r7, #12]
}
 8018228:	4618      	mov	r0, r3
 801822a:	3710      	adds	r7, #16
 801822c:	46bd      	mov	sp, r7
 801822e:	bd80      	pop	{r7, pc}

08018230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b084      	sub	sp, #16
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018238:	f001 fa58 	bl	80196ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018244:	429a      	cmp	r2, r3
 8018246:	d102      	bne.n	801824e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018248:	2301      	movs	r3, #1
 801824a:	60fb      	str	r3, [r7, #12]
 801824c:	e001      	b.n	8018252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801824e:	2300      	movs	r3, #0
 8018250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018252:	f001 fa7f 	bl	8019754 <vPortExitCritical>

	return xReturn;
 8018256:	68fb      	ldr	r3, [r7, #12]
}
 8018258:	4618      	mov	r0, r3
 801825a:	3710      	adds	r7, #16
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}

08018260 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018260:	b580      	push	{r7, lr}
 8018262:	b08e      	sub	sp, #56	; 0x38
 8018264:	af04      	add	r7, sp, #16
 8018266:	60f8      	str	r0, [r7, #12]
 8018268:	60b9      	str	r1, [r7, #8]
 801826a:	607a      	str	r2, [r7, #4]
 801826c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018270:	2b00      	cmp	r3, #0
 8018272:	d10c      	bne.n	801828e <xTaskCreateStatic+0x2e>
	__asm volatile
 8018274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018278:	b672      	cpsid	i
 801827a:	f383 8811 	msr	BASEPRI, r3
 801827e:	f3bf 8f6f 	isb	sy
 8018282:	f3bf 8f4f 	dsb	sy
 8018286:	b662      	cpsie	i
 8018288:	623b      	str	r3, [r7, #32]
}
 801828a:	bf00      	nop
 801828c:	e7fe      	b.n	801828c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018290:	2b00      	cmp	r3, #0
 8018292:	d10c      	bne.n	80182ae <xTaskCreateStatic+0x4e>
	__asm volatile
 8018294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018298:	b672      	cpsid	i
 801829a:	f383 8811 	msr	BASEPRI, r3
 801829e:	f3bf 8f6f 	isb	sy
 80182a2:	f3bf 8f4f 	dsb	sy
 80182a6:	b662      	cpsie	i
 80182a8:	61fb      	str	r3, [r7, #28]
}
 80182aa:	bf00      	nop
 80182ac:	e7fe      	b.n	80182ac <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80182ae:	2358      	movs	r3, #88	; 0x58
 80182b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80182b2:	693b      	ldr	r3, [r7, #16]
 80182b4:	2b58      	cmp	r3, #88	; 0x58
 80182b6:	d00c      	beq.n	80182d2 <xTaskCreateStatic+0x72>
	__asm volatile
 80182b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182bc:	b672      	cpsid	i
 80182be:	f383 8811 	msr	BASEPRI, r3
 80182c2:	f3bf 8f6f 	isb	sy
 80182c6:	f3bf 8f4f 	dsb	sy
 80182ca:	b662      	cpsie	i
 80182cc:	61bb      	str	r3, [r7, #24]
}
 80182ce:	bf00      	nop
 80182d0:	e7fe      	b.n	80182d0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80182d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80182d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d01e      	beq.n	8018318 <xTaskCreateStatic+0xb8>
 80182da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d01b      	beq.n	8018318 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80182e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80182e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80182e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80182ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ec:	2202      	movs	r2, #2
 80182ee:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80182f2:	2300      	movs	r3, #0
 80182f4:	9303      	str	r3, [sp, #12]
 80182f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182f8:	9302      	str	r3, [sp, #8]
 80182fa:	f107 0314 	add.w	r3, r7, #20
 80182fe:	9301      	str	r3, [sp, #4]
 8018300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	687a      	ldr	r2, [r7, #4]
 8018308:	68b9      	ldr	r1, [r7, #8]
 801830a:	68f8      	ldr	r0, [r7, #12]
 801830c:	f000 f850 	bl	80183b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018312:	f000 f8e1 	bl	80184d8 <prvAddNewTaskToReadyList>
 8018316:	e001      	b.n	801831c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8018318:	2300      	movs	r3, #0
 801831a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801831c:	697b      	ldr	r3, [r7, #20]
	}
 801831e:	4618      	mov	r0, r3
 8018320:	3728      	adds	r7, #40	; 0x28
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}

08018326 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018326:	b580      	push	{r7, lr}
 8018328:	b08c      	sub	sp, #48	; 0x30
 801832a:	af04      	add	r7, sp, #16
 801832c:	60f8      	str	r0, [r7, #12]
 801832e:	60b9      	str	r1, [r7, #8]
 8018330:	603b      	str	r3, [r7, #0]
 8018332:	4613      	mov	r3, r2
 8018334:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018336:	88fb      	ldrh	r3, [r7, #6]
 8018338:	009b      	lsls	r3, r3, #2
 801833a:	4618      	mov	r0, r3
 801833c:	f001 fb02 	bl	8019944 <pvPortMalloc>
 8018340:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018342:	697b      	ldr	r3, [r7, #20]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d00e      	beq.n	8018366 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018348:	2058      	movs	r0, #88	; 0x58
 801834a:	f001 fafb 	bl	8019944 <pvPortMalloc>
 801834e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018350:	69fb      	ldr	r3, [r7, #28]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d003      	beq.n	801835e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018356:	69fb      	ldr	r3, [r7, #28]
 8018358:	697a      	ldr	r2, [r7, #20]
 801835a:	631a      	str	r2, [r3, #48]	; 0x30
 801835c:	e005      	b.n	801836a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801835e:	6978      	ldr	r0, [r7, #20]
 8018360:	f001 fbc0 	bl	8019ae4 <vPortFree>
 8018364:	e001      	b.n	801836a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018366:	2300      	movs	r3, #0
 8018368:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801836a:	69fb      	ldr	r3, [r7, #28]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d017      	beq.n	80183a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018370:	69fb      	ldr	r3, [r7, #28]
 8018372:	2200      	movs	r2, #0
 8018374:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018378:	88fa      	ldrh	r2, [r7, #6]
 801837a:	2300      	movs	r3, #0
 801837c:	9303      	str	r3, [sp, #12]
 801837e:	69fb      	ldr	r3, [r7, #28]
 8018380:	9302      	str	r3, [sp, #8]
 8018382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018384:	9301      	str	r3, [sp, #4]
 8018386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018388:	9300      	str	r3, [sp, #0]
 801838a:	683b      	ldr	r3, [r7, #0]
 801838c:	68b9      	ldr	r1, [r7, #8]
 801838e:	68f8      	ldr	r0, [r7, #12]
 8018390:	f000 f80e 	bl	80183b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018394:	69f8      	ldr	r0, [r7, #28]
 8018396:	f000 f89f 	bl	80184d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801839a:	2301      	movs	r3, #1
 801839c:	61bb      	str	r3, [r7, #24]
 801839e:	e002      	b.n	80183a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80183a0:	f04f 33ff 	mov.w	r3, #4294967295
 80183a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80183a6:	69bb      	ldr	r3, [r7, #24]
	}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3720      	adds	r7, #32
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}

080183b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b088      	sub	sp, #32
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	60f8      	str	r0, [r7, #12]
 80183b8:	60b9      	str	r1, [r7, #8]
 80183ba:	607a      	str	r2, [r7, #4]
 80183bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80183be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	009b      	lsls	r3, r3, #2
 80183c6:	461a      	mov	r2, r3
 80183c8:	21a5      	movs	r1, #165	; 0xa5
 80183ca:	f003 f8d5 	bl	801b578 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80183ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80183d2:	6879      	ldr	r1, [r7, #4]
 80183d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80183d8:	440b      	add	r3, r1
 80183da:	009b      	lsls	r3, r3, #2
 80183dc:	4413      	add	r3, r2
 80183de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80183e0:	69bb      	ldr	r3, [r7, #24]
 80183e2:	f023 0307 	bic.w	r3, r3, #7
 80183e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80183e8:	69bb      	ldr	r3, [r7, #24]
 80183ea:	f003 0307 	and.w	r3, r3, #7
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d00c      	beq.n	801840c <prvInitialiseNewTask+0x5c>
	__asm volatile
 80183f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183f6:	b672      	cpsid	i
 80183f8:	f383 8811 	msr	BASEPRI, r3
 80183fc:	f3bf 8f6f 	isb	sy
 8018400:	f3bf 8f4f 	dsb	sy
 8018404:	b662      	cpsie	i
 8018406:	617b      	str	r3, [r7, #20]
}
 8018408:	bf00      	nop
 801840a:	e7fe      	b.n	801840a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d01f      	beq.n	8018452 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018412:	2300      	movs	r3, #0
 8018414:	61fb      	str	r3, [r7, #28]
 8018416:	e012      	b.n	801843e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018418:	68ba      	ldr	r2, [r7, #8]
 801841a:	69fb      	ldr	r3, [r7, #28]
 801841c:	4413      	add	r3, r2
 801841e:	7819      	ldrb	r1, [r3, #0]
 8018420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018422:	69fb      	ldr	r3, [r7, #28]
 8018424:	4413      	add	r3, r2
 8018426:	3334      	adds	r3, #52	; 0x34
 8018428:	460a      	mov	r2, r1
 801842a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801842c:	68ba      	ldr	r2, [r7, #8]
 801842e:	69fb      	ldr	r3, [r7, #28]
 8018430:	4413      	add	r3, r2
 8018432:	781b      	ldrb	r3, [r3, #0]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d006      	beq.n	8018446 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018438:	69fb      	ldr	r3, [r7, #28]
 801843a:	3301      	adds	r3, #1
 801843c:	61fb      	str	r3, [r7, #28]
 801843e:	69fb      	ldr	r3, [r7, #28]
 8018440:	2b0f      	cmp	r3, #15
 8018442:	d9e9      	bls.n	8018418 <prvInitialiseNewTask+0x68>
 8018444:	e000      	b.n	8018448 <prvInitialiseNewTask+0x98>
			{
				break;
 8018446:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801844a:	2200      	movs	r2, #0
 801844c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018450:	e003      	b.n	801845a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018454:	2200      	movs	r2, #0
 8018456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801845c:	2b06      	cmp	r3, #6
 801845e:	d901      	bls.n	8018464 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018460:	2306      	movs	r3, #6
 8018462:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018468:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801846c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801846e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8018470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018472:	2200      	movs	r2, #0
 8018474:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018478:	3304      	adds	r3, #4
 801847a:	4618      	mov	r0, r3
 801847c:	f7ff f8ec 	bl	8017658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018482:	3318      	adds	r3, #24
 8018484:	4618      	mov	r0, r3
 8018486:	f7ff f8e7 	bl	8017658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801848c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801848e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018492:	f1c3 0207 	rsb	r2, r3, #7
 8018496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018498:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801849c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801849e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80184a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a2:	2200      	movs	r2, #0
 80184a4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80184a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a8:	2200      	movs	r2, #0
 80184aa:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80184ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ae:	2200      	movs	r2, #0
 80184b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80184b4:	683a      	ldr	r2, [r7, #0]
 80184b6:	68f9      	ldr	r1, [r7, #12]
 80184b8:	69b8      	ldr	r0, [r7, #24]
 80184ba:	f001 f80d 	bl	80194d8 <pxPortInitialiseStack>
 80184be:	4602      	mov	r2, r0
 80184c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80184c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d002      	beq.n	80184d0 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80184ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80184d0:	bf00      	nop
 80184d2:	3720      	adds	r7, #32
 80184d4:	46bd      	mov	sp, r7
 80184d6:	bd80      	pop	{r7, pc}

080184d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b082      	sub	sp, #8
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80184e0:	f001 f904 	bl	80196ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80184e4:	4b2a      	ldr	r3, [pc, #168]	; (8018590 <prvAddNewTaskToReadyList+0xb8>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	3301      	adds	r3, #1
 80184ea:	4a29      	ldr	r2, [pc, #164]	; (8018590 <prvAddNewTaskToReadyList+0xb8>)
 80184ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80184ee:	4b29      	ldr	r3, [pc, #164]	; (8018594 <prvAddNewTaskToReadyList+0xbc>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d109      	bne.n	801850a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80184f6:	4a27      	ldr	r2, [pc, #156]	; (8018594 <prvAddNewTaskToReadyList+0xbc>)
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80184fc:	4b24      	ldr	r3, [pc, #144]	; (8018590 <prvAddNewTaskToReadyList+0xb8>)
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	2b01      	cmp	r3, #1
 8018502:	d110      	bne.n	8018526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018504:	f000 fc22 	bl	8018d4c <prvInitialiseTaskLists>
 8018508:	e00d      	b.n	8018526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801850a:	4b23      	ldr	r3, [pc, #140]	; (8018598 <prvAddNewTaskToReadyList+0xc0>)
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d109      	bne.n	8018526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018512:	4b20      	ldr	r3, [pc, #128]	; (8018594 <prvAddNewTaskToReadyList+0xbc>)
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801851c:	429a      	cmp	r2, r3
 801851e:	d802      	bhi.n	8018526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018520:	4a1c      	ldr	r2, [pc, #112]	; (8018594 <prvAddNewTaskToReadyList+0xbc>)
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018526:	4b1d      	ldr	r3, [pc, #116]	; (801859c <prvAddNewTaskToReadyList+0xc4>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	3301      	adds	r3, #1
 801852c:	4a1b      	ldr	r2, [pc, #108]	; (801859c <prvAddNewTaskToReadyList+0xc4>)
 801852e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018534:	2201      	movs	r2, #1
 8018536:	409a      	lsls	r2, r3
 8018538:	4b19      	ldr	r3, [pc, #100]	; (80185a0 <prvAddNewTaskToReadyList+0xc8>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	4313      	orrs	r3, r2
 801853e:	4a18      	ldr	r2, [pc, #96]	; (80185a0 <prvAddNewTaskToReadyList+0xc8>)
 8018540:	6013      	str	r3, [r2, #0]
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018546:	4613      	mov	r3, r2
 8018548:	009b      	lsls	r3, r3, #2
 801854a:	4413      	add	r3, r2
 801854c:	009b      	lsls	r3, r3, #2
 801854e:	4a15      	ldr	r2, [pc, #84]	; (80185a4 <prvAddNewTaskToReadyList+0xcc>)
 8018550:	441a      	add	r2, r3
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	3304      	adds	r3, #4
 8018556:	4619      	mov	r1, r3
 8018558:	4610      	mov	r0, r2
 801855a:	f7ff f88a 	bl	8017672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801855e:	f001 f8f9 	bl	8019754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018562:	4b0d      	ldr	r3, [pc, #52]	; (8018598 <prvAddNewTaskToReadyList+0xc0>)
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d00e      	beq.n	8018588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801856a:	4b0a      	ldr	r3, [pc, #40]	; (8018594 <prvAddNewTaskToReadyList+0xbc>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018574:	429a      	cmp	r2, r3
 8018576:	d207      	bcs.n	8018588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018578:	4b0b      	ldr	r3, [pc, #44]	; (80185a8 <prvAddNewTaskToReadyList+0xd0>)
 801857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801857e:	601a      	str	r2, [r3, #0]
 8018580:	f3bf 8f4f 	dsb	sy
 8018584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018588:	bf00      	nop
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}
 8018590:	20000554 	.word	0x20000554
 8018594:	20000454 	.word	0x20000454
 8018598:	20000560 	.word	0x20000560
 801859c:	20000570 	.word	0x20000570
 80185a0:	2000055c 	.word	0x2000055c
 80185a4:	20000458 	.word	0x20000458
 80185a8:	e000ed04 	.word	0xe000ed04

080185ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b084      	sub	sp, #16
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80185b4:	2300      	movs	r3, #0
 80185b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d019      	beq.n	80185f2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80185be:	4b14      	ldr	r3, [pc, #80]	; (8018610 <vTaskDelay+0x64>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d00c      	beq.n	80185e0 <vTaskDelay+0x34>
	__asm volatile
 80185c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185ca:	b672      	cpsid	i
 80185cc:	f383 8811 	msr	BASEPRI, r3
 80185d0:	f3bf 8f6f 	isb	sy
 80185d4:	f3bf 8f4f 	dsb	sy
 80185d8:	b662      	cpsie	i
 80185da:	60bb      	str	r3, [r7, #8]
}
 80185dc:	bf00      	nop
 80185de:	e7fe      	b.n	80185de <vTaskDelay+0x32>
			vTaskSuspendAll();
 80185e0:	f000 f87e 	bl	80186e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80185e4:	2100      	movs	r1, #0
 80185e6:	6878      	ldr	r0, [r7, #4]
 80185e8:	f000 ff10 	bl	801940c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80185ec:	f000 f886 	bl	80186fc <xTaskResumeAll>
 80185f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d107      	bne.n	8018608 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80185f8:	4b06      	ldr	r3, [pc, #24]	; (8018614 <vTaskDelay+0x68>)
 80185fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185fe:	601a      	str	r2, [r3, #0]
 8018600:	f3bf 8f4f 	dsb	sy
 8018604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018608:	bf00      	nop
 801860a:	3710      	adds	r7, #16
 801860c:	46bd      	mov	sp, r7
 801860e:	bd80      	pop	{r7, pc}
 8018610:	2000057c 	.word	0x2000057c
 8018614:	e000ed04 	.word	0xe000ed04

08018618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b08a      	sub	sp, #40	; 0x28
 801861c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801861e:	2300      	movs	r3, #0
 8018620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018622:	2300      	movs	r3, #0
 8018624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018626:	463a      	mov	r2, r7
 8018628:	1d39      	adds	r1, r7, #4
 801862a:	f107 0308 	add.w	r3, r7, #8
 801862e:	4618      	mov	r0, r3
 8018630:	f7e9 f8b8 	bl	80017a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018634:	6839      	ldr	r1, [r7, #0]
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	68ba      	ldr	r2, [r7, #8]
 801863a:	9202      	str	r2, [sp, #8]
 801863c:	9301      	str	r3, [sp, #4]
 801863e:	2300      	movs	r3, #0
 8018640:	9300      	str	r3, [sp, #0]
 8018642:	2300      	movs	r3, #0
 8018644:	460a      	mov	r2, r1
 8018646:	4920      	ldr	r1, [pc, #128]	; (80186c8 <vTaskStartScheduler+0xb0>)
 8018648:	4820      	ldr	r0, [pc, #128]	; (80186cc <vTaskStartScheduler+0xb4>)
 801864a:	f7ff fe09 	bl	8018260 <xTaskCreateStatic>
 801864e:	4603      	mov	r3, r0
 8018650:	4a1f      	ldr	r2, [pc, #124]	; (80186d0 <vTaskStartScheduler+0xb8>)
 8018652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018654:	4b1e      	ldr	r3, [pc, #120]	; (80186d0 <vTaskStartScheduler+0xb8>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d002      	beq.n	8018662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801865c:	2301      	movs	r3, #1
 801865e:	617b      	str	r3, [r7, #20]
 8018660:	e001      	b.n	8018666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018662:	2300      	movs	r3, #0
 8018664:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018666:	697b      	ldr	r3, [r7, #20]
 8018668:	2b01      	cmp	r3, #1
 801866a:	d118      	bne.n	801869e <vTaskStartScheduler+0x86>
	__asm volatile
 801866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018670:	b672      	cpsid	i
 8018672:	f383 8811 	msr	BASEPRI, r3
 8018676:	f3bf 8f6f 	isb	sy
 801867a:	f3bf 8f4f 	dsb	sy
 801867e:	b662      	cpsie	i
 8018680:	613b      	str	r3, [r7, #16]
}
 8018682:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018684:	4b13      	ldr	r3, [pc, #76]	; (80186d4 <vTaskStartScheduler+0xbc>)
 8018686:	f04f 32ff 	mov.w	r2, #4294967295
 801868a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801868c:	4b12      	ldr	r3, [pc, #72]	; (80186d8 <vTaskStartScheduler+0xc0>)
 801868e:	2201      	movs	r2, #1
 8018690:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018692:	4b12      	ldr	r3, [pc, #72]	; (80186dc <vTaskStartScheduler+0xc4>)
 8018694:	2200      	movs	r2, #0
 8018696:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018698:	f000 ffaa 	bl	80195f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801869c:	e010      	b.n	80186c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801869e:	697b      	ldr	r3, [r7, #20]
 80186a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186a4:	d10c      	bne.n	80186c0 <vTaskStartScheduler+0xa8>
	__asm volatile
 80186a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186aa:	b672      	cpsid	i
 80186ac:	f383 8811 	msr	BASEPRI, r3
 80186b0:	f3bf 8f6f 	isb	sy
 80186b4:	f3bf 8f4f 	dsb	sy
 80186b8:	b662      	cpsie	i
 80186ba:	60fb      	str	r3, [r7, #12]
}
 80186bc:	bf00      	nop
 80186be:	e7fe      	b.n	80186be <vTaskStartScheduler+0xa6>
}
 80186c0:	bf00      	nop
 80186c2:	3718      	adds	r7, #24
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	0801ccac 	.word	0x0801ccac
 80186cc:	08018d19 	.word	0x08018d19
 80186d0:	20000578 	.word	0x20000578
 80186d4:	20000574 	.word	0x20000574
 80186d8:	20000560 	.word	0x20000560
 80186dc:	20000558 	.word	0x20000558

080186e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80186e0:	b480      	push	{r7}
 80186e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80186e4:	4b04      	ldr	r3, [pc, #16]	; (80186f8 <vTaskSuspendAll+0x18>)
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	3301      	adds	r3, #1
 80186ea:	4a03      	ldr	r2, [pc, #12]	; (80186f8 <vTaskSuspendAll+0x18>)
 80186ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80186ee:	bf00      	nop
 80186f0:	46bd      	mov	sp, r7
 80186f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f6:	4770      	bx	lr
 80186f8:	2000057c 	.word	0x2000057c

080186fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b084      	sub	sp, #16
 8018700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018702:	2300      	movs	r3, #0
 8018704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018706:	2300      	movs	r3, #0
 8018708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801870a:	4b42      	ldr	r3, [pc, #264]	; (8018814 <xTaskResumeAll+0x118>)
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d10c      	bne.n	801872c <xTaskResumeAll+0x30>
	__asm volatile
 8018712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018716:	b672      	cpsid	i
 8018718:	f383 8811 	msr	BASEPRI, r3
 801871c:	f3bf 8f6f 	isb	sy
 8018720:	f3bf 8f4f 	dsb	sy
 8018724:	b662      	cpsie	i
 8018726:	603b      	str	r3, [r7, #0]
}
 8018728:	bf00      	nop
 801872a:	e7fe      	b.n	801872a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801872c:	f000 ffde 	bl	80196ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018730:	4b38      	ldr	r3, [pc, #224]	; (8018814 <xTaskResumeAll+0x118>)
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	3b01      	subs	r3, #1
 8018736:	4a37      	ldr	r2, [pc, #220]	; (8018814 <xTaskResumeAll+0x118>)
 8018738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801873a:	4b36      	ldr	r3, [pc, #216]	; (8018814 <xTaskResumeAll+0x118>)
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d161      	bne.n	8018806 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018742:	4b35      	ldr	r3, [pc, #212]	; (8018818 <xTaskResumeAll+0x11c>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d05d      	beq.n	8018806 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801874a:	e02e      	b.n	80187aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801874c:	4b33      	ldr	r3, [pc, #204]	; (801881c <xTaskResumeAll+0x120>)
 801874e:	68db      	ldr	r3, [r3, #12]
 8018750:	68db      	ldr	r3, [r3, #12]
 8018752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	3318      	adds	r3, #24
 8018758:	4618      	mov	r0, r3
 801875a:	f7fe ffe7 	bl	801772c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	3304      	adds	r3, #4
 8018762:	4618      	mov	r0, r3
 8018764:	f7fe ffe2 	bl	801772c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801876c:	2201      	movs	r2, #1
 801876e:	409a      	lsls	r2, r3
 8018770:	4b2b      	ldr	r3, [pc, #172]	; (8018820 <xTaskResumeAll+0x124>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	4313      	orrs	r3, r2
 8018776:	4a2a      	ldr	r2, [pc, #168]	; (8018820 <xTaskResumeAll+0x124>)
 8018778:	6013      	str	r3, [r2, #0]
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801877e:	4613      	mov	r3, r2
 8018780:	009b      	lsls	r3, r3, #2
 8018782:	4413      	add	r3, r2
 8018784:	009b      	lsls	r3, r3, #2
 8018786:	4a27      	ldr	r2, [pc, #156]	; (8018824 <xTaskResumeAll+0x128>)
 8018788:	441a      	add	r2, r3
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	3304      	adds	r3, #4
 801878e:	4619      	mov	r1, r3
 8018790:	4610      	mov	r0, r2
 8018792:	f7fe ff6e 	bl	8017672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801879a:	4b23      	ldr	r3, [pc, #140]	; (8018828 <xTaskResumeAll+0x12c>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187a0:	429a      	cmp	r2, r3
 80187a2:	d302      	bcc.n	80187aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80187a4:	4b21      	ldr	r3, [pc, #132]	; (801882c <xTaskResumeAll+0x130>)
 80187a6:	2201      	movs	r2, #1
 80187a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80187aa:	4b1c      	ldr	r3, [pc, #112]	; (801881c <xTaskResumeAll+0x120>)
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d1cc      	bne.n	801874c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d001      	beq.n	80187bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80187b8:	f000 fb68 	bl	8018e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80187bc:	4b1c      	ldr	r3, [pc, #112]	; (8018830 <xTaskResumeAll+0x134>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d010      	beq.n	80187ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80187c8:	f000 f858 	bl	801887c <xTaskIncrementTick>
 80187cc:	4603      	mov	r3, r0
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d002      	beq.n	80187d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80187d2:	4b16      	ldr	r3, [pc, #88]	; (801882c <xTaskResumeAll+0x130>)
 80187d4:	2201      	movs	r2, #1
 80187d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	3b01      	subs	r3, #1
 80187dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d1f1      	bne.n	80187c8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80187e4:	4b12      	ldr	r3, [pc, #72]	; (8018830 <xTaskResumeAll+0x134>)
 80187e6:	2200      	movs	r2, #0
 80187e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80187ea:	4b10      	ldr	r3, [pc, #64]	; (801882c <xTaskResumeAll+0x130>)
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d009      	beq.n	8018806 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80187f2:	2301      	movs	r3, #1
 80187f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80187f6:	4b0f      	ldr	r3, [pc, #60]	; (8018834 <xTaskResumeAll+0x138>)
 80187f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187fc:	601a      	str	r2, [r3, #0]
 80187fe:	f3bf 8f4f 	dsb	sy
 8018802:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018806:	f000 ffa5 	bl	8019754 <vPortExitCritical>

	return xAlreadyYielded;
 801880a:	68bb      	ldr	r3, [r7, #8]
}
 801880c:	4618      	mov	r0, r3
 801880e:	3710      	adds	r7, #16
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}
 8018814:	2000057c 	.word	0x2000057c
 8018818:	20000554 	.word	0x20000554
 801881c:	20000514 	.word	0x20000514
 8018820:	2000055c 	.word	0x2000055c
 8018824:	20000458 	.word	0x20000458
 8018828:	20000454 	.word	0x20000454
 801882c:	20000568 	.word	0x20000568
 8018830:	20000564 	.word	0x20000564
 8018834:	e000ed04 	.word	0xe000ed04

08018838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018838:	b480      	push	{r7}
 801883a:	b083      	sub	sp, #12
 801883c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801883e:	4b05      	ldr	r3, [pc, #20]	; (8018854 <xTaskGetTickCount+0x1c>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018844:	687b      	ldr	r3, [r7, #4]
}
 8018846:	4618      	mov	r0, r3
 8018848:	370c      	adds	r7, #12
 801884a:	46bd      	mov	sp, r7
 801884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018850:	4770      	bx	lr
 8018852:	bf00      	nop
 8018854:	20000558 	.word	0x20000558

08018858 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801885e:	f001 f82d 	bl	80198bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8018862:	2300      	movs	r3, #0
 8018864:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018866:	4b04      	ldr	r3, [pc, #16]	; (8018878 <xTaskGetTickCountFromISR+0x20>)
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801886c:	683b      	ldr	r3, [r7, #0]
}
 801886e:	4618      	mov	r0, r3
 8018870:	3708      	adds	r7, #8
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
 8018876:	bf00      	nop
 8018878:	20000558 	.word	0x20000558

0801887c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b086      	sub	sp, #24
 8018880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018882:	2300      	movs	r3, #0
 8018884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018886:	4b4f      	ldr	r3, [pc, #316]	; (80189c4 <xTaskIncrementTick+0x148>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	2b00      	cmp	r3, #0
 801888c:	f040 808a 	bne.w	80189a4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018890:	4b4d      	ldr	r3, [pc, #308]	; (80189c8 <xTaskIncrementTick+0x14c>)
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	3301      	adds	r3, #1
 8018896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018898:	4a4b      	ldr	r2, [pc, #300]	; (80189c8 <xTaskIncrementTick+0x14c>)
 801889a:	693b      	ldr	r3, [r7, #16]
 801889c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801889e:	693b      	ldr	r3, [r7, #16]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d122      	bne.n	80188ea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80188a4:	4b49      	ldr	r3, [pc, #292]	; (80189cc <xTaskIncrementTick+0x150>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d00c      	beq.n	80188c8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80188ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b2:	b672      	cpsid	i
 80188b4:	f383 8811 	msr	BASEPRI, r3
 80188b8:	f3bf 8f6f 	isb	sy
 80188bc:	f3bf 8f4f 	dsb	sy
 80188c0:	b662      	cpsie	i
 80188c2:	603b      	str	r3, [r7, #0]
}
 80188c4:	bf00      	nop
 80188c6:	e7fe      	b.n	80188c6 <xTaskIncrementTick+0x4a>
 80188c8:	4b40      	ldr	r3, [pc, #256]	; (80189cc <xTaskIncrementTick+0x150>)
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	60fb      	str	r3, [r7, #12]
 80188ce:	4b40      	ldr	r3, [pc, #256]	; (80189d0 <xTaskIncrementTick+0x154>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	4a3e      	ldr	r2, [pc, #248]	; (80189cc <xTaskIncrementTick+0x150>)
 80188d4:	6013      	str	r3, [r2, #0]
 80188d6:	4a3e      	ldr	r2, [pc, #248]	; (80189d0 <xTaskIncrementTick+0x154>)
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	6013      	str	r3, [r2, #0]
 80188dc:	4b3d      	ldr	r3, [pc, #244]	; (80189d4 <xTaskIncrementTick+0x158>)
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	3301      	adds	r3, #1
 80188e2:	4a3c      	ldr	r2, [pc, #240]	; (80189d4 <xTaskIncrementTick+0x158>)
 80188e4:	6013      	str	r3, [r2, #0]
 80188e6:	f000 fad1 	bl	8018e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80188ea:	4b3b      	ldr	r3, [pc, #236]	; (80189d8 <xTaskIncrementTick+0x15c>)
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	693a      	ldr	r2, [r7, #16]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d348      	bcc.n	8018986 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80188f4:	4b35      	ldr	r3, [pc, #212]	; (80189cc <xTaskIncrementTick+0x150>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d104      	bne.n	8018908 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80188fe:	4b36      	ldr	r3, [pc, #216]	; (80189d8 <xTaskIncrementTick+0x15c>)
 8018900:	f04f 32ff 	mov.w	r2, #4294967295
 8018904:	601a      	str	r2, [r3, #0]
					break;
 8018906:	e03e      	b.n	8018986 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018908:	4b30      	ldr	r3, [pc, #192]	; (80189cc <xTaskIncrementTick+0x150>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	68db      	ldr	r3, [r3, #12]
 801890e:	68db      	ldr	r3, [r3, #12]
 8018910:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018912:	68bb      	ldr	r3, [r7, #8]
 8018914:	685b      	ldr	r3, [r3, #4]
 8018916:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018918:	693a      	ldr	r2, [r7, #16]
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	429a      	cmp	r2, r3
 801891e:	d203      	bcs.n	8018928 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018920:	4a2d      	ldr	r2, [pc, #180]	; (80189d8 <xTaskIncrementTick+0x15c>)
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018926:	e02e      	b.n	8018986 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018928:	68bb      	ldr	r3, [r7, #8]
 801892a:	3304      	adds	r3, #4
 801892c:	4618      	mov	r0, r3
 801892e:	f7fe fefd 	bl	801772c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018936:	2b00      	cmp	r3, #0
 8018938:	d004      	beq.n	8018944 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	3318      	adds	r3, #24
 801893e:	4618      	mov	r0, r3
 8018940:	f7fe fef4 	bl	801772c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018944:	68bb      	ldr	r3, [r7, #8]
 8018946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018948:	2201      	movs	r2, #1
 801894a:	409a      	lsls	r2, r3
 801894c:	4b23      	ldr	r3, [pc, #140]	; (80189dc <xTaskIncrementTick+0x160>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	4313      	orrs	r3, r2
 8018952:	4a22      	ldr	r2, [pc, #136]	; (80189dc <xTaskIncrementTick+0x160>)
 8018954:	6013      	str	r3, [r2, #0]
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801895a:	4613      	mov	r3, r2
 801895c:	009b      	lsls	r3, r3, #2
 801895e:	4413      	add	r3, r2
 8018960:	009b      	lsls	r3, r3, #2
 8018962:	4a1f      	ldr	r2, [pc, #124]	; (80189e0 <xTaskIncrementTick+0x164>)
 8018964:	441a      	add	r2, r3
 8018966:	68bb      	ldr	r3, [r7, #8]
 8018968:	3304      	adds	r3, #4
 801896a:	4619      	mov	r1, r3
 801896c:	4610      	mov	r0, r2
 801896e:	f7fe fe80 	bl	8017672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018972:	68bb      	ldr	r3, [r7, #8]
 8018974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018976:	4b1b      	ldr	r3, [pc, #108]	; (80189e4 <xTaskIncrementTick+0x168>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801897c:	429a      	cmp	r2, r3
 801897e:	d3b9      	bcc.n	80188f4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8018980:	2301      	movs	r3, #1
 8018982:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018984:	e7b6      	b.n	80188f4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018986:	4b17      	ldr	r3, [pc, #92]	; (80189e4 <xTaskIncrementTick+0x168>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801898c:	4914      	ldr	r1, [pc, #80]	; (80189e0 <xTaskIncrementTick+0x164>)
 801898e:	4613      	mov	r3, r2
 8018990:	009b      	lsls	r3, r3, #2
 8018992:	4413      	add	r3, r2
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	440b      	add	r3, r1
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	2b01      	cmp	r3, #1
 801899c:	d907      	bls.n	80189ae <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801899e:	2301      	movs	r3, #1
 80189a0:	617b      	str	r3, [r7, #20]
 80189a2:	e004      	b.n	80189ae <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80189a4:	4b10      	ldr	r3, [pc, #64]	; (80189e8 <xTaskIncrementTick+0x16c>)
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	3301      	adds	r3, #1
 80189aa:	4a0f      	ldr	r2, [pc, #60]	; (80189e8 <xTaskIncrementTick+0x16c>)
 80189ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80189ae:	4b0f      	ldr	r3, [pc, #60]	; (80189ec <xTaskIncrementTick+0x170>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d001      	beq.n	80189ba <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80189b6:	2301      	movs	r3, #1
 80189b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80189ba:	697b      	ldr	r3, [r7, #20]
}
 80189bc:	4618      	mov	r0, r3
 80189be:	3718      	adds	r7, #24
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	2000057c 	.word	0x2000057c
 80189c8:	20000558 	.word	0x20000558
 80189cc:	2000050c 	.word	0x2000050c
 80189d0:	20000510 	.word	0x20000510
 80189d4:	2000056c 	.word	0x2000056c
 80189d8:	20000574 	.word	0x20000574
 80189dc:	2000055c 	.word	0x2000055c
 80189e0:	20000458 	.word	0x20000458
 80189e4:	20000454 	.word	0x20000454
 80189e8:	20000564 	.word	0x20000564
 80189ec:	20000568 	.word	0x20000568

080189f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b088      	sub	sp, #32
 80189f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80189f6:	4b3a      	ldr	r3, [pc, #232]	; (8018ae0 <vTaskSwitchContext+0xf0>)
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d003      	beq.n	8018a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80189fe:	4b39      	ldr	r3, [pc, #228]	; (8018ae4 <vTaskSwitchContext+0xf4>)
 8018a00:	2201      	movs	r2, #1
 8018a02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018a04:	e068      	b.n	8018ad8 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8018a06:	4b37      	ldr	r3, [pc, #220]	; (8018ae4 <vTaskSwitchContext+0xf4>)
 8018a08:	2200      	movs	r2, #0
 8018a0a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018a0c:	4b36      	ldr	r3, [pc, #216]	; (8018ae8 <vTaskSwitchContext+0xf8>)
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a12:	61fb      	str	r3, [r7, #28]
 8018a14:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8018a18:	61bb      	str	r3, [r7, #24]
 8018a1a:	69fb      	ldr	r3, [r7, #28]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	69ba      	ldr	r2, [r7, #24]
 8018a20:	429a      	cmp	r2, r3
 8018a22:	d111      	bne.n	8018a48 <vTaskSwitchContext+0x58>
 8018a24:	69fb      	ldr	r3, [r7, #28]
 8018a26:	3304      	adds	r3, #4
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	69ba      	ldr	r2, [r7, #24]
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d10b      	bne.n	8018a48 <vTaskSwitchContext+0x58>
 8018a30:	69fb      	ldr	r3, [r7, #28]
 8018a32:	3308      	adds	r3, #8
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	69ba      	ldr	r2, [r7, #24]
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	d105      	bne.n	8018a48 <vTaskSwitchContext+0x58>
 8018a3c:	69fb      	ldr	r3, [r7, #28]
 8018a3e:	330c      	adds	r3, #12
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	69ba      	ldr	r2, [r7, #24]
 8018a44:	429a      	cmp	r2, r3
 8018a46:	d008      	beq.n	8018a5a <vTaskSwitchContext+0x6a>
 8018a48:	4b27      	ldr	r3, [pc, #156]	; (8018ae8 <vTaskSwitchContext+0xf8>)
 8018a4a:	681a      	ldr	r2, [r3, #0]
 8018a4c:	4b26      	ldr	r3, [pc, #152]	; (8018ae8 <vTaskSwitchContext+0xf8>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	3334      	adds	r3, #52	; 0x34
 8018a52:	4619      	mov	r1, r3
 8018a54:	4610      	mov	r0, r2
 8018a56:	f7e8 fe92 	bl	800177e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a5a:	4b24      	ldr	r3, [pc, #144]	; (8018aec <vTaskSwitchContext+0xfc>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	fab3 f383 	clz	r3, r3
 8018a66:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018a68:	7afb      	ldrb	r3, [r7, #11]
 8018a6a:	f1c3 031f 	rsb	r3, r3, #31
 8018a6e:	617b      	str	r3, [r7, #20]
 8018a70:	491f      	ldr	r1, [pc, #124]	; (8018af0 <vTaskSwitchContext+0x100>)
 8018a72:	697a      	ldr	r2, [r7, #20]
 8018a74:	4613      	mov	r3, r2
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	4413      	add	r3, r2
 8018a7a:	009b      	lsls	r3, r3, #2
 8018a7c:	440b      	add	r3, r1
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d10c      	bne.n	8018a9e <vTaskSwitchContext+0xae>
	__asm volatile
 8018a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a88:	b672      	cpsid	i
 8018a8a:	f383 8811 	msr	BASEPRI, r3
 8018a8e:	f3bf 8f6f 	isb	sy
 8018a92:	f3bf 8f4f 	dsb	sy
 8018a96:	b662      	cpsie	i
 8018a98:	607b      	str	r3, [r7, #4]
}
 8018a9a:	bf00      	nop
 8018a9c:	e7fe      	b.n	8018a9c <vTaskSwitchContext+0xac>
 8018a9e:	697a      	ldr	r2, [r7, #20]
 8018aa0:	4613      	mov	r3, r2
 8018aa2:	009b      	lsls	r3, r3, #2
 8018aa4:	4413      	add	r3, r2
 8018aa6:	009b      	lsls	r3, r3, #2
 8018aa8:	4a11      	ldr	r2, [pc, #68]	; (8018af0 <vTaskSwitchContext+0x100>)
 8018aaa:	4413      	add	r3, r2
 8018aac:	613b      	str	r3, [r7, #16]
 8018aae:	693b      	ldr	r3, [r7, #16]
 8018ab0:	685b      	ldr	r3, [r3, #4]
 8018ab2:	685a      	ldr	r2, [r3, #4]
 8018ab4:	693b      	ldr	r3, [r7, #16]
 8018ab6:	605a      	str	r2, [r3, #4]
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	685a      	ldr	r2, [r3, #4]
 8018abc:	693b      	ldr	r3, [r7, #16]
 8018abe:	3308      	adds	r3, #8
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d104      	bne.n	8018ace <vTaskSwitchContext+0xde>
 8018ac4:	693b      	ldr	r3, [r7, #16]
 8018ac6:	685b      	ldr	r3, [r3, #4]
 8018ac8:	685a      	ldr	r2, [r3, #4]
 8018aca:	693b      	ldr	r3, [r7, #16]
 8018acc:	605a      	str	r2, [r3, #4]
 8018ace:	693b      	ldr	r3, [r7, #16]
 8018ad0:	685b      	ldr	r3, [r3, #4]
 8018ad2:	68db      	ldr	r3, [r3, #12]
 8018ad4:	4a04      	ldr	r2, [pc, #16]	; (8018ae8 <vTaskSwitchContext+0xf8>)
 8018ad6:	6013      	str	r3, [r2, #0]
}
 8018ad8:	bf00      	nop
 8018ada:	3720      	adds	r7, #32
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}
 8018ae0:	2000057c 	.word	0x2000057c
 8018ae4:	20000568 	.word	0x20000568
 8018ae8:	20000454 	.word	0x20000454
 8018aec:	2000055c 	.word	0x2000055c
 8018af0:	20000458 	.word	0x20000458

08018af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b084      	sub	sp, #16
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
 8018afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d10c      	bne.n	8018b1e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8018b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b08:	b672      	cpsid	i
 8018b0a:	f383 8811 	msr	BASEPRI, r3
 8018b0e:	f3bf 8f6f 	isb	sy
 8018b12:	f3bf 8f4f 	dsb	sy
 8018b16:	b662      	cpsie	i
 8018b18:	60fb      	str	r3, [r7, #12]
}
 8018b1a:	bf00      	nop
 8018b1c:	e7fe      	b.n	8018b1c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018b1e:	4b07      	ldr	r3, [pc, #28]	; (8018b3c <vTaskPlaceOnEventList+0x48>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	3318      	adds	r3, #24
 8018b24:	4619      	mov	r1, r3
 8018b26:	6878      	ldr	r0, [r7, #4]
 8018b28:	f7fe fdc7 	bl	80176ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018b2c:	2101      	movs	r1, #1
 8018b2e:	6838      	ldr	r0, [r7, #0]
 8018b30:	f000 fc6c 	bl	801940c <prvAddCurrentTaskToDelayedList>
}
 8018b34:	bf00      	nop
 8018b36:	3710      	adds	r7, #16
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}
 8018b3c:	20000454 	.word	0x20000454

08018b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b086      	sub	sp, #24
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	68db      	ldr	r3, [r3, #12]
 8018b4c:	68db      	ldr	r3, [r3, #12]
 8018b4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018b50:	693b      	ldr	r3, [r7, #16]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d10c      	bne.n	8018b70 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8018b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b5a:	b672      	cpsid	i
 8018b5c:	f383 8811 	msr	BASEPRI, r3
 8018b60:	f3bf 8f6f 	isb	sy
 8018b64:	f3bf 8f4f 	dsb	sy
 8018b68:	b662      	cpsie	i
 8018b6a:	60fb      	str	r3, [r7, #12]
}
 8018b6c:	bf00      	nop
 8018b6e:	e7fe      	b.n	8018b6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018b70:	693b      	ldr	r3, [r7, #16]
 8018b72:	3318      	adds	r3, #24
 8018b74:	4618      	mov	r0, r3
 8018b76:	f7fe fdd9 	bl	801772c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b7a:	4b1d      	ldr	r3, [pc, #116]	; (8018bf0 <xTaskRemoveFromEventList+0xb0>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d11c      	bne.n	8018bbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018b82:	693b      	ldr	r3, [r7, #16]
 8018b84:	3304      	adds	r3, #4
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7fe fdd0 	bl	801772c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018b8c:	693b      	ldr	r3, [r7, #16]
 8018b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b90:	2201      	movs	r2, #1
 8018b92:	409a      	lsls	r2, r3
 8018b94:	4b17      	ldr	r3, [pc, #92]	; (8018bf4 <xTaskRemoveFromEventList+0xb4>)
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	4313      	orrs	r3, r2
 8018b9a:	4a16      	ldr	r2, [pc, #88]	; (8018bf4 <xTaskRemoveFromEventList+0xb4>)
 8018b9c:	6013      	str	r3, [r2, #0]
 8018b9e:	693b      	ldr	r3, [r7, #16]
 8018ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	009b      	lsls	r3, r3, #2
 8018ba6:	4413      	add	r3, r2
 8018ba8:	009b      	lsls	r3, r3, #2
 8018baa:	4a13      	ldr	r2, [pc, #76]	; (8018bf8 <xTaskRemoveFromEventList+0xb8>)
 8018bac:	441a      	add	r2, r3
 8018bae:	693b      	ldr	r3, [r7, #16]
 8018bb0:	3304      	adds	r3, #4
 8018bb2:	4619      	mov	r1, r3
 8018bb4:	4610      	mov	r0, r2
 8018bb6:	f7fe fd5c 	bl	8017672 <vListInsertEnd>
 8018bba:	e005      	b.n	8018bc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018bbc:	693b      	ldr	r3, [r7, #16]
 8018bbe:	3318      	adds	r3, #24
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	480e      	ldr	r0, [pc, #56]	; (8018bfc <xTaskRemoveFromEventList+0xbc>)
 8018bc4:	f7fe fd55 	bl	8017672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018bc8:	693b      	ldr	r3, [r7, #16]
 8018bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bcc:	4b0c      	ldr	r3, [pc, #48]	; (8018c00 <xTaskRemoveFromEventList+0xc0>)
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	d905      	bls.n	8018be2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018bda:	4b0a      	ldr	r3, [pc, #40]	; (8018c04 <xTaskRemoveFromEventList+0xc4>)
 8018bdc:	2201      	movs	r2, #1
 8018bde:	601a      	str	r2, [r3, #0]
 8018be0:	e001      	b.n	8018be6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8018be2:	2300      	movs	r3, #0
 8018be4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018be6:	697b      	ldr	r3, [r7, #20]
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	3718      	adds	r7, #24
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	2000057c 	.word	0x2000057c
 8018bf4:	2000055c 	.word	0x2000055c
 8018bf8:	20000458 	.word	0x20000458
 8018bfc:	20000514 	.word	0x20000514
 8018c00:	20000454 	.word	0x20000454
 8018c04:	20000568 	.word	0x20000568

08018c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018c08:	b480      	push	{r7}
 8018c0a:	b083      	sub	sp, #12
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018c10:	4b06      	ldr	r3, [pc, #24]	; (8018c2c <vTaskInternalSetTimeOutState+0x24>)
 8018c12:	681a      	ldr	r2, [r3, #0]
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018c18:	4b05      	ldr	r3, [pc, #20]	; (8018c30 <vTaskInternalSetTimeOutState+0x28>)
 8018c1a:	681a      	ldr	r2, [r3, #0]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	605a      	str	r2, [r3, #4]
}
 8018c20:	bf00      	nop
 8018c22:	370c      	adds	r7, #12
 8018c24:	46bd      	mov	sp, r7
 8018c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2a:	4770      	bx	lr
 8018c2c:	2000056c 	.word	0x2000056c
 8018c30:	20000558 	.word	0x20000558

08018c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b088      	sub	sp, #32
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
 8018c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d10c      	bne.n	8018c5e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8018c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c48:	b672      	cpsid	i
 8018c4a:	f383 8811 	msr	BASEPRI, r3
 8018c4e:	f3bf 8f6f 	isb	sy
 8018c52:	f3bf 8f4f 	dsb	sy
 8018c56:	b662      	cpsie	i
 8018c58:	613b      	str	r3, [r7, #16]
}
 8018c5a:	bf00      	nop
 8018c5c:	e7fe      	b.n	8018c5c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d10c      	bne.n	8018c7e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8018c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c68:	b672      	cpsid	i
 8018c6a:	f383 8811 	msr	BASEPRI, r3
 8018c6e:	f3bf 8f6f 	isb	sy
 8018c72:	f3bf 8f4f 	dsb	sy
 8018c76:	b662      	cpsie	i
 8018c78:	60fb      	str	r3, [r7, #12]
}
 8018c7a:	bf00      	nop
 8018c7c:	e7fe      	b.n	8018c7c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8018c7e:	f000 fd35 	bl	80196ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018c82:	4b1d      	ldr	r3, [pc, #116]	; (8018cf8 <xTaskCheckForTimeOut+0xc4>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	685b      	ldr	r3, [r3, #4]
 8018c8c:	69ba      	ldr	r2, [r7, #24]
 8018c8e:	1ad3      	subs	r3, r2, r3
 8018c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c9a:	d102      	bne.n	8018ca2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	61fb      	str	r3, [r7, #28]
 8018ca0:	e023      	b.n	8018cea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	681a      	ldr	r2, [r3, #0]
 8018ca6:	4b15      	ldr	r3, [pc, #84]	; (8018cfc <xTaskCheckForTimeOut+0xc8>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d007      	beq.n	8018cbe <xTaskCheckForTimeOut+0x8a>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	685b      	ldr	r3, [r3, #4]
 8018cb2:	69ba      	ldr	r2, [r7, #24]
 8018cb4:	429a      	cmp	r2, r3
 8018cb6:	d302      	bcc.n	8018cbe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018cb8:	2301      	movs	r3, #1
 8018cba:	61fb      	str	r3, [r7, #28]
 8018cbc:	e015      	b.n	8018cea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	697a      	ldr	r2, [r7, #20]
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	d20b      	bcs.n	8018ce0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	681a      	ldr	r2, [r3, #0]
 8018ccc:	697b      	ldr	r3, [r7, #20]
 8018cce:	1ad2      	subs	r2, r2, r3
 8018cd0:	683b      	ldr	r3, [r7, #0]
 8018cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018cd4:	6878      	ldr	r0, [r7, #4]
 8018cd6:	f7ff ff97 	bl	8018c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018cda:	2300      	movs	r3, #0
 8018cdc:	61fb      	str	r3, [r7, #28]
 8018cde:	e004      	b.n	8018cea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018cea:	f000 fd33 	bl	8019754 <vPortExitCritical>

	return xReturn;
 8018cee:	69fb      	ldr	r3, [r7, #28]
}
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	3720      	adds	r7, #32
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	bd80      	pop	{r7, pc}
 8018cf8:	20000558 	.word	0x20000558
 8018cfc:	2000056c 	.word	0x2000056c

08018d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018d00:	b480      	push	{r7}
 8018d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018d04:	4b03      	ldr	r3, [pc, #12]	; (8018d14 <vTaskMissedYield+0x14>)
 8018d06:	2201      	movs	r2, #1
 8018d08:	601a      	str	r2, [r3, #0]
}
 8018d0a:	bf00      	nop
 8018d0c:	46bd      	mov	sp, r7
 8018d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d12:	4770      	bx	lr
 8018d14:	20000568 	.word	0x20000568

08018d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b082      	sub	sp, #8
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018d20:	f000 f854 	bl	8018dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018d24:	4b07      	ldr	r3, [pc, #28]	; (8018d44 <prvIdleTask+0x2c>)
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	2b01      	cmp	r3, #1
 8018d2a:	d907      	bls.n	8018d3c <prvIdleTask+0x24>
			{
				taskYIELD();
 8018d2c:	4b06      	ldr	r3, [pc, #24]	; (8018d48 <prvIdleTask+0x30>)
 8018d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d32:	601a      	str	r2, [r3, #0]
 8018d34:	f3bf 8f4f 	dsb	sy
 8018d38:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8018d3c:	f7e8 fd18 	bl	8001770 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8018d40:	e7ee      	b.n	8018d20 <prvIdleTask+0x8>
 8018d42:	bf00      	nop
 8018d44:	20000458 	.word	0x20000458
 8018d48:	e000ed04 	.word	0xe000ed04

08018d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b082      	sub	sp, #8
 8018d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018d52:	2300      	movs	r3, #0
 8018d54:	607b      	str	r3, [r7, #4]
 8018d56:	e00c      	b.n	8018d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018d58:	687a      	ldr	r2, [r7, #4]
 8018d5a:	4613      	mov	r3, r2
 8018d5c:	009b      	lsls	r3, r3, #2
 8018d5e:	4413      	add	r3, r2
 8018d60:	009b      	lsls	r3, r3, #2
 8018d62:	4a12      	ldr	r2, [pc, #72]	; (8018dac <prvInitialiseTaskLists+0x60>)
 8018d64:	4413      	add	r3, r2
 8018d66:	4618      	mov	r0, r3
 8018d68:	f7fe fc56 	bl	8017618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	3301      	adds	r3, #1
 8018d70:	607b      	str	r3, [r7, #4]
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	2b06      	cmp	r3, #6
 8018d76:	d9ef      	bls.n	8018d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018d78:	480d      	ldr	r0, [pc, #52]	; (8018db0 <prvInitialiseTaskLists+0x64>)
 8018d7a:	f7fe fc4d 	bl	8017618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018d7e:	480d      	ldr	r0, [pc, #52]	; (8018db4 <prvInitialiseTaskLists+0x68>)
 8018d80:	f7fe fc4a 	bl	8017618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018d84:	480c      	ldr	r0, [pc, #48]	; (8018db8 <prvInitialiseTaskLists+0x6c>)
 8018d86:	f7fe fc47 	bl	8017618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018d8a:	480c      	ldr	r0, [pc, #48]	; (8018dbc <prvInitialiseTaskLists+0x70>)
 8018d8c:	f7fe fc44 	bl	8017618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018d90:	480b      	ldr	r0, [pc, #44]	; (8018dc0 <prvInitialiseTaskLists+0x74>)
 8018d92:	f7fe fc41 	bl	8017618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018d96:	4b0b      	ldr	r3, [pc, #44]	; (8018dc4 <prvInitialiseTaskLists+0x78>)
 8018d98:	4a05      	ldr	r2, [pc, #20]	; (8018db0 <prvInitialiseTaskLists+0x64>)
 8018d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018d9c:	4b0a      	ldr	r3, [pc, #40]	; (8018dc8 <prvInitialiseTaskLists+0x7c>)
 8018d9e:	4a05      	ldr	r2, [pc, #20]	; (8018db4 <prvInitialiseTaskLists+0x68>)
 8018da0:	601a      	str	r2, [r3, #0]
}
 8018da2:	bf00      	nop
 8018da4:	3708      	adds	r7, #8
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}
 8018daa:	bf00      	nop
 8018dac:	20000458 	.word	0x20000458
 8018db0:	200004e4 	.word	0x200004e4
 8018db4:	200004f8 	.word	0x200004f8
 8018db8:	20000514 	.word	0x20000514
 8018dbc:	20000528 	.word	0x20000528
 8018dc0:	20000540 	.word	0x20000540
 8018dc4:	2000050c 	.word	0x2000050c
 8018dc8:	20000510 	.word	0x20000510

08018dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b082      	sub	sp, #8
 8018dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018dd2:	e019      	b.n	8018e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018dd4:	f000 fc8a 	bl	80196ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018dd8:	4b10      	ldr	r3, [pc, #64]	; (8018e1c <prvCheckTasksWaitingTermination+0x50>)
 8018dda:	68db      	ldr	r3, [r3, #12]
 8018ddc:	68db      	ldr	r3, [r3, #12]
 8018dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	3304      	adds	r3, #4
 8018de4:	4618      	mov	r0, r3
 8018de6:	f7fe fca1 	bl	801772c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018dea:	4b0d      	ldr	r3, [pc, #52]	; (8018e20 <prvCheckTasksWaitingTermination+0x54>)
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	3b01      	subs	r3, #1
 8018df0:	4a0b      	ldr	r2, [pc, #44]	; (8018e20 <prvCheckTasksWaitingTermination+0x54>)
 8018df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018df4:	4b0b      	ldr	r3, [pc, #44]	; (8018e24 <prvCheckTasksWaitingTermination+0x58>)
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	3b01      	subs	r3, #1
 8018dfa:	4a0a      	ldr	r2, [pc, #40]	; (8018e24 <prvCheckTasksWaitingTermination+0x58>)
 8018dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018dfe:	f000 fca9 	bl	8019754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018e02:	6878      	ldr	r0, [r7, #4]
 8018e04:	f000 f810 	bl	8018e28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018e08:	4b06      	ldr	r3, [pc, #24]	; (8018e24 <prvCheckTasksWaitingTermination+0x58>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d1e1      	bne.n	8018dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018e10:	bf00      	nop
 8018e12:	bf00      	nop
 8018e14:	3708      	adds	r7, #8
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd80      	pop	{r7, pc}
 8018e1a:	bf00      	nop
 8018e1c:	20000528 	.word	0x20000528
 8018e20:	20000554 	.word	0x20000554
 8018e24:	2000053c 	.word	0x2000053c

08018e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b084      	sub	sp, #16
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d108      	bne.n	8018e4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f000 fe50 	bl	8019ae4 <vPortFree>
				vPortFree( pxTCB );
 8018e44:	6878      	ldr	r0, [r7, #4]
 8018e46:	f000 fe4d 	bl	8019ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018e4a:	e01a      	b.n	8018e82 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8018e52:	2b01      	cmp	r3, #1
 8018e54:	d103      	bne.n	8018e5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018e56:	6878      	ldr	r0, [r7, #4]
 8018e58:	f000 fe44 	bl	8019ae4 <vPortFree>
	}
 8018e5c:	e011      	b.n	8018e82 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8018e64:	2b02      	cmp	r3, #2
 8018e66:	d00c      	beq.n	8018e82 <prvDeleteTCB+0x5a>
	__asm volatile
 8018e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e6c:	b672      	cpsid	i
 8018e6e:	f383 8811 	msr	BASEPRI, r3
 8018e72:	f3bf 8f6f 	isb	sy
 8018e76:	f3bf 8f4f 	dsb	sy
 8018e7a:	b662      	cpsie	i
 8018e7c:	60fb      	str	r3, [r7, #12]
}
 8018e7e:	bf00      	nop
 8018e80:	e7fe      	b.n	8018e80 <prvDeleteTCB+0x58>
	}
 8018e82:	bf00      	nop
 8018e84:	3710      	adds	r7, #16
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}
	...

08018e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018e8c:	b480      	push	{r7}
 8018e8e:	b083      	sub	sp, #12
 8018e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e92:	4b0c      	ldr	r3, [pc, #48]	; (8018ec4 <prvResetNextTaskUnblockTime+0x38>)
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d104      	bne.n	8018ea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018e9c:	4b0a      	ldr	r3, [pc, #40]	; (8018ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8018e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8018ea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018ea4:	e008      	b.n	8018eb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ea6:	4b07      	ldr	r3, [pc, #28]	; (8018ec4 <prvResetNextTaskUnblockTime+0x38>)
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	68db      	ldr	r3, [r3, #12]
 8018eac:	68db      	ldr	r3, [r3, #12]
 8018eae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	685b      	ldr	r3, [r3, #4]
 8018eb4:	4a04      	ldr	r2, [pc, #16]	; (8018ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8018eb6:	6013      	str	r3, [r2, #0]
}
 8018eb8:	bf00      	nop
 8018eba:	370c      	adds	r7, #12
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec2:	4770      	bx	lr
 8018ec4:	2000050c 	.word	0x2000050c
 8018ec8:	20000574 	.word	0x20000574

08018ecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018ecc:	b480      	push	{r7}
 8018ece:	b083      	sub	sp, #12
 8018ed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018ed2:	4b0b      	ldr	r3, [pc, #44]	; (8018f00 <xTaskGetSchedulerState+0x34>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d102      	bne.n	8018ee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018eda:	2301      	movs	r3, #1
 8018edc:	607b      	str	r3, [r7, #4]
 8018ede:	e008      	b.n	8018ef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018ee0:	4b08      	ldr	r3, [pc, #32]	; (8018f04 <xTaskGetSchedulerState+0x38>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d102      	bne.n	8018eee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018ee8:	2302      	movs	r3, #2
 8018eea:	607b      	str	r3, [r7, #4]
 8018eec:	e001      	b.n	8018ef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018eee:	2300      	movs	r3, #0
 8018ef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018ef2:	687b      	ldr	r3, [r7, #4]
	}
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	370c      	adds	r7, #12
 8018ef8:	46bd      	mov	sp, r7
 8018efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efe:	4770      	bx	lr
 8018f00:	20000560 	.word	0x20000560
 8018f04:	2000057c 	.word	0x2000057c

08018f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b086      	sub	sp, #24
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018f14:	2300      	movs	r3, #0
 8018f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d072      	beq.n	8019004 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018f1e:	4b3c      	ldr	r3, [pc, #240]	; (8019010 <xTaskPriorityDisinherit+0x108>)
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	693a      	ldr	r2, [r7, #16]
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d00c      	beq.n	8018f42 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8018f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f2c:	b672      	cpsid	i
 8018f2e:	f383 8811 	msr	BASEPRI, r3
 8018f32:	f3bf 8f6f 	isb	sy
 8018f36:	f3bf 8f4f 	dsb	sy
 8018f3a:	b662      	cpsie	i
 8018f3c:	60fb      	str	r3, [r7, #12]
}
 8018f3e:	bf00      	nop
 8018f40:	e7fe      	b.n	8018f40 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8018f42:	693b      	ldr	r3, [r7, #16]
 8018f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d10c      	bne.n	8018f64 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8018f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f4e:	b672      	cpsid	i
 8018f50:	f383 8811 	msr	BASEPRI, r3
 8018f54:	f3bf 8f6f 	isb	sy
 8018f58:	f3bf 8f4f 	dsb	sy
 8018f5c:	b662      	cpsie	i
 8018f5e:	60bb      	str	r3, [r7, #8]
}
 8018f60:	bf00      	nop
 8018f62:	e7fe      	b.n	8018f62 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8018f64:	693b      	ldr	r3, [r7, #16]
 8018f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f68:	1e5a      	subs	r2, r3, #1
 8018f6a:	693b      	ldr	r3, [r7, #16]
 8018f6c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018f6e:	693b      	ldr	r3, [r7, #16]
 8018f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f76:	429a      	cmp	r2, r3
 8018f78:	d044      	beq.n	8019004 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018f7a:	693b      	ldr	r3, [r7, #16]
 8018f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d140      	bne.n	8019004 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018f82:	693b      	ldr	r3, [r7, #16]
 8018f84:	3304      	adds	r3, #4
 8018f86:	4618      	mov	r0, r3
 8018f88:	f7fe fbd0 	bl	801772c <uxListRemove>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d115      	bne.n	8018fbe <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018f92:	693b      	ldr	r3, [r7, #16]
 8018f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f96:	491f      	ldr	r1, [pc, #124]	; (8019014 <xTaskPriorityDisinherit+0x10c>)
 8018f98:	4613      	mov	r3, r2
 8018f9a:	009b      	lsls	r3, r3, #2
 8018f9c:	4413      	add	r3, r2
 8018f9e:	009b      	lsls	r3, r3, #2
 8018fa0:	440b      	add	r3, r1
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d10a      	bne.n	8018fbe <xTaskPriorityDisinherit+0xb6>
 8018fa8:	693b      	ldr	r3, [r7, #16]
 8018faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fac:	2201      	movs	r2, #1
 8018fae:	fa02 f303 	lsl.w	r3, r2, r3
 8018fb2:	43da      	mvns	r2, r3
 8018fb4:	4b18      	ldr	r3, [pc, #96]	; (8019018 <xTaskPriorityDisinherit+0x110>)
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	4013      	ands	r3, r2
 8018fba:	4a17      	ldr	r2, [pc, #92]	; (8019018 <xTaskPriorityDisinherit+0x110>)
 8018fbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018fbe:	693b      	ldr	r3, [r7, #16]
 8018fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018fc2:	693b      	ldr	r3, [r7, #16]
 8018fc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fc6:	693b      	ldr	r3, [r7, #16]
 8018fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fca:	f1c3 0207 	rsb	r2, r3, #7
 8018fce:	693b      	ldr	r3, [r7, #16]
 8018fd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018fd2:	693b      	ldr	r3, [r7, #16]
 8018fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fd6:	2201      	movs	r2, #1
 8018fd8:	409a      	lsls	r2, r3
 8018fda:	4b0f      	ldr	r3, [pc, #60]	; (8019018 <xTaskPriorityDisinherit+0x110>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	4313      	orrs	r3, r2
 8018fe0:	4a0d      	ldr	r2, [pc, #52]	; (8019018 <xTaskPriorityDisinherit+0x110>)
 8018fe2:	6013      	str	r3, [r2, #0]
 8018fe4:	693b      	ldr	r3, [r7, #16]
 8018fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fe8:	4613      	mov	r3, r2
 8018fea:	009b      	lsls	r3, r3, #2
 8018fec:	4413      	add	r3, r2
 8018fee:	009b      	lsls	r3, r3, #2
 8018ff0:	4a08      	ldr	r2, [pc, #32]	; (8019014 <xTaskPriorityDisinherit+0x10c>)
 8018ff2:	441a      	add	r2, r3
 8018ff4:	693b      	ldr	r3, [r7, #16]
 8018ff6:	3304      	adds	r3, #4
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	4610      	mov	r0, r2
 8018ffc:	f7fe fb39 	bl	8017672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019000:	2301      	movs	r3, #1
 8019002:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019004:	697b      	ldr	r3, [r7, #20]
	}
 8019006:	4618      	mov	r0, r3
 8019008:	3718      	adds	r7, #24
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}
 801900e:	bf00      	nop
 8019010:	20000454 	.word	0x20000454
 8019014:	20000458 	.word	0x20000458
 8019018:	2000055c 	.word	0x2000055c

0801901c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801901c:	b580      	push	{r7, lr}
 801901e:	b086      	sub	sp, #24
 8019020:	af00      	add	r7, sp, #0
 8019022:	60f8      	str	r0, [r7, #12]
 8019024:	60b9      	str	r1, [r7, #8]
 8019026:	607a      	str	r2, [r7, #4]
 8019028:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801902a:	f000 fb5f 	bl	80196ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801902e:	4b26      	ldr	r3, [pc, #152]	; (80190c8 <xTaskNotifyWait+0xac>)
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8019036:	b2db      	uxtb	r3, r3
 8019038:	2b02      	cmp	r3, #2
 801903a:	d01a      	beq.n	8019072 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801903c:	4b22      	ldr	r3, [pc, #136]	; (80190c8 <xTaskNotifyWait+0xac>)
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8019042:	68fa      	ldr	r2, [r7, #12]
 8019044:	43d2      	mvns	r2, r2
 8019046:	400a      	ands	r2, r1
 8019048:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801904a:	4b1f      	ldr	r3, [pc, #124]	; (80190c8 <xTaskNotifyWait+0xac>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	2201      	movs	r2, #1
 8019050:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8019054:	683b      	ldr	r3, [r7, #0]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d00b      	beq.n	8019072 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801905a:	2101      	movs	r1, #1
 801905c:	6838      	ldr	r0, [r7, #0]
 801905e:	f000 f9d5 	bl	801940c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8019062:	4b1a      	ldr	r3, [pc, #104]	; (80190cc <xTaskNotifyWait+0xb0>)
 8019064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019068:	601a      	str	r2, [r3, #0]
 801906a:	f3bf 8f4f 	dsb	sy
 801906e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8019072:	f000 fb6f 	bl	8019754 <vPortExitCritical>

		taskENTER_CRITICAL();
 8019076:	f000 fb39 	bl	80196ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d004      	beq.n	801908a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8019080:	4b11      	ldr	r3, [pc, #68]	; (80190c8 <xTaskNotifyWait+0xac>)
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801908a:	4b0f      	ldr	r3, [pc, #60]	; (80190c8 <xTaskNotifyWait+0xac>)
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8019092:	b2db      	uxtb	r3, r3
 8019094:	2b02      	cmp	r3, #2
 8019096:	d002      	beq.n	801909e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8019098:	2300      	movs	r3, #0
 801909a:	617b      	str	r3, [r7, #20]
 801909c:	e008      	b.n	80190b0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801909e:	4b0a      	ldr	r3, [pc, #40]	; (80190c8 <xTaskNotifyWait+0xac>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80190a4:	68ba      	ldr	r2, [r7, #8]
 80190a6:	43d2      	mvns	r2, r2
 80190a8:	400a      	ands	r2, r1
 80190aa:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80190ac:	2301      	movs	r3, #1
 80190ae:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80190b0:	4b05      	ldr	r3, [pc, #20]	; (80190c8 <xTaskNotifyWait+0xac>)
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	2200      	movs	r2, #0
 80190b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80190ba:	f000 fb4b 	bl	8019754 <vPortExitCritical>

		return xReturn;
 80190be:	697b      	ldr	r3, [r7, #20]
	}
 80190c0:	4618      	mov	r0, r3
 80190c2:	3718      	adds	r7, #24
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bd80      	pop	{r7, pc}
 80190c8:	20000454 	.word	0x20000454
 80190cc:	e000ed04 	.word	0xe000ed04

080190d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b08a      	sub	sp, #40	; 0x28
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	60f8      	str	r0, [r7, #12]
 80190d8:	60b9      	str	r1, [r7, #8]
 80190da:	603b      	str	r3, [r7, #0]
 80190dc:	4613      	mov	r3, r2
 80190de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80190e0:	2301      	movs	r3, #1
 80190e2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d10c      	bne.n	8019104 <xTaskGenericNotify+0x34>
	__asm volatile
 80190ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190ee:	b672      	cpsid	i
 80190f0:	f383 8811 	msr	BASEPRI, r3
 80190f4:	f3bf 8f6f 	isb	sy
 80190f8:	f3bf 8f4f 	dsb	sy
 80190fc:	b662      	cpsie	i
 80190fe:	61bb      	str	r3, [r7, #24]
}
 8019100:	bf00      	nop
 8019102:	e7fe      	b.n	8019102 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8019108:	f000 faf0 	bl	80196ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d003      	beq.n	801911a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8019112:	6a3b      	ldr	r3, [r7, #32]
 8019114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019116:	683b      	ldr	r3, [r7, #0]
 8019118:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801911a:	6a3b      	ldr	r3, [r7, #32]
 801911c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8019120:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8019122:	6a3b      	ldr	r3, [r7, #32]
 8019124:	2202      	movs	r2, #2
 8019126:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 801912a:	79fb      	ldrb	r3, [r7, #7]
 801912c:	2b04      	cmp	r3, #4
 801912e:	d828      	bhi.n	8019182 <xTaskGenericNotify+0xb2>
 8019130:	a201      	add	r2, pc, #4	; (adr r2, 8019138 <xTaskGenericNotify+0x68>)
 8019132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019136:	bf00      	nop
 8019138:	080191a7 	.word	0x080191a7
 801913c:	0801914d 	.word	0x0801914d
 8019140:	0801915b 	.word	0x0801915b
 8019144:	08019167 	.word	0x08019167
 8019148:	0801916f 	.word	0x0801916f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801914c:	6a3b      	ldr	r3, [r7, #32]
 801914e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019150:	68bb      	ldr	r3, [r7, #8]
 8019152:	431a      	orrs	r2, r3
 8019154:	6a3b      	ldr	r3, [r7, #32]
 8019156:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8019158:	e028      	b.n	80191ac <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801915a:	6a3b      	ldr	r3, [r7, #32]
 801915c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801915e:	1c5a      	adds	r2, r3, #1
 8019160:	6a3b      	ldr	r3, [r7, #32]
 8019162:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8019164:	e022      	b.n	80191ac <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8019166:	6a3b      	ldr	r3, [r7, #32]
 8019168:	68ba      	ldr	r2, [r7, #8]
 801916a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801916c:	e01e      	b.n	80191ac <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801916e:	7ffb      	ldrb	r3, [r7, #31]
 8019170:	2b02      	cmp	r3, #2
 8019172:	d003      	beq.n	801917c <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8019174:	6a3b      	ldr	r3, [r7, #32]
 8019176:	68ba      	ldr	r2, [r7, #8]
 8019178:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801917a:	e017      	b.n	80191ac <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 801917c:	2300      	movs	r3, #0
 801917e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8019180:	e014      	b.n	80191ac <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8019182:	6a3b      	ldr	r3, [r7, #32]
 8019184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801918a:	d00e      	beq.n	80191aa <xTaskGenericNotify+0xda>
	__asm volatile
 801918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019190:	b672      	cpsid	i
 8019192:	f383 8811 	msr	BASEPRI, r3
 8019196:	f3bf 8f6f 	isb	sy
 801919a:	f3bf 8f4f 	dsb	sy
 801919e:	b662      	cpsie	i
 80191a0:	617b      	str	r3, [r7, #20]
}
 80191a2:	bf00      	nop
 80191a4:	e7fe      	b.n	80191a4 <xTaskGenericNotify+0xd4>
					break;
 80191a6:	bf00      	nop
 80191a8:	e000      	b.n	80191ac <xTaskGenericNotify+0xdc>

					break;
 80191aa:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80191ac:	7ffb      	ldrb	r3, [r7, #31]
 80191ae:	2b01      	cmp	r3, #1
 80191b0:	d13b      	bne.n	801922a <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80191b2:	6a3b      	ldr	r3, [r7, #32]
 80191b4:	3304      	adds	r3, #4
 80191b6:	4618      	mov	r0, r3
 80191b8:	f7fe fab8 	bl	801772c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80191bc:	6a3b      	ldr	r3, [r7, #32]
 80191be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191c0:	2201      	movs	r2, #1
 80191c2:	409a      	lsls	r2, r3
 80191c4:	4b1c      	ldr	r3, [pc, #112]	; (8019238 <xTaskGenericNotify+0x168>)
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	4313      	orrs	r3, r2
 80191ca:	4a1b      	ldr	r2, [pc, #108]	; (8019238 <xTaskGenericNotify+0x168>)
 80191cc:	6013      	str	r3, [r2, #0]
 80191ce:	6a3b      	ldr	r3, [r7, #32]
 80191d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191d2:	4613      	mov	r3, r2
 80191d4:	009b      	lsls	r3, r3, #2
 80191d6:	4413      	add	r3, r2
 80191d8:	009b      	lsls	r3, r3, #2
 80191da:	4a18      	ldr	r2, [pc, #96]	; (801923c <xTaskGenericNotify+0x16c>)
 80191dc:	441a      	add	r2, r3
 80191de:	6a3b      	ldr	r3, [r7, #32]
 80191e0:	3304      	adds	r3, #4
 80191e2:	4619      	mov	r1, r3
 80191e4:	4610      	mov	r0, r2
 80191e6:	f7fe fa44 	bl	8017672 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80191ea:	6a3b      	ldr	r3, [r7, #32]
 80191ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d00c      	beq.n	801920c <xTaskGenericNotify+0x13c>
	__asm volatile
 80191f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191f6:	b672      	cpsid	i
 80191f8:	f383 8811 	msr	BASEPRI, r3
 80191fc:	f3bf 8f6f 	isb	sy
 8019200:	f3bf 8f4f 	dsb	sy
 8019204:	b662      	cpsie	i
 8019206:	613b      	str	r3, [r7, #16]
}
 8019208:	bf00      	nop
 801920a:	e7fe      	b.n	801920a <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801920c:	6a3b      	ldr	r3, [r7, #32]
 801920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019210:	4b0b      	ldr	r3, [pc, #44]	; (8019240 <xTaskGenericNotify+0x170>)
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019216:	429a      	cmp	r2, r3
 8019218:	d907      	bls.n	801922a <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801921a:	4b0a      	ldr	r3, [pc, #40]	; (8019244 <xTaskGenericNotify+0x174>)
 801921c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019220:	601a      	str	r2, [r3, #0]
 8019222:	f3bf 8f4f 	dsb	sy
 8019226:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801922a:	f000 fa93 	bl	8019754 <vPortExitCritical>

		return xReturn;
 801922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019230:	4618      	mov	r0, r3
 8019232:	3728      	adds	r7, #40	; 0x28
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}
 8019238:	2000055c 	.word	0x2000055c
 801923c:	20000458 	.word	0x20000458
 8019240:	20000454 	.word	0x20000454
 8019244:	e000ed04 	.word	0xe000ed04

08019248 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019248:	b580      	push	{r7, lr}
 801924a:	b08e      	sub	sp, #56	; 0x38
 801924c:	af00      	add	r7, sp, #0
 801924e:	60f8      	str	r0, [r7, #12]
 8019250:	60b9      	str	r1, [r7, #8]
 8019252:	603b      	str	r3, [r7, #0]
 8019254:	4613      	mov	r3, r2
 8019256:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8019258:	2301      	movs	r3, #1
 801925a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d10c      	bne.n	801927c <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8019262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019266:	b672      	cpsid	i
 8019268:	f383 8811 	msr	BASEPRI, r3
 801926c:	f3bf 8f6f 	isb	sy
 8019270:	f3bf 8f4f 	dsb	sy
 8019274:	b662      	cpsie	i
 8019276:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019278:	bf00      	nop
 801927a:	e7fe      	b.n	801927a <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801927c:	f000 fb1e 	bl	80198bc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8019284:	f3ef 8211 	mrs	r2, BASEPRI
 8019288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801928c:	b672      	cpsid	i
 801928e:	f383 8811 	msr	BASEPRI, r3
 8019292:	f3bf 8f6f 	isb	sy
 8019296:	f3bf 8f4f 	dsb	sy
 801929a:	b662      	cpsie	i
 801929c:	623a      	str	r2, [r7, #32]
 801929e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80192a0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80192a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80192a4:	683b      	ldr	r3, [r7, #0]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d003      	beq.n	80192b2 <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80192aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192ae:	683b      	ldr	r3, [r7, #0]
 80192b0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80192b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80192b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80192bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192be:	2202      	movs	r2, #2
 80192c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80192c4:	79fb      	ldrb	r3, [r7, #7]
 80192c6:	2b04      	cmp	r3, #4
 80192c8:	d828      	bhi.n	801931c <xTaskGenericNotifyFromISR+0xd4>
 80192ca:	a201      	add	r2, pc, #4	; (adr r2, 80192d0 <xTaskGenericNotifyFromISR+0x88>)
 80192cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192d0:	08019341 	.word	0x08019341
 80192d4:	080192e5 	.word	0x080192e5
 80192d8:	080192f3 	.word	0x080192f3
 80192dc:	080192ff 	.word	0x080192ff
 80192e0:	08019307 	.word	0x08019307
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80192e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	431a      	orrs	r2, r3
 80192ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ee:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80192f0:	e029      	b.n	8019346 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80192f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192f6:	1c5a      	adds	r2, r3, #1
 80192f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192fa:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80192fc:	e023      	b.n	8019346 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80192fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019300:	68ba      	ldr	r2, [r7, #8]
 8019302:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8019304:	e01f      	b.n	8019346 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8019306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801930a:	2b02      	cmp	r3, #2
 801930c:	d003      	beq.n	8019316 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019310:	68ba      	ldr	r2, [r7, #8]
 8019312:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8019314:	e017      	b.n	8019346 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 8019316:	2300      	movs	r3, #0
 8019318:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801931a:	e014      	b.n	8019346 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801931e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019324:	d00e      	beq.n	8019344 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8019326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801932a:	b672      	cpsid	i
 801932c:	f383 8811 	msr	BASEPRI, r3
 8019330:	f3bf 8f6f 	isb	sy
 8019334:	f3bf 8f4f 	dsb	sy
 8019338:	b662      	cpsie	i
 801933a:	61bb      	str	r3, [r7, #24]
}
 801933c:	bf00      	nop
 801933e:	e7fe      	b.n	801933e <xTaskGenericNotifyFromISR+0xf6>
					break;
 8019340:	bf00      	nop
 8019342:	e000      	b.n	8019346 <xTaskGenericNotifyFromISR+0xfe>
					break;
 8019344:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8019346:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801934a:	2b01      	cmp	r3, #1
 801934c:	d147      	bne.n	80193de <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019352:	2b00      	cmp	r3, #0
 8019354:	d00c      	beq.n	8019370 <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 8019356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801935a:	b672      	cpsid	i
 801935c:	f383 8811 	msr	BASEPRI, r3
 8019360:	f3bf 8f6f 	isb	sy
 8019364:	f3bf 8f4f 	dsb	sy
 8019368:	b662      	cpsie	i
 801936a:	617b      	str	r3, [r7, #20]
}
 801936c:	bf00      	nop
 801936e:	e7fe      	b.n	801936e <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019370:	4b20      	ldr	r3, [pc, #128]	; (80193f4 <xTaskGenericNotifyFromISR+0x1ac>)
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d11c      	bne.n	80193b2 <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801937a:	3304      	adds	r3, #4
 801937c:	4618      	mov	r0, r3
 801937e:	f7fe f9d5 	bl	801772c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019386:	2201      	movs	r2, #1
 8019388:	409a      	lsls	r2, r3
 801938a:	4b1b      	ldr	r3, [pc, #108]	; (80193f8 <xTaskGenericNotifyFromISR+0x1b0>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	4313      	orrs	r3, r2
 8019390:	4a19      	ldr	r2, [pc, #100]	; (80193f8 <xTaskGenericNotifyFromISR+0x1b0>)
 8019392:	6013      	str	r3, [r2, #0]
 8019394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019398:	4613      	mov	r3, r2
 801939a:	009b      	lsls	r3, r3, #2
 801939c:	4413      	add	r3, r2
 801939e:	009b      	lsls	r3, r3, #2
 80193a0:	4a16      	ldr	r2, [pc, #88]	; (80193fc <xTaskGenericNotifyFromISR+0x1b4>)
 80193a2:	441a      	add	r2, r3
 80193a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193a6:	3304      	adds	r3, #4
 80193a8:	4619      	mov	r1, r3
 80193aa:	4610      	mov	r0, r2
 80193ac:	f7fe f961 	bl	8017672 <vListInsertEnd>
 80193b0:	e005      	b.n	80193be <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80193b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b4:	3318      	adds	r3, #24
 80193b6:	4619      	mov	r1, r3
 80193b8:	4811      	ldr	r0, [pc, #68]	; (8019400 <xTaskGenericNotifyFromISR+0x1b8>)
 80193ba:	f7fe f95a 	bl	8017672 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80193be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193c2:	4b10      	ldr	r3, [pc, #64]	; (8019404 <xTaskGenericNotifyFromISR+0x1bc>)
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193c8:	429a      	cmp	r2, r3
 80193ca:	d908      	bls.n	80193de <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80193cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d002      	beq.n	80193d8 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80193d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193d4:	2201      	movs	r2, #1
 80193d6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80193d8:	4b0b      	ldr	r3, [pc, #44]	; (8019408 <xTaskGenericNotifyFromISR+0x1c0>)
 80193da:	2201      	movs	r2, #1
 80193dc:	601a      	str	r2, [r3, #0]
 80193de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80193e2:	693b      	ldr	r3, [r7, #16]
 80193e4:	f383 8811 	msr	BASEPRI, r3
}
 80193e8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80193ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80193ec:	4618      	mov	r0, r3
 80193ee:	3738      	adds	r7, #56	; 0x38
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bd80      	pop	{r7, pc}
 80193f4:	2000057c 	.word	0x2000057c
 80193f8:	2000055c 	.word	0x2000055c
 80193fc:	20000458 	.word	0x20000458
 8019400:	20000514 	.word	0x20000514
 8019404:	20000454 	.word	0x20000454
 8019408:	20000568 	.word	0x20000568

0801940c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b084      	sub	sp, #16
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
 8019414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019416:	4b29      	ldr	r3, [pc, #164]	; (80194bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801941c:	4b28      	ldr	r3, [pc, #160]	; (80194c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	3304      	adds	r3, #4
 8019422:	4618      	mov	r0, r3
 8019424:	f7fe f982 	bl	801772c <uxListRemove>
 8019428:	4603      	mov	r3, r0
 801942a:	2b00      	cmp	r3, #0
 801942c:	d10b      	bne.n	8019446 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801942e:	4b24      	ldr	r3, [pc, #144]	; (80194c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019434:	2201      	movs	r2, #1
 8019436:	fa02 f303 	lsl.w	r3, r2, r3
 801943a:	43da      	mvns	r2, r3
 801943c:	4b21      	ldr	r3, [pc, #132]	; (80194c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	4013      	ands	r3, r2
 8019442:	4a20      	ldr	r2, [pc, #128]	; (80194c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019444:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801944c:	d10a      	bne.n	8019464 <prvAddCurrentTaskToDelayedList+0x58>
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d007      	beq.n	8019464 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019454:	4b1a      	ldr	r3, [pc, #104]	; (80194c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	3304      	adds	r3, #4
 801945a:	4619      	mov	r1, r3
 801945c:	481a      	ldr	r0, [pc, #104]	; (80194c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801945e:	f7fe f908 	bl	8017672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019462:	e026      	b.n	80194b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019464:	68fa      	ldr	r2, [r7, #12]
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	4413      	add	r3, r2
 801946a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801946c:	4b14      	ldr	r3, [pc, #80]	; (80194c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	68ba      	ldr	r2, [r7, #8]
 8019472:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019474:	68ba      	ldr	r2, [r7, #8]
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	429a      	cmp	r2, r3
 801947a:	d209      	bcs.n	8019490 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801947c:	4b13      	ldr	r3, [pc, #76]	; (80194cc <prvAddCurrentTaskToDelayedList+0xc0>)
 801947e:	681a      	ldr	r2, [r3, #0]
 8019480:	4b0f      	ldr	r3, [pc, #60]	; (80194c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	3304      	adds	r3, #4
 8019486:	4619      	mov	r1, r3
 8019488:	4610      	mov	r0, r2
 801948a:	f7fe f916 	bl	80176ba <vListInsert>
}
 801948e:	e010      	b.n	80194b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019490:	4b0f      	ldr	r3, [pc, #60]	; (80194d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8019492:	681a      	ldr	r2, [r3, #0]
 8019494:	4b0a      	ldr	r3, [pc, #40]	; (80194c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	3304      	adds	r3, #4
 801949a:	4619      	mov	r1, r3
 801949c:	4610      	mov	r0, r2
 801949e:	f7fe f90c 	bl	80176ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80194a2:	4b0c      	ldr	r3, [pc, #48]	; (80194d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	68ba      	ldr	r2, [r7, #8]
 80194a8:	429a      	cmp	r2, r3
 80194aa:	d202      	bcs.n	80194b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80194ac:	4a09      	ldr	r2, [pc, #36]	; (80194d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80194ae:	68bb      	ldr	r3, [r7, #8]
 80194b0:	6013      	str	r3, [r2, #0]
}
 80194b2:	bf00      	nop
 80194b4:	3710      	adds	r7, #16
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bd80      	pop	{r7, pc}
 80194ba:	bf00      	nop
 80194bc:	20000558 	.word	0x20000558
 80194c0:	20000454 	.word	0x20000454
 80194c4:	2000055c 	.word	0x2000055c
 80194c8:	20000540 	.word	0x20000540
 80194cc:	20000510 	.word	0x20000510
 80194d0:	2000050c 	.word	0x2000050c
 80194d4:	20000574 	.word	0x20000574

080194d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80194d8:	b480      	push	{r7}
 80194da:	b085      	sub	sp, #20
 80194dc:	af00      	add	r7, sp, #0
 80194de:	60f8      	str	r0, [r7, #12]
 80194e0:	60b9      	str	r1, [r7, #8]
 80194e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	3b04      	subs	r3, #4
 80194e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80194f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	3b04      	subs	r3, #4
 80194f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80194f8:	68bb      	ldr	r3, [r7, #8]
 80194fa:	f023 0201 	bic.w	r2, r3, #1
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	3b04      	subs	r3, #4
 8019506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019508:	4a0c      	ldr	r2, [pc, #48]	; (801953c <pxPortInitialiseStack+0x64>)
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	3b14      	subs	r3, #20
 8019512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019514:	687a      	ldr	r2, [r7, #4]
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	3b04      	subs	r3, #4
 801951e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	f06f 0202 	mvn.w	r2, #2
 8019526:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	3b20      	subs	r3, #32
 801952c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801952e:	68fb      	ldr	r3, [r7, #12]
}
 8019530:	4618      	mov	r0, r3
 8019532:	3714      	adds	r7, #20
 8019534:	46bd      	mov	sp, r7
 8019536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801953a:	4770      	bx	lr
 801953c:	08019541 	.word	0x08019541

08019540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019540:	b480      	push	{r7}
 8019542:	b085      	sub	sp, #20
 8019544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019546:	2300      	movs	r3, #0
 8019548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801954a:	4b14      	ldr	r3, [pc, #80]	; (801959c <prvTaskExitError+0x5c>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019552:	d00c      	beq.n	801956e <prvTaskExitError+0x2e>
	__asm volatile
 8019554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019558:	b672      	cpsid	i
 801955a:	f383 8811 	msr	BASEPRI, r3
 801955e:	f3bf 8f6f 	isb	sy
 8019562:	f3bf 8f4f 	dsb	sy
 8019566:	b662      	cpsie	i
 8019568:	60fb      	str	r3, [r7, #12]
}
 801956a:	bf00      	nop
 801956c:	e7fe      	b.n	801956c <prvTaskExitError+0x2c>
	__asm volatile
 801956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019572:	b672      	cpsid	i
 8019574:	f383 8811 	msr	BASEPRI, r3
 8019578:	f3bf 8f6f 	isb	sy
 801957c:	f3bf 8f4f 	dsb	sy
 8019580:	b662      	cpsie	i
 8019582:	60bb      	str	r3, [r7, #8]
}
 8019584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019586:	bf00      	nop
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d0fc      	beq.n	8019588 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801958e:	bf00      	nop
 8019590:	bf00      	nop
 8019592:	3714      	adds	r7, #20
 8019594:	46bd      	mov	sp, r7
 8019596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959a:	4770      	bx	lr
 801959c:	20000078 	.word	0x20000078

080195a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80195a0:	4b07      	ldr	r3, [pc, #28]	; (80195c0 <pxCurrentTCBConst2>)
 80195a2:	6819      	ldr	r1, [r3, #0]
 80195a4:	6808      	ldr	r0, [r1, #0]
 80195a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195aa:	f380 8809 	msr	PSP, r0
 80195ae:	f3bf 8f6f 	isb	sy
 80195b2:	f04f 0000 	mov.w	r0, #0
 80195b6:	f380 8811 	msr	BASEPRI, r0
 80195ba:	4770      	bx	lr
 80195bc:	f3af 8000 	nop.w

080195c0 <pxCurrentTCBConst2>:
 80195c0:	20000454 	.word	0x20000454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80195c4:	bf00      	nop
 80195c6:	bf00      	nop

080195c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80195c8:	4808      	ldr	r0, [pc, #32]	; (80195ec <prvPortStartFirstTask+0x24>)
 80195ca:	6800      	ldr	r0, [r0, #0]
 80195cc:	6800      	ldr	r0, [r0, #0]
 80195ce:	f380 8808 	msr	MSP, r0
 80195d2:	f04f 0000 	mov.w	r0, #0
 80195d6:	f380 8814 	msr	CONTROL, r0
 80195da:	b662      	cpsie	i
 80195dc:	b661      	cpsie	f
 80195de:	f3bf 8f4f 	dsb	sy
 80195e2:	f3bf 8f6f 	isb	sy
 80195e6:	df00      	svc	0
 80195e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80195ea:	bf00      	nop
 80195ec:	e000ed08 	.word	0xe000ed08

080195f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80195f0:	b580      	push	{r7, lr}
 80195f2:	b084      	sub	sp, #16
 80195f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80195f6:	4b37      	ldr	r3, [pc, #220]	; (80196d4 <xPortStartScheduler+0xe4>)
 80195f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	781b      	ldrb	r3, [r3, #0]
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	22ff      	movs	r2, #255	; 0xff
 8019606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	781b      	ldrb	r3, [r3, #0]
 801960c:	b2db      	uxtb	r3, r3
 801960e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019610:	78fb      	ldrb	r3, [r7, #3]
 8019612:	b2db      	uxtb	r3, r3
 8019614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019618:	b2da      	uxtb	r2, r3
 801961a:	4b2f      	ldr	r3, [pc, #188]	; (80196d8 <xPortStartScheduler+0xe8>)
 801961c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801961e:	4b2f      	ldr	r3, [pc, #188]	; (80196dc <xPortStartScheduler+0xec>)
 8019620:	2207      	movs	r2, #7
 8019622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019624:	e009      	b.n	801963a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8019626:	4b2d      	ldr	r3, [pc, #180]	; (80196dc <xPortStartScheduler+0xec>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	3b01      	subs	r3, #1
 801962c:	4a2b      	ldr	r2, [pc, #172]	; (80196dc <xPortStartScheduler+0xec>)
 801962e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019630:	78fb      	ldrb	r3, [r7, #3]
 8019632:	b2db      	uxtb	r3, r3
 8019634:	005b      	lsls	r3, r3, #1
 8019636:	b2db      	uxtb	r3, r3
 8019638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801963a:	78fb      	ldrb	r3, [r7, #3]
 801963c:	b2db      	uxtb	r3, r3
 801963e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019642:	2b80      	cmp	r3, #128	; 0x80
 8019644:	d0ef      	beq.n	8019626 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019646:	4b25      	ldr	r3, [pc, #148]	; (80196dc <xPortStartScheduler+0xec>)
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	f1c3 0307 	rsb	r3, r3, #7
 801964e:	2b04      	cmp	r3, #4
 8019650:	d00c      	beq.n	801966c <xPortStartScheduler+0x7c>
	__asm volatile
 8019652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019656:	b672      	cpsid	i
 8019658:	f383 8811 	msr	BASEPRI, r3
 801965c:	f3bf 8f6f 	isb	sy
 8019660:	f3bf 8f4f 	dsb	sy
 8019664:	b662      	cpsie	i
 8019666:	60bb      	str	r3, [r7, #8]
}
 8019668:	bf00      	nop
 801966a:	e7fe      	b.n	801966a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801966c:	4b1b      	ldr	r3, [pc, #108]	; (80196dc <xPortStartScheduler+0xec>)
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	021b      	lsls	r3, r3, #8
 8019672:	4a1a      	ldr	r2, [pc, #104]	; (80196dc <xPortStartScheduler+0xec>)
 8019674:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019676:	4b19      	ldr	r3, [pc, #100]	; (80196dc <xPortStartScheduler+0xec>)
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801967e:	4a17      	ldr	r2, [pc, #92]	; (80196dc <xPortStartScheduler+0xec>)
 8019680:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	b2da      	uxtb	r2, r3
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801968a:	4b15      	ldr	r3, [pc, #84]	; (80196e0 <xPortStartScheduler+0xf0>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	4a14      	ldr	r2, [pc, #80]	; (80196e0 <xPortStartScheduler+0xf0>)
 8019690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019694:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019696:	4b12      	ldr	r3, [pc, #72]	; (80196e0 <xPortStartScheduler+0xf0>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	4a11      	ldr	r2, [pc, #68]	; (80196e0 <xPortStartScheduler+0xf0>)
 801969c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80196a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80196a2:	f000 f8dd 	bl	8019860 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80196a6:	4b0f      	ldr	r3, [pc, #60]	; (80196e4 <xPortStartScheduler+0xf4>)
 80196a8:	2200      	movs	r2, #0
 80196aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80196ac:	f000 f8fc 	bl	80198a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80196b0:	4b0d      	ldr	r3, [pc, #52]	; (80196e8 <xPortStartScheduler+0xf8>)
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	4a0c      	ldr	r2, [pc, #48]	; (80196e8 <xPortStartScheduler+0xf8>)
 80196b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80196ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80196bc:	f7ff ff84 	bl	80195c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80196c0:	f7ff f996 	bl	80189f0 <vTaskSwitchContext>
	prvTaskExitError();
 80196c4:	f7ff ff3c 	bl	8019540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80196c8:	2300      	movs	r3, #0
}
 80196ca:	4618      	mov	r0, r3
 80196cc:	3710      	adds	r7, #16
 80196ce:	46bd      	mov	sp, r7
 80196d0:	bd80      	pop	{r7, pc}
 80196d2:	bf00      	nop
 80196d4:	e000e400 	.word	0xe000e400
 80196d8:	20000580 	.word	0x20000580
 80196dc:	20000584 	.word	0x20000584
 80196e0:	e000ed20 	.word	0xe000ed20
 80196e4:	20000078 	.word	0x20000078
 80196e8:	e000ef34 	.word	0xe000ef34

080196ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80196ec:	b480      	push	{r7}
 80196ee:	b083      	sub	sp, #12
 80196f0:	af00      	add	r7, sp, #0
	__asm volatile
 80196f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196f6:	b672      	cpsid	i
 80196f8:	f383 8811 	msr	BASEPRI, r3
 80196fc:	f3bf 8f6f 	isb	sy
 8019700:	f3bf 8f4f 	dsb	sy
 8019704:	b662      	cpsie	i
 8019706:	607b      	str	r3, [r7, #4]
}
 8019708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801970a:	4b10      	ldr	r3, [pc, #64]	; (801974c <vPortEnterCritical+0x60>)
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	3301      	adds	r3, #1
 8019710:	4a0e      	ldr	r2, [pc, #56]	; (801974c <vPortEnterCritical+0x60>)
 8019712:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019714:	4b0d      	ldr	r3, [pc, #52]	; (801974c <vPortEnterCritical+0x60>)
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	2b01      	cmp	r3, #1
 801971a:	d111      	bne.n	8019740 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801971c:	4b0c      	ldr	r3, [pc, #48]	; (8019750 <vPortEnterCritical+0x64>)
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	b2db      	uxtb	r3, r3
 8019722:	2b00      	cmp	r3, #0
 8019724:	d00c      	beq.n	8019740 <vPortEnterCritical+0x54>
	__asm volatile
 8019726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801972a:	b672      	cpsid	i
 801972c:	f383 8811 	msr	BASEPRI, r3
 8019730:	f3bf 8f6f 	isb	sy
 8019734:	f3bf 8f4f 	dsb	sy
 8019738:	b662      	cpsie	i
 801973a:	603b      	str	r3, [r7, #0]
}
 801973c:	bf00      	nop
 801973e:	e7fe      	b.n	801973e <vPortEnterCritical+0x52>
	}
}
 8019740:	bf00      	nop
 8019742:	370c      	adds	r7, #12
 8019744:	46bd      	mov	sp, r7
 8019746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974a:	4770      	bx	lr
 801974c:	20000078 	.word	0x20000078
 8019750:	e000ed04 	.word	0xe000ed04

08019754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019754:	b480      	push	{r7}
 8019756:	b083      	sub	sp, #12
 8019758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801975a:	4b13      	ldr	r3, [pc, #76]	; (80197a8 <vPortExitCritical+0x54>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	2b00      	cmp	r3, #0
 8019760:	d10c      	bne.n	801977c <vPortExitCritical+0x28>
	__asm volatile
 8019762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019766:	b672      	cpsid	i
 8019768:	f383 8811 	msr	BASEPRI, r3
 801976c:	f3bf 8f6f 	isb	sy
 8019770:	f3bf 8f4f 	dsb	sy
 8019774:	b662      	cpsie	i
 8019776:	607b      	str	r3, [r7, #4]
}
 8019778:	bf00      	nop
 801977a:	e7fe      	b.n	801977a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801977c:	4b0a      	ldr	r3, [pc, #40]	; (80197a8 <vPortExitCritical+0x54>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	3b01      	subs	r3, #1
 8019782:	4a09      	ldr	r2, [pc, #36]	; (80197a8 <vPortExitCritical+0x54>)
 8019784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019786:	4b08      	ldr	r3, [pc, #32]	; (80197a8 <vPortExitCritical+0x54>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d105      	bne.n	801979a <vPortExitCritical+0x46>
 801978e:	2300      	movs	r3, #0
 8019790:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019792:	683b      	ldr	r3, [r7, #0]
 8019794:	f383 8811 	msr	BASEPRI, r3
}
 8019798:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801979a:	bf00      	nop
 801979c:	370c      	adds	r7, #12
 801979e:	46bd      	mov	sp, r7
 80197a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a4:	4770      	bx	lr
 80197a6:	bf00      	nop
 80197a8:	20000078 	.word	0x20000078
 80197ac:	00000000 	.word	0x00000000

080197b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80197b0:	f3ef 8009 	mrs	r0, PSP
 80197b4:	f3bf 8f6f 	isb	sy
 80197b8:	4b15      	ldr	r3, [pc, #84]	; (8019810 <pxCurrentTCBConst>)
 80197ba:	681a      	ldr	r2, [r3, #0]
 80197bc:	f01e 0f10 	tst.w	lr, #16
 80197c0:	bf08      	it	eq
 80197c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80197c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ca:	6010      	str	r0, [r2, #0]
 80197cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80197d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80197d4:	b672      	cpsid	i
 80197d6:	f380 8811 	msr	BASEPRI, r0
 80197da:	f3bf 8f4f 	dsb	sy
 80197de:	f3bf 8f6f 	isb	sy
 80197e2:	b662      	cpsie	i
 80197e4:	f7ff f904 	bl	80189f0 <vTaskSwitchContext>
 80197e8:	f04f 0000 	mov.w	r0, #0
 80197ec:	f380 8811 	msr	BASEPRI, r0
 80197f0:	bc09      	pop	{r0, r3}
 80197f2:	6819      	ldr	r1, [r3, #0]
 80197f4:	6808      	ldr	r0, [r1, #0]
 80197f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197fa:	f01e 0f10 	tst.w	lr, #16
 80197fe:	bf08      	it	eq
 8019800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019804:	f380 8809 	msr	PSP, r0
 8019808:	f3bf 8f6f 	isb	sy
 801980c:	4770      	bx	lr
 801980e:	bf00      	nop

08019810 <pxCurrentTCBConst>:
 8019810:	20000454 	.word	0x20000454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019814:	bf00      	nop
 8019816:	bf00      	nop

08019818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b082      	sub	sp, #8
 801981c:	af00      	add	r7, sp, #0
	__asm volatile
 801981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019822:	b672      	cpsid	i
 8019824:	f383 8811 	msr	BASEPRI, r3
 8019828:	f3bf 8f6f 	isb	sy
 801982c:	f3bf 8f4f 	dsb	sy
 8019830:	b662      	cpsie	i
 8019832:	607b      	str	r3, [r7, #4]
}
 8019834:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019836:	f7ff f821 	bl	801887c <xTaskIncrementTick>
 801983a:	4603      	mov	r3, r0
 801983c:	2b00      	cmp	r3, #0
 801983e:	d003      	beq.n	8019848 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019840:	4b06      	ldr	r3, [pc, #24]	; (801985c <SysTick_Handler+0x44>)
 8019842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019846:	601a      	str	r2, [r3, #0]
 8019848:	2300      	movs	r3, #0
 801984a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	f383 8811 	msr	BASEPRI, r3
}
 8019852:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019854:	bf00      	nop
 8019856:	3708      	adds	r7, #8
 8019858:	46bd      	mov	sp, r7
 801985a:	bd80      	pop	{r7, pc}
 801985c:	e000ed04 	.word	0xe000ed04

08019860 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019860:	b480      	push	{r7}
 8019862:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019864:	4b0b      	ldr	r3, [pc, #44]	; (8019894 <vPortSetupTimerInterrupt+0x34>)
 8019866:	2200      	movs	r2, #0
 8019868:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801986a:	4b0b      	ldr	r3, [pc, #44]	; (8019898 <vPortSetupTimerInterrupt+0x38>)
 801986c:	2200      	movs	r2, #0
 801986e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019870:	4b0a      	ldr	r3, [pc, #40]	; (801989c <vPortSetupTimerInterrupt+0x3c>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4a0a      	ldr	r2, [pc, #40]	; (80198a0 <vPortSetupTimerInterrupt+0x40>)
 8019876:	fba2 2303 	umull	r2, r3, r2, r3
 801987a:	099b      	lsrs	r3, r3, #6
 801987c:	4a09      	ldr	r2, [pc, #36]	; (80198a4 <vPortSetupTimerInterrupt+0x44>)
 801987e:	3b01      	subs	r3, #1
 8019880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019882:	4b04      	ldr	r3, [pc, #16]	; (8019894 <vPortSetupTimerInterrupt+0x34>)
 8019884:	2207      	movs	r2, #7
 8019886:	601a      	str	r2, [r3, #0]
}
 8019888:	bf00      	nop
 801988a:	46bd      	mov	sp, r7
 801988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019890:	4770      	bx	lr
 8019892:	bf00      	nop
 8019894:	e000e010 	.word	0xe000e010
 8019898:	e000e018 	.word	0xe000e018
 801989c:	20000028 	.word	0x20000028
 80198a0:	10624dd3 	.word	0x10624dd3
 80198a4:	e000e014 	.word	0xe000e014

080198a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80198a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80198b8 <vPortEnableVFP+0x10>
 80198ac:	6801      	ldr	r1, [r0, #0]
 80198ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80198b2:	6001      	str	r1, [r0, #0]
 80198b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80198b6:	bf00      	nop
 80198b8:	e000ed88 	.word	0xe000ed88

080198bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80198bc:	b480      	push	{r7}
 80198be:	b085      	sub	sp, #20
 80198c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80198c2:	f3ef 8305 	mrs	r3, IPSR
 80198c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	2b0f      	cmp	r3, #15
 80198cc:	d916      	bls.n	80198fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80198ce:	4a19      	ldr	r2, [pc, #100]	; (8019934 <vPortValidateInterruptPriority+0x78>)
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	4413      	add	r3, r2
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80198d8:	4b17      	ldr	r3, [pc, #92]	; (8019938 <vPortValidateInterruptPriority+0x7c>)
 80198da:	781b      	ldrb	r3, [r3, #0]
 80198dc:	7afa      	ldrb	r2, [r7, #11]
 80198de:	429a      	cmp	r2, r3
 80198e0:	d20c      	bcs.n	80198fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80198e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198e6:	b672      	cpsid	i
 80198e8:	f383 8811 	msr	BASEPRI, r3
 80198ec:	f3bf 8f6f 	isb	sy
 80198f0:	f3bf 8f4f 	dsb	sy
 80198f4:	b662      	cpsie	i
 80198f6:	607b      	str	r3, [r7, #4]
}
 80198f8:	bf00      	nop
 80198fa:	e7fe      	b.n	80198fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80198fc:	4b0f      	ldr	r3, [pc, #60]	; (801993c <vPortValidateInterruptPriority+0x80>)
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019904:	4b0e      	ldr	r3, [pc, #56]	; (8019940 <vPortValidateInterruptPriority+0x84>)
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	429a      	cmp	r2, r3
 801990a:	d90c      	bls.n	8019926 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019910:	b672      	cpsid	i
 8019912:	f383 8811 	msr	BASEPRI, r3
 8019916:	f3bf 8f6f 	isb	sy
 801991a:	f3bf 8f4f 	dsb	sy
 801991e:	b662      	cpsie	i
 8019920:	603b      	str	r3, [r7, #0]
}
 8019922:	bf00      	nop
 8019924:	e7fe      	b.n	8019924 <vPortValidateInterruptPriority+0x68>
	}
 8019926:	bf00      	nop
 8019928:	3714      	adds	r7, #20
 801992a:	46bd      	mov	sp, r7
 801992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019930:	4770      	bx	lr
 8019932:	bf00      	nop
 8019934:	e000e3f0 	.word	0xe000e3f0
 8019938:	20000580 	.word	0x20000580
 801993c:	e000ed0c 	.word	0xe000ed0c
 8019940:	20000584 	.word	0x20000584

08019944 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019944:	b580      	push	{r7, lr}
 8019946:	b08a      	sub	sp, #40	; 0x28
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801994c:	2300      	movs	r3, #0
 801994e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019950:	f7fe fec6 	bl	80186e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019954:	4b5e      	ldr	r3, [pc, #376]	; (8019ad0 <pvPortMalloc+0x18c>)
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d101      	bne.n	8019960 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801995c:	f000 f920 	bl	8019ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019960:	4b5c      	ldr	r3, [pc, #368]	; (8019ad4 <pvPortMalloc+0x190>)
 8019962:	681a      	ldr	r2, [r3, #0]
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	4013      	ands	r3, r2
 8019968:	2b00      	cmp	r3, #0
 801996a:	f040 8092 	bne.w	8019a92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d01f      	beq.n	80199b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8019974:	2208      	movs	r2, #8
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	4413      	add	r3, r2
 801997a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	f003 0307 	and.w	r3, r3, #7
 8019982:	2b00      	cmp	r3, #0
 8019984:	d016      	beq.n	80199b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f023 0307 	bic.w	r3, r3, #7
 801998c:	3308      	adds	r3, #8
 801998e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	f003 0307 	and.w	r3, r3, #7
 8019996:	2b00      	cmp	r3, #0
 8019998:	d00c      	beq.n	80199b4 <pvPortMalloc+0x70>
	__asm volatile
 801999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801999e:	b672      	cpsid	i
 80199a0:	f383 8811 	msr	BASEPRI, r3
 80199a4:	f3bf 8f6f 	isb	sy
 80199a8:	f3bf 8f4f 	dsb	sy
 80199ac:	b662      	cpsie	i
 80199ae:	617b      	str	r3, [r7, #20]
}
 80199b0:	bf00      	nop
 80199b2:	e7fe      	b.n	80199b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d06b      	beq.n	8019a92 <pvPortMalloc+0x14e>
 80199ba:	4b47      	ldr	r3, [pc, #284]	; (8019ad8 <pvPortMalloc+0x194>)
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	687a      	ldr	r2, [r7, #4]
 80199c0:	429a      	cmp	r2, r3
 80199c2:	d866      	bhi.n	8019a92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80199c4:	4b45      	ldr	r3, [pc, #276]	; (8019adc <pvPortMalloc+0x198>)
 80199c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80199c8:	4b44      	ldr	r3, [pc, #272]	; (8019adc <pvPortMalloc+0x198>)
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80199ce:	e004      	b.n	80199da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80199d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80199d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80199da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199dc:	685b      	ldr	r3, [r3, #4]
 80199de:	687a      	ldr	r2, [r7, #4]
 80199e0:	429a      	cmp	r2, r3
 80199e2:	d903      	bls.n	80199ec <pvPortMalloc+0xa8>
 80199e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d1f1      	bne.n	80199d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80199ec:	4b38      	ldr	r3, [pc, #224]	; (8019ad0 <pvPortMalloc+0x18c>)
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80199f2:	429a      	cmp	r2, r3
 80199f4:	d04d      	beq.n	8019a92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80199f6:	6a3b      	ldr	r3, [r7, #32]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	2208      	movs	r2, #8
 80199fc:	4413      	add	r3, r2
 80199fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a02:	681a      	ldr	r2, [r3, #0]
 8019a04:	6a3b      	ldr	r3, [r7, #32]
 8019a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a0a:	685a      	ldr	r2, [r3, #4]
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	1ad2      	subs	r2, r2, r3
 8019a10:	2308      	movs	r3, #8
 8019a12:	005b      	lsls	r3, r3, #1
 8019a14:	429a      	cmp	r2, r3
 8019a16:	d921      	bls.n	8019a5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	4413      	add	r3, r2
 8019a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019a20:	69bb      	ldr	r3, [r7, #24]
 8019a22:	f003 0307 	and.w	r3, r3, #7
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d00c      	beq.n	8019a44 <pvPortMalloc+0x100>
	__asm volatile
 8019a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a2e:	b672      	cpsid	i
 8019a30:	f383 8811 	msr	BASEPRI, r3
 8019a34:	f3bf 8f6f 	isb	sy
 8019a38:	f3bf 8f4f 	dsb	sy
 8019a3c:	b662      	cpsie	i
 8019a3e:	613b      	str	r3, [r7, #16]
}
 8019a40:	bf00      	nop
 8019a42:	e7fe      	b.n	8019a42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a46:	685a      	ldr	r2, [r3, #4]
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	1ad2      	subs	r2, r2, r3
 8019a4c:	69bb      	ldr	r3, [r7, #24]
 8019a4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a52:	687a      	ldr	r2, [r7, #4]
 8019a54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019a56:	69b8      	ldr	r0, [r7, #24]
 8019a58:	f000 f904 	bl	8019c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019a5c:	4b1e      	ldr	r3, [pc, #120]	; (8019ad8 <pvPortMalloc+0x194>)
 8019a5e:	681a      	ldr	r2, [r3, #0]
 8019a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a62:	685b      	ldr	r3, [r3, #4]
 8019a64:	1ad3      	subs	r3, r2, r3
 8019a66:	4a1c      	ldr	r2, [pc, #112]	; (8019ad8 <pvPortMalloc+0x194>)
 8019a68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019a6a:	4b1b      	ldr	r3, [pc, #108]	; (8019ad8 <pvPortMalloc+0x194>)
 8019a6c:	681a      	ldr	r2, [r3, #0]
 8019a6e:	4b1c      	ldr	r3, [pc, #112]	; (8019ae0 <pvPortMalloc+0x19c>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	429a      	cmp	r2, r3
 8019a74:	d203      	bcs.n	8019a7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019a76:	4b18      	ldr	r3, [pc, #96]	; (8019ad8 <pvPortMalloc+0x194>)
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	4a19      	ldr	r2, [pc, #100]	; (8019ae0 <pvPortMalloc+0x19c>)
 8019a7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a80:	685a      	ldr	r2, [r3, #4]
 8019a82:	4b14      	ldr	r3, [pc, #80]	; (8019ad4 <pvPortMalloc+0x190>)
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	431a      	orrs	r2, r3
 8019a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8e:	2200      	movs	r2, #0
 8019a90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019a92:	f7fe fe33 	bl	80186fc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8019a96:	69fb      	ldr	r3, [r7, #28]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d101      	bne.n	8019aa0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8019a9c:	f7e7 fe7a 	bl	8001794 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019aa0:	69fb      	ldr	r3, [r7, #28]
 8019aa2:	f003 0307 	and.w	r3, r3, #7
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d00c      	beq.n	8019ac4 <pvPortMalloc+0x180>
	__asm volatile
 8019aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aae:	b672      	cpsid	i
 8019ab0:	f383 8811 	msr	BASEPRI, r3
 8019ab4:	f3bf 8f6f 	isb	sy
 8019ab8:	f3bf 8f4f 	dsb	sy
 8019abc:	b662      	cpsie	i
 8019abe:	60fb      	str	r3, [r7, #12]
}
 8019ac0:	bf00      	nop
 8019ac2:	e7fe      	b.n	8019ac2 <pvPortMalloc+0x17e>
	return pvReturn;
 8019ac4:	69fb      	ldr	r3, [r7, #28]
}
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	3728      	adds	r7, #40	; 0x28
 8019aca:	46bd      	mov	sp, r7
 8019acc:	bd80      	pop	{r7, pc}
 8019ace:	bf00      	nop
 8019ad0:	20008590 	.word	0x20008590
 8019ad4:	2000859c 	.word	0x2000859c
 8019ad8:	20008594 	.word	0x20008594
 8019adc:	20008588 	.word	0x20008588
 8019ae0:	20008598 	.word	0x20008598

08019ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b086      	sub	sp, #24
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d04c      	beq.n	8019b90 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019af6:	2308      	movs	r3, #8
 8019af8:	425b      	negs	r3, r3
 8019afa:	697a      	ldr	r2, [r7, #20]
 8019afc:	4413      	add	r3, r2
 8019afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019b00:	697b      	ldr	r3, [r7, #20]
 8019b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019b04:	693b      	ldr	r3, [r7, #16]
 8019b06:	685a      	ldr	r2, [r3, #4]
 8019b08:	4b23      	ldr	r3, [pc, #140]	; (8019b98 <vPortFree+0xb4>)
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	4013      	ands	r3, r2
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d10c      	bne.n	8019b2c <vPortFree+0x48>
	__asm volatile
 8019b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b16:	b672      	cpsid	i
 8019b18:	f383 8811 	msr	BASEPRI, r3
 8019b1c:	f3bf 8f6f 	isb	sy
 8019b20:	f3bf 8f4f 	dsb	sy
 8019b24:	b662      	cpsie	i
 8019b26:	60fb      	str	r3, [r7, #12]
}
 8019b28:	bf00      	nop
 8019b2a:	e7fe      	b.n	8019b2a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019b2c:	693b      	ldr	r3, [r7, #16]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d00c      	beq.n	8019b4e <vPortFree+0x6a>
	__asm volatile
 8019b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b38:	b672      	cpsid	i
 8019b3a:	f383 8811 	msr	BASEPRI, r3
 8019b3e:	f3bf 8f6f 	isb	sy
 8019b42:	f3bf 8f4f 	dsb	sy
 8019b46:	b662      	cpsie	i
 8019b48:	60bb      	str	r3, [r7, #8]
}
 8019b4a:	bf00      	nop
 8019b4c:	e7fe      	b.n	8019b4c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019b4e:	693b      	ldr	r3, [r7, #16]
 8019b50:	685a      	ldr	r2, [r3, #4]
 8019b52:	4b11      	ldr	r3, [pc, #68]	; (8019b98 <vPortFree+0xb4>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	4013      	ands	r3, r2
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d019      	beq.n	8019b90 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019b5c:	693b      	ldr	r3, [r7, #16]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d115      	bne.n	8019b90 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	685a      	ldr	r2, [r3, #4]
 8019b68:	4b0b      	ldr	r3, [pc, #44]	; (8019b98 <vPortFree+0xb4>)
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	43db      	mvns	r3, r3
 8019b6e:	401a      	ands	r2, r3
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019b74:	f7fe fdb4 	bl	80186e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019b78:	693b      	ldr	r3, [r7, #16]
 8019b7a:	685a      	ldr	r2, [r3, #4]
 8019b7c:	4b07      	ldr	r3, [pc, #28]	; (8019b9c <vPortFree+0xb8>)
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	4413      	add	r3, r2
 8019b82:	4a06      	ldr	r2, [pc, #24]	; (8019b9c <vPortFree+0xb8>)
 8019b84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019b86:	6938      	ldr	r0, [r7, #16]
 8019b88:	f000 f86c 	bl	8019c64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8019b8c:	f7fe fdb6 	bl	80186fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019b90:	bf00      	nop
 8019b92:	3718      	adds	r7, #24
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd80      	pop	{r7, pc}
 8019b98:	2000859c 	.word	0x2000859c
 8019b9c:	20008594 	.word	0x20008594

08019ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019ba0:	b480      	push	{r7}
 8019ba2:	b085      	sub	sp, #20
 8019ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019bac:	4b27      	ldr	r3, [pc, #156]	; (8019c4c <prvHeapInit+0xac>)
 8019bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	f003 0307 	and.w	r3, r3, #7
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d00c      	beq.n	8019bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	3307      	adds	r3, #7
 8019bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	f023 0307 	bic.w	r3, r3, #7
 8019bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019bc8:	68ba      	ldr	r2, [r7, #8]
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	1ad3      	subs	r3, r2, r3
 8019bce:	4a1f      	ldr	r2, [pc, #124]	; (8019c4c <prvHeapInit+0xac>)
 8019bd0:	4413      	add	r3, r2
 8019bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019bd8:	4a1d      	ldr	r2, [pc, #116]	; (8019c50 <prvHeapInit+0xb0>)
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019bde:	4b1c      	ldr	r3, [pc, #112]	; (8019c50 <prvHeapInit+0xb0>)
 8019be0:	2200      	movs	r2, #0
 8019be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	68ba      	ldr	r2, [r7, #8]
 8019be8:	4413      	add	r3, r2
 8019bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019bec:	2208      	movs	r2, #8
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	1a9b      	subs	r3, r3, r2
 8019bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	f023 0307 	bic.w	r3, r3, #7
 8019bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	4a15      	ldr	r2, [pc, #84]	; (8019c54 <prvHeapInit+0xb4>)
 8019c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019c02:	4b14      	ldr	r3, [pc, #80]	; (8019c54 <prvHeapInit+0xb4>)
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	2200      	movs	r2, #0
 8019c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019c0a:	4b12      	ldr	r3, [pc, #72]	; (8019c54 <prvHeapInit+0xb4>)
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	2200      	movs	r2, #0
 8019c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019c16:	683b      	ldr	r3, [r7, #0]
 8019c18:	68fa      	ldr	r2, [r7, #12]
 8019c1a:	1ad2      	subs	r2, r2, r3
 8019c1c:	683b      	ldr	r3, [r7, #0]
 8019c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019c20:	4b0c      	ldr	r3, [pc, #48]	; (8019c54 <prvHeapInit+0xb4>)
 8019c22:	681a      	ldr	r2, [r3, #0]
 8019c24:	683b      	ldr	r3, [r7, #0]
 8019c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019c28:	683b      	ldr	r3, [r7, #0]
 8019c2a:	685b      	ldr	r3, [r3, #4]
 8019c2c:	4a0a      	ldr	r2, [pc, #40]	; (8019c58 <prvHeapInit+0xb8>)
 8019c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019c30:	683b      	ldr	r3, [r7, #0]
 8019c32:	685b      	ldr	r3, [r3, #4]
 8019c34:	4a09      	ldr	r2, [pc, #36]	; (8019c5c <prvHeapInit+0xbc>)
 8019c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019c38:	4b09      	ldr	r3, [pc, #36]	; (8019c60 <prvHeapInit+0xc0>)
 8019c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019c3e:	601a      	str	r2, [r3, #0]
}
 8019c40:	bf00      	nop
 8019c42:	3714      	adds	r7, #20
 8019c44:	46bd      	mov	sp, r7
 8019c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c4a:	4770      	bx	lr
 8019c4c:	20000588 	.word	0x20000588
 8019c50:	20008588 	.word	0x20008588
 8019c54:	20008590 	.word	0x20008590
 8019c58:	20008598 	.word	0x20008598
 8019c5c:	20008594 	.word	0x20008594
 8019c60:	2000859c 	.word	0x2000859c

08019c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019c64:	b480      	push	{r7}
 8019c66:	b085      	sub	sp, #20
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019c6c:	4b28      	ldr	r3, [pc, #160]	; (8019d10 <prvInsertBlockIntoFreeList+0xac>)
 8019c6e:	60fb      	str	r3, [r7, #12]
 8019c70:	e002      	b.n	8019c78 <prvInsertBlockIntoFreeList+0x14>
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	60fb      	str	r3, [r7, #12]
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	687a      	ldr	r2, [r7, #4]
 8019c7e:	429a      	cmp	r2, r3
 8019c80:	d8f7      	bhi.n	8019c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	685b      	ldr	r3, [r3, #4]
 8019c8a:	68ba      	ldr	r2, [r7, #8]
 8019c8c:	4413      	add	r3, r2
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d108      	bne.n	8019ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	685a      	ldr	r2, [r3, #4]
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	685b      	ldr	r3, [r3, #4]
 8019c9c:	441a      	add	r2, r3
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	685b      	ldr	r3, [r3, #4]
 8019cae:	68ba      	ldr	r2, [r7, #8]
 8019cb0:	441a      	add	r2, r3
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	429a      	cmp	r2, r3
 8019cb8:	d118      	bne.n	8019cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	681a      	ldr	r2, [r3, #0]
 8019cbe:	4b15      	ldr	r3, [pc, #84]	; (8019d14 <prvInsertBlockIntoFreeList+0xb0>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	429a      	cmp	r2, r3
 8019cc4:	d00d      	beq.n	8019ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	685a      	ldr	r2, [r3, #4]
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	685b      	ldr	r3, [r3, #4]
 8019cd0:	441a      	add	r2, r3
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	681a      	ldr	r2, [r3, #0]
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	601a      	str	r2, [r3, #0]
 8019ce0:	e008      	b.n	8019cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019ce2:	4b0c      	ldr	r3, [pc, #48]	; (8019d14 <prvInsertBlockIntoFreeList+0xb0>)
 8019ce4:	681a      	ldr	r2, [r3, #0]
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	601a      	str	r2, [r3, #0]
 8019cea:	e003      	b.n	8019cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	681a      	ldr	r2, [r3, #0]
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019cf4:	68fa      	ldr	r2, [r7, #12]
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	d002      	beq.n	8019d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019d02:	bf00      	nop
 8019d04:	3714      	adds	r7, #20
 8019d06:	46bd      	mov	sp, r7
 8019d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0c:	4770      	bx	lr
 8019d0e:	bf00      	nop
 8019d10:	20008588 	.word	0x20008588
 8019d14:	20008590 	.word	0x20008590

08019d18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8019d1c:	2201      	movs	r2, #1
 8019d1e:	490e      	ldr	r1, [pc, #56]	; (8019d58 <MX_USB_HOST_Init+0x40>)
 8019d20:	480e      	ldr	r0, [pc, #56]	; (8019d5c <MX_USB_HOST_Init+0x44>)
 8019d22:	f7fb fc7d 	bl	8015620 <USBH_Init>
 8019d26:	4603      	mov	r3, r0
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d001      	beq.n	8019d30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019d2c:	f7e9 fb38 	bl	80033a0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8019d30:	490b      	ldr	r1, [pc, #44]	; (8019d60 <MX_USB_HOST_Init+0x48>)
 8019d32:	480a      	ldr	r0, [pc, #40]	; (8019d5c <MX_USB_HOST_Init+0x44>)
 8019d34:	f7fb fd2a 	bl	801578c <USBH_RegisterClass>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d001      	beq.n	8019d42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8019d3e:	f7e9 fb2f 	bl	80033a0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8019d42:	4806      	ldr	r0, [pc, #24]	; (8019d5c <MX_USB_HOST_Init+0x44>)
 8019d44:	f7fb fdae 	bl	80158a4 <USBH_Start>
 8019d48:	4603      	mov	r3, r0
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d001      	beq.n	8019d52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8019d4e:	f7e9 fb27 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8019d52:	bf00      	nop
 8019d54:	bd80      	pop	{r7, pc}
 8019d56:	bf00      	nop
 8019d58:	08019d65 	.word	0x08019d65
 8019d5c:	2004d7a8 	.word	0x2004d7a8
 8019d60:	20000058 	.word	0x20000058

08019d64 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8019d64:	b480      	push	{r7}
 8019d66:	b083      	sub	sp, #12
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	6078      	str	r0, [r7, #4]
 8019d6c:	460b      	mov	r3, r1
 8019d6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8019d70:	78fb      	ldrb	r3, [r7, #3]
 8019d72:	3b01      	subs	r3, #1
 8019d74:	2b04      	cmp	r3, #4
 8019d76:	d819      	bhi.n	8019dac <USBH_UserProcess+0x48>
 8019d78:	a201      	add	r2, pc, #4	; (adr r2, 8019d80 <USBH_UserProcess+0x1c>)
 8019d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d7e:	bf00      	nop
 8019d80:	08019dad 	.word	0x08019dad
 8019d84:	08019d9d 	.word	0x08019d9d
 8019d88:	08019dad 	.word	0x08019dad
 8019d8c:	08019da5 	.word	0x08019da5
 8019d90:	08019d95 	.word	0x08019d95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019d94:	4b09      	ldr	r3, [pc, #36]	; (8019dbc <USBH_UserProcess+0x58>)
 8019d96:	2203      	movs	r2, #3
 8019d98:	701a      	strb	r2, [r3, #0]
  break;
 8019d9a:	e008      	b.n	8019dae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8019d9c:	4b07      	ldr	r3, [pc, #28]	; (8019dbc <USBH_UserProcess+0x58>)
 8019d9e:	2202      	movs	r2, #2
 8019da0:	701a      	strb	r2, [r3, #0]
  break;
 8019da2:	e004      	b.n	8019dae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019da4:	4b05      	ldr	r3, [pc, #20]	; (8019dbc <USBH_UserProcess+0x58>)
 8019da6:	2201      	movs	r2, #1
 8019da8:	701a      	strb	r2, [r3, #0]
  break;
 8019daa:	e000      	b.n	8019dae <USBH_UserProcess+0x4a>

  default:
  break;
 8019dac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8019dae:	bf00      	nop
 8019db0:	370c      	adds	r7, #12
 8019db2:	46bd      	mov	sp, r7
 8019db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019db8:	4770      	bx	lr
 8019dba:	bf00      	nop
 8019dbc:	200085a0 	.word	0x200085a0

08019dc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b08a      	sub	sp, #40	; 0x28
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019dc8:	f107 0314 	add.w	r3, r7, #20
 8019dcc:	2200      	movs	r2, #0
 8019dce:	601a      	str	r2, [r3, #0]
 8019dd0:	605a      	str	r2, [r3, #4]
 8019dd2:	609a      	str	r2, [r3, #8]
 8019dd4:	60da      	str	r2, [r3, #12]
 8019dd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019de0:	d13c      	bne.n	8019e5c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019de2:	4b20      	ldr	r3, [pc, #128]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019de6:	4a1f      	ldr	r2, [pc, #124]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019de8:	f043 0301 	orr.w	r3, r3, #1
 8019dec:	6313      	str	r3, [r2, #48]	; 0x30
 8019dee:	4b1d      	ldr	r3, [pc, #116]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019df2:	f003 0301 	and.w	r3, r3, #1
 8019df6:	613b      	str	r3, [r7, #16]
 8019df8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8019dfa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8019dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019e00:	2302      	movs	r3, #2
 8019e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019e04:	2300      	movs	r3, #0
 8019e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019e08:	2303      	movs	r3, #3
 8019e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019e0c:	230a      	movs	r3, #10
 8019e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019e10:	f107 0314 	add.w	r3, r7, #20
 8019e14:	4619      	mov	r1, r3
 8019e16:	4814      	ldr	r0, [pc, #80]	; (8019e68 <HAL_HCD_MspInit+0xa8>)
 8019e18:	f7ef fcfc 	bl	8009814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019e1c:	4b11      	ldr	r3, [pc, #68]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e20:	4a10      	ldr	r2, [pc, #64]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e26:	6353      	str	r3, [r2, #52]	; 0x34
 8019e28:	4b0e      	ldr	r3, [pc, #56]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e30:	60fb      	str	r3, [r7, #12]
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	4b0b      	ldr	r3, [pc, #44]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e38:	4a0a      	ldr	r2, [pc, #40]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8019e40:	4b08      	ldr	r3, [pc, #32]	; (8019e64 <HAL_HCD_MspInit+0xa4>)
 8019e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019e48:	60bb      	str	r3, [r7, #8]
 8019e4a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	2105      	movs	r1, #5
 8019e50:	2043      	movs	r0, #67	; 0x43
 8019e52:	f7ee fa45 	bl	80082e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019e56:	2043      	movs	r0, #67	; 0x43
 8019e58:	f7ee fa5e 	bl	8008318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019e5c:	bf00      	nop
 8019e5e:	3728      	adds	r7, #40	; 0x28
 8019e60:	46bd      	mov	sp, r7
 8019e62:	bd80      	pop	{r7, pc}
 8019e64:	40023800 	.word	0x40023800
 8019e68:	40020000 	.word	0x40020000

08019e6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b082      	sub	sp, #8
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f7fc f9bf 	bl	80161fe <USBH_LL_IncTimer>
}
 8019e80:	bf00      	nop
 8019e82:	3708      	adds	r7, #8
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}

08019e88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b082      	sub	sp, #8
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019e96:	4618      	mov	r0, r3
 8019e98:	f7fc fa03 	bl	80162a2 <USBH_LL_Connect>
}
 8019e9c:	bf00      	nop
 8019e9e:	3708      	adds	r7, #8
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bd80      	pop	{r7, pc}

08019ea4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019ea4:	b580      	push	{r7, lr}
 8019ea6:	b082      	sub	sp, #8
 8019ea8:	af00      	add	r7, sp, #0
 8019eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f7fc fa18 	bl	80162e8 <USBH_LL_Disconnect>
}
 8019eb8:	bf00      	nop
 8019eba:	3708      	adds	r7, #8
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	bd80      	pop	{r7, pc}

08019ec0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b082      	sub	sp, #8
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	6078      	str	r0, [r7, #4]
 8019ec8:	460b      	mov	r3, r1
 8019eca:	70fb      	strb	r3, [r7, #3]
 8019ecc:	4613      	mov	r3, r2
 8019ece:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	f7fc fa4d 	bl	8016376 <USBH_LL_NotifyURBChange>
#endif
}
 8019edc:	bf00      	nop
 8019ede:	3708      	adds	r7, #8
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}

08019ee4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b082      	sub	sp, #8
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	f7fc f9ad 	bl	8016252 <USBH_LL_PortEnabled>
}
 8019ef8:	bf00      	nop
 8019efa:	3708      	adds	r7, #8
 8019efc:	46bd      	mov	sp, r7
 8019efe:	bd80      	pop	{r7, pc}

08019f00 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b082      	sub	sp, #8
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f7fc f9b9 	bl	8016286 <USBH_LL_PortDisabled>
}
 8019f14:	bf00      	nop
 8019f16:	3708      	adds	r7, #8
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bd80      	pop	{r7, pc}

08019f1c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b082      	sub	sp, #8
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019f2a:	2b01      	cmp	r3, #1
 8019f2c:	d12a      	bne.n	8019f84 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8019f2e:	4a18      	ldr	r2, [pc, #96]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	4a15      	ldr	r2, [pc, #84]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f3a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019f3e:	4b14      	ldr	r3, [pc, #80]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019f44:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019f46:	4b12      	ldr	r3, [pc, #72]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f48:	2208      	movs	r2, #8
 8019f4a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019f4c:	4b10      	ldr	r3, [pc, #64]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f4e:	2201      	movs	r2, #1
 8019f50:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019f52:	4b0f      	ldr	r3, [pc, #60]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f54:	2200      	movs	r2, #0
 8019f56:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019f58:	4b0d      	ldr	r3, [pc, #52]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f5a:	2202      	movs	r2, #2
 8019f5c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019f5e:	4b0c      	ldr	r3, [pc, #48]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f60:	2200      	movs	r2, #0
 8019f62:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8019f64:	480a      	ldr	r0, [pc, #40]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f66:	f7ef ff7c 	bl	8009e62 <HAL_HCD_Init>
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d001      	beq.n	8019f74 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8019f70:	f7e9 fa16 	bl	80033a0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019f74:	4806      	ldr	r0, [pc, #24]	; (8019f90 <USBH_LL_Init+0x74>)
 8019f76:	f7f0 fb59 	bl	800a62c <HAL_HCD_GetCurrentFrame>
 8019f7a:	4603      	mov	r3, r0
 8019f7c:	4619      	mov	r1, r3
 8019f7e:	6878      	ldr	r0, [r7, #4]
 8019f80:	f7fc f92e 	bl	80161e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019f84:	2300      	movs	r3, #0
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3708      	adds	r7, #8
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	2004db8c 	.word	0x2004db8c

08019f94 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b084      	sub	sp, #16
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019faa:	4618      	mov	r0, r3
 8019fac:	f7f0 fac8 	bl	800a540 <HAL_HCD_Start>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019fb4:	7bfb      	ldrb	r3, [r7, #15]
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	f000 f95c 	bl	801a274 <USBH_Get_USB_Status>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	3710      	adds	r7, #16
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}

08019fca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019fca:	b580      	push	{r7, lr}
 8019fcc:	b084      	sub	sp, #16
 8019fce:	af00      	add	r7, sp, #0
 8019fd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f7f0 fad0 	bl	800a586 <HAL_HCD_Stop>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019fea:	7bfb      	ldrb	r3, [r7, #15]
 8019fec:	4618      	mov	r0, r3
 8019fee:	f000 f941 	bl	801a274 <USBH_Get_USB_Status>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	3710      	adds	r7, #16
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}

0801a000 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b084      	sub	sp, #16
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801a008:	2301      	movs	r3, #1
 801a00a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a012:	4618      	mov	r0, r3
 801a014:	f7f0 fb18 	bl	800a648 <HAL_HCD_GetCurrentSpeed>
 801a018:	4603      	mov	r3, r0
 801a01a:	2b02      	cmp	r3, #2
 801a01c:	d00c      	beq.n	801a038 <USBH_LL_GetSpeed+0x38>
 801a01e:	2b02      	cmp	r3, #2
 801a020:	d80d      	bhi.n	801a03e <USBH_LL_GetSpeed+0x3e>
 801a022:	2b00      	cmp	r3, #0
 801a024:	d002      	beq.n	801a02c <USBH_LL_GetSpeed+0x2c>
 801a026:	2b01      	cmp	r3, #1
 801a028:	d003      	beq.n	801a032 <USBH_LL_GetSpeed+0x32>
 801a02a:	e008      	b.n	801a03e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801a02c:	2300      	movs	r3, #0
 801a02e:	73fb      	strb	r3, [r7, #15]
    break;
 801a030:	e008      	b.n	801a044 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801a032:	2301      	movs	r3, #1
 801a034:	73fb      	strb	r3, [r7, #15]
    break;
 801a036:	e005      	b.n	801a044 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801a038:	2302      	movs	r3, #2
 801a03a:	73fb      	strb	r3, [r7, #15]
    break;
 801a03c:	e002      	b.n	801a044 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801a03e:	2301      	movs	r3, #1
 801a040:	73fb      	strb	r3, [r7, #15]
    break;
 801a042:	bf00      	nop
  }
  return  speed;
 801a044:	7bfb      	ldrb	r3, [r7, #15]
}
 801a046:	4618      	mov	r0, r3
 801a048:	3710      	adds	r7, #16
 801a04a:	46bd      	mov	sp, r7
 801a04c:	bd80      	pop	{r7, pc}

0801a04e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801a04e:	b580      	push	{r7, lr}
 801a050:	b084      	sub	sp, #16
 801a052:	af00      	add	r7, sp, #0
 801a054:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a056:	2300      	movs	r3, #0
 801a058:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a05a:	2300      	movs	r3, #0
 801a05c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a064:	4618      	mov	r0, r3
 801a066:	f7f0 faab 	bl	800a5c0 <HAL_HCD_ResetPort>
 801a06a:	4603      	mov	r3, r0
 801a06c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a06e:	7bfb      	ldrb	r3, [r7, #15]
 801a070:	4618      	mov	r0, r3
 801a072:	f000 f8ff 	bl	801a274 <USBH_Get_USB_Status>
 801a076:	4603      	mov	r3, r0
 801a078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a07a:	7bbb      	ldrb	r3, [r7, #14]
}
 801a07c:	4618      	mov	r0, r3
 801a07e:	3710      	adds	r7, #16
 801a080:	46bd      	mov	sp, r7
 801a082:	bd80      	pop	{r7, pc}

0801a084 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b082      	sub	sp, #8
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
 801a08c:	460b      	mov	r3, r1
 801a08e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a096:	78fa      	ldrb	r2, [r7, #3]
 801a098:	4611      	mov	r1, r2
 801a09a:	4618      	mov	r0, r3
 801a09c:	f7f0 fab2 	bl	800a604 <HAL_HCD_HC_GetXferCount>
 801a0a0:	4603      	mov	r3, r0
}
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	3708      	adds	r7, #8
 801a0a6:	46bd      	mov	sp, r7
 801a0a8:	bd80      	pop	{r7, pc}

0801a0aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801a0aa:	b590      	push	{r4, r7, lr}
 801a0ac:	b089      	sub	sp, #36	; 0x24
 801a0ae:	af04      	add	r7, sp, #16
 801a0b0:	6078      	str	r0, [r7, #4]
 801a0b2:	4608      	mov	r0, r1
 801a0b4:	4611      	mov	r1, r2
 801a0b6:	461a      	mov	r2, r3
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	70fb      	strb	r3, [r7, #3]
 801a0bc:	460b      	mov	r3, r1
 801a0be:	70bb      	strb	r3, [r7, #2]
 801a0c0:	4613      	mov	r3, r2
 801a0c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801a0d2:	787c      	ldrb	r4, [r7, #1]
 801a0d4:	78ba      	ldrb	r2, [r7, #2]
 801a0d6:	78f9      	ldrb	r1, [r7, #3]
 801a0d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a0da:	9302      	str	r3, [sp, #8]
 801a0dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a0e0:	9301      	str	r3, [sp, #4]
 801a0e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a0e6:	9300      	str	r3, [sp, #0]
 801a0e8:	4623      	mov	r3, r4
 801a0ea:	f7ef ff1c 	bl	8009f26 <HAL_HCD_HC_Init>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801a0f2:	7bfb      	ldrb	r3, [r7, #15]
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	f000 f8bd 	bl	801a274 <USBH_Get_USB_Status>
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a0fe:	7bbb      	ldrb	r3, [r7, #14]
}
 801a100:	4618      	mov	r0, r3
 801a102:	3714      	adds	r7, #20
 801a104:	46bd      	mov	sp, r7
 801a106:	bd90      	pop	{r4, r7, pc}

0801a108 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b084      	sub	sp, #16
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
 801a110:	460b      	mov	r3, r1
 801a112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a114:	2300      	movs	r3, #0
 801a116:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a118:	2300      	movs	r3, #0
 801a11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a122:	78fa      	ldrb	r2, [r7, #3]
 801a124:	4611      	mov	r1, r2
 801a126:	4618      	mov	r0, r3
 801a128:	f7ef ff8c 	bl	800a044 <HAL_HCD_HC_Halt>
 801a12c:	4603      	mov	r3, r0
 801a12e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a130:	7bfb      	ldrb	r3, [r7, #15]
 801a132:	4618      	mov	r0, r3
 801a134:	f000 f89e 	bl	801a274 <USBH_Get_USB_Status>
 801a138:	4603      	mov	r3, r0
 801a13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a13c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a13e:	4618      	mov	r0, r3
 801a140:	3710      	adds	r7, #16
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}

0801a146 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801a146:	b590      	push	{r4, r7, lr}
 801a148:	b089      	sub	sp, #36	; 0x24
 801a14a:	af04      	add	r7, sp, #16
 801a14c:	6078      	str	r0, [r7, #4]
 801a14e:	4608      	mov	r0, r1
 801a150:	4611      	mov	r1, r2
 801a152:	461a      	mov	r2, r3
 801a154:	4603      	mov	r3, r0
 801a156:	70fb      	strb	r3, [r7, #3]
 801a158:	460b      	mov	r3, r1
 801a15a:	70bb      	strb	r3, [r7, #2]
 801a15c:	4613      	mov	r3, r2
 801a15e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a160:	2300      	movs	r3, #0
 801a162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a164:	2300      	movs	r3, #0
 801a166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801a16e:	787c      	ldrb	r4, [r7, #1]
 801a170:	78ba      	ldrb	r2, [r7, #2]
 801a172:	78f9      	ldrb	r1, [r7, #3]
 801a174:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a178:	9303      	str	r3, [sp, #12]
 801a17a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a17c:	9302      	str	r3, [sp, #8]
 801a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a180:	9301      	str	r3, [sp, #4]
 801a182:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a186:	9300      	str	r3, [sp, #0]
 801a188:	4623      	mov	r3, r4
 801a18a:	f7ef ff7f 	bl	800a08c <HAL_HCD_HC_SubmitRequest>
 801a18e:	4603      	mov	r3, r0
 801a190:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801a192:	7bfb      	ldrb	r3, [r7, #15]
 801a194:	4618      	mov	r0, r3
 801a196:	f000 f86d 	bl	801a274 <USBH_Get_USB_Status>
 801a19a:	4603      	mov	r3, r0
 801a19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a19e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	3714      	adds	r7, #20
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd90      	pop	{r4, r7, pc}

0801a1a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b082      	sub	sp, #8
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
 801a1b0:	460b      	mov	r3, r1
 801a1b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a1ba:	78fa      	ldrb	r2, [r7, #3]
 801a1bc:	4611      	mov	r1, r2
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f7f0 fa0c 	bl	800a5dc <HAL_HCD_HC_GetURBState>
 801a1c4:	4603      	mov	r3, r0
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3708      	adds	r7, #8
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	bd80      	pop	{r7, pc}

0801a1ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801a1ce:	b580      	push	{r7, lr}
 801a1d0:	b082      	sub	sp, #8
 801a1d2:	af00      	add	r7, sp, #0
 801a1d4:	6078      	str	r0, [r7, #4]
 801a1d6:	460b      	mov	r3, r1
 801a1d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801a1e0:	2b01      	cmp	r3, #1
 801a1e2:	d103      	bne.n	801a1ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801a1e4:	78fb      	ldrb	r3, [r7, #3]
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	f000 f870 	bl	801a2cc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801a1ec:	20c8      	movs	r0, #200	; 0xc8
 801a1ee:	f7ed fcef 	bl	8007bd0 <HAL_Delay>
  return USBH_OK;
 801a1f2:	2300      	movs	r3, #0
}
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	3708      	adds	r7, #8
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	bd80      	pop	{r7, pc}

0801a1fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801a1fc:	b480      	push	{r7}
 801a1fe:	b085      	sub	sp, #20
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	460b      	mov	r3, r1
 801a206:	70fb      	strb	r3, [r7, #3]
 801a208:	4613      	mov	r3, r2
 801a20a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801a212:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801a214:	78fb      	ldrb	r3, [r7, #3]
 801a216:	68fa      	ldr	r2, [r7, #12]
 801a218:	212c      	movs	r1, #44	; 0x2c
 801a21a:	fb01 f303 	mul.w	r3, r1, r3
 801a21e:	4413      	add	r3, r2
 801a220:	333b      	adds	r3, #59	; 0x3b
 801a222:	781b      	ldrb	r3, [r3, #0]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d009      	beq.n	801a23c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801a228:	78fb      	ldrb	r3, [r7, #3]
 801a22a:	68fa      	ldr	r2, [r7, #12]
 801a22c:	212c      	movs	r1, #44	; 0x2c
 801a22e:	fb01 f303 	mul.w	r3, r1, r3
 801a232:	4413      	add	r3, r2
 801a234:	3354      	adds	r3, #84	; 0x54
 801a236:	78ba      	ldrb	r2, [r7, #2]
 801a238:	701a      	strb	r2, [r3, #0]
 801a23a:	e008      	b.n	801a24e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801a23c:	78fb      	ldrb	r3, [r7, #3]
 801a23e:	68fa      	ldr	r2, [r7, #12]
 801a240:	212c      	movs	r1, #44	; 0x2c
 801a242:	fb01 f303 	mul.w	r3, r1, r3
 801a246:	4413      	add	r3, r2
 801a248:	3355      	adds	r3, #85	; 0x55
 801a24a:	78ba      	ldrb	r2, [r7, #2]
 801a24c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801a24e:	2300      	movs	r3, #0
}
 801a250:	4618      	mov	r0, r3
 801a252:	3714      	adds	r7, #20
 801a254:	46bd      	mov	sp, r7
 801a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a25a:	4770      	bx	lr

0801a25c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801a25c:	b580      	push	{r7, lr}
 801a25e:	b082      	sub	sp, #8
 801a260:	af00      	add	r7, sp, #0
 801a262:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801a264:	6878      	ldr	r0, [r7, #4]
 801a266:	f7ed fcb3 	bl	8007bd0 <HAL_Delay>
}
 801a26a:	bf00      	nop
 801a26c:	3708      	adds	r7, #8
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}
	...

0801a274 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a274:	b480      	push	{r7}
 801a276:	b085      	sub	sp, #20
 801a278:	af00      	add	r7, sp, #0
 801a27a:	4603      	mov	r3, r0
 801a27c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a27e:	2300      	movs	r3, #0
 801a280:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a282:	79fb      	ldrb	r3, [r7, #7]
 801a284:	2b03      	cmp	r3, #3
 801a286:	d817      	bhi.n	801a2b8 <USBH_Get_USB_Status+0x44>
 801a288:	a201      	add	r2, pc, #4	; (adr r2, 801a290 <USBH_Get_USB_Status+0x1c>)
 801a28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a28e:	bf00      	nop
 801a290:	0801a2a1 	.word	0x0801a2a1
 801a294:	0801a2a7 	.word	0x0801a2a7
 801a298:	0801a2ad 	.word	0x0801a2ad
 801a29c:	0801a2b3 	.word	0x0801a2b3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	73fb      	strb	r3, [r7, #15]
    break;
 801a2a4:	e00b      	b.n	801a2be <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801a2a6:	2302      	movs	r3, #2
 801a2a8:	73fb      	strb	r3, [r7, #15]
    break;
 801a2aa:	e008      	b.n	801a2be <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	73fb      	strb	r3, [r7, #15]
    break;
 801a2b0:	e005      	b.n	801a2be <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801a2b2:	2302      	movs	r3, #2
 801a2b4:	73fb      	strb	r3, [r7, #15]
    break;
 801a2b6:	e002      	b.n	801a2be <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801a2b8:	2302      	movs	r3, #2
 801a2ba:	73fb      	strb	r3, [r7, #15]
    break;
 801a2bc:	bf00      	nop
  }
  return usb_status;
 801a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	3714      	adds	r7, #20
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ca:	4770      	bx	lr

0801a2cc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b084      	sub	sp, #16
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801a2d6:	79fb      	ldrb	r3, [r7, #7]
 801a2d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801a2da:	79fb      	ldrb	r3, [r7, #7]
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d102      	bne.n	801a2e6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801a2e0:	2301      	movs	r3, #1
 801a2e2:	73fb      	strb	r3, [r7, #15]
 801a2e4:	e001      	b.n	801a2ea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801a2ea:	7bfb      	ldrb	r3, [r7, #15]
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	2120      	movs	r1, #32
 801a2f0:	4803      	ldr	r0, [pc, #12]	; (801a300 <MX_DriverVbusFS+0x34>)
 801a2f2:	f7ef fd5f 	bl	8009db4 <HAL_GPIO_WritePin>
}
 801a2f6:	bf00      	nop
 801a2f8:	3710      	adds	r7, #16
 801a2fa:	46bd      	mov	sp, r7
 801a2fc:	bd80      	pop	{r7, pc}
 801a2fe:	bf00      	nop
 801a300:	40020c00 	.word	0x40020c00

0801a304 <arm_rfft_fast_init_f32>:
 801a304:	084b      	lsrs	r3, r1, #1
 801a306:	2b80      	cmp	r3, #128	; 0x80
 801a308:	b430      	push	{r4, r5}
 801a30a:	8201      	strh	r1, [r0, #16]
 801a30c:	8003      	strh	r3, [r0, #0]
 801a30e:	d070      	beq.n	801a3f2 <arm_rfft_fast_init_f32+0xee>
 801a310:	d916      	bls.n	801a340 <arm_rfft_fast_init_f32+0x3c>
 801a312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a316:	d05f      	beq.n	801a3d8 <arm_rfft_fast_init_f32+0xd4>
 801a318:	d936      	bls.n	801a388 <arm_rfft_fast_init_f32+0x84>
 801a31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a31e:	d026      	beq.n	801a36e <arm_rfft_fast_init_f32+0x6a>
 801a320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a324:	d112      	bne.n	801a34c <arm_rfft_fast_init_f32+0x48>
 801a326:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 801a32a:	4c38      	ldr	r4, [pc, #224]	; (801a40c <arm_rfft_fast_init_f32+0x108>)
 801a32c:	4938      	ldr	r1, [pc, #224]	; (801a410 <arm_rfft_fast_init_f32+0x10c>)
 801a32e:	2300      	movs	r3, #0
 801a330:	4a38      	ldr	r2, [pc, #224]	; (801a414 <arm_rfft_fast_init_f32+0x110>)
 801a332:	8185      	strh	r5, [r0, #12]
 801a334:	6084      	str	r4, [r0, #8]
 801a336:	6041      	str	r1, [r0, #4]
 801a338:	6142      	str	r2, [r0, #20]
 801a33a:	4618      	mov	r0, r3
 801a33c:	bc30      	pop	{r4, r5}
 801a33e:	4770      	bx	lr
 801a340:	2b20      	cmp	r3, #32
 801a342:	d031      	beq.n	801a3a8 <arm_rfft_fast_init_f32+0xa4>
 801a344:	2b40      	cmp	r3, #64	; 0x40
 801a346:	d006      	beq.n	801a356 <arm_rfft_fast_init_f32+0x52>
 801a348:	2b10      	cmp	r3, #16
 801a34a:	d039      	beq.n	801a3c0 <arm_rfft_fast_init_f32+0xbc>
 801a34c:	f04f 33ff 	mov.w	r3, #4294967295
 801a350:	bc30      	pop	{r4, r5}
 801a352:	4618      	mov	r0, r3
 801a354:	4770      	bx	lr
 801a356:	2538      	movs	r5, #56	; 0x38
 801a358:	4c2f      	ldr	r4, [pc, #188]	; (801a418 <arm_rfft_fast_init_f32+0x114>)
 801a35a:	4930      	ldr	r1, [pc, #192]	; (801a41c <arm_rfft_fast_init_f32+0x118>)
 801a35c:	2300      	movs	r3, #0
 801a35e:	4a30      	ldr	r2, [pc, #192]	; (801a420 <arm_rfft_fast_init_f32+0x11c>)
 801a360:	8185      	strh	r5, [r0, #12]
 801a362:	6084      	str	r4, [r0, #8]
 801a364:	6041      	str	r1, [r0, #4]
 801a366:	6142      	str	r2, [r0, #20]
 801a368:	4618      	mov	r0, r3
 801a36a:	bc30      	pop	{r4, r5}
 801a36c:	4770      	bx	lr
 801a36e:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 801a372:	4c2c      	ldr	r4, [pc, #176]	; (801a424 <arm_rfft_fast_init_f32+0x120>)
 801a374:	492c      	ldr	r1, [pc, #176]	; (801a428 <arm_rfft_fast_init_f32+0x124>)
 801a376:	2300      	movs	r3, #0
 801a378:	4a2c      	ldr	r2, [pc, #176]	; (801a42c <arm_rfft_fast_init_f32+0x128>)
 801a37a:	8185      	strh	r5, [r0, #12]
 801a37c:	6084      	str	r4, [r0, #8]
 801a37e:	6041      	str	r1, [r0, #4]
 801a380:	6142      	str	r2, [r0, #20]
 801a382:	4618      	mov	r0, r3
 801a384:	bc30      	pop	{r4, r5}
 801a386:	4770      	bx	lr
 801a388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a38c:	d1de      	bne.n	801a34c <arm_rfft_fast_init_f32+0x48>
 801a38e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 801a392:	4c27      	ldr	r4, [pc, #156]	; (801a430 <arm_rfft_fast_init_f32+0x12c>)
 801a394:	4927      	ldr	r1, [pc, #156]	; (801a434 <arm_rfft_fast_init_f32+0x130>)
 801a396:	2300      	movs	r3, #0
 801a398:	4a27      	ldr	r2, [pc, #156]	; (801a438 <arm_rfft_fast_init_f32+0x134>)
 801a39a:	8185      	strh	r5, [r0, #12]
 801a39c:	6084      	str	r4, [r0, #8]
 801a39e:	6041      	str	r1, [r0, #4]
 801a3a0:	6142      	str	r2, [r0, #20]
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	bc30      	pop	{r4, r5}
 801a3a6:	4770      	bx	lr
 801a3a8:	2530      	movs	r5, #48	; 0x30
 801a3aa:	4c24      	ldr	r4, [pc, #144]	; (801a43c <arm_rfft_fast_init_f32+0x138>)
 801a3ac:	4924      	ldr	r1, [pc, #144]	; (801a440 <arm_rfft_fast_init_f32+0x13c>)
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	4a24      	ldr	r2, [pc, #144]	; (801a444 <arm_rfft_fast_init_f32+0x140>)
 801a3b2:	8185      	strh	r5, [r0, #12]
 801a3b4:	6084      	str	r4, [r0, #8]
 801a3b6:	6041      	str	r1, [r0, #4]
 801a3b8:	6142      	str	r2, [r0, #20]
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	bc30      	pop	{r4, r5}
 801a3be:	4770      	bx	lr
 801a3c0:	2514      	movs	r5, #20
 801a3c2:	4c21      	ldr	r4, [pc, #132]	; (801a448 <arm_rfft_fast_init_f32+0x144>)
 801a3c4:	4921      	ldr	r1, [pc, #132]	; (801a44c <arm_rfft_fast_init_f32+0x148>)
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	4a21      	ldr	r2, [pc, #132]	; (801a450 <arm_rfft_fast_init_f32+0x14c>)
 801a3ca:	8185      	strh	r5, [r0, #12]
 801a3cc:	6084      	str	r4, [r0, #8]
 801a3ce:	6041      	str	r1, [r0, #4]
 801a3d0:	6142      	str	r2, [r0, #20]
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	bc30      	pop	{r4, r5}
 801a3d6:	4770      	bx	lr
 801a3d8:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 801a3dc:	4c1d      	ldr	r4, [pc, #116]	; (801a454 <arm_rfft_fast_init_f32+0x150>)
 801a3de:	491e      	ldr	r1, [pc, #120]	; (801a458 <arm_rfft_fast_init_f32+0x154>)
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	4a1e      	ldr	r2, [pc, #120]	; (801a45c <arm_rfft_fast_init_f32+0x158>)
 801a3e4:	8185      	strh	r5, [r0, #12]
 801a3e6:	6084      	str	r4, [r0, #8]
 801a3e8:	6041      	str	r1, [r0, #4]
 801a3ea:	6142      	str	r2, [r0, #20]
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	bc30      	pop	{r4, r5}
 801a3f0:	4770      	bx	lr
 801a3f2:	25d0      	movs	r5, #208	; 0xd0
 801a3f4:	4c1a      	ldr	r4, [pc, #104]	; (801a460 <arm_rfft_fast_init_f32+0x15c>)
 801a3f6:	491b      	ldr	r1, [pc, #108]	; (801a464 <arm_rfft_fast_init_f32+0x160>)
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	4a1b      	ldr	r2, [pc, #108]	; (801a468 <arm_rfft_fast_init_f32+0x164>)
 801a3fc:	8185      	strh	r5, [r0, #12]
 801a3fe:	6084      	str	r4, [r0, #8]
 801a400:	6041      	str	r1, [r0, #4]
 801a402:	6142      	str	r2, [r0, #20]
 801a404:	4618      	mov	r0, r3
 801a406:	bc30      	pop	{r4, r5}
 801a408:	4770      	bx	lr
 801a40a:	bf00      	nop
 801a40c:	0802e5fc 	.word	0x0802e5fc
 801a410:	0801f7f4 	.word	0x0801f7f4
 801a414:	08025964 	.word	0x08025964
 801a418:	080238f4 	.word	0x080238f4
 801a41c:	080303bc 	.word	0x080303bc
 801a420:	080328ac 	.word	0x080328ac
 801a424:	0802c2e4 	.word	0x0802c2e4
 801a428:	0802a1e4 	.word	0x0802a1e4
 801a42c:	08023964 	.word	0x08023964
 801a430:	0803253c 	.word	0x0803253c
 801a434:	08029964 	.word	0x08029964
 801a438:	080305bc 	.word	0x080305bc
 801a43c:	0802d19c 	.word	0x0802d19c
 801a440:	0802c1e4 	.word	0x0802c1e4
 801a444:	080237f4 	.word	0x080237f4
 801a448:	0802d0f4 	.word	0x0802d0f4
 801a44c:	0802a164 	.word	0x0802a164
 801a450:	0802d11c 	.word	0x0802d11c
 801a454:	08030dbc 	.word	0x08030dbc
 801a458:	0802d5fc 	.word	0x0802d5fc
 801a45c:	0803113c 	.word	0x0803113c
 801a460:	08032aac 	.word	0x08032aac
 801a464:	0802d1fc 	.word	0x0802d1fc
 801a468:	0803213c 	.word	0x0803213c

0801a46c <arm_rfft_fast_f32>:
 801a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a470:	8a05      	ldrh	r5, [r0, #16]
 801a472:	4606      	mov	r6, r0
 801a474:	4617      	mov	r7, r2
 801a476:	460c      	mov	r4, r1
 801a478:	086d      	lsrs	r5, r5, #1
 801a47a:	8005      	strh	r5, [r0, #0]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d15e      	bne.n	801a53e <arm_rfft_fast_f32+0xd2>
 801a480:	461a      	mov	r2, r3
 801a482:	2301      	movs	r3, #1
 801a484:	f000 fbde 	bl	801ac44 <arm_cfft_f32>
 801a488:	edd4 7a00 	vldr	s15, [r4]
 801a48c:	ed94 7a01 	vldr	s14, [r4, #4]
 801a490:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a494:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a498:	8832      	ldrh	r2, [r6, #0]
 801a49a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801a49e:	6975      	ldr	r5, [r6, #20]
 801a4a0:	3a01      	subs	r2, #1
 801a4a2:	eeb0 3a46 	vmov.f32	s6, s12
 801a4a6:	3510      	adds	r5, #16
 801a4a8:	f107 0610 	add.w	r6, r7, #16
 801a4ac:	ee77 6a87 	vadd.f32	s13, s15, s14
 801a4b0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 801a4b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a4b8:	f104 0310 	add.w	r3, r4, #16
 801a4bc:	3808      	subs	r0, #8
 801a4be:	ee26 7a86 	vmul.f32	s14, s13, s12
 801a4c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a4c6:	ed87 7a00 	vstr	s14, [r7]
 801a4ca:	edc7 7a01 	vstr	s15, [r7, #4]
 801a4ce:	ed90 7a02 	vldr	s14, [r0, #8]
 801a4d2:	3a01      	subs	r2, #1
 801a4d4:	ed53 6a02 	vldr	s13, [r3, #-8]
 801a4d8:	f1a0 0008 	sub.w	r0, r0, #8
 801a4dc:	ed15 6a02 	vldr	s12, [r5, #-8]
 801a4e0:	f103 0308 	add.w	r3, r3, #8
 801a4e4:	ee77 7a66 	vsub.f32	s15, s14, s13
 801a4e8:	edd0 3a05 	vldr	s7, [r0, #20]
 801a4ec:	ed13 5a03 	vldr	s10, [r3, #-12]
 801a4f0:	ee77 4a26 	vadd.f32	s9, s14, s13
 801a4f4:	ed55 5a01 	vldr	s11, [r5, #-4]
 801a4f8:	f106 0608 	add.w	r6, r6, #8
 801a4fc:	ee66 6a27 	vmul.f32	s13, s12, s15
 801a500:	f105 0508 	add.w	r5, r5, #8
 801a504:	ee33 4a85 	vadd.f32	s8, s7, s10
 801a508:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801a50c:	ee35 5a63 	vsub.f32	s10, s10, s7
 801a510:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a514:	ee26 6a04 	vmul.f32	s12, s12, s8
 801a518:	ee77 7a05 	vadd.f32	s15, s14, s10
 801a51c:	ee65 5a84 	vmul.f32	s11, s11, s8
 801a520:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a524:	ee36 7aa5 	vadd.f32	s14, s13, s11
 801a528:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a52c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a530:	ed46 7a03 	vstr	s15, [r6, #-12]
 801a534:	ed06 7a04 	vstr	s14, [r6, #-16]
 801a538:	d1c9      	bne.n	801a4ce <arm_rfft_fast_f32+0x62>
 801a53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a53e:	edd1 7a00 	vldr	s15, [r1]
 801a542:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 801a546:	edd1 6a01 	vldr	s13, [r1, #4]
 801a54a:	1e68      	subs	r0, r5, #1
 801a54c:	6975      	ldr	r5, [r6, #20]
 801a54e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a552:	00c1      	lsls	r1, r0, #3
 801a554:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a558:	ee27 7a23 	vmul.f32	s14, s14, s7
 801a55c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801a560:	ed82 7a00 	vstr	s14, [r2]
 801a564:	edc2 7a01 	vstr	s15, [r2, #4]
 801a568:	b3e0      	cbz	r0, 801a5e4 <arm_rfft_fast_f32+0x178>
 801a56a:	3908      	subs	r1, #8
 801a56c:	f104 0210 	add.w	r2, r4, #16
 801a570:	3510      	adds	r5, #16
 801a572:	440c      	add	r4, r1
 801a574:	f107 0110 	add.w	r1, r7, #16
 801a578:	ed94 7a02 	vldr	s14, [r4, #8]
 801a57c:	3801      	subs	r0, #1
 801a57e:	ed52 6a02 	vldr	s13, [r2, #-8]
 801a582:	f1a4 0408 	sub.w	r4, r4, #8
 801a586:	ed15 6a02 	vldr	s12, [r5, #-8]
 801a58a:	f102 0208 	add.w	r2, r2, #8
 801a58e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801a592:	ed94 4a05 	vldr	s8, [r4, #20]
 801a596:	ed12 5a03 	vldr	s10, [r2, #-12]
 801a59a:	ee77 6a26 	vadd.f32	s13, s14, s13
 801a59e:	ed55 5a01 	vldr	s11, [r5, #-4]
 801a5a2:	f101 0108 	add.w	r1, r1, #8
 801a5a6:	ee26 3a27 	vmul.f32	s6, s12, s15
 801a5aa:	f105 0508 	add.w	r5, r5, #8
 801a5ae:	ee74 4a05 	vadd.f32	s9, s8, s10
 801a5b2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801a5b6:	ee35 5a44 	vsub.f32	s10, s10, s8
 801a5ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801a5be:	ee26 6a24 	vmul.f32	s12, s12, s9
 801a5c2:	ee77 7a05 	vadd.f32	s15, s14, s10
 801a5c6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801a5ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a5ce:	ee36 7ae5 	vsub.f32	s14, s13, s11
 801a5d2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801a5d6:	ee27 7a23 	vmul.f32	s14, s14, s7
 801a5da:	ed41 7a03 	vstr	s15, [r1, #-12]
 801a5de:	ed01 7a04 	vstr	s14, [r1, #-16]
 801a5e2:	d1c9      	bne.n	801a578 <arm_rfft_fast_f32+0x10c>
 801a5e4:	461a      	mov	r2, r3
 801a5e6:	4639      	mov	r1, r7
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	2301      	movs	r3, #1
 801a5ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5f0:	f000 bb28 	b.w	801ac44 <arm_cfft_f32>

0801a5f4 <arm_cfft_radix8by2_f32>:
 801a5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5f8:	4607      	mov	r7, r0
 801a5fa:	4608      	mov	r0, r1
 801a5fc:	ed2d 8b06 	vpush	{d8-d10}
 801a600:	f8b7 e000 	ldrh.w	lr, [r7]
 801a604:	687a      	ldr	r2, [r7, #4]
 801a606:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801a60a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 801a60e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 801a612:	f000 80b0 	beq.w	801a776 <arm_cfft_radix8by2_f32+0x182>
 801a616:	008b      	lsls	r3, r1, #2
 801a618:	3210      	adds	r2, #16
 801a61a:	f100 0610 	add.w	r6, r0, #16
 801a61e:	f108 0510 	add.w	r5, r8, #16
 801a622:	3310      	adds	r3, #16
 801a624:	18c4      	adds	r4, r0, r3
 801a626:	4443      	add	r3, r8
 801a628:	ed55 6a04 	vldr	s13, [r5, #-16]
 801a62c:	f1be 0e01 	subs.w	lr, lr, #1
 801a630:	ed56 4a04 	vldr	s9, [r6, #-16]
 801a634:	f104 0410 	add.w	r4, r4, #16
 801a638:	ed15 7a03 	vldr	s14, [r5, #-12]
 801a63c:	f106 0610 	add.w	r6, r6, #16
 801a640:	ee74 9aa6 	vadd.f32	s19, s9, s13
 801a644:	ed55 7a02 	vldr	s15, [r5, #-8]
 801a648:	ed55 2a01 	vldr	s5, [r5, #-4]
 801a64c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 801a650:	ed53 0a04 	vldr	s1, [r3, #-16]
 801a654:	f102 0210 	add.w	r2, r2, #16
 801a658:	ed13 5a03 	vldr	s10, [r3, #-12]
 801a65c:	f105 0510 	add.w	r5, r5, #16
 801a660:	ed13 3a02 	vldr	s6, [r3, #-8]
 801a664:	f103 0310 	add.w	r3, r3, #16
 801a668:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 801a66c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 801a670:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 801a674:	ee33 8a83 	vadd.f32	s16, s7, s6
 801a678:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 801a67c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 801a680:	ee34 0a06 	vadd.f32	s0, s8, s12
 801a684:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 801a688:	ee76 aa87 	vadd.f32	s21, s13, s14
 801a68c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 801a690:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801a694:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 801a698:	ee35 9aa0 	vadd.f32	s18, s11, s1
 801a69c:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 801a6a0:	ee71 8a05 	vadd.f32	s17, s2, s10
 801a6a4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 801a6a8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 801a6ac:	ee72 9a22 	vadd.f32	s19, s4, s5
 801a6b0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 801a6b4:	ee35 5a41 	vsub.f32	s10, s10, s2
 801a6b8:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 801a6bc:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 801a6c0:	ee36 6a44 	vsub.f32	s12, s12, s8
 801a6c4:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 801a6c8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 801a6cc:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 801a6d0:	ee72 7a62 	vsub.f32	s15, s4, s5
 801a6d4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 801a6d8:	ee73 2a63 	vsub.f32	s5, s6, s7
 801a6dc:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 801a6e0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 801a6e4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 801a6e8:	ee24 3a84 	vmul.f32	s6, s9, s8
 801a6ec:	ee27 2a26 	vmul.f32	s4, s14, s13
 801a6f0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 801a6f4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 801a6f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a6fc:	ee65 5a84 	vmul.f32	s11, s11, s8
 801a700:	ee65 6a26 	vmul.f32	s13, s10, s13
 801a704:	ee25 5a04 	vmul.f32	s10, s10, s8
 801a708:	ee37 7a64 	vsub.f32	s14, s14, s9
 801a70c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a710:	ee33 4a02 	vadd.f32	s8, s6, s4
 801a714:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801a718:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 801a71c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 801a720:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 801a724:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 801a728:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 801a72c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 801a730:	ee61 4aa6 	vmul.f32	s9, s3, s13
 801a734:	ee27 4a87 	vmul.f32	s8, s15, s14
 801a738:	ee61 5a87 	vmul.f32	s11, s3, s14
 801a73c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a740:	ee22 5a87 	vmul.f32	s10, s5, s14
 801a744:	ee26 7a07 	vmul.f32	s14, s12, s14
 801a748:	ee26 6a26 	vmul.f32	s12, s12, s13
 801a74c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 801a750:	ee74 4a84 	vadd.f32	s9, s9, s8
 801a754:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801a758:	ee35 6a46 	vsub.f32	s12, s10, s12
 801a75c:	ee37 7a26 	vadd.f32	s14, s14, s13
 801a760:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 801a764:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 801a768:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 801a76c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 801a770:	f47f af5a 	bne.w	801a628 <arm_cfft_radix8by2_f32+0x34>
 801a774:	687a      	ldr	r2, [r7, #4]
 801a776:	b28c      	uxth	r4, r1
 801a778:	2302      	movs	r3, #2
 801a77a:	4621      	mov	r1, r4
 801a77c:	f000 fbc2 	bl	801af04 <arm_radix8_butterfly_f32>
 801a780:	4621      	mov	r1, r4
 801a782:	687a      	ldr	r2, [r7, #4]
 801a784:	4640      	mov	r0, r8
 801a786:	2302      	movs	r3, #2
 801a788:	ecbd 8b06 	vpop	{d8-d10}
 801a78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a790:	f000 bbb8 	b.w	801af04 <arm_radix8_butterfly_f32>

0801a794 <arm_cfft_radix8by4_f32>:
 801a794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a798:	ed2d 8b06 	vpush	{d8-d10}
 801a79c:	8804      	ldrh	r4, [r0, #0]
 801a79e:	b08f      	sub	sp, #60	; 0x3c
 801a7a0:	ed91 6a00 	vldr	s12, [r1]
 801a7a4:	460a      	mov	r2, r1
 801a7a6:	0864      	lsrs	r4, r4, #1
 801a7a8:	ed91 7a01 	vldr	s14, [r1, #4]
 801a7ac:	9101      	str	r1, [sp, #4]
 801a7ae:	00a3      	lsls	r3, r4, #2
 801a7b0:	6841      	ldr	r1, [r0, #4]
 801a7b2:	0864      	lsrs	r4, r4, #1
 801a7b4:	900c      	str	r0, [sp, #48]	; 0x30
 801a7b6:	9205      	str	r2, [sp, #20]
 801a7b8:	f101 0610 	add.w	r6, r1, #16
 801a7bc:	4625      	mov	r5, r4
 801a7be:	940b      	str	r4, [sp, #44]	; 0x2c
 801a7c0:	f101 0408 	add.w	r4, r1, #8
 801a7c4:	9602      	str	r6, [sp, #8]
 801a7c6:	9407      	str	r4, [sp, #28]
 801a7c8:	18d4      	adds	r4, r2, r3
 801a7ca:	1eaa      	subs	r2, r5, #2
 801a7cc:	f101 0518 	add.w	r5, r1, #24
 801a7d0:	18e0      	adds	r0, r4, r3
 801a7d2:	edd4 4a00 	vldr	s9, [r4]
 801a7d6:	ed94 4a01 	vldr	s8, [r4, #4]
 801a7da:	46a6      	mov	lr, r4
 801a7dc:	edd0 6a00 	vldr	s13, [r0]
 801a7e0:	18c7      	adds	r7, r0, r3
 801a7e2:	edd0 7a01 	vldr	s15, [r0, #4]
 801a7e6:	46a0      	mov	r8, r4
 801a7e8:	ee76 5a26 	vadd.f32	s11, s12, s13
 801a7ec:	ed97 5a00 	vldr	s10, [r7]
 801a7f0:	ee76 6a66 	vsub.f32	s13, s12, s13
 801a7f4:	4604      	mov	r4, r0
 801a7f6:	9506      	str	r5, [sp, #24]
 801a7f8:	4605      	mov	r5, r0
 801a7fa:	ee75 2aa4 	vadd.f32	s5, s11, s9
 801a7fe:	900a      	str	r0, [sp, #40]	; 0x28
 801a800:	9801      	ldr	r0, [sp, #4]
 801a802:	ee37 6a27 	vadd.f32	s12, s14, s15
 801a806:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a80a:	ed97 3a01 	vldr	s6, [r7, #4]
 801a80e:	ee72 2a85 	vadd.f32	s5, s5, s10
 801a812:	46bc      	mov	ip, r7
 801a814:	ee76 3a84 	vadd.f32	s7, s13, s8
 801a818:	9704      	str	r7, [sp, #16]
 801a81a:	ee36 7a44 	vsub.f32	s14, s12, s8
 801a81e:	f8cd e00c 	str.w	lr, [sp, #12]
 801a822:	ee12 9a90 	vmov	r9, s5
 801a826:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801a82a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801a82e:	1f3e      	subs	r6, r7, #4
 801a830:	f840 9b08 	str.w	r9, [r0], #8
 801a834:	ee37 4ae4 	vsub.f32	s8, s15, s9
 801a838:	edde 2a01 	vldr	s5, [lr, #4]
 801a83c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801a840:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801a844:	eddc 4a01 	vldr	s9, [ip, #4]
 801a848:	ee36 6a22 	vadd.f32	s12, s12, s5
 801a84c:	9001      	str	r0, [sp, #4]
 801a84e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a852:	9805      	ldr	r0, [sp, #20]
 801a854:	ee13 9a90 	vmov	r9, s7
 801a858:	ee37 7a43 	vsub.f32	s14, s14, s6
 801a85c:	ee36 6a24 	vadd.f32	s12, s12, s9
 801a860:	f1ae 0704 	sub.w	r7, lr, #4
 801a864:	ee74 4a05 	vadd.f32	s9, s8, s10
 801a868:	ee76 6a83 	vadd.f32	s13, s13, s6
 801a86c:	ed80 6a01 	vstr	s12, [r0, #4]
 801a870:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801a874:	f848 9b08 	str.w	r9, [r8], #8
 801a878:	edce 4a01 	vstr	s9, [lr, #4]
 801a87c:	ee15 ea90 	vmov	lr, s11
 801a880:	f844 eb08 	str.w	lr, [r4], #8
 801a884:	ee16 ea90 	vmov	lr, s13
 801a888:	9408      	str	r4, [sp, #32]
 801a88a:	462c      	mov	r4, r5
 801a88c:	ed85 7a01 	vstr	s14, [r5, #4]
 801a890:	9d04      	ldr	r5, [sp, #16]
 801a892:	f84c eb08 	str.w	lr, [ip], #8
 801a896:	edc5 7a01 	vstr	s15, [r5, #4]
 801a89a:	0855      	lsrs	r5, r2, #1
 801a89c:	9509      	str	r5, [sp, #36]	; 0x24
 801a89e:	f000 8130 	beq.w	801ab02 <arm_cfft_radix8by4_f32+0x36e>
 801a8a2:	9805      	ldr	r0, [sp, #20]
 801a8a4:	3b08      	subs	r3, #8
 801a8a6:	46ab      	mov	fp, r5
 801a8a8:	f1a4 020c 	sub.w	r2, r4, #12
 801a8ac:	f100 0510 	add.w	r5, r0, #16
 801a8b0:	f101 0920 	add.w	r9, r1, #32
 801a8b4:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 801a8b8:	f8dd a008 	ldr.w	sl, [sp, #8]
 801a8bc:	4433      	add	r3, r6
 801a8be:	3410      	adds	r4, #16
 801a8c0:	4660      	mov	r0, ip
 801a8c2:	4641      	mov	r1, r8
 801a8c4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 801a8c8:	ed54 6a02 	vldr	s13, [r4, #-8]
 801a8cc:	f1bb 0b01 	subs.w	fp, fp, #1
 801a8d0:	ed55 5a02 	vldr	s11, [r5, #-8]
 801a8d4:	f10a 0a08 	add.w	sl, sl, #8
 801a8d8:	edd1 7a00 	vldr	s15, [r1]
 801a8dc:	f105 0508 	add.w	r5, r5, #8
 801a8e0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 801a8e4:	edd0 2a00 	vldr	s5, [r0]
 801a8e8:	ed14 7a01 	vldr	s14, [r4, #-4]
 801a8ec:	ee75 5ae6 	vsub.f32	s11, s11, s13
 801a8f0:	ed55 6a03 	vldr	s13, [r5, #-12]
 801a8f4:	f1a2 0208 	sub.w	r2, r2, #8
 801a8f8:	ee73 4aa7 	vadd.f32	s9, s7, s15
 801a8fc:	ed90 2a01 	vldr	s4, [r0, #4]
 801a900:	ee36 5a87 	vadd.f32	s10, s13, s14
 801a904:	ed91 6a01 	vldr	s12, [r1, #4]
 801a908:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801a90c:	f109 0910 	add.w	r9, r9, #16
 801a910:	ee74 6aa2 	vadd.f32	s13, s9, s5
 801a914:	f104 0408 	add.w	r4, r4, #8
 801a918:	ee73 3ae7 	vsub.f32	s7, s7, s15
 801a91c:	f10e 0e18 	add.w	lr, lr, #24
 801a920:	ee37 3a67 	vsub.f32	s6, s14, s15
 801a924:	f1a3 0308 	sub.w	r3, r3, #8
 801a928:	ed45 6a04 	vstr	s13, [r5, #-16]
 801a92c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a930:	edd1 6a01 	vldr	s13, [r1, #4]
 801a934:	ee75 1a86 	vadd.f32	s3, s11, s12
 801a938:	edd0 4a01 	vldr	s9, [r0, #4]
 801a93c:	ee33 3a22 	vadd.f32	s6, s6, s5
 801a940:	ee75 6a26 	vadd.f32	s13, s10, s13
 801a944:	ee35 5a46 	vsub.f32	s10, s10, s12
 801a948:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801a94c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a950:	ee71 1ac2 	vsub.f32	s3, s3, s4
 801a954:	ee35 5a42 	vsub.f32	s10, s10, s4
 801a958:	ed45 6a03 	vstr	s13, [r5, #-12]
 801a95c:	ee36 2a02 	vadd.f32	s4, s12, s4
 801a960:	edd6 7a00 	vldr	s15, [r6]
 801a964:	ee73 3ae2 	vsub.f32	s7, s7, s5
 801a968:	ed97 1a00 	vldr	s2, [r7]
 801a96c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a970:	ed92 8a04 	vldr	s16, [r2, #16]
 801a974:	ee71 8a27 	vadd.f32	s17, s2, s15
 801a978:	ed93 aa04 	vldr	s20, [r3, #16]
 801a97c:	ed16 7a01 	vldr	s14, [r6, #-4]
 801a980:	ee71 7a67 	vsub.f32	s15, s2, s15
 801a984:	ed57 0a01 	vldr	s1, [r7, #-4]
 801a988:	ee38 1a4a 	vsub.f32	s2, s16, s20
 801a98c:	ee38 6a88 	vadd.f32	s12, s17, s16
 801a990:	edd3 9a03 	vldr	s19, [r3, #12]
 801a994:	ee30 0a87 	vadd.f32	s0, s1, s14
 801a998:	ed92 9a03 	vldr	s18, [r2, #12]
 801a99c:	ee78 5ac8 	vsub.f32	s11, s17, s16
 801a9a0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 801a9a4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 801a9a8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 801a9ac:	ee16 ca10 	vmov	ip, s12
 801a9b0:	ee30 6a49 	vsub.f32	s12, s0, s18
 801a9b4:	ee77 4a01 	vadd.f32	s9, s14, s2
 801a9b8:	f847 c908 	str.w	ip, [r7], #-8
 801a9bc:	ee34 4a29 	vadd.f32	s8, s8, s19
 801a9c0:	edd2 8a03 	vldr	s17, [r2, #12]
 801a9c4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 801a9c8:	ed93 8a03 	vldr	s16, [r3, #12]
 801a9cc:	ee71 0a47 	vsub.f32	s1, s2, s14
 801a9d0:	ee30 0a28 	vadd.f32	s0, s0, s17
 801a9d4:	ee39 1a67 	vsub.f32	s2, s18, s15
 801a9d8:	ee36 6a69 	vsub.f32	s12, s12, s19
 801a9dc:	ee30 0a08 	vadd.f32	s0, s0, s16
 801a9e0:	ee75 5aca 	vsub.f32	s11, s11, s20
 801a9e4:	ed87 0a01 	vstr	s0, [r7, #4]
 801a9e8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 801a9ec:	ed5a 6a03 	vldr	s13, [sl, #-12]
 801a9f0:	ee21 8a80 	vmul.f32	s16, s3, s0
 801a9f4:	ee23 7a26 	vmul.f32	s14, s6, s13
 801a9f8:	ee64 7a26 	vmul.f32	s15, s8, s13
 801a9fc:	ee61 1aa6 	vmul.f32	s3, s3, s13
 801aa00:	ee24 4a00 	vmul.f32	s8, s8, s0
 801aa04:	ee23 3a00 	vmul.f32	s6, s6, s0
 801aa08:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801aa0c:	ee24 0a80 	vmul.f32	s0, s9, s0
 801aa10:	ee38 7a07 	vadd.f32	s14, s16, s14
 801aa14:	ee76 6a84 	vadd.f32	s13, s13, s8
 801aa18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801aa1c:	ee33 3a61 	vsub.f32	s6, s6, s3
 801aa20:	ee17 ca10 	vmov	ip, s14
 801aa24:	f841 cb08 	str.w	ip, [r1], #8
 801aa28:	ed01 3a01 	vstr	s6, [r1, #-4]
 801aa2c:	ed82 0a04 	vstr	s0, [r2, #16]
 801aa30:	edc2 6a03 	vstr	s13, [r2, #12]
 801aa34:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 801aa38:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 801aa3c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 801aa40:	ee23 4aa6 	vmul.f32	s8, s7, s13
 801aa44:	ee65 4a27 	vmul.f32	s9, s10, s15
 801aa48:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801aa4c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801aa50:	ee66 7a27 	vmul.f32	s15, s12, s15
 801aa54:	ee25 5a26 	vmul.f32	s10, s10, s13
 801aa58:	ee66 6a26 	vmul.f32	s13, s12, s13
 801aa5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aa60:	ee34 6a24 	vadd.f32	s12, s8, s9
 801aa64:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801aa68:	ee35 5a63 	vsub.f32	s10, s10, s7
 801aa6c:	ee17 ca90 	vmov	ip, s15
 801aa70:	ed04 6a04 	vstr	s12, [r4, #-16]
 801aa74:	ed04 5a03 	vstr	s10, [r4, #-12]
 801aa78:	f846 c908 	str.w	ip, [r6], #-8
 801aa7c:	edc6 6a01 	vstr	s13, [r6, #4]
 801aa80:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 801aa84:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 801aa88:	ee62 5a27 	vmul.f32	s11, s4, s15
 801aa8c:	ee22 6a87 	vmul.f32	s12, s5, s14
 801aa90:	ee22 2a07 	vmul.f32	s4, s4, s14
 801aa94:	ee62 2aa7 	vmul.f32	s5, s5, s15
 801aa98:	ee61 6a07 	vmul.f32	s13, s2, s14
 801aa9c:	ee20 7a87 	vmul.f32	s14, s1, s14
 801aaa0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801aaa4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aaa8:	ee35 6a86 	vadd.f32	s12, s11, s12
 801aaac:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801aab0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801aab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aab8:	ee16 ca10 	vmov	ip, s12
 801aabc:	f840 cb08 	str.w	ip, [r0], #8
 801aac0:	ed40 2a01 	vstr	s5, [r0, #-4]
 801aac4:	edc3 0a04 	vstr	s1, [r3, #16]
 801aac8:	edc3 7a03 	vstr	s15, [r3, #12]
 801aacc:	f47f aefc 	bne.w	801a8c8 <arm_cfft_radix8by4_f32+0x134>
 801aad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aad2:	9802      	ldr	r0, [sp, #8]
 801aad4:	00cb      	lsls	r3, r1, #3
 801aad6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 801aada:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801aade:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801aae2:	4498      	add	r8, r3
 801aae4:	449c      	add	ip, r3
 801aae6:	9102      	str	r1, [sp, #8]
 801aae8:	9901      	ldr	r1, [sp, #4]
 801aaea:	4419      	add	r1, r3
 801aaec:	9101      	str	r1, [sp, #4]
 801aaee:	9907      	ldr	r1, [sp, #28]
 801aaf0:	4419      	add	r1, r3
 801aaf2:	9107      	str	r1, [sp, #28]
 801aaf4:	9908      	ldr	r1, [sp, #32]
 801aaf6:	4419      	add	r1, r3
 801aaf8:	9b06      	ldr	r3, [sp, #24]
 801aafa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aafe:	9108      	str	r1, [sp, #32]
 801ab00:	9306      	str	r3, [sp, #24]
 801ab02:	9a01      	ldr	r2, [sp, #4]
 801ab04:	2304      	movs	r3, #4
 801ab06:	9e08      	ldr	r6, [sp, #32]
 801ab08:	edd2 7a00 	vldr	s15, [r2]
 801ab0c:	ed96 7a00 	vldr	s14, [r6]
 801ab10:	edd8 2a00 	vldr	s5, [r8]
 801ab14:	ee77 5a87 	vadd.f32	s11, s15, s14
 801ab18:	ed9c 3a00 	vldr	s6, [ip]
 801ab1c:	ed92 6a01 	vldr	s12, [r2, #4]
 801ab20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801ab24:	edd6 6a01 	vldr	s13, [r6, #4]
 801ab28:	ee75 4aa2 	vadd.f32	s9, s11, s5
 801ab2c:	ed9c 2a01 	vldr	s4, [ip, #4]
 801ab30:	ee36 5a26 	vadd.f32	s10, s12, s13
 801ab34:	edd8 7a01 	vldr	s15, [r8, #4]
 801ab38:	ee76 6a66 	vsub.f32	s13, s12, s13
 801ab3c:	9d02      	ldr	r5, [sp, #8]
 801ab3e:	ee34 6a83 	vadd.f32	s12, s9, s6
 801ab42:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801ab46:	ee37 4a27 	vadd.f32	s8, s14, s15
 801ab4a:	9805      	ldr	r0, [sp, #20]
 801ab4c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 801ab50:	4621      	mov	r1, r4
 801ab52:	ed82 6a00 	vstr	s12, [r2]
 801ab56:	ee35 6ae2 	vsub.f32	s12, s11, s5
 801ab5a:	edd8 3a01 	vldr	s7, [r8, #4]
 801ab5e:	ee75 5a67 	vsub.f32	s11, s10, s15
 801ab62:	eddc 1a01 	vldr	s3, [ip, #4]
 801ab66:	ee34 4a42 	vsub.f32	s8, s8, s4
 801ab6a:	ee75 3a23 	vadd.f32	s7, s10, s7
 801ab6e:	ee74 4a83 	vadd.f32	s9, s9, s6
 801ab72:	ee76 6aa2 	vadd.f32	s13, s13, s5
 801ab76:	ee33 5aa1 	vadd.f32	s10, s7, s3
 801ab7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ab7e:	ee36 6a43 	vsub.f32	s12, s12, s6
 801ab82:	ed82 5a01 	vstr	s10, [r2, #4]
 801ab86:	ee75 5ac2 	vsub.f32	s11, s11, s4
 801ab8a:	9a07      	ldr	r2, [sp, #28]
 801ab8c:	ee77 7a02 	vadd.f32	s15, s14, s4
 801ab90:	ee36 7ac3 	vsub.f32	s14, s13, s6
 801ab94:	edd2 2a00 	vldr	s5, [r2]
 801ab98:	ed92 5a01 	vldr	s10, [r2, #4]
 801ab9c:	ee64 3a22 	vmul.f32	s7, s8, s5
 801aba0:	ee24 4a05 	vmul.f32	s8, s8, s10
 801aba4:	ee24 5a85 	vmul.f32	s10, s9, s10
 801aba8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 801abac:	ee33 5a85 	vadd.f32	s10, s7, s10
 801abb0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801abb4:	ed88 5a00 	vstr	s10, [r8]
 801abb8:	edc8 4a01 	vstr	s9, [r8, #4]
 801abbc:	edd5 4a01 	vldr	s9, [r5, #4]
 801abc0:	edd5 6a00 	vldr	s13, [r5]
 801abc4:	9d06      	ldr	r5, [sp, #24]
 801abc6:	ee26 5a26 	vmul.f32	s10, s12, s13
 801abca:	ee26 6a24 	vmul.f32	s12, s12, s9
 801abce:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801abd2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801abd6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801abda:	ee75 5a25 	vadd.f32	s11, s10, s11
 801abde:	ed86 6a01 	vstr	s12, [r6, #4]
 801abe2:	edc6 5a00 	vstr	s11, [r6]
 801abe6:	edd5 5a01 	vldr	s11, [r5, #4]
 801abea:	edd5 6a00 	vldr	s13, [r5]
 801abee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801abf0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801abf4:	ee67 6a26 	vmul.f32	s13, s14, s13
 801abf8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801abfc:	ee27 7a25 	vmul.f32	s14, s14, s11
 801ac00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801ac04:	ee36 7a07 	vadd.f32	s14, s12, s14
 801ac08:	edcc 7a01 	vstr	s15, [ip, #4]
 801ac0c:	ed8c 7a00 	vstr	s14, [ip]
 801ac10:	6872      	ldr	r2, [r6, #4]
 801ac12:	f000 f977 	bl	801af04 <arm_radix8_butterfly_f32>
 801ac16:	9803      	ldr	r0, [sp, #12]
 801ac18:	4621      	mov	r1, r4
 801ac1a:	6872      	ldr	r2, [r6, #4]
 801ac1c:	2304      	movs	r3, #4
 801ac1e:	f000 f971 	bl	801af04 <arm_radix8_butterfly_f32>
 801ac22:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ac24:	4621      	mov	r1, r4
 801ac26:	6872      	ldr	r2, [r6, #4]
 801ac28:	2304      	movs	r3, #4
 801ac2a:	f000 f96b 	bl	801af04 <arm_radix8_butterfly_f32>
 801ac2e:	4621      	mov	r1, r4
 801ac30:	6872      	ldr	r2, [r6, #4]
 801ac32:	2304      	movs	r3, #4
 801ac34:	9804      	ldr	r0, [sp, #16]
 801ac36:	b00f      	add	sp, #60	; 0x3c
 801ac38:	ecbd 8b06 	vpop	{d8-d10}
 801ac3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac40:	f000 b960 	b.w	801af04 <arm_radix8_butterfly_f32>

0801ac44 <arm_cfft_f32>:
 801ac44:	2a01      	cmp	r2, #1
 801ac46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac4a:	4606      	mov	r6, r0
 801ac4c:	4617      	mov	r7, r2
 801ac4e:	460c      	mov	r4, r1
 801ac50:	4698      	mov	r8, r3
 801ac52:	8805      	ldrh	r5, [r0, #0]
 801ac54:	d053      	beq.n	801acfe <arm_cfft_f32+0xba>
 801ac56:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801ac5a:	d04b      	beq.n	801acf4 <arm_cfft_f32+0xb0>
 801ac5c:	d916      	bls.n	801ac8c <arm_cfft_f32+0x48>
 801ac5e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801ac62:	d01a      	beq.n	801ac9a <arm_cfft_f32+0x56>
 801ac64:	d95a      	bls.n	801ad1c <arm_cfft_f32+0xd8>
 801ac66:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801ac6a:	d043      	beq.n	801acf4 <arm_cfft_f32+0xb0>
 801ac6c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 801ac70:	d105      	bne.n	801ac7e <arm_cfft_f32+0x3a>
 801ac72:	2301      	movs	r3, #1
 801ac74:	6872      	ldr	r2, [r6, #4]
 801ac76:	4629      	mov	r1, r5
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f000 f943 	bl	801af04 <arm_radix8_butterfly_f32>
 801ac7e:	f1b8 0f00 	cmp.w	r8, #0
 801ac82:	d111      	bne.n	801aca8 <arm_cfft_f32+0x64>
 801ac84:	2f01      	cmp	r7, #1
 801ac86:	d016      	beq.n	801acb6 <arm_cfft_f32+0x72>
 801ac88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac8c:	2d20      	cmp	r5, #32
 801ac8e:	d031      	beq.n	801acf4 <arm_cfft_f32+0xb0>
 801ac90:	d948      	bls.n	801ad24 <arm_cfft_f32+0xe0>
 801ac92:	2d40      	cmp	r5, #64	; 0x40
 801ac94:	d0ed      	beq.n	801ac72 <arm_cfft_f32+0x2e>
 801ac96:	2d80      	cmp	r5, #128	; 0x80
 801ac98:	d1f1      	bne.n	801ac7e <arm_cfft_f32+0x3a>
 801ac9a:	4621      	mov	r1, r4
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	f7ff fca9 	bl	801a5f4 <arm_cfft_radix8by2_f32>
 801aca2:	f1b8 0f00 	cmp.w	r8, #0
 801aca6:	d0ed      	beq.n	801ac84 <arm_cfft_f32+0x40>
 801aca8:	68b2      	ldr	r2, [r6, #8]
 801acaa:	4620      	mov	r0, r4
 801acac:	89b1      	ldrh	r1, [r6, #12]
 801acae:	f7e5 faaf 	bl	8000210 <arm_bitreversal_32>
 801acb2:	2f01      	cmp	r7, #1
 801acb4:	d1e8      	bne.n	801ac88 <arm_cfft_f32+0x44>
 801acb6:	ee07 5a90 	vmov	s15, r5
 801acba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801acbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801acc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801acc6:	2d00      	cmp	r5, #0
 801acc8:	d0de      	beq.n	801ac88 <arm_cfft_f32+0x44>
 801acca:	f104 0108 	add.w	r1, r4, #8
 801acce:	2300      	movs	r3, #0
 801acd0:	ed11 7a02 	vldr	s14, [r1, #-8]
 801acd4:	3301      	adds	r3, #1
 801acd6:	ed51 7a01 	vldr	s15, [r1, #-4]
 801acda:	3108      	adds	r1, #8
 801acdc:	429d      	cmp	r5, r3
 801acde:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ace2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801ace6:	ed01 7a04 	vstr	s14, [r1, #-16]
 801acea:	ed41 7a03 	vstr	s15, [r1, #-12]
 801acee:	d1ef      	bne.n	801acd0 <arm_cfft_f32+0x8c>
 801acf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acf4:	4621      	mov	r1, r4
 801acf6:	4630      	mov	r0, r6
 801acf8:	f7ff fd4c 	bl	801a794 <arm_cfft_radix8by4_f32>
 801acfc:	e7bf      	b.n	801ac7e <arm_cfft_f32+0x3a>
 801acfe:	b1a5      	cbz	r5, 801ad2a <arm_cfft_f32+0xe6>
 801ad00:	f101 030c 	add.w	r3, r1, #12
 801ad04:	2200      	movs	r2, #0
 801ad06:	ed53 7a02 	vldr	s15, [r3, #-8]
 801ad0a:	3201      	adds	r2, #1
 801ad0c:	3308      	adds	r3, #8
 801ad0e:	eef1 7a67 	vneg.f32	s15, s15
 801ad12:	4295      	cmp	r5, r2
 801ad14:	ed43 7a04 	vstr	s15, [r3, #-16]
 801ad18:	d1f5      	bne.n	801ad06 <arm_cfft_f32+0xc2>
 801ad1a:	e79c      	b.n	801ac56 <arm_cfft_f32+0x12>
 801ad1c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801ad20:	d0a7      	beq.n	801ac72 <arm_cfft_f32+0x2e>
 801ad22:	e7ac      	b.n	801ac7e <arm_cfft_f32+0x3a>
 801ad24:	2d10      	cmp	r5, #16
 801ad26:	d0b8      	beq.n	801ac9a <arm_cfft_f32+0x56>
 801ad28:	e7a9      	b.n	801ac7e <arm_cfft_f32+0x3a>
 801ad2a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801ad2e:	d896      	bhi.n	801ac5e <arm_cfft_f32+0x1a>
 801ad30:	e7ac      	b.n	801ac8c <arm_cfft_f32+0x48>
 801ad32:	bf00      	nop

0801ad34 <arm_cmplx_mag_f32>:
 801ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad38:	ea5f 0892 	movs.w	r8, r2, lsr #2
 801ad3c:	b084      	sub	sp, #16
 801ad3e:	d07f      	beq.n	801ae40 <arm_cmplx_mag_f32+0x10c>
 801ad40:	f100 0420 	add.w	r4, r0, #32
 801ad44:	f101 0510 	add.w	r5, r1, #16
 801ad48:	4646      	mov	r6, r8
 801ad4a:	2700      	movs	r7, #0
 801ad4c:	e05a      	b.n	801ae04 <arm_cmplx_mag_f32+0xd0>
 801ad4e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801ad52:	eeb4 0a40 	vcmp.f32	s0, s0
 801ad56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad5a:	f040 80a4 	bne.w	801aea6 <arm_cmplx_mag_f32+0x172>
 801ad5e:	ed05 0a04 	vstr	s0, [r5, #-16]
 801ad62:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801ad66:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 801ad6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ad6e:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ad72:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ad76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ad7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad7e:	f2c0 808f 	blt.w	801aea0 <arm_cmplx_mag_f32+0x16c>
 801ad82:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801ad86:	eeb4 0a40 	vcmp.f32	s0, s0
 801ad8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad8e:	f040 80af 	bne.w	801aef0 <arm_cmplx_mag_f32+0x1bc>
 801ad92:	ed05 0a03 	vstr	s0, [r5, #-12]
 801ad96:	ed54 7a04 	vldr	s15, [r4, #-16]
 801ad9a:	ed14 0a03 	vldr	s0, [r4, #-12]
 801ad9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ada2:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ada6:	ee77 7a80 	vadd.f32	s15, s15, s0
 801adaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801adae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adb2:	db72      	blt.n	801ae9a <arm_cmplx_mag_f32+0x166>
 801adb4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801adb8:	eeb4 0a40 	vcmp.f32	s0, s0
 801adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adc0:	f040 808c 	bne.w	801aedc <arm_cmplx_mag_f32+0x1a8>
 801adc4:	ed05 0a02 	vstr	s0, [r5, #-8]
 801adc8:	ed54 7a02 	vldr	s15, [r4, #-8]
 801adcc:	ed14 0a01 	vldr	s0, [r4, #-4]
 801add0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801add4:	ee20 0a00 	vmul.f32	s0, s0, s0
 801add8:	ee77 7a80 	vadd.f32	s15, s15, s0
 801addc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ade4:	db20      	blt.n	801ae28 <arm_cmplx_mag_f32+0xf4>
 801ade6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801adea:	eeb4 0a40 	vcmp.f32	s0, s0
 801adee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adf2:	d169      	bne.n	801aec8 <arm_cmplx_mag_f32+0x194>
 801adf4:	3e01      	subs	r6, #1
 801adf6:	ed05 0a01 	vstr	s0, [r5, #-4]
 801adfa:	f104 0420 	add.w	r4, r4, #32
 801adfe:	f105 0510 	add.w	r5, r5, #16
 801ae02:	d019      	beq.n	801ae38 <arm_cmplx_mag_f32+0x104>
 801ae04:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 801ae08:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 801ae0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ae10:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ae14:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ae18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae20:	da95      	bge.n	801ad4e <arm_cmplx_mag_f32+0x1a>
 801ae22:	f845 7c10 	str.w	r7, [r5, #-16]
 801ae26:	e79c      	b.n	801ad62 <arm_cmplx_mag_f32+0x2e>
 801ae28:	3e01      	subs	r6, #1
 801ae2a:	f845 7c04 	str.w	r7, [r5, #-4]
 801ae2e:	f104 0420 	add.w	r4, r4, #32
 801ae32:	f105 0510 	add.w	r5, r5, #16
 801ae36:	d1e5      	bne.n	801ae04 <arm_cmplx_mag_f32+0xd0>
 801ae38:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 801ae3c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 801ae40:	f012 0503 	ands.w	r5, r2, #3
 801ae44:	d026      	beq.n	801ae94 <arm_cmplx_mag_f32+0x160>
 801ae46:	f100 0408 	add.w	r4, r0, #8
 801ae4a:	2600      	movs	r6, #0
 801ae4c:	e00c      	b.n	801ae68 <arm_cmplx_mag_f32+0x134>
 801ae4e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801ae52:	eeb4 0a40 	vcmp.f32	s0, s0
 801ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae5a:	d12e      	bne.n	801aeba <arm_cmplx_mag_f32+0x186>
 801ae5c:	3d01      	subs	r5, #1
 801ae5e:	ed01 0a01 	vstr	s0, [r1, #-4]
 801ae62:	f104 0408 	add.w	r4, r4, #8
 801ae66:	d015      	beq.n	801ae94 <arm_cmplx_mag_f32+0x160>
 801ae68:	ed54 7a02 	vldr	s15, [r4, #-8]
 801ae6c:	3104      	adds	r1, #4
 801ae6e:	ed14 0a01 	vldr	s0, [r4, #-4]
 801ae72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ae76:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ae7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ae7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ae82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae86:	dae2      	bge.n	801ae4e <arm_cmplx_mag_f32+0x11a>
 801ae88:	3d01      	subs	r5, #1
 801ae8a:	f841 6c04 	str.w	r6, [r1, #-4]
 801ae8e:	f104 0408 	add.w	r4, r4, #8
 801ae92:	d1e9      	bne.n	801ae68 <arm_cmplx_mag_f32+0x134>
 801ae94:	b004      	add	sp, #16
 801ae96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae9a:	f845 7c08 	str.w	r7, [r5, #-8]
 801ae9e:	e793      	b.n	801adc8 <arm_cmplx_mag_f32+0x94>
 801aea0:	f845 7c0c 	str.w	r7, [r5, #-12]
 801aea4:	e777      	b.n	801ad96 <arm_cmplx_mag_f32+0x62>
 801aea6:	eeb0 0a67 	vmov.f32	s0, s15
 801aeaa:	9203      	str	r2, [sp, #12]
 801aeac:	9102      	str	r1, [sp, #8]
 801aeae:	9001      	str	r0, [sp, #4]
 801aeb0:	f001 fdda 	bl	801ca68 <sqrtf>
 801aeb4:	a801      	add	r0, sp, #4
 801aeb6:	c807      	ldmia	r0, {r0, r1, r2}
 801aeb8:	e751      	b.n	801ad5e <arm_cmplx_mag_f32+0x2a>
 801aeba:	eeb0 0a67 	vmov.f32	s0, s15
 801aebe:	9101      	str	r1, [sp, #4]
 801aec0:	f001 fdd2 	bl	801ca68 <sqrtf>
 801aec4:	9901      	ldr	r1, [sp, #4]
 801aec6:	e7c9      	b.n	801ae5c <arm_cmplx_mag_f32+0x128>
 801aec8:	eeb0 0a67 	vmov.f32	s0, s15
 801aecc:	9203      	str	r2, [sp, #12]
 801aece:	9102      	str	r1, [sp, #8]
 801aed0:	9001      	str	r0, [sp, #4]
 801aed2:	f001 fdc9 	bl	801ca68 <sqrtf>
 801aed6:	a801      	add	r0, sp, #4
 801aed8:	c807      	ldmia	r0, {r0, r1, r2}
 801aeda:	e78b      	b.n	801adf4 <arm_cmplx_mag_f32+0xc0>
 801aedc:	eeb0 0a67 	vmov.f32	s0, s15
 801aee0:	9203      	str	r2, [sp, #12]
 801aee2:	9102      	str	r1, [sp, #8]
 801aee4:	9001      	str	r0, [sp, #4]
 801aee6:	f001 fdbf 	bl	801ca68 <sqrtf>
 801aeea:	a801      	add	r0, sp, #4
 801aeec:	c807      	ldmia	r0, {r0, r1, r2}
 801aeee:	e769      	b.n	801adc4 <arm_cmplx_mag_f32+0x90>
 801aef0:	eeb0 0a67 	vmov.f32	s0, s15
 801aef4:	9203      	str	r2, [sp, #12]
 801aef6:	9102      	str	r1, [sp, #8]
 801aef8:	9001      	str	r0, [sp, #4]
 801aefa:	f001 fdb5 	bl	801ca68 <sqrtf>
 801aefe:	a801      	add	r0, sp, #4
 801af00:	c807      	ldmia	r0, {r0, r1, r2}
 801af02:	e746      	b.n	801ad92 <arm_cmplx_mag_f32+0x5e>

0801af04 <arm_radix8_butterfly_f32>:
 801af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af08:	469e      	mov	lr, r3
 801af0a:	4603      	mov	r3, r0
 801af0c:	468a      	mov	sl, r1
 801af0e:	468b      	mov	fp, r1
 801af10:	3304      	adds	r3, #4
 801af12:	ed2d 8b10 	vpush	{d8-d15}
 801af16:	469c      	mov	ip, r3
 801af18:	b09d      	sub	sp, #116	; 0x74
 801af1a:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 801b228 <arm_radix8_butterfly_f32+0x324>
 801af1e:	9019      	str	r0, [sp, #100]	; 0x64
 801af20:	921a      	str	r2, [sp, #104]	; 0x68
 801af22:	931b      	str	r3, [sp, #108]	; 0x6c
 801af24:	ea4f 03db 	mov.w	r3, fp, lsr #3
 801af28:	f04f 0800 	mov.w	r8, #0
 801af2c:	461a      	mov	r2, r3
 801af2e:	9311      	str	r3, [sp, #68]	; 0x44
 801af30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801af34:	4611      	mov	r1, r2
 801af36:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801af3a:	9300      	str	r3, [sp, #0]
 801af3c:	0053      	lsls	r3, r2, #1
 801af3e:	18d5      	adds	r5, r2, r3
 801af40:	9301      	str	r3, [sp, #4]
 801af42:	0113      	lsls	r3, r2, #4
 801af44:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801af46:	194c      	adds	r4, r1, r5
 801af48:	eb02 0609 	add.w	r6, r2, r9
 801af4c:	9302      	str	r3, [sp, #8]
 801af4e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801af52:	4613      	mov	r3, r2
 801af54:	190a      	adds	r2, r1, r4
 801af56:	eb06 0709 	add.w	r7, r6, r9
 801af5a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801af5e:	1888      	adds	r0, r1, r2
 801af60:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801af64:	4401      	add	r1, r0
 801af66:	3204      	adds	r2, #4
 801af68:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801af6c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801af70:	9b00      	ldr	r3, [sp, #0]
 801af72:	3104      	adds	r1, #4
 801af74:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801af78:	44d8      	add	r8, fp
 801af7a:	ed90 7a00 	vldr	s14, [r0]
 801af7e:	ed94 5a00 	vldr	s10, [r4]
 801af82:	45c2      	cmp	sl, r8
 801af84:	edd7 3a00 	vldr	s7, [r7]
 801af88:	ed96 6a00 	vldr	s12, [r6]
 801af8c:	ee37 1a85 	vadd.f32	s2, s15, s10
 801af90:	ed52 6a01 	vldr	s13, [r2, #-4]
 801af94:	ee73 4a87 	vadd.f32	s9, s7, s14
 801af98:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801af9c:	edd5 7a00 	vldr	s15, [r5]
 801afa0:	ee73 3ac7 	vsub.f32	s7, s7, s14
 801afa4:	ed11 7a01 	vldr	s14, [r1, #-4]
 801afa8:	ee36 2a26 	vadd.f32	s4, s12, s13
 801afac:	ee37 4a87 	vadd.f32	s8, s15, s14
 801afb0:	ee76 6a66 	vsub.f32	s13, s12, s13
 801afb4:	ee71 5a24 	vadd.f32	s11, s2, s9
 801afb8:	ee32 6a04 	vadd.f32	s12, s4, s8
 801afbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801afc0:	ee31 1a64 	vsub.f32	s2, s2, s9
 801afc4:	ee75 4a86 	vadd.f32	s9, s11, s12
 801afc8:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801afcc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 801afd0:	ed4c 4a01 	vstr	s9, [ip, #-4]
 801afd4:	ee32 2a44 	vsub.f32	s4, s4, s8
 801afd8:	ee67 7a89 	vmul.f32	s15, s15, s18
 801afdc:	ed94 0a01 	vldr	s0, [r4, #4]
 801afe0:	edc4 5a00 	vstr	s11, [r4]
 801afe4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801afe8:	edd6 5a01 	vldr	s11, [r6, #4]
 801afec:	edd5 2a01 	vldr	s5, [r5, #4]
 801aff0:	ee75 1a27 	vadd.f32	s3, s10, s15
 801aff4:	ed92 4a00 	vldr	s8, [r2]
 801aff8:	ee75 7a67 	vsub.f32	s15, s10, s15
 801affc:	edd1 4a00 	vldr	s9, [r1]
 801b000:	ee27 7a09 	vmul.f32	s14, s14, s18
 801b004:	ee35 3ac4 	vsub.f32	s6, s11, s8
 801b008:	ed9c 6a00 	vldr	s12, [ip]
 801b00c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 801b010:	edd0 0a01 	vldr	s1, [r0, #4]
 801b014:	ed97 5a01 	vldr	s10, [r7, #4]
 801b018:	ee35 4a84 	vadd.f32	s8, s11, s8
 801b01c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 801b020:	ee73 5a26 	vadd.f32	s11, s6, s13
 801b024:	ee76 2a00 	vadd.f32	s5, s12, s0
 801b028:	ee73 6a66 	vsub.f32	s13, s6, s13
 801b02c:	ee36 6a40 	vsub.f32	s12, s12, s0
 801b030:	ee35 0a20 	vadd.f32	s0, s10, s1
 801b034:	ee65 5a89 	vmul.f32	s11, s11, s18
 801b038:	ee35 5a60 	vsub.f32	s10, s10, s1
 801b03c:	ee32 3a80 	vadd.f32	s6, s5, s0
 801b040:	ee74 0a24 	vadd.f32	s1, s8, s9
 801b044:	ee66 6a89 	vmul.f32	s13, s13, s18
 801b048:	ee74 4a64 	vsub.f32	s9, s8, s9
 801b04c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 801b050:	ee75 2a25 	vadd.f32	s5, s10, s11
 801b054:	ee33 0a20 	vadd.f32	s0, s6, s1
 801b058:	ee75 5a65 	vsub.f32	s11, s10, s11
 801b05c:	ee33 3a60 	vsub.f32	s6, s6, s1
 801b060:	ee36 5a26 	vadd.f32	s10, s12, s13
 801b064:	ed8c 0a00 	vstr	s0, [ip]
 801b068:	ee76 6a66 	vsub.f32	s13, s12, s13
 801b06c:	449c      	add	ip, r3
 801b06e:	ee33 6a87 	vadd.f32	s12, s7, s14
 801b072:	ed84 3a01 	vstr	s6, [r4, #4]
 801b076:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801b07a:	441c      	add	r4, r3
 801b07c:	ee71 3a24 	vadd.f32	s7, s2, s9
 801b080:	ee71 4a64 	vsub.f32	s9, s2, s9
 801b084:	ee31 3aa2 	vadd.f32	s6, s3, s5
 801b088:	edc7 3a00 	vstr	s7, [r7]
 801b08c:	ee34 1a42 	vsub.f32	s2, s8, s4
 801b090:	edc0 4a00 	vstr	s9, [r0]
 801b094:	ee77 3aa5 	vadd.f32	s7, s15, s11
 801b098:	ee75 4a46 	vsub.f32	s9, s10, s12
 801b09c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801b0a0:	ed87 1a01 	vstr	s2, [r7, #4]
 801b0a4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801b0a8:	441f      	add	r7, r3
 801b0aa:	ee32 4a04 	vadd.f32	s8, s4, s8
 801b0ae:	ee71 1ae2 	vsub.f32	s3, s3, s5
 801b0b2:	ee36 6a05 	vadd.f32	s12, s12, s10
 801b0b6:	ee37 7a26 	vadd.f32	s14, s14, s13
 801b0ba:	ed80 4a01 	vstr	s8, [r0, #4]
 801b0be:	ed86 3a00 	vstr	s6, [r6]
 801b0c2:	4418      	add	r0, r3
 801b0c4:	ed41 1a01 	vstr	s3, [r1, #-4]
 801b0c8:	ed42 3a01 	vstr	s7, [r2, #-4]
 801b0cc:	edc5 7a00 	vstr	s15, [r5]
 801b0d0:	edc6 4a01 	vstr	s9, [r6, #4]
 801b0d4:	441e      	add	r6, r3
 801b0d6:	ed81 6a00 	vstr	s12, [r1]
 801b0da:	4419      	add	r1, r3
 801b0dc:	edc2 5a00 	vstr	s11, [r2]
 801b0e0:	441a      	add	r2, r3
 801b0e2:	ed85 7a01 	vstr	s14, [r5, #4]
 801b0e6:	441d      	add	r5, r3
 801b0e8:	f63f af44 	bhi.w	801af74 <arm_radix8_butterfly_f32+0x70>
 801b0ec:	9300      	str	r3, [sp, #0]
 801b0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b0f0:	2b07      	cmp	r3, #7
 801b0f2:	f240 81f4 	bls.w	801b4de <arm_radix8_butterfly_f32+0x5da>
 801b0f6:	9901      	ldr	r1, [sp, #4]
 801b0f8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801b0fc:	9d02      	ldr	r5, [sp, #8]
 801b0fe:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 801b102:	3101      	adds	r1, #1
 801b104:	eb04 000e 	add.w	r0, r4, lr
 801b108:	00e4      	lsls	r4, r4, #3
 801b10a:	3508      	adds	r5, #8
 801b10c:	4419      	add	r1, r3
 801b10e:	eb00 0c0e 	add.w	ip, r0, lr
 801b112:	9413      	str	r4, [sp, #76]	; 0x4c
 801b114:	00c0      	lsls	r0, r0, #3
 801b116:	185e      	adds	r6, r3, r1
 801b118:	4617      	mov	r7, r2
 801b11a:	9218      	str	r2, [sp, #96]	; 0x60
 801b11c:	f109 0908 	add.w	r9, r9, #8
 801b120:	199c      	adds	r4, r3, r6
 801b122:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b124:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b126:	9012      	str	r0, [sp, #72]	; 0x48
 801b128:	195d      	adds	r5, r3, r5
 801b12a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b12c:	443a      	add	r2, r7
 801b12e:	950c      	str	r5, [sp, #48]	; 0x30
 801b130:	4698      	mov	r8, r3
 801b132:	4420      	add	r0, r4
 801b134:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b136:	19d7      	adds	r7, r2, r7
 801b138:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801b13c:	4405      	add	r5, r0
 801b13e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801b142:	9710      	str	r7, [sp, #64]	; 0x40
 801b144:	eb0c 070e 	add.w	r7, ip, lr
 801b148:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b14c:	3404      	adds	r4, #4
 801b14e:	3004      	adds	r0, #4
 801b150:	44c8      	add	r8, r9
 801b152:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 801b156:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b158:	940a      	str	r4, [sp, #40]	; 0x28
 801b15a:	9009      	str	r0, [sp, #36]	; 0x24
 801b15c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801b160:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b162:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801b166:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b168:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801b16c:	eb07 080e 	add.w	r8, r7, lr
 801b170:	eb04 0900 	add.w	r9, r4, r0
 801b174:	00f8      	lsls	r0, r7, #3
 801b176:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801b17a:	3504      	adds	r5, #4
 801b17c:	4607      	mov	r7, r0
 801b17e:	9017      	str	r0, [sp, #92]	; 0x5c
 801b180:	910b      	str	r1, [sp, #44]	; 0x2c
 801b182:	4618      	mov	r0, r3
 801b184:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 801b188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b18a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801b18e:	18e3      	adds	r3, r4, r3
 801b190:	9508      	str	r5, [sp, #32]
 801b192:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b194:	910e      	str	r1, [sp, #56]	; 0x38
 801b196:	4621      	mov	r1, r4
 801b198:	eb04 0805 	add.w	r8, r4, r5
 801b19c:	9304      	str	r3, [sp, #16]
 801b19e:	19e5      	adds	r5, r4, r7
 801b1a0:	ea4f 130e 	mov.w	r3, lr, lsl #4
 801b1a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1a6:	9316      	str	r3, [sp, #88]	; 0x58
 801b1a8:	190b      	adds	r3, r1, r4
 801b1aa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b1ac:	9505      	str	r5, [sp, #20]
 801b1ae:	9303      	str	r3, [sp, #12]
 801b1b0:	f100 0308 	add.w	r3, r0, #8
 801b1b4:	9707      	str	r7, [sp, #28]
 801b1b6:	4638      	mov	r0, r7
 801b1b8:	930f      	str	r3, [sp, #60]	; 0x3c
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	9306      	str	r3, [sp, #24]
 801b1be:	9b00      	ldr	r3, [sp, #0]
 801b1c0:	ed90 fa00 	vldr	s30, [r0]
 801b1c4:	edd0 ba01 	vldr	s23, [r0, #4]
 801b1c8:	9803      	ldr	r0, [sp, #12]
 801b1ca:	9903      	ldr	r1, [sp, #12]
 801b1cc:	ed90 ba01 	vldr	s22, [r0, #4]
 801b1d0:	9804      	ldr	r0, [sp, #16]
 801b1d2:	edd1 ea00 	vldr	s29, [r1]
 801b1d6:	edd0 aa01 	vldr	s21, [r0, #4]
 801b1da:	9805      	ldr	r0, [sp, #20]
 801b1dc:	9905      	ldr	r1, [sp, #20]
 801b1de:	edd0 7a01 	vldr	s15, [r0, #4]
 801b1e2:	ed91 da00 	vldr	s26, [r1]
 801b1e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b1e8:	9c04      	ldr	r4, [sp, #16]
 801b1ea:	edcd 7a01 	vstr	s15, [sp, #4]
 801b1ee:	edd8 7a01 	vldr	s15, [r8, #4]
 801b1f2:	9100      	str	r1, [sp, #0]
 801b1f4:	edd2 fa00 	vldr	s31, [r2]
 801b1f8:	ed94 ea00 	vldr	s28, [r4]
 801b1fc:	ed92 ca01 	vldr	s24, [r2, #4]
 801b200:	f8dd e020 	ldr.w	lr, [sp, #32]
 801b204:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b206:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b208:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b20a:	edd9 da00 	vldr	s27, [r9]
 801b20e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b210:	edd8 ca00 	vldr	s25, [r8]
 801b214:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b218:	f8dd c018 	ldr.w	ip, [sp, #24]
 801b21c:	ed99 aa01 	vldr	s20, [r9, #4]
 801b220:	edcd 7a02 	vstr	s15, [sp, #8]
 801b224:	9800      	ldr	r0, [sp, #0]
 801b226:	e001      	b.n	801b22c <arm_radix8_butterfly_f32+0x328>
 801b228:	3f3504f3 	.word	0x3f3504f3
 801b22c:	edd5 3a00 	vldr	s7, [r5]
 801b230:	44dc      	add	ip, fp
 801b232:	ed91 7a00 	vldr	s14, [r1]
 801b236:	edd4 8a00 	vldr	s17, [r4]
 801b23a:	45e2      	cmp	sl, ip
 801b23c:	ed57 7a01 	vldr	s15, [r7, #-4]
 801b240:	ed90 5a00 	vldr	s10, [r0]
 801b244:	ed56 5a01 	vldr	s11, [r6, #-4]
 801b248:	ee38 6aa7 	vadd.f32	s12, s17, s15
 801b24c:	ed92 1a00 	vldr	s2, [r2]
 801b250:	ee78 4ae7 	vsub.f32	s9, s17, s15
 801b254:	ed1e 4a01 	vldr	s8, [lr, #-4]
 801b258:	ee75 9a25 	vadd.f32	s19, s10, s11
 801b25c:	ee31 3a07 	vadd.f32	s6, s2, s14
 801b260:	ed92 8a01 	vldr	s16, [r2, #4]
 801b264:	ee73 6a84 	vadd.f32	s13, s7, s8
 801b268:	ee75 5a65 	vsub.f32	s11, s10, s11
 801b26c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801b270:	ee73 1a06 	vadd.f32	s3, s6, s12
 801b274:	ee39 5aa6 	vadd.f32	s10, s19, s13
 801b278:	ee75 7a84 	vadd.f32	s15, s11, s8
 801b27c:	ee31 1a47 	vsub.f32	s2, s2, s14
 801b280:	ee31 7a85 	vadd.f32	s14, s3, s10
 801b284:	ee67 7a89 	vmul.f32	s15, s15, s18
 801b288:	ee33 3a46 	vsub.f32	s6, s6, s12
 801b28c:	ed82 7a00 	vstr	s14, [r2]
 801b290:	ee79 9ae6 	vsub.f32	s19, s19, s13
 801b294:	ed96 6a00 	vldr	s12, [r6]
 801b298:	ee34 2aa7 	vadd.f32	s4, s9, s15
 801b29c:	edd5 3a01 	vldr	s7, [r5, #4]
 801b2a0:	ee74 8ae7 	vsub.f32	s17, s9, s15
 801b2a4:	ed90 7a01 	vldr	s14, [r0, #4]
 801b2a8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 801b2ac:	edde 4a00 	vldr	s9, [lr]
 801b2b0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 801b2b4:	ee77 2a46 	vsub.f32	s5, s14, s12
 801b2b8:	edd1 6a01 	vldr	s13, [r1, #4]
 801b2bc:	ee73 7ae4 	vsub.f32	s15, s7, s9
 801b2c0:	edd7 0a00 	vldr	s1, [r7]
 801b2c4:	ee77 5a06 	vadd.f32	s11, s14, s12
 801b2c8:	ed94 7a01 	vldr	s14, [r4, #4]
 801b2cc:	ee33 6aa4 	vadd.f32	s12, s7, s9
 801b2d0:	ee32 0ae7 	vsub.f32	s0, s5, s15
 801b2d4:	ee78 4a66 	vsub.f32	s9, s16, s13
 801b2d8:	ee78 3a26 	vadd.f32	s7, s16, s13
 801b2dc:	ee72 2aa7 	vadd.f32	s5, s5, s15
 801b2e0:	ee77 6a20 	vadd.f32	s13, s14, s1
 801b2e4:	ee24 4a09 	vmul.f32	s8, s8, s18
 801b2e8:	ee37 7a60 	vsub.f32	s14, s14, s1
 801b2ec:	ee20 8a09 	vmul.f32	s16, s0, s18
 801b2f0:	ee75 0a86 	vadd.f32	s1, s11, s12
 801b2f4:	ee33 0aa6 	vadd.f32	s0, s7, s13
 801b2f8:	ee62 2a89 	vmul.f32	s5, s5, s18
 801b2fc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801b300:	ee73 3ae6 	vsub.f32	s7, s7, s13
 801b304:	ee77 7a62 	vsub.f32	s15, s14, s5
 801b308:	ee74 5a88 	vadd.f32	s11, s9, s16
 801b30c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 801b310:	ee77 4a22 	vadd.f32	s9, s14, s5
 801b314:	ee71 2a04 	vadd.f32	s5, s2, s8
 801b318:	ee31 7a44 	vsub.f32	s14, s2, s8
 801b31c:	ee30 1a60 	vsub.f32	s2, s0, s1
 801b320:	ee73 1a06 	vadd.f32	s3, s6, s12
 801b324:	ee33 6a46 	vsub.f32	s12, s6, s12
 801b328:	ee33 3ae9 	vsub.f32	s6, s7, s19
 801b32c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 801b330:	ee38 4a68 	vsub.f32	s8, s16, s17
 801b334:	ee75 3ac2 	vsub.f32	s7, s11, s4
 801b338:	ee72 5a25 	vadd.f32	s11, s4, s11
 801b33c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 801b340:	ee72 4ae4 	vsub.f32	s9, s5, s9
 801b344:	ee77 2a27 	vadd.f32	s5, s14, s15
 801b348:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b34c:	ee78 7a88 	vadd.f32	s15, s17, s16
 801b350:	ee6e 8a05 	vmul.f32	s17, s28, s10
 801b354:	ee2a 8a81 	vmul.f32	s16, s21, s2
 801b358:	ee2a 5a85 	vmul.f32	s10, s21, s10
 801b35c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 801b360:	ee6f 9a21 	vmul.f32	s19, s30, s3
 801b364:	ee70 0a20 	vadd.f32	s1, s0, s1
 801b368:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 801b36c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 801b370:	ee2f 3a03 	vmul.f32	s6, s30, s6
 801b374:	edc2 0a01 	vstr	s1, [r2, #4]
 801b378:	ee38 8a88 	vadd.f32	s16, s17, s16
 801b37c:	441a      	add	r2, r3
 801b37e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 801b382:	ee31 5a45 	vsub.f32	s10, s2, s10
 801b386:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801b38a:	ed81 8a00 	vstr	s16, [r1]
 801b38e:	ee39 0a80 	vadd.f32	s0, s19, s0
 801b392:	ee33 3a61 	vsub.f32	s6, s6, s3
 801b396:	ed81 5a01 	vstr	s10, [r1, #4]
 801b39a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 801b39e:	edcd 3a00 	vstr	s7, [sp]
 801b3a2:	ed9d 5a02 	vldr	s10, [sp, #8]
 801b3a6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 801b3aa:	eddd 3a01 	vldr	s7, [sp, #4]
 801b3ae:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 801b3b2:	ed84 0a00 	vstr	s0, [r4]
 801b3b6:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b3ba:	ed84 3a01 	vstr	s6, [r4, #4]
 801b3be:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801b3c2:	ee23 6a86 	vmul.f32	s12, s7, s12
 801b3c6:	eddd 3a00 	vldr	s7, [sp]
 801b3ca:	ee25 5a25 	vmul.f32	s10, s10, s11
 801b3ce:	4419      	add	r1, r3
 801b3d0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 801b3d4:	441c      	add	r4, r3
 801b3d6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 801b3da:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801b3de:	ee2e 3a87 	vmul.f32	s6, s29, s14
 801b3e2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 801b3e6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 801b3ea:	ee6d 6a26 	vmul.f32	s13, s26, s13
 801b3ee:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 801b3f2:	ee6a 2a22 	vmul.f32	s5, s20, s5
 801b3f6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 801b3fa:	ee2b 7a07 	vmul.f32	s14, s22, s14
 801b3fe:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 801b402:	ee73 3ac2 	vsub.f32	s7, s7, s4
 801b406:	ee38 8a01 	vadd.f32	s16, s16, s2
 801b40a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801b40e:	ee39 5a85 	vadd.f32	s10, s19, s10
 801b412:	ee75 4ae4 	vsub.f32	s9, s11, s9
 801b416:	ed07 8a01 	vstr	s16, [r7, #-4]
 801b41a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801b41e:	ed87 6a00 	vstr	s12, [r7]
 801b422:	ee74 2a62 	vsub.f32	s5, s8, s5
 801b426:	edc0 0a00 	vstr	s1, [r0]
 801b42a:	ee33 3a28 	vadd.f32	s6, s6, s17
 801b42e:	edc0 3a01 	vstr	s7, [r0, #4]
 801b432:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801b436:	ed0e 5a01 	vstr	s10, [lr, #-4]
 801b43a:	edce 4a00 	vstr	s9, [lr]
 801b43e:	4418      	add	r0, r3
 801b440:	ed06 0a01 	vstr	s0, [r6, #-4]
 801b444:	441f      	add	r7, r3
 801b446:	edc6 2a00 	vstr	s5, [r6]
 801b44a:	449e      	add	lr, r3
 801b44c:	ed85 3a00 	vstr	s6, [r5]
 801b450:	441e      	add	r6, r3
 801b452:	ed85 7a01 	vstr	s14, [r5, #4]
 801b456:	441d      	add	r5, r3
 801b458:	f63f aee8 	bhi.w	801b22c <arm_radix8_butterfly_f32+0x328>
 801b45c:	9a06      	ldr	r2, [sp, #24]
 801b45e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b460:	3201      	adds	r2, #1
 801b462:	4611      	mov	r1, r2
 801b464:	9206      	str	r2, [sp, #24]
 801b466:	9a07      	ldr	r2, [sp, #28]
 801b468:	4402      	add	r2, r0
 801b46a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b46c:	9207      	str	r2, [sp, #28]
 801b46e:	9a03      	ldr	r2, [sp, #12]
 801b470:	4402      	add	r2, r0
 801b472:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b474:	9203      	str	r2, [sp, #12]
 801b476:	9a04      	ldr	r2, [sp, #16]
 801b478:	4402      	add	r2, r0
 801b47a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b47c:	9204      	str	r2, [sp, #16]
 801b47e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b480:	4491      	add	r9, r2
 801b482:	9a05      	ldr	r2, [sp, #20]
 801b484:	4402      	add	r2, r0
 801b486:	9205      	str	r2, [sp, #20]
 801b488:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b48a:	4490      	add	r8, r2
 801b48c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b48e:	3208      	adds	r2, #8
 801b490:	920f      	str	r2, [sp, #60]	; 0x3c
 801b492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b494:	3208      	adds	r2, #8
 801b496:	920e      	str	r2, [sp, #56]	; 0x38
 801b498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b49a:	3208      	adds	r2, #8
 801b49c:	920d      	str	r2, [sp, #52]	; 0x34
 801b49e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b4a0:	3208      	adds	r2, #8
 801b4a2:	920c      	str	r2, [sp, #48]	; 0x30
 801b4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b4a6:	3208      	adds	r2, #8
 801b4a8:	920b      	str	r2, [sp, #44]	; 0x2c
 801b4aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b4ac:	3208      	adds	r2, #8
 801b4ae:	920a      	str	r2, [sp, #40]	; 0x28
 801b4b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4b2:	3208      	adds	r2, #8
 801b4b4:	9209      	str	r2, [sp, #36]	; 0x24
 801b4b6:	9a08      	ldr	r2, [sp, #32]
 801b4b8:	3208      	adds	r2, #8
 801b4ba:	9208      	str	r2, [sp, #32]
 801b4bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b4be:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b4c0:	4622      	mov	r2, r4
 801b4c2:	4288      	cmp	r0, r1
 801b4c4:	d005      	beq.n	801b4d2 <arm_radix8_butterfly_f32+0x5ce>
 801b4c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801b4c8:	4621      	mov	r1, r4
 801b4ca:	4401      	add	r1, r0
 801b4cc:	9807      	ldr	r0, [sp, #28]
 801b4ce:	9110      	str	r1, [sp, #64]	; 0x40
 801b4d0:	e676      	b.n	801b1c0 <arm_radix8_butterfly_f32+0x2bc>
 801b4d2:	4683      	mov	fp, r0
 801b4d4:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 801b4d8:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801b4dc:	e522      	b.n	801af24 <arm_radix8_butterfly_f32+0x20>
 801b4de:	b01d      	add	sp, #116	; 0x74
 801b4e0:	ecbd 8b10 	vpop	{d8-d15}
 801b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4e8 <__errno>:
 801b4e8:	4b01      	ldr	r3, [pc, #4]	; (801b4f0 <__errno+0x8>)
 801b4ea:	6818      	ldr	r0, [r3, #0]
 801b4ec:	4770      	bx	lr
 801b4ee:	bf00      	nop
 801b4f0:	2000007c 	.word	0x2000007c

0801b4f4 <__libc_init_array>:
 801b4f4:	b570      	push	{r4, r5, r6, lr}
 801b4f6:	4d0d      	ldr	r5, [pc, #52]	; (801b52c <__libc_init_array+0x38>)
 801b4f8:	4c0d      	ldr	r4, [pc, #52]	; (801b530 <__libc_init_array+0x3c>)
 801b4fa:	1b64      	subs	r4, r4, r5
 801b4fc:	10a4      	asrs	r4, r4, #2
 801b4fe:	2600      	movs	r6, #0
 801b500:	42a6      	cmp	r6, r4
 801b502:	d109      	bne.n	801b518 <__libc_init_array+0x24>
 801b504:	4d0b      	ldr	r5, [pc, #44]	; (801b534 <__libc_init_array+0x40>)
 801b506:	4c0c      	ldr	r4, [pc, #48]	; (801b538 <__libc_init_array+0x44>)
 801b508:	f001 fad8 	bl	801cabc <_init>
 801b50c:	1b64      	subs	r4, r4, r5
 801b50e:	10a4      	asrs	r4, r4, #2
 801b510:	2600      	movs	r6, #0
 801b512:	42a6      	cmp	r6, r4
 801b514:	d105      	bne.n	801b522 <__libc_init_array+0x2e>
 801b516:	bd70      	pop	{r4, r5, r6, pc}
 801b518:	f855 3b04 	ldr.w	r3, [r5], #4
 801b51c:	4798      	blx	r3
 801b51e:	3601      	adds	r6, #1
 801b520:	e7ee      	b.n	801b500 <__libc_init_array+0xc>
 801b522:	f855 3b04 	ldr.w	r3, [r5], #4
 801b526:	4798      	blx	r3
 801b528:	3601      	adds	r6, #1
 801b52a:	e7f2      	b.n	801b512 <__libc_init_array+0x1e>
 801b52c:	08032cec 	.word	0x08032cec
 801b530:	08032cec 	.word	0x08032cec
 801b534:	08032cec 	.word	0x08032cec
 801b538:	08032cf0 	.word	0x08032cf0

0801b53c <malloc>:
 801b53c:	4b02      	ldr	r3, [pc, #8]	; (801b548 <malloc+0xc>)
 801b53e:	4601      	mov	r1, r0
 801b540:	6818      	ldr	r0, [r3, #0]
 801b542:	f000 b871 	b.w	801b628 <_malloc_r>
 801b546:	bf00      	nop
 801b548:	2000007c 	.word	0x2000007c

0801b54c <free>:
 801b54c:	4b02      	ldr	r3, [pc, #8]	; (801b558 <free+0xc>)
 801b54e:	4601      	mov	r1, r0
 801b550:	6818      	ldr	r0, [r3, #0]
 801b552:	f000 b819 	b.w	801b588 <_free_r>
 801b556:	bf00      	nop
 801b558:	2000007c 	.word	0x2000007c

0801b55c <memcpy>:
 801b55c:	440a      	add	r2, r1
 801b55e:	4291      	cmp	r1, r2
 801b560:	f100 33ff 	add.w	r3, r0, #4294967295
 801b564:	d100      	bne.n	801b568 <memcpy+0xc>
 801b566:	4770      	bx	lr
 801b568:	b510      	push	{r4, lr}
 801b56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b572:	4291      	cmp	r1, r2
 801b574:	d1f9      	bne.n	801b56a <memcpy+0xe>
 801b576:	bd10      	pop	{r4, pc}

0801b578 <memset>:
 801b578:	4402      	add	r2, r0
 801b57a:	4603      	mov	r3, r0
 801b57c:	4293      	cmp	r3, r2
 801b57e:	d100      	bne.n	801b582 <memset+0xa>
 801b580:	4770      	bx	lr
 801b582:	f803 1b01 	strb.w	r1, [r3], #1
 801b586:	e7f9      	b.n	801b57c <memset+0x4>

0801b588 <_free_r>:
 801b588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b58a:	2900      	cmp	r1, #0
 801b58c:	d048      	beq.n	801b620 <_free_r+0x98>
 801b58e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b592:	9001      	str	r0, [sp, #4]
 801b594:	2b00      	cmp	r3, #0
 801b596:	f1a1 0404 	sub.w	r4, r1, #4
 801b59a:	bfb8      	it	lt
 801b59c:	18e4      	addlt	r4, r4, r3
 801b59e:	f000 fc4f 	bl	801be40 <__malloc_lock>
 801b5a2:	4a20      	ldr	r2, [pc, #128]	; (801b624 <_free_r+0x9c>)
 801b5a4:	9801      	ldr	r0, [sp, #4]
 801b5a6:	6813      	ldr	r3, [r2, #0]
 801b5a8:	4615      	mov	r5, r2
 801b5aa:	b933      	cbnz	r3, 801b5ba <_free_r+0x32>
 801b5ac:	6063      	str	r3, [r4, #4]
 801b5ae:	6014      	str	r4, [r2, #0]
 801b5b0:	b003      	add	sp, #12
 801b5b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5b6:	f000 bc49 	b.w	801be4c <__malloc_unlock>
 801b5ba:	42a3      	cmp	r3, r4
 801b5bc:	d90b      	bls.n	801b5d6 <_free_r+0x4e>
 801b5be:	6821      	ldr	r1, [r4, #0]
 801b5c0:	1862      	adds	r2, r4, r1
 801b5c2:	4293      	cmp	r3, r2
 801b5c4:	bf04      	itt	eq
 801b5c6:	681a      	ldreq	r2, [r3, #0]
 801b5c8:	685b      	ldreq	r3, [r3, #4]
 801b5ca:	6063      	str	r3, [r4, #4]
 801b5cc:	bf04      	itt	eq
 801b5ce:	1852      	addeq	r2, r2, r1
 801b5d0:	6022      	streq	r2, [r4, #0]
 801b5d2:	602c      	str	r4, [r5, #0]
 801b5d4:	e7ec      	b.n	801b5b0 <_free_r+0x28>
 801b5d6:	461a      	mov	r2, r3
 801b5d8:	685b      	ldr	r3, [r3, #4]
 801b5da:	b10b      	cbz	r3, 801b5e0 <_free_r+0x58>
 801b5dc:	42a3      	cmp	r3, r4
 801b5de:	d9fa      	bls.n	801b5d6 <_free_r+0x4e>
 801b5e0:	6811      	ldr	r1, [r2, #0]
 801b5e2:	1855      	adds	r5, r2, r1
 801b5e4:	42a5      	cmp	r5, r4
 801b5e6:	d10b      	bne.n	801b600 <_free_r+0x78>
 801b5e8:	6824      	ldr	r4, [r4, #0]
 801b5ea:	4421      	add	r1, r4
 801b5ec:	1854      	adds	r4, r2, r1
 801b5ee:	42a3      	cmp	r3, r4
 801b5f0:	6011      	str	r1, [r2, #0]
 801b5f2:	d1dd      	bne.n	801b5b0 <_free_r+0x28>
 801b5f4:	681c      	ldr	r4, [r3, #0]
 801b5f6:	685b      	ldr	r3, [r3, #4]
 801b5f8:	6053      	str	r3, [r2, #4]
 801b5fa:	4421      	add	r1, r4
 801b5fc:	6011      	str	r1, [r2, #0]
 801b5fe:	e7d7      	b.n	801b5b0 <_free_r+0x28>
 801b600:	d902      	bls.n	801b608 <_free_r+0x80>
 801b602:	230c      	movs	r3, #12
 801b604:	6003      	str	r3, [r0, #0]
 801b606:	e7d3      	b.n	801b5b0 <_free_r+0x28>
 801b608:	6825      	ldr	r5, [r4, #0]
 801b60a:	1961      	adds	r1, r4, r5
 801b60c:	428b      	cmp	r3, r1
 801b60e:	bf04      	itt	eq
 801b610:	6819      	ldreq	r1, [r3, #0]
 801b612:	685b      	ldreq	r3, [r3, #4]
 801b614:	6063      	str	r3, [r4, #4]
 801b616:	bf04      	itt	eq
 801b618:	1949      	addeq	r1, r1, r5
 801b61a:	6021      	streq	r1, [r4, #0]
 801b61c:	6054      	str	r4, [r2, #4]
 801b61e:	e7c7      	b.n	801b5b0 <_free_r+0x28>
 801b620:	b003      	add	sp, #12
 801b622:	bd30      	pop	{r4, r5, pc}
 801b624:	200085a4 	.word	0x200085a4

0801b628 <_malloc_r>:
 801b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b62a:	1ccd      	adds	r5, r1, #3
 801b62c:	f025 0503 	bic.w	r5, r5, #3
 801b630:	3508      	adds	r5, #8
 801b632:	2d0c      	cmp	r5, #12
 801b634:	bf38      	it	cc
 801b636:	250c      	movcc	r5, #12
 801b638:	2d00      	cmp	r5, #0
 801b63a:	4606      	mov	r6, r0
 801b63c:	db01      	blt.n	801b642 <_malloc_r+0x1a>
 801b63e:	42a9      	cmp	r1, r5
 801b640:	d903      	bls.n	801b64a <_malloc_r+0x22>
 801b642:	230c      	movs	r3, #12
 801b644:	6033      	str	r3, [r6, #0]
 801b646:	2000      	movs	r0, #0
 801b648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b64a:	f000 fbf9 	bl	801be40 <__malloc_lock>
 801b64e:	4921      	ldr	r1, [pc, #132]	; (801b6d4 <_malloc_r+0xac>)
 801b650:	680a      	ldr	r2, [r1, #0]
 801b652:	4614      	mov	r4, r2
 801b654:	b99c      	cbnz	r4, 801b67e <_malloc_r+0x56>
 801b656:	4f20      	ldr	r7, [pc, #128]	; (801b6d8 <_malloc_r+0xb0>)
 801b658:	683b      	ldr	r3, [r7, #0]
 801b65a:	b923      	cbnz	r3, 801b666 <_malloc_r+0x3e>
 801b65c:	4621      	mov	r1, r4
 801b65e:	4630      	mov	r0, r6
 801b660:	f000 f8e0 	bl	801b824 <_sbrk_r>
 801b664:	6038      	str	r0, [r7, #0]
 801b666:	4629      	mov	r1, r5
 801b668:	4630      	mov	r0, r6
 801b66a:	f000 f8db 	bl	801b824 <_sbrk_r>
 801b66e:	1c43      	adds	r3, r0, #1
 801b670:	d123      	bne.n	801b6ba <_malloc_r+0x92>
 801b672:	230c      	movs	r3, #12
 801b674:	6033      	str	r3, [r6, #0]
 801b676:	4630      	mov	r0, r6
 801b678:	f000 fbe8 	bl	801be4c <__malloc_unlock>
 801b67c:	e7e3      	b.n	801b646 <_malloc_r+0x1e>
 801b67e:	6823      	ldr	r3, [r4, #0]
 801b680:	1b5b      	subs	r3, r3, r5
 801b682:	d417      	bmi.n	801b6b4 <_malloc_r+0x8c>
 801b684:	2b0b      	cmp	r3, #11
 801b686:	d903      	bls.n	801b690 <_malloc_r+0x68>
 801b688:	6023      	str	r3, [r4, #0]
 801b68a:	441c      	add	r4, r3
 801b68c:	6025      	str	r5, [r4, #0]
 801b68e:	e004      	b.n	801b69a <_malloc_r+0x72>
 801b690:	6863      	ldr	r3, [r4, #4]
 801b692:	42a2      	cmp	r2, r4
 801b694:	bf0c      	ite	eq
 801b696:	600b      	streq	r3, [r1, #0]
 801b698:	6053      	strne	r3, [r2, #4]
 801b69a:	4630      	mov	r0, r6
 801b69c:	f000 fbd6 	bl	801be4c <__malloc_unlock>
 801b6a0:	f104 000b 	add.w	r0, r4, #11
 801b6a4:	1d23      	adds	r3, r4, #4
 801b6a6:	f020 0007 	bic.w	r0, r0, #7
 801b6aa:	1ac2      	subs	r2, r0, r3
 801b6ac:	d0cc      	beq.n	801b648 <_malloc_r+0x20>
 801b6ae:	1a1b      	subs	r3, r3, r0
 801b6b0:	50a3      	str	r3, [r4, r2]
 801b6b2:	e7c9      	b.n	801b648 <_malloc_r+0x20>
 801b6b4:	4622      	mov	r2, r4
 801b6b6:	6864      	ldr	r4, [r4, #4]
 801b6b8:	e7cc      	b.n	801b654 <_malloc_r+0x2c>
 801b6ba:	1cc4      	adds	r4, r0, #3
 801b6bc:	f024 0403 	bic.w	r4, r4, #3
 801b6c0:	42a0      	cmp	r0, r4
 801b6c2:	d0e3      	beq.n	801b68c <_malloc_r+0x64>
 801b6c4:	1a21      	subs	r1, r4, r0
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	f000 f8ac 	bl	801b824 <_sbrk_r>
 801b6cc:	3001      	adds	r0, #1
 801b6ce:	d1dd      	bne.n	801b68c <_malloc_r+0x64>
 801b6d0:	e7cf      	b.n	801b672 <_malloc_r+0x4a>
 801b6d2:	bf00      	nop
 801b6d4:	200085a4 	.word	0x200085a4
 801b6d8:	200085a8 	.word	0x200085a8

0801b6dc <iprintf>:
 801b6dc:	b40f      	push	{r0, r1, r2, r3}
 801b6de:	4b0a      	ldr	r3, [pc, #40]	; (801b708 <iprintf+0x2c>)
 801b6e0:	b513      	push	{r0, r1, r4, lr}
 801b6e2:	681c      	ldr	r4, [r3, #0]
 801b6e4:	b124      	cbz	r4, 801b6f0 <iprintf+0x14>
 801b6e6:	69a3      	ldr	r3, [r4, #24]
 801b6e8:	b913      	cbnz	r3, 801b6f0 <iprintf+0x14>
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	f000 faa4 	bl	801bc38 <__sinit>
 801b6f0:	ab05      	add	r3, sp, #20
 801b6f2:	9a04      	ldr	r2, [sp, #16]
 801b6f4:	68a1      	ldr	r1, [r4, #8]
 801b6f6:	9301      	str	r3, [sp, #4]
 801b6f8:	4620      	mov	r0, r4
 801b6fa:	f000 fd33 	bl	801c164 <_vfiprintf_r>
 801b6fe:	b002      	add	sp, #8
 801b700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b704:	b004      	add	sp, #16
 801b706:	4770      	bx	lr
 801b708:	2000007c 	.word	0x2000007c

0801b70c <putchar>:
 801b70c:	4b09      	ldr	r3, [pc, #36]	; (801b734 <putchar+0x28>)
 801b70e:	b513      	push	{r0, r1, r4, lr}
 801b710:	681c      	ldr	r4, [r3, #0]
 801b712:	4601      	mov	r1, r0
 801b714:	b134      	cbz	r4, 801b724 <putchar+0x18>
 801b716:	69a3      	ldr	r3, [r4, #24]
 801b718:	b923      	cbnz	r3, 801b724 <putchar+0x18>
 801b71a:	9001      	str	r0, [sp, #4]
 801b71c:	4620      	mov	r0, r4
 801b71e:	f000 fa8b 	bl	801bc38 <__sinit>
 801b722:	9901      	ldr	r1, [sp, #4]
 801b724:	68a2      	ldr	r2, [r4, #8]
 801b726:	4620      	mov	r0, r4
 801b728:	b002      	add	sp, #8
 801b72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b72e:	f000 bfdd 	b.w	801c6ec <_putc_r>
 801b732:	bf00      	nop
 801b734:	2000007c 	.word	0x2000007c

0801b738 <_puts_r>:
 801b738:	b570      	push	{r4, r5, r6, lr}
 801b73a:	460e      	mov	r6, r1
 801b73c:	4605      	mov	r5, r0
 801b73e:	b118      	cbz	r0, 801b748 <_puts_r+0x10>
 801b740:	6983      	ldr	r3, [r0, #24]
 801b742:	b90b      	cbnz	r3, 801b748 <_puts_r+0x10>
 801b744:	f000 fa78 	bl	801bc38 <__sinit>
 801b748:	69ab      	ldr	r3, [r5, #24]
 801b74a:	68ac      	ldr	r4, [r5, #8]
 801b74c:	b913      	cbnz	r3, 801b754 <_puts_r+0x1c>
 801b74e:	4628      	mov	r0, r5
 801b750:	f000 fa72 	bl	801bc38 <__sinit>
 801b754:	4b2c      	ldr	r3, [pc, #176]	; (801b808 <_puts_r+0xd0>)
 801b756:	429c      	cmp	r4, r3
 801b758:	d120      	bne.n	801b79c <_puts_r+0x64>
 801b75a:	686c      	ldr	r4, [r5, #4]
 801b75c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b75e:	07db      	lsls	r3, r3, #31
 801b760:	d405      	bmi.n	801b76e <_puts_r+0x36>
 801b762:	89a3      	ldrh	r3, [r4, #12]
 801b764:	0598      	lsls	r0, r3, #22
 801b766:	d402      	bmi.n	801b76e <_puts_r+0x36>
 801b768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b76a:	f000 fb03 	bl	801bd74 <__retarget_lock_acquire_recursive>
 801b76e:	89a3      	ldrh	r3, [r4, #12]
 801b770:	0719      	lsls	r1, r3, #28
 801b772:	d51d      	bpl.n	801b7b0 <_puts_r+0x78>
 801b774:	6923      	ldr	r3, [r4, #16]
 801b776:	b1db      	cbz	r3, 801b7b0 <_puts_r+0x78>
 801b778:	3e01      	subs	r6, #1
 801b77a:	68a3      	ldr	r3, [r4, #8]
 801b77c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b780:	3b01      	subs	r3, #1
 801b782:	60a3      	str	r3, [r4, #8]
 801b784:	bb39      	cbnz	r1, 801b7d6 <_puts_r+0x9e>
 801b786:	2b00      	cmp	r3, #0
 801b788:	da38      	bge.n	801b7fc <_puts_r+0xc4>
 801b78a:	4622      	mov	r2, r4
 801b78c:	210a      	movs	r1, #10
 801b78e:	4628      	mov	r0, r5
 801b790:	f000 f878 	bl	801b884 <__swbuf_r>
 801b794:	3001      	adds	r0, #1
 801b796:	d011      	beq.n	801b7bc <_puts_r+0x84>
 801b798:	250a      	movs	r5, #10
 801b79a:	e011      	b.n	801b7c0 <_puts_r+0x88>
 801b79c:	4b1b      	ldr	r3, [pc, #108]	; (801b80c <_puts_r+0xd4>)
 801b79e:	429c      	cmp	r4, r3
 801b7a0:	d101      	bne.n	801b7a6 <_puts_r+0x6e>
 801b7a2:	68ac      	ldr	r4, [r5, #8]
 801b7a4:	e7da      	b.n	801b75c <_puts_r+0x24>
 801b7a6:	4b1a      	ldr	r3, [pc, #104]	; (801b810 <_puts_r+0xd8>)
 801b7a8:	429c      	cmp	r4, r3
 801b7aa:	bf08      	it	eq
 801b7ac:	68ec      	ldreq	r4, [r5, #12]
 801b7ae:	e7d5      	b.n	801b75c <_puts_r+0x24>
 801b7b0:	4621      	mov	r1, r4
 801b7b2:	4628      	mov	r0, r5
 801b7b4:	f000 f8b8 	bl	801b928 <__swsetup_r>
 801b7b8:	2800      	cmp	r0, #0
 801b7ba:	d0dd      	beq.n	801b778 <_puts_r+0x40>
 801b7bc:	f04f 35ff 	mov.w	r5, #4294967295
 801b7c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b7c2:	07da      	lsls	r2, r3, #31
 801b7c4:	d405      	bmi.n	801b7d2 <_puts_r+0x9a>
 801b7c6:	89a3      	ldrh	r3, [r4, #12]
 801b7c8:	059b      	lsls	r3, r3, #22
 801b7ca:	d402      	bmi.n	801b7d2 <_puts_r+0x9a>
 801b7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b7ce:	f000 fad2 	bl	801bd76 <__retarget_lock_release_recursive>
 801b7d2:	4628      	mov	r0, r5
 801b7d4:	bd70      	pop	{r4, r5, r6, pc}
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	da04      	bge.n	801b7e4 <_puts_r+0xac>
 801b7da:	69a2      	ldr	r2, [r4, #24]
 801b7dc:	429a      	cmp	r2, r3
 801b7de:	dc06      	bgt.n	801b7ee <_puts_r+0xb6>
 801b7e0:	290a      	cmp	r1, #10
 801b7e2:	d004      	beq.n	801b7ee <_puts_r+0xb6>
 801b7e4:	6823      	ldr	r3, [r4, #0]
 801b7e6:	1c5a      	adds	r2, r3, #1
 801b7e8:	6022      	str	r2, [r4, #0]
 801b7ea:	7019      	strb	r1, [r3, #0]
 801b7ec:	e7c5      	b.n	801b77a <_puts_r+0x42>
 801b7ee:	4622      	mov	r2, r4
 801b7f0:	4628      	mov	r0, r5
 801b7f2:	f000 f847 	bl	801b884 <__swbuf_r>
 801b7f6:	3001      	adds	r0, #1
 801b7f8:	d1bf      	bne.n	801b77a <_puts_r+0x42>
 801b7fa:	e7df      	b.n	801b7bc <_puts_r+0x84>
 801b7fc:	6823      	ldr	r3, [r4, #0]
 801b7fe:	250a      	movs	r5, #10
 801b800:	1c5a      	adds	r2, r3, #1
 801b802:	6022      	str	r2, [r4, #0]
 801b804:	701d      	strb	r5, [r3, #0]
 801b806:	e7db      	b.n	801b7c0 <_puts_r+0x88>
 801b808:	08032c70 	.word	0x08032c70
 801b80c:	08032c90 	.word	0x08032c90
 801b810:	08032c50 	.word	0x08032c50

0801b814 <puts>:
 801b814:	4b02      	ldr	r3, [pc, #8]	; (801b820 <puts+0xc>)
 801b816:	4601      	mov	r1, r0
 801b818:	6818      	ldr	r0, [r3, #0]
 801b81a:	f7ff bf8d 	b.w	801b738 <_puts_r>
 801b81e:	bf00      	nop
 801b820:	2000007c 	.word	0x2000007c

0801b824 <_sbrk_r>:
 801b824:	b538      	push	{r3, r4, r5, lr}
 801b826:	4d06      	ldr	r5, [pc, #24]	; (801b840 <_sbrk_r+0x1c>)
 801b828:	2300      	movs	r3, #0
 801b82a:	4604      	mov	r4, r0
 801b82c:	4608      	mov	r0, r1
 801b82e:	602b      	str	r3, [r5, #0]
 801b830:	f7e8 ff6e 	bl	8004710 <_sbrk>
 801b834:	1c43      	adds	r3, r0, #1
 801b836:	d102      	bne.n	801b83e <_sbrk_r+0x1a>
 801b838:	682b      	ldr	r3, [r5, #0]
 801b83a:	b103      	cbz	r3, 801b83e <_sbrk_r+0x1a>
 801b83c:	6023      	str	r3, [r4, #0]
 801b83e:	bd38      	pop	{r3, r4, r5, pc}
 801b840:	2004de9c 	.word	0x2004de9c

0801b844 <siprintf>:
 801b844:	b40e      	push	{r1, r2, r3}
 801b846:	b500      	push	{lr}
 801b848:	b09c      	sub	sp, #112	; 0x70
 801b84a:	ab1d      	add	r3, sp, #116	; 0x74
 801b84c:	9002      	str	r0, [sp, #8]
 801b84e:	9006      	str	r0, [sp, #24]
 801b850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b854:	4809      	ldr	r0, [pc, #36]	; (801b87c <siprintf+0x38>)
 801b856:	9107      	str	r1, [sp, #28]
 801b858:	9104      	str	r1, [sp, #16]
 801b85a:	4909      	ldr	r1, [pc, #36]	; (801b880 <siprintf+0x3c>)
 801b85c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b860:	9105      	str	r1, [sp, #20]
 801b862:	6800      	ldr	r0, [r0, #0]
 801b864:	9301      	str	r3, [sp, #4]
 801b866:	a902      	add	r1, sp, #8
 801b868:	f000 fb52 	bl	801bf10 <_svfiprintf_r>
 801b86c:	9b02      	ldr	r3, [sp, #8]
 801b86e:	2200      	movs	r2, #0
 801b870:	701a      	strb	r2, [r3, #0]
 801b872:	b01c      	add	sp, #112	; 0x70
 801b874:	f85d eb04 	ldr.w	lr, [sp], #4
 801b878:	b003      	add	sp, #12
 801b87a:	4770      	bx	lr
 801b87c:	2000007c 	.word	0x2000007c
 801b880:	ffff0208 	.word	0xffff0208

0801b884 <__swbuf_r>:
 801b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b886:	460e      	mov	r6, r1
 801b888:	4614      	mov	r4, r2
 801b88a:	4605      	mov	r5, r0
 801b88c:	b118      	cbz	r0, 801b896 <__swbuf_r+0x12>
 801b88e:	6983      	ldr	r3, [r0, #24]
 801b890:	b90b      	cbnz	r3, 801b896 <__swbuf_r+0x12>
 801b892:	f000 f9d1 	bl	801bc38 <__sinit>
 801b896:	4b21      	ldr	r3, [pc, #132]	; (801b91c <__swbuf_r+0x98>)
 801b898:	429c      	cmp	r4, r3
 801b89a:	d12b      	bne.n	801b8f4 <__swbuf_r+0x70>
 801b89c:	686c      	ldr	r4, [r5, #4]
 801b89e:	69a3      	ldr	r3, [r4, #24]
 801b8a0:	60a3      	str	r3, [r4, #8]
 801b8a2:	89a3      	ldrh	r3, [r4, #12]
 801b8a4:	071a      	lsls	r2, r3, #28
 801b8a6:	d52f      	bpl.n	801b908 <__swbuf_r+0x84>
 801b8a8:	6923      	ldr	r3, [r4, #16]
 801b8aa:	b36b      	cbz	r3, 801b908 <__swbuf_r+0x84>
 801b8ac:	6923      	ldr	r3, [r4, #16]
 801b8ae:	6820      	ldr	r0, [r4, #0]
 801b8b0:	1ac0      	subs	r0, r0, r3
 801b8b2:	6963      	ldr	r3, [r4, #20]
 801b8b4:	b2f6      	uxtb	r6, r6
 801b8b6:	4283      	cmp	r3, r0
 801b8b8:	4637      	mov	r7, r6
 801b8ba:	dc04      	bgt.n	801b8c6 <__swbuf_r+0x42>
 801b8bc:	4621      	mov	r1, r4
 801b8be:	4628      	mov	r0, r5
 801b8c0:	f000 f926 	bl	801bb10 <_fflush_r>
 801b8c4:	bb30      	cbnz	r0, 801b914 <__swbuf_r+0x90>
 801b8c6:	68a3      	ldr	r3, [r4, #8]
 801b8c8:	3b01      	subs	r3, #1
 801b8ca:	60a3      	str	r3, [r4, #8]
 801b8cc:	6823      	ldr	r3, [r4, #0]
 801b8ce:	1c5a      	adds	r2, r3, #1
 801b8d0:	6022      	str	r2, [r4, #0]
 801b8d2:	701e      	strb	r6, [r3, #0]
 801b8d4:	6963      	ldr	r3, [r4, #20]
 801b8d6:	3001      	adds	r0, #1
 801b8d8:	4283      	cmp	r3, r0
 801b8da:	d004      	beq.n	801b8e6 <__swbuf_r+0x62>
 801b8dc:	89a3      	ldrh	r3, [r4, #12]
 801b8de:	07db      	lsls	r3, r3, #31
 801b8e0:	d506      	bpl.n	801b8f0 <__swbuf_r+0x6c>
 801b8e2:	2e0a      	cmp	r6, #10
 801b8e4:	d104      	bne.n	801b8f0 <__swbuf_r+0x6c>
 801b8e6:	4621      	mov	r1, r4
 801b8e8:	4628      	mov	r0, r5
 801b8ea:	f000 f911 	bl	801bb10 <_fflush_r>
 801b8ee:	b988      	cbnz	r0, 801b914 <__swbuf_r+0x90>
 801b8f0:	4638      	mov	r0, r7
 801b8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8f4:	4b0a      	ldr	r3, [pc, #40]	; (801b920 <__swbuf_r+0x9c>)
 801b8f6:	429c      	cmp	r4, r3
 801b8f8:	d101      	bne.n	801b8fe <__swbuf_r+0x7a>
 801b8fa:	68ac      	ldr	r4, [r5, #8]
 801b8fc:	e7cf      	b.n	801b89e <__swbuf_r+0x1a>
 801b8fe:	4b09      	ldr	r3, [pc, #36]	; (801b924 <__swbuf_r+0xa0>)
 801b900:	429c      	cmp	r4, r3
 801b902:	bf08      	it	eq
 801b904:	68ec      	ldreq	r4, [r5, #12]
 801b906:	e7ca      	b.n	801b89e <__swbuf_r+0x1a>
 801b908:	4621      	mov	r1, r4
 801b90a:	4628      	mov	r0, r5
 801b90c:	f000 f80c 	bl	801b928 <__swsetup_r>
 801b910:	2800      	cmp	r0, #0
 801b912:	d0cb      	beq.n	801b8ac <__swbuf_r+0x28>
 801b914:	f04f 37ff 	mov.w	r7, #4294967295
 801b918:	e7ea      	b.n	801b8f0 <__swbuf_r+0x6c>
 801b91a:	bf00      	nop
 801b91c:	08032c70 	.word	0x08032c70
 801b920:	08032c90 	.word	0x08032c90
 801b924:	08032c50 	.word	0x08032c50

0801b928 <__swsetup_r>:
 801b928:	4b32      	ldr	r3, [pc, #200]	; (801b9f4 <__swsetup_r+0xcc>)
 801b92a:	b570      	push	{r4, r5, r6, lr}
 801b92c:	681d      	ldr	r5, [r3, #0]
 801b92e:	4606      	mov	r6, r0
 801b930:	460c      	mov	r4, r1
 801b932:	b125      	cbz	r5, 801b93e <__swsetup_r+0x16>
 801b934:	69ab      	ldr	r3, [r5, #24]
 801b936:	b913      	cbnz	r3, 801b93e <__swsetup_r+0x16>
 801b938:	4628      	mov	r0, r5
 801b93a:	f000 f97d 	bl	801bc38 <__sinit>
 801b93e:	4b2e      	ldr	r3, [pc, #184]	; (801b9f8 <__swsetup_r+0xd0>)
 801b940:	429c      	cmp	r4, r3
 801b942:	d10f      	bne.n	801b964 <__swsetup_r+0x3c>
 801b944:	686c      	ldr	r4, [r5, #4]
 801b946:	89a3      	ldrh	r3, [r4, #12]
 801b948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b94c:	0719      	lsls	r1, r3, #28
 801b94e:	d42c      	bmi.n	801b9aa <__swsetup_r+0x82>
 801b950:	06dd      	lsls	r5, r3, #27
 801b952:	d411      	bmi.n	801b978 <__swsetup_r+0x50>
 801b954:	2309      	movs	r3, #9
 801b956:	6033      	str	r3, [r6, #0]
 801b958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b95c:	81a3      	strh	r3, [r4, #12]
 801b95e:	f04f 30ff 	mov.w	r0, #4294967295
 801b962:	e03e      	b.n	801b9e2 <__swsetup_r+0xba>
 801b964:	4b25      	ldr	r3, [pc, #148]	; (801b9fc <__swsetup_r+0xd4>)
 801b966:	429c      	cmp	r4, r3
 801b968:	d101      	bne.n	801b96e <__swsetup_r+0x46>
 801b96a:	68ac      	ldr	r4, [r5, #8]
 801b96c:	e7eb      	b.n	801b946 <__swsetup_r+0x1e>
 801b96e:	4b24      	ldr	r3, [pc, #144]	; (801ba00 <__swsetup_r+0xd8>)
 801b970:	429c      	cmp	r4, r3
 801b972:	bf08      	it	eq
 801b974:	68ec      	ldreq	r4, [r5, #12]
 801b976:	e7e6      	b.n	801b946 <__swsetup_r+0x1e>
 801b978:	0758      	lsls	r0, r3, #29
 801b97a:	d512      	bpl.n	801b9a2 <__swsetup_r+0x7a>
 801b97c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b97e:	b141      	cbz	r1, 801b992 <__swsetup_r+0x6a>
 801b980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b984:	4299      	cmp	r1, r3
 801b986:	d002      	beq.n	801b98e <__swsetup_r+0x66>
 801b988:	4630      	mov	r0, r6
 801b98a:	f7ff fdfd 	bl	801b588 <_free_r>
 801b98e:	2300      	movs	r3, #0
 801b990:	6363      	str	r3, [r4, #52]	; 0x34
 801b992:	89a3      	ldrh	r3, [r4, #12]
 801b994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b998:	81a3      	strh	r3, [r4, #12]
 801b99a:	2300      	movs	r3, #0
 801b99c:	6063      	str	r3, [r4, #4]
 801b99e:	6923      	ldr	r3, [r4, #16]
 801b9a0:	6023      	str	r3, [r4, #0]
 801b9a2:	89a3      	ldrh	r3, [r4, #12]
 801b9a4:	f043 0308 	orr.w	r3, r3, #8
 801b9a8:	81a3      	strh	r3, [r4, #12]
 801b9aa:	6923      	ldr	r3, [r4, #16]
 801b9ac:	b94b      	cbnz	r3, 801b9c2 <__swsetup_r+0x9a>
 801b9ae:	89a3      	ldrh	r3, [r4, #12]
 801b9b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b9b8:	d003      	beq.n	801b9c2 <__swsetup_r+0x9a>
 801b9ba:	4621      	mov	r1, r4
 801b9bc:	4630      	mov	r0, r6
 801b9be:	f000 f9ff 	bl	801bdc0 <__smakebuf_r>
 801b9c2:	89a0      	ldrh	r0, [r4, #12]
 801b9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b9c8:	f010 0301 	ands.w	r3, r0, #1
 801b9cc:	d00a      	beq.n	801b9e4 <__swsetup_r+0xbc>
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	60a3      	str	r3, [r4, #8]
 801b9d2:	6963      	ldr	r3, [r4, #20]
 801b9d4:	425b      	negs	r3, r3
 801b9d6:	61a3      	str	r3, [r4, #24]
 801b9d8:	6923      	ldr	r3, [r4, #16]
 801b9da:	b943      	cbnz	r3, 801b9ee <__swsetup_r+0xc6>
 801b9dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b9e0:	d1ba      	bne.n	801b958 <__swsetup_r+0x30>
 801b9e2:	bd70      	pop	{r4, r5, r6, pc}
 801b9e4:	0781      	lsls	r1, r0, #30
 801b9e6:	bf58      	it	pl
 801b9e8:	6963      	ldrpl	r3, [r4, #20]
 801b9ea:	60a3      	str	r3, [r4, #8]
 801b9ec:	e7f4      	b.n	801b9d8 <__swsetup_r+0xb0>
 801b9ee:	2000      	movs	r0, #0
 801b9f0:	e7f7      	b.n	801b9e2 <__swsetup_r+0xba>
 801b9f2:	bf00      	nop
 801b9f4:	2000007c 	.word	0x2000007c
 801b9f8:	08032c70 	.word	0x08032c70
 801b9fc:	08032c90 	.word	0x08032c90
 801ba00:	08032c50 	.word	0x08032c50

0801ba04 <__sflush_r>:
 801ba04:	898a      	ldrh	r2, [r1, #12]
 801ba06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba0a:	4605      	mov	r5, r0
 801ba0c:	0710      	lsls	r0, r2, #28
 801ba0e:	460c      	mov	r4, r1
 801ba10:	d458      	bmi.n	801bac4 <__sflush_r+0xc0>
 801ba12:	684b      	ldr	r3, [r1, #4]
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	dc05      	bgt.n	801ba24 <__sflush_r+0x20>
 801ba18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	dc02      	bgt.n	801ba24 <__sflush_r+0x20>
 801ba1e:	2000      	movs	r0, #0
 801ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba26:	2e00      	cmp	r6, #0
 801ba28:	d0f9      	beq.n	801ba1e <__sflush_r+0x1a>
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ba30:	682f      	ldr	r7, [r5, #0]
 801ba32:	602b      	str	r3, [r5, #0]
 801ba34:	d032      	beq.n	801ba9c <__sflush_r+0x98>
 801ba36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ba38:	89a3      	ldrh	r3, [r4, #12]
 801ba3a:	075a      	lsls	r2, r3, #29
 801ba3c:	d505      	bpl.n	801ba4a <__sflush_r+0x46>
 801ba3e:	6863      	ldr	r3, [r4, #4]
 801ba40:	1ac0      	subs	r0, r0, r3
 801ba42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ba44:	b10b      	cbz	r3, 801ba4a <__sflush_r+0x46>
 801ba46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ba48:	1ac0      	subs	r0, r0, r3
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	4602      	mov	r2, r0
 801ba4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba50:	6a21      	ldr	r1, [r4, #32]
 801ba52:	4628      	mov	r0, r5
 801ba54:	47b0      	blx	r6
 801ba56:	1c43      	adds	r3, r0, #1
 801ba58:	89a3      	ldrh	r3, [r4, #12]
 801ba5a:	d106      	bne.n	801ba6a <__sflush_r+0x66>
 801ba5c:	6829      	ldr	r1, [r5, #0]
 801ba5e:	291d      	cmp	r1, #29
 801ba60:	d82c      	bhi.n	801babc <__sflush_r+0xb8>
 801ba62:	4a2a      	ldr	r2, [pc, #168]	; (801bb0c <__sflush_r+0x108>)
 801ba64:	40ca      	lsrs	r2, r1
 801ba66:	07d6      	lsls	r6, r2, #31
 801ba68:	d528      	bpl.n	801babc <__sflush_r+0xb8>
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	6062      	str	r2, [r4, #4]
 801ba6e:	04d9      	lsls	r1, r3, #19
 801ba70:	6922      	ldr	r2, [r4, #16]
 801ba72:	6022      	str	r2, [r4, #0]
 801ba74:	d504      	bpl.n	801ba80 <__sflush_r+0x7c>
 801ba76:	1c42      	adds	r2, r0, #1
 801ba78:	d101      	bne.n	801ba7e <__sflush_r+0x7a>
 801ba7a:	682b      	ldr	r3, [r5, #0]
 801ba7c:	b903      	cbnz	r3, 801ba80 <__sflush_r+0x7c>
 801ba7e:	6560      	str	r0, [r4, #84]	; 0x54
 801ba80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba82:	602f      	str	r7, [r5, #0]
 801ba84:	2900      	cmp	r1, #0
 801ba86:	d0ca      	beq.n	801ba1e <__sflush_r+0x1a>
 801ba88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ba8c:	4299      	cmp	r1, r3
 801ba8e:	d002      	beq.n	801ba96 <__sflush_r+0x92>
 801ba90:	4628      	mov	r0, r5
 801ba92:	f7ff fd79 	bl	801b588 <_free_r>
 801ba96:	2000      	movs	r0, #0
 801ba98:	6360      	str	r0, [r4, #52]	; 0x34
 801ba9a:	e7c1      	b.n	801ba20 <__sflush_r+0x1c>
 801ba9c:	6a21      	ldr	r1, [r4, #32]
 801ba9e:	2301      	movs	r3, #1
 801baa0:	4628      	mov	r0, r5
 801baa2:	47b0      	blx	r6
 801baa4:	1c41      	adds	r1, r0, #1
 801baa6:	d1c7      	bne.n	801ba38 <__sflush_r+0x34>
 801baa8:	682b      	ldr	r3, [r5, #0]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d0c4      	beq.n	801ba38 <__sflush_r+0x34>
 801baae:	2b1d      	cmp	r3, #29
 801bab0:	d001      	beq.n	801bab6 <__sflush_r+0xb2>
 801bab2:	2b16      	cmp	r3, #22
 801bab4:	d101      	bne.n	801baba <__sflush_r+0xb6>
 801bab6:	602f      	str	r7, [r5, #0]
 801bab8:	e7b1      	b.n	801ba1e <__sflush_r+0x1a>
 801baba:	89a3      	ldrh	r3, [r4, #12]
 801babc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bac0:	81a3      	strh	r3, [r4, #12]
 801bac2:	e7ad      	b.n	801ba20 <__sflush_r+0x1c>
 801bac4:	690f      	ldr	r7, [r1, #16]
 801bac6:	2f00      	cmp	r7, #0
 801bac8:	d0a9      	beq.n	801ba1e <__sflush_r+0x1a>
 801baca:	0793      	lsls	r3, r2, #30
 801bacc:	680e      	ldr	r6, [r1, #0]
 801bace:	bf08      	it	eq
 801bad0:	694b      	ldreq	r3, [r1, #20]
 801bad2:	600f      	str	r7, [r1, #0]
 801bad4:	bf18      	it	ne
 801bad6:	2300      	movne	r3, #0
 801bad8:	eba6 0807 	sub.w	r8, r6, r7
 801badc:	608b      	str	r3, [r1, #8]
 801bade:	f1b8 0f00 	cmp.w	r8, #0
 801bae2:	dd9c      	ble.n	801ba1e <__sflush_r+0x1a>
 801bae4:	6a21      	ldr	r1, [r4, #32]
 801bae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bae8:	4643      	mov	r3, r8
 801baea:	463a      	mov	r2, r7
 801baec:	4628      	mov	r0, r5
 801baee:	47b0      	blx	r6
 801baf0:	2800      	cmp	r0, #0
 801baf2:	dc06      	bgt.n	801bb02 <__sflush_r+0xfe>
 801baf4:	89a3      	ldrh	r3, [r4, #12]
 801baf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bafa:	81a3      	strh	r3, [r4, #12]
 801bafc:	f04f 30ff 	mov.w	r0, #4294967295
 801bb00:	e78e      	b.n	801ba20 <__sflush_r+0x1c>
 801bb02:	4407      	add	r7, r0
 801bb04:	eba8 0800 	sub.w	r8, r8, r0
 801bb08:	e7e9      	b.n	801bade <__sflush_r+0xda>
 801bb0a:	bf00      	nop
 801bb0c:	20400001 	.word	0x20400001

0801bb10 <_fflush_r>:
 801bb10:	b538      	push	{r3, r4, r5, lr}
 801bb12:	690b      	ldr	r3, [r1, #16]
 801bb14:	4605      	mov	r5, r0
 801bb16:	460c      	mov	r4, r1
 801bb18:	b913      	cbnz	r3, 801bb20 <_fflush_r+0x10>
 801bb1a:	2500      	movs	r5, #0
 801bb1c:	4628      	mov	r0, r5
 801bb1e:	bd38      	pop	{r3, r4, r5, pc}
 801bb20:	b118      	cbz	r0, 801bb2a <_fflush_r+0x1a>
 801bb22:	6983      	ldr	r3, [r0, #24]
 801bb24:	b90b      	cbnz	r3, 801bb2a <_fflush_r+0x1a>
 801bb26:	f000 f887 	bl	801bc38 <__sinit>
 801bb2a:	4b14      	ldr	r3, [pc, #80]	; (801bb7c <_fflush_r+0x6c>)
 801bb2c:	429c      	cmp	r4, r3
 801bb2e:	d11b      	bne.n	801bb68 <_fflush_r+0x58>
 801bb30:	686c      	ldr	r4, [r5, #4]
 801bb32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d0ef      	beq.n	801bb1a <_fflush_r+0xa>
 801bb3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bb3c:	07d0      	lsls	r0, r2, #31
 801bb3e:	d404      	bmi.n	801bb4a <_fflush_r+0x3a>
 801bb40:	0599      	lsls	r1, r3, #22
 801bb42:	d402      	bmi.n	801bb4a <_fflush_r+0x3a>
 801bb44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb46:	f000 f915 	bl	801bd74 <__retarget_lock_acquire_recursive>
 801bb4a:	4628      	mov	r0, r5
 801bb4c:	4621      	mov	r1, r4
 801bb4e:	f7ff ff59 	bl	801ba04 <__sflush_r>
 801bb52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bb54:	07da      	lsls	r2, r3, #31
 801bb56:	4605      	mov	r5, r0
 801bb58:	d4e0      	bmi.n	801bb1c <_fflush_r+0xc>
 801bb5a:	89a3      	ldrh	r3, [r4, #12]
 801bb5c:	059b      	lsls	r3, r3, #22
 801bb5e:	d4dd      	bmi.n	801bb1c <_fflush_r+0xc>
 801bb60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb62:	f000 f908 	bl	801bd76 <__retarget_lock_release_recursive>
 801bb66:	e7d9      	b.n	801bb1c <_fflush_r+0xc>
 801bb68:	4b05      	ldr	r3, [pc, #20]	; (801bb80 <_fflush_r+0x70>)
 801bb6a:	429c      	cmp	r4, r3
 801bb6c:	d101      	bne.n	801bb72 <_fflush_r+0x62>
 801bb6e:	68ac      	ldr	r4, [r5, #8]
 801bb70:	e7df      	b.n	801bb32 <_fflush_r+0x22>
 801bb72:	4b04      	ldr	r3, [pc, #16]	; (801bb84 <_fflush_r+0x74>)
 801bb74:	429c      	cmp	r4, r3
 801bb76:	bf08      	it	eq
 801bb78:	68ec      	ldreq	r4, [r5, #12]
 801bb7a:	e7da      	b.n	801bb32 <_fflush_r+0x22>
 801bb7c:	08032c70 	.word	0x08032c70
 801bb80:	08032c90 	.word	0x08032c90
 801bb84:	08032c50 	.word	0x08032c50

0801bb88 <std>:
 801bb88:	2300      	movs	r3, #0
 801bb8a:	b510      	push	{r4, lr}
 801bb8c:	4604      	mov	r4, r0
 801bb8e:	e9c0 3300 	strd	r3, r3, [r0]
 801bb92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bb96:	6083      	str	r3, [r0, #8]
 801bb98:	8181      	strh	r1, [r0, #12]
 801bb9a:	6643      	str	r3, [r0, #100]	; 0x64
 801bb9c:	81c2      	strh	r2, [r0, #14]
 801bb9e:	6183      	str	r3, [r0, #24]
 801bba0:	4619      	mov	r1, r3
 801bba2:	2208      	movs	r2, #8
 801bba4:	305c      	adds	r0, #92	; 0x5c
 801bba6:	f7ff fce7 	bl	801b578 <memset>
 801bbaa:	4b05      	ldr	r3, [pc, #20]	; (801bbc0 <std+0x38>)
 801bbac:	6263      	str	r3, [r4, #36]	; 0x24
 801bbae:	4b05      	ldr	r3, [pc, #20]	; (801bbc4 <std+0x3c>)
 801bbb0:	62a3      	str	r3, [r4, #40]	; 0x28
 801bbb2:	4b05      	ldr	r3, [pc, #20]	; (801bbc8 <std+0x40>)
 801bbb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bbb6:	4b05      	ldr	r3, [pc, #20]	; (801bbcc <std+0x44>)
 801bbb8:	6224      	str	r4, [r4, #32]
 801bbba:	6323      	str	r3, [r4, #48]	; 0x30
 801bbbc:	bd10      	pop	{r4, pc}
 801bbbe:	bf00      	nop
 801bbc0:	0801c77d 	.word	0x0801c77d
 801bbc4:	0801c79f 	.word	0x0801c79f
 801bbc8:	0801c7d7 	.word	0x0801c7d7
 801bbcc:	0801c7fb 	.word	0x0801c7fb

0801bbd0 <_cleanup_r>:
 801bbd0:	4901      	ldr	r1, [pc, #4]	; (801bbd8 <_cleanup_r+0x8>)
 801bbd2:	f000 b8af 	b.w	801bd34 <_fwalk_reent>
 801bbd6:	bf00      	nop
 801bbd8:	0801bb11 	.word	0x0801bb11

0801bbdc <__sfmoreglue>:
 801bbdc:	b570      	push	{r4, r5, r6, lr}
 801bbde:	1e4a      	subs	r2, r1, #1
 801bbe0:	2568      	movs	r5, #104	; 0x68
 801bbe2:	4355      	muls	r5, r2
 801bbe4:	460e      	mov	r6, r1
 801bbe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bbea:	f7ff fd1d 	bl	801b628 <_malloc_r>
 801bbee:	4604      	mov	r4, r0
 801bbf0:	b140      	cbz	r0, 801bc04 <__sfmoreglue+0x28>
 801bbf2:	2100      	movs	r1, #0
 801bbf4:	e9c0 1600 	strd	r1, r6, [r0]
 801bbf8:	300c      	adds	r0, #12
 801bbfa:	60a0      	str	r0, [r4, #8]
 801bbfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bc00:	f7ff fcba 	bl	801b578 <memset>
 801bc04:	4620      	mov	r0, r4
 801bc06:	bd70      	pop	{r4, r5, r6, pc}

0801bc08 <__sfp_lock_acquire>:
 801bc08:	4801      	ldr	r0, [pc, #4]	; (801bc10 <__sfp_lock_acquire+0x8>)
 801bc0a:	f000 b8b3 	b.w	801bd74 <__retarget_lock_acquire_recursive>
 801bc0e:	bf00      	nop
 801bc10:	2004de98 	.word	0x2004de98

0801bc14 <__sfp_lock_release>:
 801bc14:	4801      	ldr	r0, [pc, #4]	; (801bc1c <__sfp_lock_release+0x8>)
 801bc16:	f000 b8ae 	b.w	801bd76 <__retarget_lock_release_recursive>
 801bc1a:	bf00      	nop
 801bc1c:	2004de98 	.word	0x2004de98

0801bc20 <__sinit_lock_acquire>:
 801bc20:	4801      	ldr	r0, [pc, #4]	; (801bc28 <__sinit_lock_acquire+0x8>)
 801bc22:	f000 b8a7 	b.w	801bd74 <__retarget_lock_acquire_recursive>
 801bc26:	bf00      	nop
 801bc28:	2004de93 	.word	0x2004de93

0801bc2c <__sinit_lock_release>:
 801bc2c:	4801      	ldr	r0, [pc, #4]	; (801bc34 <__sinit_lock_release+0x8>)
 801bc2e:	f000 b8a2 	b.w	801bd76 <__retarget_lock_release_recursive>
 801bc32:	bf00      	nop
 801bc34:	2004de93 	.word	0x2004de93

0801bc38 <__sinit>:
 801bc38:	b510      	push	{r4, lr}
 801bc3a:	4604      	mov	r4, r0
 801bc3c:	f7ff fff0 	bl	801bc20 <__sinit_lock_acquire>
 801bc40:	69a3      	ldr	r3, [r4, #24]
 801bc42:	b11b      	cbz	r3, 801bc4c <__sinit+0x14>
 801bc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc48:	f7ff bff0 	b.w	801bc2c <__sinit_lock_release>
 801bc4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bc50:	6523      	str	r3, [r4, #80]	; 0x50
 801bc52:	4b13      	ldr	r3, [pc, #76]	; (801bca0 <__sinit+0x68>)
 801bc54:	4a13      	ldr	r2, [pc, #76]	; (801bca4 <__sinit+0x6c>)
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	62a2      	str	r2, [r4, #40]	; 0x28
 801bc5a:	42a3      	cmp	r3, r4
 801bc5c:	bf04      	itt	eq
 801bc5e:	2301      	moveq	r3, #1
 801bc60:	61a3      	streq	r3, [r4, #24]
 801bc62:	4620      	mov	r0, r4
 801bc64:	f000 f820 	bl	801bca8 <__sfp>
 801bc68:	6060      	str	r0, [r4, #4]
 801bc6a:	4620      	mov	r0, r4
 801bc6c:	f000 f81c 	bl	801bca8 <__sfp>
 801bc70:	60a0      	str	r0, [r4, #8]
 801bc72:	4620      	mov	r0, r4
 801bc74:	f000 f818 	bl	801bca8 <__sfp>
 801bc78:	2200      	movs	r2, #0
 801bc7a:	60e0      	str	r0, [r4, #12]
 801bc7c:	2104      	movs	r1, #4
 801bc7e:	6860      	ldr	r0, [r4, #4]
 801bc80:	f7ff ff82 	bl	801bb88 <std>
 801bc84:	68a0      	ldr	r0, [r4, #8]
 801bc86:	2201      	movs	r2, #1
 801bc88:	2109      	movs	r1, #9
 801bc8a:	f7ff ff7d 	bl	801bb88 <std>
 801bc8e:	68e0      	ldr	r0, [r4, #12]
 801bc90:	2202      	movs	r2, #2
 801bc92:	2112      	movs	r1, #18
 801bc94:	f7ff ff78 	bl	801bb88 <std>
 801bc98:	2301      	movs	r3, #1
 801bc9a:	61a3      	str	r3, [r4, #24]
 801bc9c:	e7d2      	b.n	801bc44 <__sinit+0xc>
 801bc9e:	bf00      	nop
 801bca0:	08032c4c 	.word	0x08032c4c
 801bca4:	0801bbd1 	.word	0x0801bbd1

0801bca8 <__sfp>:
 801bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcaa:	4607      	mov	r7, r0
 801bcac:	f7ff ffac 	bl	801bc08 <__sfp_lock_acquire>
 801bcb0:	4b1e      	ldr	r3, [pc, #120]	; (801bd2c <__sfp+0x84>)
 801bcb2:	681e      	ldr	r6, [r3, #0]
 801bcb4:	69b3      	ldr	r3, [r6, #24]
 801bcb6:	b913      	cbnz	r3, 801bcbe <__sfp+0x16>
 801bcb8:	4630      	mov	r0, r6
 801bcba:	f7ff ffbd 	bl	801bc38 <__sinit>
 801bcbe:	3648      	adds	r6, #72	; 0x48
 801bcc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bcc4:	3b01      	subs	r3, #1
 801bcc6:	d503      	bpl.n	801bcd0 <__sfp+0x28>
 801bcc8:	6833      	ldr	r3, [r6, #0]
 801bcca:	b30b      	cbz	r3, 801bd10 <__sfp+0x68>
 801bccc:	6836      	ldr	r6, [r6, #0]
 801bcce:	e7f7      	b.n	801bcc0 <__sfp+0x18>
 801bcd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bcd4:	b9d5      	cbnz	r5, 801bd0c <__sfp+0x64>
 801bcd6:	4b16      	ldr	r3, [pc, #88]	; (801bd30 <__sfp+0x88>)
 801bcd8:	60e3      	str	r3, [r4, #12]
 801bcda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bcde:	6665      	str	r5, [r4, #100]	; 0x64
 801bce0:	f000 f847 	bl	801bd72 <__retarget_lock_init_recursive>
 801bce4:	f7ff ff96 	bl	801bc14 <__sfp_lock_release>
 801bce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bcec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bcf0:	6025      	str	r5, [r4, #0]
 801bcf2:	61a5      	str	r5, [r4, #24]
 801bcf4:	2208      	movs	r2, #8
 801bcf6:	4629      	mov	r1, r5
 801bcf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bcfc:	f7ff fc3c 	bl	801b578 <memset>
 801bd00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bd04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bd08:	4620      	mov	r0, r4
 801bd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd0c:	3468      	adds	r4, #104	; 0x68
 801bd0e:	e7d9      	b.n	801bcc4 <__sfp+0x1c>
 801bd10:	2104      	movs	r1, #4
 801bd12:	4638      	mov	r0, r7
 801bd14:	f7ff ff62 	bl	801bbdc <__sfmoreglue>
 801bd18:	4604      	mov	r4, r0
 801bd1a:	6030      	str	r0, [r6, #0]
 801bd1c:	2800      	cmp	r0, #0
 801bd1e:	d1d5      	bne.n	801bccc <__sfp+0x24>
 801bd20:	f7ff ff78 	bl	801bc14 <__sfp_lock_release>
 801bd24:	230c      	movs	r3, #12
 801bd26:	603b      	str	r3, [r7, #0]
 801bd28:	e7ee      	b.n	801bd08 <__sfp+0x60>
 801bd2a:	bf00      	nop
 801bd2c:	08032c4c 	.word	0x08032c4c
 801bd30:	ffff0001 	.word	0xffff0001

0801bd34 <_fwalk_reent>:
 801bd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd38:	4606      	mov	r6, r0
 801bd3a:	4688      	mov	r8, r1
 801bd3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bd40:	2700      	movs	r7, #0
 801bd42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bd46:	f1b9 0901 	subs.w	r9, r9, #1
 801bd4a:	d505      	bpl.n	801bd58 <_fwalk_reent+0x24>
 801bd4c:	6824      	ldr	r4, [r4, #0]
 801bd4e:	2c00      	cmp	r4, #0
 801bd50:	d1f7      	bne.n	801bd42 <_fwalk_reent+0xe>
 801bd52:	4638      	mov	r0, r7
 801bd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd58:	89ab      	ldrh	r3, [r5, #12]
 801bd5a:	2b01      	cmp	r3, #1
 801bd5c:	d907      	bls.n	801bd6e <_fwalk_reent+0x3a>
 801bd5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bd62:	3301      	adds	r3, #1
 801bd64:	d003      	beq.n	801bd6e <_fwalk_reent+0x3a>
 801bd66:	4629      	mov	r1, r5
 801bd68:	4630      	mov	r0, r6
 801bd6a:	47c0      	blx	r8
 801bd6c:	4307      	orrs	r7, r0
 801bd6e:	3568      	adds	r5, #104	; 0x68
 801bd70:	e7e9      	b.n	801bd46 <_fwalk_reent+0x12>

0801bd72 <__retarget_lock_init_recursive>:
 801bd72:	4770      	bx	lr

0801bd74 <__retarget_lock_acquire_recursive>:
 801bd74:	4770      	bx	lr

0801bd76 <__retarget_lock_release_recursive>:
 801bd76:	4770      	bx	lr

0801bd78 <__swhatbuf_r>:
 801bd78:	b570      	push	{r4, r5, r6, lr}
 801bd7a:	460e      	mov	r6, r1
 801bd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd80:	2900      	cmp	r1, #0
 801bd82:	b096      	sub	sp, #88	; 0x58
 801bd84:	4614      	mov	r4, r2
 801bd86:	461d      	mov	r5, r3
 801bd88:	da07      	bge.n	801bd9a <__swhatbuf_r+0x22>
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	602b      	str	r3, [r5, #0]
 801bd8e:	89b3      	ldrh	r3, [r6, #12]
 801bd90:	061a      	lsls	r2, r3, #24
 801bd92:	d410      	bmi.n	801bdb6 <__swhatbuf_r+0x3e>
 801bd94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bd98:	e00e      	b.n	801bdb8 <__swhatbuf_r+0x40>
 801bd9a:	466a      	mov	r2, sp
 801bd9c:	f000 fd54 	bl	801c848 <_fstat_r>
 801bda0:	2800      	cmp	r0, #0
 801bda2:	dbf2      	blt.n	801bd8a <__swhatbuf_r+0x12>
 801bda4:	9a01      	ldr	r2, [sp, #4]
 801bda6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bdaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bdae:	425a      	negs	r2, r3
 801bdb0:	415a      	adcs	r2, r3
 801bdb2:	602a      	str	r2, [r5, #0]
 801bdb4:	e7ee      	b.n	801bd94 <__swhatbuf_r+0x1c>
 801bdb6:	2340      	movs	r3, #64	; 0x40
 801bdb8:	2000      	movs	r0, #0
 801bdba:	6023      	str	r3, [r4, #0]
 801bdbc:	b016      	add	sp, #88	; 0x58
 801bdbe:	bd70      	pop	{r4, r5, r6, pc}

0801bdc0 <__smakebuf_r>:
 801bdc0:	898b      	ldrh	r3, [r1, #12]
 801bdc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bdc4:	079d      	lsls	r5, r3, #30
 801bdc6:	4606      	mov	r6, r0
 801bdc8:	460c      	mov	r4, r1
 801bdca:	d507      	bpl.n	801bddc <__smakebuf_r+0x1c>
 801bdcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bdd0:	6023      	str	r3, [r4, #0]
 801bdd2:	6123      	str	r3, [r4, #16]
 801bdd4:	2301      	movs	r3, #1
 801bdd6:	6163      	str	r3, [r4, #20]
 801bdd8:	b002      	add	sp, #8
 801bdda:	bd70      	pop	{r4, r5, r6, pc}
 801bddc:	ab01      	add	r3, sp, #4
 801bdde:	466a      	mov	r2, sp
 801bde0:	f7ff ffca 	bl	801bd78 <__swhatbuf_r>
 801bde4:	9900      	ldr	r1, [sp, #0]
 801bde6:	4605      	mov	r5, r0
 801bde8:	4630      	mov	r0, r6
 801bdea:	f7ff fc1d 	bl	801b628 <_malloc_r>
 801bdee:	b948      	cbnz	r0, 801be04 <__smakebuf_r+0x44>
 801bdf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdf4:	059a      	lsls	r2, r3, #22
 801bdf6:	d4ef      	bmi.n	801bdd8 <__smakebuf_r+0x18>
 801bdf8:	f023 0303 	bic.w	r3, r3, #3
 801bdfc:	f043 0302 	orr.w	r3, r3, #2
 801be00:	81a3      	strh	r3, [r4, #12]
 801be02:	e7e3      	b.n	801bdcc <__smakebuf_r+0xc>
 801be04:	4b0d      	ldr	r3, [pc, #52]	; (801be3c <__smakebuf_r+0x7c>)
 801be06:	62b3      	str	r3, [r6, #40]	; 0x28
 801be08:	89a3      	ldrh	r3, [r4, #12]
 801be0a:	6020      	str	r0, [r4, #0]
 801be0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801be10:	81a3      	strh	r3, [r4, #12]
 801be12:	9b00      	ldr	r3, [sp, #0]
 801be14:	6163      	str	r3, [r4, #20]
 801be16:	9b01      	ldr	r3, [sp, #4]
 801be18:	6120      	str	r0, [r4, #16]
 801be1a:	b15b      	cbz	r3, 801be34 <__smakebuf_r+0x74>
 801be1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801be20:	4630      	mov	r0, r6
 801be22:	f000 fd23 	bl	801c86c <_isatty_r>
 801be26:	b128      	cbz	r0, 801be34 <__smakebuf_r+0x74>
 801be28:	89a3      	ldrh	r3, [r4, #12]
 801be2a:	f023 0303 	bic.w	r3, r3, #3
 801be2e:	f043 0301 	orr.w	r3, r3, #1
 801be32:	81a3      	strh	r3, [r4, #12]
 801be34:	89a0      	ldrh	r0, [r4, #12]
 801be36:	4305      	orrs	r5, r0
 801be38:	81a5      	strh	r5, [r4, #12]
 801be3a:	e7cd      	b.n	801bdd8 <__smakebuf_r+0x18>
 801be3c:	0801bbd1 	.word	0x0801bbd1

0801be40 <__malloc_lock>:
 801be40:	4801      	ldr	r0, [pc, #4]	; (801be48 <__malloc_lock+0x8>)
 801be42:	f7ff bf97 	b.w	801bd74 <__retarget_lock_acquire_recursive>
 801be46:	bf00      	nop
 801be48:	2004de94 	.word	0x2004de94

0801be4c <__malloc_unlock>:
 801be4c:	4801      	ldr	r0, [pc, #4]	; (801be54 <__malloc_unlock+0x8>)
 801be4e:	f7ff bf92 	b.w	801bd76 <__retarget_lock_release_recursive>
 801be52:	bf00      	nop
 801be54:	2004de94 	.word	0x2004de94

0801be58 <__ssputs_r>:
 801be58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be5c:	688e      	ldr	r6, [r1, #8]
 801be5e:	429e      	cmp	r6, r3
 801be60:	4682      	mov	sl, r0
 801be62:	460c      	mov	r4, r1
 801be64:	4690      	mov	r8, r2
 801be66:	461f      	mov	r7, r3
 801be68:	d838      	bhi.n	801bedc <__ssputs_r+0x84>
 801be6a:	898a      	ldrh	r2, [r1, #12]
 801be6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801be70:	d032      	beq.n	801bed8 <__ssputs_r+0x80>
 801be72:	6825      	ldr	r5, [r4, #0]
 801be74:	6909      	ldr	r1, [r1, #16]
 801be76:	eba5 0901 	sub.w	r9, r5, r1
 801be7a:	6965      	ldr	r5, [r4, #20]
 801be7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801be84:	3301      	adds	r3, #1
 801be86:	444b      	add	r3, r9
 801be88:	106d      	asrs	r5, r5, #1
 801be8a:	429d      	cmp	r5, r3
 801be8c:	bf38      	it	cc
 801be8e:	461d      	movcc	r5, r3
 801be90:	0553      	lsls	r3, r2, #21
 801be92:	d531      	bpl.n	801bef8 <__ssputs_r+0xa0>
 801be94:	4629      	mov	r1, r5
 801be96:	f7ff fbc7 	bl	801b628 <_malloc_r>
 801be9a:	4606      	mov	r6, r0
 801be9c:	b950      	cbnz	r0, 801beb4 <__ssputs_r+0x5c>
 801be9e:	230c      	movs	r3, #12
 801bea0:	f8ca 3000 	str.w	r3, [sl]
 801bea4:	89a3      	ldrh	r3, [r4, #12]
 801bea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801beaa:	81a3      	strh	r3, [r4, #12]
 801beac:	f04f 30ff 	mov.w	r0, #4294967295
 801beb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801beb4:	6921      	ldr	r1, [r4, #16]
 801beb6:	464a      	mov	r2, r9
 801beb8:	f7ff fb50 	bl	801b55c <memcpy>
 801bebc:	89a3      	ldrh	r3, [r4, #12]
 801bebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bec6:	81a3      	strh	r3, [r4, #12]
 801bec8:	6126      	str	r6, [r4, #16]
 801beca:	6165      	str	r5, [r4, #20]
 801becc:	444e      	add	r6, r9
 801bece:	eba5 0509 	sub.w	r5, r5, r9
 801bed2:	6026      	str	r6, [r4, #0]
 801bed4:	60a5      	str	r5, [r4, #8]
 801bed6:	463e      	mov	r6, r7
 801bed8:	42be      	cmp	r6, r7
 801beda:	d900      	bls.n	801bede <__ssputs_r+0x86>
 801bedc:	463e      	mov	r6, r7
 801bede:	4632      	mov	r2, r6
 801bee0:	6820      	ldr	r0, [r4, #0]
 801bee2:	4641      	mov	r1, r8
 801bee4:	f000 fce4 	bl	801c8b0 <memmove>
 801bee8:	68a3      	ldr	r3, [r4, #8]
 801beea:	6822      	ldr	r2, [r4, #0]
 801beec:	1b9b      	subs	r3, r3, r6
 801beee:	4432      	add	r2, r6
 801bef0:	60a3      	str	r3, [r4, #8]
 801bef2:	6022      	str	r2, [r4, #0]
 801bef4:	2000      	movs	r0, #0
 801bef6:	e7db      	b.n	801beb0 <__ssputs_r+0x58>
 801bef8:	462a      	mov	r2, r5
 801befa:	f000 fcf3 	bl	801c8e4 <_realloc_r>
 801befe:	4606      	mov	r6, r0
 801bf00:	2800      	cmp	r0, #0
 801bf02:	d1e1      	bne.n	801bec8 <__ssputs_r+0x70>
 801bf04:	6921      	ldr	r1, [r4, #16]
 801bf06:	4650      	mov	r0, sl
 801bf08:	f7ff fb3e 	bl	801b588 <_free_r>
 801bf0c:	e7c7      	b.n	801be9e <__ssputs_r+0x46>
	...

0801bf10 <_svfiprintf_r>:
 801bf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf14:	4698      	mov	r8, r3
 801bf16:	898b      	ldrh	r3, [r1, #12]
 801bf18:	061b      	lsls	r3, r3, #24
 801bf1a:	b09d      	sub	sp, #116	; 0x74
 801bf1c:	4607      	mov	r7, r0
 801bf1e:	460d      	mov	r5, r1
 801bf20:	4614      	mov	r4, r2
 801bf22:	d50e      	bpl.n	801bf42 <_svfiprintf_r+0x32>
 801bf24:	690b      	ldr	r3, [r1, #16]
 801bf26:	b963      	cbnz	r3, 801bf42 <_svfiprintf_r+0x32>
 801bf28:	2140      	movs	r1, #64	; 0x40
 801bf2a:	f7ff fb7d 	bl	801b628 <_malloc_r>
 801bf2e:	6028      	str	r0, [r5, #0]
 801bf30:	6128      	str	r0, [r5, #16]
 801bf32:	b920      	cbnz	r0, 801bf3e <_svfiprintf_r+0x2e>
 801bf34:	230c      	movs	r3, #12
 801bf36:	603b      	str	r3, [r7, #0]
 801bf38:	f04f 30ff 	mov.w	r0, #4294967295
 801bf3c:	e0d1      	b.n	801c0e2 <_svfiprintf_r+0x1d2>
 801bf3e:	2340      	movs	r3, #64	; 0x40
 801bf40:	616b      	str	r3, [r5, #20]
 801bf42:	2300      	movs	r3, #0
 801bf44:	9309      	str	r3, [sp, #36]	; 0x24
 801bf46:	2320      	movs	r3, #32
 801bf48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bf4c:	f8cd 800c 	str.w	r8, [sp, #12]
 801bf50:	2330      	movs	r3, #48	; 0x30
 801bf52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c0fc <_svfiprintf_r+0x1ec>
 801bf56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bf5a:	f04f 0901 	mov.w	r9, #1
 801bf5e:	4623      	mov	r3, r4
 801bf60:	469a      	mov	sl, r3
 801bf62:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf66:	b10a      	cbz	r2, 801bf6c <_svfiprintf_r+0x5c>
 801bf68:	2a25      	cmp	r2, #37	; 0x25
 801bf6a:	d1f9      	bne.n	801bf60 <_svfiprintf_r+0x50>
 801bf6c:	ebba 0b04 	subs.w	fp, sl, r4
 801bf70:	d00b      	beq.n	801bf8a <_svfiprintf_r+0x7a>
 801bf72:	465b      	mov	r3, fp
 801bf74:	4622      	mov	r2, r4
 801bf76:	4629      	mov	r1, r5
 801bf78:	4638      	mov	r0, r7
 801bf7a:	f7ff ff6d 	bl	801be58 <__ssputs_r>
 801bf7e:	3001      	adds	r0, #1
 801bf80:	f000 80aa 	beq.w	801c0d8 <_svfiprintf_r+0x1c8>
 801bf84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bf86:	445a      	add	r2, fp
 801bf88:	9209      	str	r2, [sp, #36]	; 0x24
 801bf8a:	f89a 3000 	ldrb.w	r3, [sl]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	f000 80a2 	beq.w	801c0d8 <_svfiprintf_r+0x1c8>
 801bf94:	2300      	movs	r3, #0
 801bf96:	f04f 32ff 	mov.w	r2, #4294967295
 801bf9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bf9e:	f10a 0a01 	add.w	sl, sl, #1
 801bfa2:	9304      	str	r3, [sp, #16]
 801bfa4:	9307      	str	r3, [sp, #28]
 801bfa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bfaa:	931a      	str	r3, [sp, #104]	; 0x68
 801bfac:	4654      	mov	r4, sl
 801bfae:	2205      	movs	r2, #5
 801bfb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bfb4:	4851      	ldr	r0, [pc, #324]	; (801c0fc <_svfiprintf_r+0x1ec>)
 801bfb6:	f7e4 f98b 	bl	80002d0 <memchr>
 801bfba:	9a04      	ldr	r2, [sp, #16]
 801bfbc:	b9d8      	cbnz	r0, 801bff6 <_svfiprintf_r+0xe6>
 801bfbe:	06d0      	lsls	r0, r2, #27
 801bfc0:	bf44      	itt	mi
 801bfc2:	2320      	movmi	r3, #32
 801bfc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bfc8:	0711      	lsls	r1, r2, #28
 801bfca:	bf44      	itt	mi
 801bfcc:	232b      	movmi	r3, #43	; 0x2b
 801bfce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bfd2:	f89a 3000 	ldrb.w	r3, [sl]
 801bfd6:	2b2a      	cmp	r3, #42	; 0x2a
 801bfd8:	d015      	beq.n	801c006 <_svfiprintf_r+0xf6>
 801bfda:	9a07      	ldr	r2, [sp, #28]
 801bfdc:	4654      	mov	r4, sl
 801bfde:	2000      	movs	r0, #0
 801bfe0:	f04f 0c0a 	mov.w	ip, #10
 801bfe4:	4621      	mov	r1, r4
 801bfe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bfea:	3b30      	subs	r3, #48	; 0x30
 801bfec:	2b09      	cmp	r3, #9
 801bfee:	d94e      	bls.n	801c08e <_svfiprintf_r+0x17e>
 801bff0:	b1b0      	cbz	r0, 801c020 <_svfiprintf_r+0x110>
 801bff2:	9207      	str	r2, [sp, #28]
 801bff4:	e014      	b.n	801c020 <_svfiprintf_r+0x110>
 801bff6:	eba0 0308 	sub.w	r3, r0, r8
 801bffa:	fa09 f303 	lsl.w	r3, r9, r3
 801bffe:	4313      	orrs	r3, r2
 801c000:	9304      	str	r3, [sp, #16]
 801c002:	46a2      	mov	sl, r4
 801c004:	e7d2      	b.n	801bfac <_svfiprintf_r+0x9c>
 801c006:	9b03      	ldr	r3, [sp, #12]
 801c008:	1d19      	adds	r1, r3, #4
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	9103      	str	r1, [sp, #12]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	bfbb      	ittet	lt
 801c012:	425b      	neglt	r3, r3
 801c014:	f042 0202 	orrlt.w	r2, r2, #2
 801c018:	9307      	strge	r3, [sp, #28]
 801c01a:	9307      	strlt	r3, [sp, #28]
 801c01c:	bfb8      	it	lt
 801c01e:	9204      	strlt	r2, [sp, #16]
 801c020:	7823      	ldrb	r3, [r4, #0]
 801c022:	2b2e      	cmp	r3, #46	; 0x2e
 801c024:	d10c      	bne.n	801c040 <_svfiprintf_r+0x130>
 801c026:	7863      	ldrb	r3, [r4, #1]
 801c028:	2b2a      	cmp	r3, #42	; 0x2a
 801c02a:	d135      	bne.n	801c098 <_svfiprintf_r+0x188>
 801c02c:	9b03      	ldr	r3, [sp, #12]
 801c02e:	1d1a      	adds	r2, r3, #4
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	9203      	str	r2, [sp, #12]
 801c034:	2b00      	cmp	r3, #0
 801c036:	bfb8      	it	lt
 801c038:	f04f 33ff 	movlt.w	r3, #4294967295
 801c03c:	3402      	adds	r4, #2
 801c03e:	9305      	str	r3, [sp, #20]
 801c040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c10c <_svfiprintf_r+0x1fc>
 801c044:	7821      	ldrb	r1, [r4, #0]
 801c046:	2203      	movs	r2, #3
 801c048:	4650      	mov	r0, sl
 801c04a:	f7e4 f941 	bl	80002d0 <memchr>
 801c04e:	b140      	cbz	r0, 801c062 <_svfiprintf_r+0x152>
 801c050:	2340      	movs	r3, #64	; 0x40
 801c052:	eba0 000a 	sub.w	r0, r0, sl
 801c056:	fa03 f000 	lsl.w	r0, r3, r0
 801c05a:	9b04      	ldr	r3, [sp, #16]
 801c05c:	4303      	orrs	r3, r0
 801c05e:	3401      	adds	r4, #1
 801c060:	9304      	str	r3, [sp, #16]
 801c062:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c066:	4826      	ldr	r0, [pc, #152]	; (801c100 <_svfiprintf_r+0x1f0>)
 801c068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c06c:	2206      	movs	r2, #6
 801c06e:	f7e4 f92f 	bl	80002d0 <memchr>
 801c072:	2800      	cmp	r0, #0
 801c074:	d038      	beq.n	801c0e8 <_svfiprintf_r+0x1d8>
 801c076:	4b23      	ldr	r3, [pc, #140]	; (801c104 <_svfiprintf_r+0x1f4>)
 801c078:	bb1b      	cbnz	r3, 801c0c2 <_svfiprintf_r+0x1b2>
 801c07a:	9b03      	ldr	r3, [sp, #12]
 801c07c:	3307      	adds	r3, #7
 801c07e:	f023 0307 	bic.w	r3, r3, #7
 801c082:	3308      	adds	r3, #8
 801c084:	9303      	str	r3, [sp, #12]
 801c086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c088:	4433      	add	r3, r6
 801c08a:	9309      	str	r3, [sp, #36]	; 0x24
 801c08c:	e767      	b.n	801bf5e <_svfiprintf_r+0x4e>
 801c08e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c092:	460c      	mov	r4, r1
 801c094:	2001      	movs	r0, #1
 801c096:	e7a5      	b.n	801bfe4 <_svfiprintf_r+0xd4>
 801c098:	2300      	movs	r3, #0
 801c09a:	3401      	adds	r4, #1
 801c09c:	9305      	str	r3, [sp, #20]
 801c09e:	4619      	mov	r1, r3
 801c0a0:	f04f 0c0a 	mov.w	ip, #10
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c0aa:	3a30      	subs	r2, #48	; 0x30
 801c0ac:	2a09      	cmp	r2, #9
 801c0ae:	d903      	bls.n	801c0b8 <_svfiprintf_r+0x1a8>
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d0c5      	beq.n	801c040 <_svfiprintf_r+0x130>
 801c0b4:	9105      	str	r1, [sp, #20]
 801c0b6:	e7c3      	b.n	801c040 <_svfiprintf_r+0x130>
 801c0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 801c0bc:	4604      	mov	r4, r0
 801c0be:	2301      	movs	r3, #1
 801c0c0:	e7f0      	b.n	801c0a4 <_svfiprintf_r+0x194>
 801c0c2:	ab03      	add	r3, sp, #12
 801c0c4:	9300      	str	r3, [sp, #0]
 801c0c6:	462a      	mov	r2, r5
 801c0c8:	4b0f      	ldr	r3, [pc, #60]	; (801c108 <_svfiprintf_r+0x1f8>)
 801c0ca:	a904      	add	r1, sp, #16
 801c0cc:	4638      	mov	r0, r7
 801c0ce:	f3af 8000 	nop.w
 801c0d2:	1c42      	adds	r2, r0, #1
 801c0d4:	4606      	mov	r6, r0
 801c0d6:	d1d6      	bne.n	801c086 <_svfiprintf_r+0x176>
 801c0d8:	89ab      	ldrh	r3, [r5, #12]
 801c0da:	065b      	lsls	r3, r3, #25
 801c0dc:	f53f af2c 	bmi.w	801bf38 <_svfiprintf_r+0x28>
 801c0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c0e2:	b01d      	add	sp, #116	; 0x74
 801c0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0e8:	ab03      	add	r3, sp, #12
 801c0ea:	9300      	str	r3, [sp, #0]
 801c0ec:	462a      	mov	r2, r5
 801c0ee:	4b06      	ldr	r3, [pc, #24]	; (801c108 <_svfiprintf_r+0x1f8>)
 801c0f0:	a904      	add	r1, sp, #16
 801c0f2:	4638      	mov	r0, r7
 801c0f4:	f000 f9d4 	bl	801c4a0 <_printf_i>
 801c0f8:	e7eb      	b.n	801c0d2 <_svfiprintf_r+0x1c2>
 801c0fa:	bf00      	nop
 801c0fc:	08032cb0 	.word	0x08032cb0
 801c100:	08032cba 	.word	0x08032cba
 801c104:	00000000 	.word	0x00000000
 801c108:	0801be59 	.word	0x0801be59
 801c10c:	08032cb6 	.word	0x08032cb6

0801c110 <__sfputc_r>:
 801c110:	6893      	ldr	r3, [r2, #8]
 801c112:	3b01      	subs	r3, #1
 801c114:	2b00      	cmp	r3, #0
 801c116:	b410      	push	{r4}
 801c118:	6093      	str	r3, [r2, #8]
 801c11a:	da08      	bge.n	801c12e <__sfputc_r+0x1e>
 801c11c:	6994      	ldr	r4, [r2, #24]
 801c11e:	42a3      	cmp	r3, r4
 801c120:	db01      	blt.n	801c126 <__sfputc_r+0x16>
 801c122:	290a      	cmp	r1, #10
 801c124:	d103      	bne.n	801c12e <__sfputc_r+0x1e>
 801c126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c12a:	f7ff bbab 	b.w	801b884 <__swbuf_r>
 801c12e:	6813      	ldr	r3, [r2, #0]
 801c130:	1c58      	adds	r0, r3, #1
 801c132:	6010      	str	r0, [r2, #0]
 801c134:	7019      	strb	r1, [r3, #0]
 801c136:	4608      	mov	r0, r1
 801c138:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c13c:	4770      	bx	lr

0801c13e <__sfputs_r>:
 801c13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c140:	4606      	mov	r6, r0
 801c142:	460f      	mov	r7, r1
 801c144:	4614      	mov	r4, r2
 801c146:	18d5      	adds	r5, r2, r3
 801c148:	42ac      	cmp	r4, r5
 801c14a:	d101      	bne.n	801c150 <__sfputs_r+0x12>
 801c14c:	2000      	movs	r0, #0
 801c14e:	e007      	b.n	801c160 <__sfputs_r+0x22>
 801c150:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c154:	463a      	mov	r2, r7
 801c156:	4630      	mov	r0, r6
 801c158:	f7ff ffda 	bl	801c110 <__sfputc_r>
 801c15c:	1c43      	adds	r3, r0, #1
 801c15e:	d1f3      	bne.n	801c148 <__sfputs_r+0xa>
 801c160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c164 <_vfiprintf_r>:
 801c164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c168:	460d      	mov	r5, r1
 801c16a:	b09d      	sub	sp, #116	; 0x74
 801c16c:	4614      	mov	r4, r2
 801c16e:	4698      	mov	r8, r3
 801c170:	4606      	mov	r6, r0
 801c172:	b118      	cbz	r0, 801c17c <_vfiprintf_r+0x18>
 801c174:	6983      	ldr	r3, [r0, #24]
 801c176:	b90b      	cbnz	r3, 801c17c <_vfiprintf_r+0x18>
 801c178:	f7ff fd5e 	bl	801bc38 <__sinit>
 801c17c:	4b89      	ldr	r3, [pc, #548]	; (801c3a4 <_vfiprintf_r+0x240>)
 801c17e:	429d      	cmp	r5, r3
 801c180:	d11b      	bne.n	801c1ba <_vfiprintf_r+0x56>
 801c182:	6875      	ldr	r5, [r6, #4]
 801c184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c186:	07d9      	lsls	r1, r3, #31
 801c188:	d405      	bmi.n	801c196 <_vfiprintf_r+0x32>
 801c18a:	89ab      	ldrh	r3, [r5, #12]
 801c18c:	059a      	lsls	r2, r3, #22
 801c18e:	d402      	bmi.n	801c196 <_vfiprintf_r+0x32>
 801c190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c192:	f7ff fdef 	bl	801bd74 <__retarget_lock_acquire_recursive>
 801c196:	89ab      	ldrh	r3, [r5, #12]
 801c198:	071b      	lsls	r3, r3, #28
 801c19a:	d501      	bpl.n	801c1a0 <_vfiprintf_r+0x3c>
 801c19c:	692b      	ldr	r3, [r5, #16]
 801c19e:	b9eb      	cbnz	r3, 801c1dc <_vfiprintf_r+0x78>
 801c1a0:	4629      	mov	r1, r5
 801c1a2:	4630      	mov	r0, r6
 801c1a4:	f7ff fbc0 	bl	801b928 <__swsetup_r>
 801c1a8:	b1c0      	cbz	r0, 801c1dc <_vfiprintf_r+0x78>
 801c1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c1ac:	07dc      	lsls	r4, r3, #31
 801c1ae:	d50e      	bpl.n	801c1ce <_vfiprintf_r+0x6a>
 801c1b0:	f04f 30ff 	mov.w	r0, #4294967295
 801c1b4:	b01d      	add	sp, #116	; 0x74
 801c1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ba:	4b7b      	ldr	r3, [pc, #492]	; (801c3a8 <_vfiprintf_r+0x244>)
 801c1bc:	429d      	cmp	r5, r3
 801c1be:	d101      	bne.n	801c1c4 <_vfiprintf_r+0x60>
 801c1c0:	68b5      	ldr	r5, [r6, #8]
 801c1c2:	e7df      	b.n	801c184 <_vfiprintf_r+0x20>
 801c1c4:	4b79      	ldr	r3, [pc, #484]	; (801c3ac <_vfiprintf_r+0x248>)
 801c1c6:	429d      	cmp	r5, r3
 801c1c8:	bf08      	it	eq
 801c1ca:	68f5      	ldreq	r5, [r6, #12]
 801c1cc:	e7da      	b.n	801c184 <_vfiprintf_r+0x20>
 801c1ce:	89ab      	ldrh	r3, [r5, #12]
 801c1d0:	0598      	lsls	r0, r3, #22
 801c1d2:	d4ed      	bmi.n	801c1b0 <_vfiprintf_r+0x4c>
 801c1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c1d6:	f7ff fdce 	bl	801bd76 <__retarget_lock_release_recursive>
 801c1da:	e7e9      	b.n	801c1b0 <_vfiprintf_r+0x4c>
 801c1dc:	2300      	movs	r3, #0
 801c1de:	9309      	str	r3, [sp, #36]	; 0x24
 801c1e0:	2320      	movs	r3, #32
 801c1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 801c1ea:	2330      	movs	r3, #48	; 0x30
 801c1ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c3b0 <_vfiprintf_r+0x24c>
 801c1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c1f4:	f04f 0901 	mov.w	r9, #1
 801c1f8:	4623      	mov	r3, r4
 801c1fa:	469a      	mov	sl, r3
 801c1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c200:	b10a      	cbz	r2, 801c206 <_vfiprintf_r+0xa2>
 801c202:	2a25      	cmp	r2, #37	; 0x25
 801c204:	d1f9      	bne.n	801c1fa <_vfiprintf_r+0x96>
 801c206:	ebba 0b04 	subs.w	fp, sl, r4
 801c20a:	d00b      	beq.n	801c224 <_vfiprintf_r+0xc0>
 801c20c:	465b      	mov	r3, fp
 801c20e:	4622      	mov	r2, r4
 801c210:	4629      	mov	r1, r5
 801c212:	4630      	mov	r0, r6
 801c214:	f7ff ff93 	bl	801c13e <__sfputs_r>
 801c218:	3001      	adds	r0, #1
 801c21a:	f000 80aa 	beq.w	801c372 <_vfiprintf_r+0x20e>
 801c21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c220:	445a      	add	r2, fp
 801c222:	9209      	str	r2, [sp, #36]	; 0x24
 801c224:	f89a 3000 	ldrb.w	r3, [sl]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	f000 80a2 	beq.w	801c372 <_vfiprintf_r+0x20e>
 801c22e:	2300      	movs	r3, #0
 801c230:	f04f 32ff 	mov.w	r2, #4294967295
 801c234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c238:	f10a 0a01 	add.w	sl, sl, #1
 801c23c:	9304      	str	r3, [sp, #16]
 801c23e:	9307      	str	r3, [sp, #28]
 801c240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c244:	931a      	str	r3, [sp, #104]	; 0x68
 801c246:	4654      	mov	r4, sl
 801c248:	2205      	movs	r2, #5
 801c24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c24e:	4858      	ldr	r0, [pc, #352]	; (801c3b0 <_vfiprintf_r+0x24c>)
 801c250:	f7e4 f83e 	bl	80002d0 <memchr>
 801c254:	9a04      	ldr	r2, [sp, #16]
 801c256:	b9d8      	cbnz	r0, 801c290 <_vfiprintf_r+0x12c>
 801c258:	06d1      	lsls	r1, r2, #27
 801c25a:	bf44      	itt	mi
 801c25c:	2320      	movmi	r3, #32
 801c25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c262:	0713      	lsls	r3, r2, #28
 801c264:	bf44      	itt	mi
 801c266:	232b      	movmi	r3, #43	; 0x2b
 801c268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c26c:	f89a 3000 	ldrb.w	r3, [sl]
 801c270:	2b2a      	cmp	r3, #42	; 0x2a
 801c272:	d015      	beq.n	801c2a0 <_vfiprintf_r+0x13c>
 801c274:	9a07      	ldr	r2, [sp, #28]
 801c276:	4654      	mov	r4, sl
 801c278:	2000      	movs	r0, #0
 801c27a:	f04f 0c0a 	mov.w	ip, #10
 801c27e:	4621      	mov	r1, r4
 801c280:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c284:	3b30      	subs	r3, #48	; 0x30
 801c286:	2b09      	cmp	r3, #9
 801c288:	d94e      	bls.n	801c328 <_vfiprintf_r+0x1c4>
 801c28a:	b1b0      	cbz	r0, 801c2ba <_vfiprintf_r+0x156>
 801c28c:	9207      	str	r2, [sp, #28]
 801c28e:	e014      	b.n	801c2ba <_vfiprintf_r+0x156>
 801c290:	eba0 0308 	sub.w	r3, r0, r8
 801c294:	fa09 f303 	lsl.w	r3, r9, r3
 801c298:	4313      	orrs	r3, r2
 801c29a:	9304      	str	r3, [sp, #16]
 801c29c:	46a2      	mov	sl, r4
 801c29e:	e7d2      	b.n	801c246 <_vfiprintf_r+0xe2>
 801c2a0:	9b03      	ldr	r3, [sp, #12]
 801c2a2:	1d19      	adds	r1, r3, #4
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	9103      	str	r1, [sp, #12]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	bfbb      	ittet	lt
 801c2ac:	425b      	neglt	r3, r3
 801c2ae:	f042 0202 	orrlt.w	r2, r2, #2
 801c2b2:	9307      	strge	r3, [sp, #28]
 801c2b4:	9307      	strlt	r3, [sp, #28]
 801c2b6:	bfb8      	it	lt
 801c2b8:	9204      	strlt	r2, [sp, #16]
 801c2ba:	7823      	ldrb	r3, [r4, #0]
 801c2bc:	2b2e      	cmp	r3, #46	; 0x2e
 801c2be:	d10c      	bne.n	801c2da <_vfiprintf_r+0x176>
 801c2c0:	7863      	ldrb	r3, [r4, #1]
 801c2c2:	2b2a      	cmp	r3, #42	; 0x2a
 801c2c4:	d135      	bne.n	801c332 <_vfiprintf_r+0x1ce>
 801c2c6:	9b03      	ldr	r3, [sp, #12]
 801c2c8:	1d1a      	adds	r2, r3, #4
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	9203      	str	r2, [sp, #12]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	bfb8      	it	lt
 801c2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 801c2d6:	3402      	adds	r4, #2
 801c2d8:	9305      	str	r3, [sp, #20]
 801c2da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c3c0 <_vfiprintf_r+0x25c>
 801c2de:	7821      	ldrb	r1, [r4, #0]
 801c2e0:	2203      	movs	r2, #3
 801c2e2:	4650      	mov	r0, sl
 801c2e4:	f7e3 fff4 	bl	80002d0 <memchr>
 801c2e8:	b140      	cbz	r0, 801c2fc <_vfiprintf_r+0x198>
 801c2ea:	2340      	movs	r3, #64	; 0x40
 801c2ec:	eba0 000a 	sub.w	r0, r0, sl
 801c2f0:	fa03 f000 	lsl.w	r0, r3, r0
 801c2f4:	9b04      	ldr	r3, [sp, #16]
 801c2f6:	4303      	orrs	r3, r0
 801c2f8:	3401      	adds	r4, #1
 801c2fa:	9304      	str	r3, [sp, #16]
 801c2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c300:	482c      	ldr	r0, [pc, #176]	; (801c3b4 <_vfiprintf_r+0x250>)
 801c302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c306:	2206      	movs	r2, #6
 801c308:	f7e3 ffe2 	bl	80002d0 <memchr>
 801c30c:	2800      	cmp	r0, #0
 801c30e:	d03f      	beq.n	801c390 <_vfiprintf_r+0x22c>
 801c310:	4b29      	ldr	r3, [pc, #164]	; (801c3b8 <_vfiprintf_r+0x254>)
 801c312:	bb1b      	cbnz	r3, 801c35c <_vfiprintf_r+0x1f8>
 801c314:	9b03      	ldr	r3, [sp, #12]
 801c316:	3307      	adds	r3, #7
 801c318:	f023 0307 	bic.w	r3, r3, #7
 801c31c:	3308      	adds	r3, #8
 801c31e:	9303      	str	r3, [sp, #12]
 801c320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c322:	443b      	add	r3, r7
 801c324:	9309      	str	r3, [sp, #36]	; 0x24
 801c326:	e767      	b.n	801c1f8 <_vfiprintf_r+0x94>
 801c328:	fb0c 3202 	mla	r2, ip, r2, r3
 801c32c:	460c      	mov	r4, r1
 801c32e:	2001      	movs	r0, #1
 801c330:	e7a5      	b.n	801c27e <_vfiprintf_r+0x11a>
 801c332:	2300      	movs	r3, #0
 801c334:	3401      	adds	r4, #1
 801c336:	9305      	str	r3, [sp, #20]
 801c338:	4619      	mov	r1, r3
 801c33a:	f04f 0c0a 	mov.w	ip, #10
 801c33e:	4620      	mov	r0, r4
 801c340:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c344:	3a30      	subs	r2, #48	; 0x30
 801c346:	2a09      	cmp	r2, #9
 801c348:	d903      	bls.n	801c352 <_vfiprintf_r+0x1ee>
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d0c5      	beq.n	801c2da <_vfiprintf_r+0x176>
 801c34e:	9105      	str	r1, [sp, #20]
 801c350:	e7c3      	b.n	801c2da <_vfiprintf_r+0x176>
 801c352:	fb0c 2101 	mla	r1, ip, r1, r2
 801c356:	4604      	mov	r4, r0
 801c358:	2301      	movs	r3, #1
 801c35a:	e7f0      	b.n	801c33e <_vfiprintf_r+0x1da>
 801c35c:	ab03      	add	r3, sp, #12
 801c35e:	9300      	str	r3, [sp, #0]
 801c360:	462a      	mov	r2, r5
 801c362:	4b16      	ldr	r3, [pc, #88]	; (801c3bc <_vfiprintf_r+0x258>)
 801c364:	a904      	add	r1, sp, #16
 801c366:	4630      	mov	r0, r6
 801c368:	f3af 8000 	nop.w
 801c36c:	4607      	mov	r7, r0
 801c36e:	1c78      	adds	r0, r7, #1
 801c370:	d1d6      	bne.n	801c320 <_vfiprintf_r+0x1bc>
 801c372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c374:	07d9      	lsls	r1, r3, #31
 801c376:	d405      	bmi.n	801c384 <_vfiprintf_r+0x220>
 801c378:	89ab      	ldrh	r3, [r5, #12]
 801c37a:	059a      	lsls	r2, r3, #22
 801c37c:	d402      	bmi.n	801c384 <_vfiprintf_r+0x220>
 801c37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c380:	f7ff fcf9 	bl	801bd76 <__retarget_lock_release_recursive>
 801c384:	89ab      	ldrh	r3, [r5, #12]
 801c386:	065b      	lsls	r3, r3, #25
 801c388:	f53f af12 	bmi.w	801c1b0 <_vfiprintf_r+0x4c>
 801c38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c38e:	e711      	b.n	801c1b4 <_vfiprintf_r+0x50>
 801c390:	ab03      	add	r3, sp, #12
 801c392:	9300      	str	r3, [sp, #0]
 801c394:	462a      	mov	r2, r5
 801c396:	4b09      	ldr	r3, [pc, #36]	; (801c3bc <_vfiprintf_r+0x258>)
 801c398:	a904      	add	r1, sp, #16
 801c39a:	4630      	mov	r0, r6
 801c39c:	f000 f880 	bl	801c4a0 <_printf_i>
 801c3a0:	e7e4      	b.n	801c36c <_vfiprintf_r+0x208>
 801c3a2:	bf00      	nop
 801c3a4:	08032c70 	.word	0x08032c70
 801c3a8:	08032c90 	.word	0x08032c90
 801c3ac:	08032c50 	.word	0x08032c50
 801c3b0:	08032cb0 	.word	0x08032cb0
 801c3b4:	08032cba 	.word	0x08032cba
 801c3b8:	00000000 	.word	0x00000000
 801c3bc:	0801c13f 	.word	0x0801c13f
 801c3c0:	08032cb6 	.word	0x08032cb6

0801c3c4 <_printf_common>:
 801c3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c3c8:	4616      	mov	r6, r2
 801c3ca:	4699      	mov	r9, r3
 801c3cc:	688a      	ldr	r2, [r1, #8]
 801c3ce:	690b      	ldr	r3, [r1, #16]
 801c3d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c3d4:	4293      	cmp	r3, r2
 801c3d6:	bfb8      	it	lt
 801c3d8:	4613      	movlt	r3, r2
 801c3da:	6033      	str	r3, [r6, #0]
 801c3dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c3e0:	4607      	mov	r7, r0
 801c3e2:	460c      	mov	r4, r1
 801c3e4:	b10a      	cbz	r2, 801c3ea <_printf_common+0x26>
 801c3e6:	3301      	adds	r3, #1
 801c3e8:	6033      	str	r3, [r6, #0]
 801c3ea:	6823      	ldr	r3, [r4, #0]
 801c3ec:	0699      	lsls	r1, r3, #26
 801c3ee:	bf42      	ittt	mi
 801c3f0:	6833      	ldrmi	r3, [r6, #0]
 801c3f2:	3302      	addmi	r3, #2
 801c3f4:	6033      	strmi	r3, [r6, #0]
 801c3f6:	6825      	ldr	r5, [r4, #0]
 801c3f8:	f015 0506 	ands.w	r5, r5, #6
 801c3fc:	d106      	bne.n	801c40c <_printf_common+0x48>
 801c3fe:	f104 0a19 	add.w	sl, r4, #25
 801c402:	68e3      	ldr	r3, [r4, #12]
 801c404:	6832      	ldr	r2, [r6, #0]
 801c406:	1a9b      	subs	r3, r3, r2
 801c408:	42ab      	cmp	r3, r5
 801c40a:	dc26      	bgt.n	801c45a <_printf_common+0x96>
 801c40c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c410:	1e13      	subs	r3, r2, #0
 801c412:	6822      	ldr	r2, [r4, #0]
 801c414:	bf18      	it	ne
 801c416:	2301      	movne	r3, #1
 801c418:	0692      	lsls	r2, r2, #26
 801c41a:	d42b      	bmi.n	801c474 <_printf_common+0xb0>
 801c41c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c420:	4649      	mov	r1, r9
 801c422:	4638      	mov	r0, r7
 801c424:	47c0      	blx	r8
 801c426:	3001      	adds	r0, #1
 801c428:	d01e      	beq.n	801c468 <_printf_common+0xa4>
 801c42a:	6823      	ldr	r3, [r4, #0]
 801c42c:	68e5      	ldr	r5, [r4, #12]
 801c42e:	6832      	ldr	r2, [r6, #0]
 801c430:	f003 0306 	and.w	r3, r3, #6
 801c434:	2b04      	cmp	r3, #4
 801c436:	bf08      	it	eq
 801c438:	1aad      	subeq	r5, r5, r2
 801c43a:	68a3      	ldr	r3, [r4, #8]
 801c43c:	6922      	ldr	r2, [r4, #16]
 801c43e:	bf0c      	ite	eq
 801c440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c444:	2500      	movne	r5, #0
 801c446:	4293      	cmp	r3, r2
 801c448:	bfc4      	itt	gt
 801c44a:	1a9b      	subgt	r3, r3, r2
 801c44c:	18ed      	addgt	r5, r5, r3
 801c44e:	2600      	movs	r6, #0
 801c450:	341a      	adds	r4, #26
 801c452:	42b5      	cmp	r5, r6
 801c454:	d11a      	bne.n	801c48c <_printf_common+0xc8>
 801c456:	2000      	movs	r0, #0
 801c458:	e008      	b.n	801c46c <_printf_common+0xa8>
 801c45a:	2301      	movs	r3, #1
 801c45c:	4652      	mov	r2, sl
 801c45e:	4649      	mov	r1, r9
 801c460:	4638      	mov	r0, r7
 801c462:	47c0      	blx	r8
 801c464:	3001      	adds	r0, #1
 801c466:	d103      	bne.n	801c470 <_printf_common+0xac>
 801c468:	f04f 30ff 	mov.w	r0, #4294967295
 801c46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c470:	3501      	adds	r5, #1
 801c472:	e7c6      	b.n	801c402 <_printf_common+0x3e>
 801c474:	18e1      	adds	r1, r4, r3
 801c476:	1c5a      	adds	r2, r3, #1
 801c478:	2030      	movs	r0, #48	; 0x30
 801c47a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c47e:	4422      	add	r2, r4
 801c480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c488:	3302      	adds	r3, #2
 801c48a:	e7c7      	b.n	801c41c <_printf_common+0x58>
 801c48c:	2301      	movs	r3, #1
 801c48e:	4622      	mov	r2, r4
 801c490:	4649      	mov	r1, r9
 801c492:	4638      	mov	r0, r7
 801c494:	47c0      	blx	r8
 801c496:	3001      	adds	r0, #1
 801c498:	d0e6      	beq.n	801c468 <_printf_common+0xa4>
 801c49a:	3601      	adds	r6, #1
 801c49c:	e7d9      	b.n	801c452 <_printf_common+0x8e>
	...

0801c4a0 <_printf_i>:
 801c4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c4a4:	460c      	mov	r4, r1
 801c4a6:	4691      	mov	r9, r2
 801c4a8:	7e27      	ldrb	r7, [r4, #24]
 801c4aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c4ac:	2f78      	cmp	r7, #120	; 0x78
 801c4ae:	4680      	mov	r8, r0
 801c4b0:	469a      	mov	sl, r3
 801c4b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c4b6:	d807      	bhi.n	801c4c8 <_printf_i+0x28>
 801c4b8:	2f62      	cmp	r7, #98	; 0x62
 801c4ba:	d80a      	bhi.n	801c4d2 <_printf_i+0x32>
 801c4bc:	2f00      	cmp	r7, #0
 801c4be:	f000 80d8 	beq.w	801c672 <_printf_i+0x1d2>
 801c4c2:	2f58      	cmp	r7, #88	; 0x58
 801c4c4:	f000 80a3 	beq.w	801c60e <_printf_i+0x16e>
 801c4c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c4cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c4d0:	e03a      	b.n	801c548 <_printf_i+0xa8>
 801c4d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c4d6:	2b15      	cmp	r3, #21
 801c4d8:	d8f6      	bhi.n	801c4c8 <_printf_i+0x28>
 801c4da:	a001      	add	r0, pc, #4	; (adr r0, 801c4e0 <_printf_i+0x40>)
 801c4dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c4e0:	0801c539 	.word	0x0801c539
 801c4e4:	0801c54d 	.word	0x0801c54d
 801c4e8:	0801c4c9 	.word	0x0801c4c9
 801c4ec:	0801c4c9 	.word	0x0801c4c9
 801c4f0:	0801c4c9 	.word	0x0801c4c9
 801c4f4:	0801c4c9 	.word	0x0801c4c9
 801c4f8:	0801c54d 	.word	0x0801c54d
 801c4fc:	0801c4c9 	.word	0x0801c4c9
 801c500:	0801c4c9 	.word	0x0801c4c9
 801c504:	0801c4c9 	.word	0x0801c4c9
 801c508:	0801c4c9 	.word	0x0801c4c9
 801c50c:	0801c659 	.word	0x0801c659
 801c510:	0801c57d 	.word	0x0801c57d
 801c514:	0801c63b 	.word	0x0801c63b
 801c518:	0801c4c9 	.word	0x0801c4c9
 801c51c:	0801c4c9 	.word	0x0801c4c9
 801c520:	0801c67b 	.word	0x0801c67b
 801c524:	0801c4c9 	.word	0x0801c4c9
 801c528:	0801c57d 	.word	0x0801c57d
 801c52c:	0801c4c9 	.word	0x0801c4c9
 801c530:	0801c4c9 	.word	0x0801c4c9
 801c534:	0801c643 	.word	0x0801c643
 801c538:	680b      	ldr	r3, [r1, #0]
 801c53a:	1d1a      	adds	r2, r3, #4
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	600a      	str	r2, [r1, #0]
 801c540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c548:	2301      	movs	r3, #1
 801c54a:	e0a3      	b.n	801c694 <_printf_i+0x1f4>
 801c54c:	6825      	ldr	r5, [r4, #0]
 801c54e:	6808      	ldr	r0, [r1, #0]
 801c550:	062e      	lsls	r6, r5, #24
 801c552:	f100 0304 	add.w	r3, r0, #4
 801c556:	d50a      	bpl.n	801c56e <_printf_i+0xce>
 801c558:	6805      	ldr	r5, [r0, #0]
 801c55a:	600b      	str	r3, [r1, #0]
 801c55c:	2d00      	cmp	r5, #0
 801c55e:	da03      	bge.n	801c568 <_printf_i+0xc8>
 801c560:	232d      	movs	r3, #45	; 0x2d
 801c562:	426d      	negs	r5, r5
 801c564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c568:	485e      	ldr	r0, [pc, #376]	; (801c6e4 <_printf_i+0x244>)
 801c56a:	230a      	movs	r3, #10
 801c56c:	e019      	b.n	801c5a2 <_printf_i+0x102>
 801c56e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c572:	6805      	ldr	r5, [r0, #0]
 801c574:	600b      	str	r3, [r1, #0]
 801c576:	bf18      	it	ne
 801c578:	b22d      	sxthne	r5, r5
 801c57a:	e7ef      	b.n	801c55c <_printf_i+0xbc>
 801c57c:	680b      	ldr	r3, [r1, #0]
 801c57e:	6825      	ldr	r5, [r4, #0]
 801c580:	1d18      	adds	r0, r3, #4
 801c582:	6008      	str	r0, [r1, #0]
 801c584:	0628      	lsls	r0, r5, #24
 801c586:	d501      	bpl.n	801c58c <_printf_i+0xec>
 801c588:	681d      	ldr	r5, [r3, #0]
 801c58a:	e002      	b.n	801c592 <_printf_i+0xf2>
 801c58c:	0669      	lsls	r1, r5, #25
 801c58e:	d5fb      	bpl.n	801c588 <_printf_i+0xe8>
 801c590:	881d      	ldrh	r5, [r3, #0]
 801c592:	4854      	ldr	r0, [pc, #336]	; (801c6e4 <_printf_i+0x244>)
 801c594:	2f6f      	cmp	r7, #111	; 0x6f
 801c596:	bf0c      	ite	eq
 801c598:	2308      	moveq	r3, #8
 801c59a:	230a      	movne	r3, #10
 801c59c:	2100      	movs	r1, #0
 801c59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c5a2:	6866      	ldr	r6, [r4, #4]
 801c5a4:	60a6      	str	r6, [r4, #8]
 801c5a6:	2e00      	cmp	r6, #0
 801c5a8:	bfa2      	ittt	ge
 801c5aa:	6821      	ldrge	r1, [r4, #0]
 801c5ac:	f021 0104 	bicge.w	r1, r1, #4
 801c5b0:	6021      	strge	r1, [r4, #0]
 801c5b2:	b90d      	cbnz	r5, 801c5b8 <_printf_i+0x118>
 801c5b4:	2e00      	cmp	r6, #0
 801c5b6:	d04d      	beq.n	801c654 <_printf_i+0x1b4>
 801c5b8:	4616      	mov	r6, r2
 801c5ba:	fbb5 f1f3 	udiv	r1, r5, r3
 801c5be:	fb03 5711 	mls	r7, r3, r1, r5
 801c5c2:	5dc7      	ldrb	r7, [r0, r7]
 801c5c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c5c8:	462f      	mov	r7, r5
 801c5ca:	42bb      	cmp	r3, r7
 801c5cc:	460d      	mov	r5, r1
 801c5ce:	d9f4      	bls.n	801c5ba <_printf_i+0x11a>
 801c5d0:	2b08      	cmp	r3, #8
 801c5d2:	d10b      	bne.n	801c5ec <_printf_i+0x14c>
 801c5d4:	6823      	ldr	r3, [r4, #0]
 801c5d6:	07df      	lsls	r7, r3, #31
 801c5d8:	d508      	bpl.n	801c5ec <_printf_i+0x14c>
 801c5da:	6923      	ldr	r3, [r4, #16]
 801c5dc:	6861      	ldr	r1, [r4, #4]
 801c5de:	4299      	cmp	r1, r3
 801c5e0:	bfde      	ittt	le
 801c5e2:	2330      	movle	r3, #48	; 0x30
 801c5e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c5e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c5ec:	1b92      	subs	r2, r2, r6
 801c5ee:	6122      	str	r2, [r4, #16]
 801c5f0:	f8cd a000 	str.w	sl, [sp]
 801c5f4:	464b      	mov	r3, r9
 801c5f6:	aa03      	add	r2, sp, #12
 801c5f8:	4621      	mov	r1, r4
 801c5fa:	4640      	mov	r0, r8
 801c5fc:	f7ff fee2 	bl	801c3c4 <_printf_common>
 801c600:	3001      	adds	r0, #1
 801c602:	d14c      	bne.n	801c69e <_printf_i+0x1fe>
 801c604:	f04f 30ff 	mov.w	r0, #4294967295
 801c608:	b004      	add	sp, #16
 801c60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c60e:	4835      	ldr	r0, [pc, #212]	; (801c6e4 <_printf_i+0x244>)
 801c610:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c614:	6823      	ldr	r3, [r4, #0]
 801c616:	680e      	ldr	r6, [r1, #0]
 801c618:	061f      	lsls	r7, r3, #24
 801c61a:	f856 5b04 	ldr.w	r5, [r6], #4
 801c61e:	600e      	str	r6, [r1, #0]
 801c620:	d514      	bpl.n	801c64c <_printf_i+0x1ac>
 801c622:	07d9      	lsls	r1, r3, #31
 801c624:	bf44      	itt	mi
 801c626:	f043 0320 	orrmi.w	r3, r3, #32
 801c62a:	6023      	strmi	r3, [r4, #0]
 801c62c:	b91d      	cbnz	r5, 801c636 <_printf_i+0x196>
 801c62e:	6823      	ldr	r3, [r4, #0]
 801c630:	f023 0320 	bic.w	r3, r3, #32
 801c634:	6023      	str	r3, [r4, #0]
 801c636:	2310      	movs	r3, #16
 801c638:	e7b0      	b.n	801c59c <_printf_i+0xfc>
 801c63a:	6823      	ldr	r3, [r4, #0]
 801c63c:	f043 0320 	orr.w	r3, r3, #32
 801c640:	6023      	str	r3, [r4, #0]
 801c642:	2378      	movs	r3, #120	; 0x78
 801c644:	4828      	ldr	r0, [pc, #160]	; (801c6e8 <_printf_i+0x248>)
 801c646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c64a:	e7e3      	b.n	801c614 <_printf_i+0x174>
 801c64c:	065e      	lsls	r6, r3, #25
 801c64e:	bf48      	it	mi
 801c650:	b2ad      	uxthmi	r5, r5
 801c652:	e7e6      	b.n	801c622 <_printf_i+0x182>
 801c654:	4616      	mov	r6, r2
 801c656:	e7bb      	b.n	801c5d0 <_printf_i+0x130>
 801c658:	680b      	ldr	r3, [r1, #0]
 801c65a:	6826      	ldr	r6, [r4, #0]
 801c65c:	6960      	ldr	r0, [r4, #20]
 801c65e:	1d1d      	adds	r5, r3, #4
 801c660:	600d      	str	r5, [r1, #0]
 801c662:	0635      	lsls	r5, r6, #24
 801c664:	681b      	ldr	r3, [r3, #0]
 801c666:	d501      	bpl.n	801c66c <_printf_i+0x1cc>
 801c668:	6018      	str	r0, [r3, #0]
 801c66a:	e002      	b.n	801c672 <_printf_i+0x1d2>
 801c66c:	0671      	lsls	r1, r6, #25
 801c66e:	d5fb      	bpl.n	801c668 <_printf_i+0x1c8>
 801c670:	8018      	strh	r0, [r3, #0]
 801c672:	2300      	movs	r3, #0
 801c674:	6123      	str	r3, [r4, #16]
 801c676:	4616      	mov	r6, r2
 801c678:	e7ba      	b.n	801c5f0 <_printf_i+0x150>
 801c67a:	680b      	ldr	r3, [r1, #0]
 801c67c:	1d1a      	adds	r2, r3, #4
 801c67e:	600a      	str	r2, [r1, #0]
 801c680:	681e      	ldr	r6, [r3, #0]
 801c682:	6862      	ldr	r2, [r4, #4]
 801c684:	2100      	movs	r1, #0
 801c686:	4630      	mov	r0, r6
 801c688:	f7e3 fe22 	bl	80002d0 <memchr>
 801c68c:	b108      	cbz	r0, 801c692 <_printf_i+0x1f2>
 801c68e:	1b80      	subs	r0, r0, r6
 801c690:	6060      	str	r0, [r4, #4]
 801c692:	6863      	ldr	r3, [r4, #4]
 801c694:	6123      	str	r3, [r4, #16]
 801c696:	2300      	movs	r3, #0
 801c698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c69c:	e7a8      	b.n	801c5f0 <_printf_i+0x150>
 801c69e:	6923      	ldr	r3, [r4, #16]
 801c6a0:	4632      	mov	r2, r6
 801c6a2:	4649      	mov	r1, r9
 801c6a4:	4640      	mov	r0, r8
 801c6a6:	47d0      	blx	sl
 801c6a8:	3001      	adds	r0, #1
 801c6aa:	d0ab      	beq.n	801c604 <_printf_i+0x164>
 801c6ac:	6823      	ldr	r3, [r4, #0]
 801c6ae:	079b      	lsls	r3, r3, #30
 801c6b0:	d413      	bmi.n	801c6da <_printf_i+0x23a>
 801c6b2:	68e0      	ldr	r0, [r4, #12]
 801c6b4:	9b03      	ldr	r3, [sp, #12]
 801c6b6:	4298      	cmp	r0, r3
 801c6b8:	bfb8      	it	lt
 801c6ba:	4618      	movlt	r0, r3
 801c6bc:	e7a4      	b.n	801c608 <_printf_i+0x168>
 801c6be:	2301      	movs	r3, #1
 801c6c0:	4632      	mov	r2, r6
 801c6c2:	4649      	mov	r1, r9
 801c6c4:	4640      	mov	r0, r8
 801c6c6:	47d0      	blx	sl
 801c6c8:	3001      	adds	r0, #1
 801c6ca:	d09b      	beq.n	801c604 <_printf_i+0x164>
 801c6cc:	3501      	adds	r5, #1
 801c6ce:	68e3      	ldr	r3, [r4, #12]
 801c6d0:	9903      	ldr	r1, [sp, #12]
 801c6d2:	1a5b      	subs	r3, r3, r1
 801c6d4:	42ab      	cmp	r3, r5
 801c6d6:	dcf2      	bgt.n	801c6be <_printf_i+0x21e>
 801c6d8:	e7eb      	b.n	801c6b2 <_printf_i+0x212>
 801c6da:	2500      	movs	r5, #0
 801c6dc:	f104 0619 	add.w	r6, r4, #25
 801c6e0:	e7f5      	b.n	801c6ce <_printf_i+0x22e>
 801c6e2:	bf00      	nop
 801c6e4:	08032cc1 	.word	0x08032cc1
 801c6e8:	08032cd2 	.word	0x08032cd2

0801c6ec <_putc_r>:
 801c6ec:	b570      	push	{r4, r5, r6, lr}
 801c6ee:	460d      	mov	r5, r1
 801c6f0:	4614      	mov	r4, r2
 801c6f2:	4606      	mov	r6, r0
 801c6f4:	b118      	cbz	r0, 801c6fe <_putc_r+0x12>
 801c6f6:	6983      	ldr	r3, [r0, #24]
 801c6f8:	b90b      	cbnz	r3, 801c6fe <_putc_r+0x12>
 801c6fa:	f7ff fa9d 	bl	801bc38 <__sinit>
 801c6fe:	4b1c      	ldr	r3, [pc, #112]	; (801c770 <_putc_r+0x84>)
 801c700:	429c      	cmp	r4, r3
 801c702:	d124      	bne.n	801c74e <_putc_r+0x62>
 801c704:	6874      	ldr	r4, [r6, #4]
 801c706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c708:	07d8      	lsls	r0, r3, #31
 801c70a:	d405      	bmi.n	801c718 <_putc_r+0x2c>
 801c70c:	89a3      	ldrh	r3, [r4, #12]
 801c70e:	0599      	lsls	r1, r3, #22
 801c710:	d402      	bmi.n	801c718 <_putc_r+0x2c>
 801c712:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c714:	f7ff fb2e 	bl	801bd74 <__retarget_lock_acquire_recursive>
 801c718:	68a3      	ldr	r3, [r4, #8]
 801c71a:	3b01      	subs	r3, #1
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	60a3      	str	r3, [r4, #8]
 801c720:	da05      	bge.n	801c72e <_putc_r+0x42>
 801c722:	69a2      	ldr	r2, [r4, #24]
 801c724:	4293      	cmp	r3, r2
 801c726:	db1c      	blt.n	801c762 <_putc_r+0x76>
 801c728:	b2eb      	uxtb	r3, r5
 801c72a:	2b0a      	cmp	r3, #10
 801c72c:	d019      	beq.n	801c762 <_putc_r+0x76>
 801c72e:	6823      	ldr	r3, [r4, #0]
 801c730:	1c5a      	adds	r2, r3, #1
 801c732:	6022      	str	r2, [r4, #0]
 801c734:	701d      	strb	r5, [r3, #0]
 801c736:	b2ed      	uxtb	r5, r5
 801c738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c73a:	07da      	lsls	r2, r3, #31
 801c73c:	d405      	bmi.n	801c74a <_putc_r+0x5e>
 801c73e:	89a3      	ldrh	r3, [r4, #12]
 801c740:	059b      	lsls	r3, r3, #22
 801c742:	d402      	bmi.n	801c74a <_putc_r+0x5e>
 801c744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c746:	f7ff fb16 	bl	801bd76 <__retarget_lock_release_recursive>
 801c74a:	4628      	mov	r0, r5
 801c74c:	bd70      	pop	{r4, r5, r6, pc}
 801c74e:	4b09      	ldr	r3, [pc, #36]	; (801c774 <_putc_r+0x88>)
 801c750:	429c      	cmp	r4, r3
 801c752:	d101      	bne.n	801c758 <_putc_r+0x6c>
 801c754:	68b4      	ldr	r4, [r6, #8]
 801c756:	e7d6      	b.n	801c706 <_putc_r+0x1a>
 801c758:	4b07      	ldr	r3, [pc, #28]	; (801c778 <_putc_r+0x8c>)
 801c75a:	429c      	cmp	r4, r3
 801c75c:	bf08      	it	eq
 801c75e:	68f4      	ldreq	r4, [r6, #12]
 801c760:	e7d1      	b.n	801c706 <_putc_r+0x1a>
 801c762:	4629      	mov	r1, r5
 801c764:	4622      	mov	r2, r4
 801c766:	4630      	mov	r0, r6
 801c768:	f7ff f88c 	bl	801b884 <__swbuf_r>
 801c76c:	4605      	mov	r5, r0
 801c76e:	e7e3      	b.n	801c738 <_putc_r+0x4c>
 801c770:	08032c70 	.word	0x08032c70
 801c774:	08032c90 	.word	0x08032c90
 801c778:	08032c50 	.word	0x08032c50

0801c77c <__sread>:
 801c77c:	b510      	push	{r4, lr}
 801c77e:	460c      	mov	r4, r1
 801c780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c784:	f000 f8d4 	bl	801c930 <_read_r>
 801c788:	2800      	cmp	r0, #0
 801c78a:	bfab      	itete	ge
 801c78c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c78e:	89a3      	ldrhlt	r3, [r4, #12]
 801c790:	181b      	addge	r3, r3, r0
 801c792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c796:	bfac      	ite	ge
 801c798:	6563      	strge	r3, [r4, #84]	; 0x54
 801c79a:	81a3      	strhlt	r3, [r4, #12]
 801c79c:	bd10      	pop	{r4, pc}

0801c79e <__swrite>:
 801c79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7a2:	461f      	mov	r7, r3
 801c7a4:	898b      	ldrh	r3, [r1, #12]
 801c7a6:	05db      	lsls	r3, r3, #23
 801c7a8:	4605      	mov	r5, r0
 801c7aa:	460c      	mov	r4, r1
 801c7ac:	4616      	mov	r6, r2
 801c7ae:	d505      	bpl.n	801c7bc <__swrite+0x1e>
 801c7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7b4:	2302      	movs	r3, #2
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	f000 f868 	bl	801c88c <_lseek_r>
 801c7bc:	89a3      	ldrh	r3, [r4, #12]
 801c7be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c7c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c7c6:	81a3      	strh	r3, [r4, #12]
 801c7c8:	4632      	mov	r2, r6
 801c7ca:	463b      	mov	r3, r7
 801c7cc:	4628      	mov	r0, r5
 801c7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c7d2:	f000 b817 	b.w	801c804 <_write_r>

0801c7d6 <__sseek>:
 801c7d6:	b510      	push	{r4, lr}
 801c7d8:	460c      	mov	r4, r1
 801c7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7de:	f000 f855 	bl	801c88c <_lseek_r>
 801c7e2:	1c43      	adds	r3, r0, #1
 801c7e4:	89a3      	ldrh	r3, [r4, #12]
 801c7e6:	bf15      	itete	ne
 801c7e8:	6560      	strne	r0, [r4, #84]	; 0x54
 801c7ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c7ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c7f2:	81a3      	strheq	r3, [r4, #12]
 801c7f4:	bf18      	it	ne
 801c7f6:	81a3      	strhne	r3, [r4, #12]
 801c7f8:	bd10      	pop	{r4, pc}

0801c7fa <__sclose>:
 801c7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7fe:	f000 b813 	b.w	801c828 <_close_r>
	...

0801c804 <_write_r>:
 801c804:	b538      	push	{r3, r4, r5, lr}
 801c806:	4d07      	ldr	r5, [pc, #28]	; (801c824 <_write_r+0x20>)
 801c808:	4604      	mov	r4, r0
 801c80a:	4608      	mov	r0, r1
 801c80c:	4611      	mov	r1, r2
 801c80e:	2200      	movs	r2, #0
 801c810:	602a      	str	r2, [r5, #0]
 801c812:	461a      	mov	r2, r3
 801c814:	f7e7 ff2b 	bl	800466e <_write>
 801c818:	1c43      	adds	r3, r0, #1
 801c81a:	d102      	bne.n	801c822 <_write_r+0x1e>
 801c81c:	682b      	ldr	r3, [r5, #0]
 801c81e:	b103      	cbz	r3, 801c822 <_write_r+0x1e>
 801c820:	6023      	str	r3, [r4, #0]
 801c822:	bd38      	pop	{r3, r4, r5, pc}
 801c824:	2004de9c 	.word	0x2004de9c

0801c828 <_close_r>:
 801c828:	b538      	push	{r3, r4, r5, lr}
 801c82a:	4d06      	ldr	r5, [pc, #24]	; (801c844 <_close_r+0x1c>)
 801c82c:	2300      	movs	r3, #0
 801c82e:	4604      	mov	r4, r0
 801c830:	4608      	mov	r0, r1
 801c832:	602b      	str	r3, [r5, #0]
 801c834:	f7e7 ff37 	bl	80046a6 <_close>
 801c838:	1c43      	adds	r3, r0, #1
 801c83a:	d102      	bne.n	801c842 <_close_r+0x1a>
 801c83c:	682b      	ldr	r3, [r5, #0]
 801c83e:	b103      	cbz	r3, 801c842 <_close_r+0x1a>
 801c840:	6023      	str	r3, [r4, #0]
 801c842:	bd38      	pop	{r3, r4, r5, pc}
 801c844:	2004de9c 	.word	0x2004de9c

0801c848 <_fstat_r>:
 801c848:	b538      	push	{r3, r4, r5, lr}
 801c84a:	4d07      	ldr	r5, [pc, #28]	; (801c868 <_fstat_r+0x20>)
 801c84c:	2300      	movs	r3, #0
 801c84e:	4604      	mov	r4, r0
 801c850:	4608      	mov	r0, r1
 801c852:	4611      	mov	r1, r2
 801c854:	602b      	str	r3, [r5, #0]
 801c856:	f7e7 ff32 	bl	80046be <_fstat>
 801c85a:	1c43      	adds	r3, r0, #1
 801c85c:	d102      	bne.n	801c864 <_fstat_r+0x1c>
 801c85e:	682b      	ldr	r3, [r5, #0]
 801c860:	b103      	cbz	r3, 801c864 <_fstat_r+0x1c>
 801c862:	6023      	str	r3, [r4, #0]
 801c864:	bd38      	pop	{r3, r4, r5, pc}
 801c866:	bf00      	nop
 801c868:	2004de9c 	.word	0x2004de9c

0801c86c <_isatty_r>:
 801c86c:	b538      	push	{r3, r4, r5, lr}
 801c86e:	4d06      	ldr	r5, [pc, #24]	; (801c888 <_isatty_r+0x1c>)
 801c870:	2300      	movs	r3, #0
 801c872:	4604      	mov	r4, r0
 801c874:	4608      	mov	r0, r1
 801c876:	602b      	str	r3, [r5, #0]
 801c878:	f7e7 ff31 	bl	80046de <_isatty>
 801c87c:	1c43      	adds	r3, r0, #1
 801c87e:	d102      	bne.n	801c886 <_isatty_r+0x1a>
 801c880:	682b      	ldr	r3, [r5, #0]
 801c882:	b103      	cbz	r3, 801c886 <_isatty_r+0x1a>
 801c884:	6023      	str	r3, [r4, #0]
 801c886:	bd38      	pop	{r3, r4, r5, pc}
 801c888:	2004de9c 	.word	0x2004de9c

0801c88c <_lseek_r>:
 801c88c:	b538      	push	{r3, r4, r5, lr}
 801c88e:	4d07      	ldr	r5, [pc, #28]	; (801c8ac <_lseek_r+0x20>)
 801c890:	4604      	mov	r4, r0
 801c892:	4608      	mov	r0, r1
 801c894:	4611      	mov	r1, r2
 801c896:	2200      	movs	r2, #0
 801c898:	602a      	str	r2, [r5, #0]
 801c89a:	461a      	mov	r2, r3
 801c89c:	f7e7 ff2a 	bl	80046f4 <_lseek>
 801c8a0:	1c43      	adds	r3, r0, #1
 801c8a2:	d102      	bne.n	801c8aa <_lseek_r+0x1e>
 801c8a4:	682b      	ldr	r3, [r5, #0]
 801c8a6:	b103      	cbz	r3, 801c8aa <_lseek_r+0x1e>
 801c8a8:	6023      	str	r3, [r4, #0]
 801c8aa:	bd38      	pop	{r3, r4, r5, pc}
 801c8ac:	2004de9c 	.word	0x2004de9c

0801c8b0 <memmove>:
 801c8b0:	4288      	cmp	r0, r1
 801c8b2:	b510      	push	{r4, lr}
 801c8b4:	eb01 0402 	add.w	r4, r1, r2
 801c8b8:	d902      	bls.n	801c8c0 <memmove+0x10>
 801c8ba:	4284      	cmp	r4, r0
 801c8bc:	4623      	mov	r3, r4
 801c8be:	d807      	bhi.n	801c8d0 <memmove+0x20>
 801c8c0:	1e43      	subs	r3, r0, #1
 801c8c2:	42a1      	cmp	r1, r4
 801c8c4:	d008      	beq.n	801c8d8 <memmove+0x28>
 801c8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c8ce:	e7f8      	b.n	801c8c2 <memmove+0x12>
 801c8d0:	4402      	add	r2, r0
 801c8d2:	4601      	mov	r1, r0
 801c8d4:	428a      	cmp	r2, r1
 801c8d6:	d100      	bne.n	801c8da <memmove+0x2a>
 801c8d8:	bd10      	pop	{r4, pc}
 801c8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c8e2:	e7f7      	b.n	801c8d4 <memmove+0x24>

0801c8e4 <_realloc_r>:
 801c8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8e6:	4607      	mov	r7, r0
 801c8e8:	4614      	mov	r4, r2
 801c8ea:	460e      	mov	r6, r1
 801c8ec:	b921      	cbnz	r1, 801c8f8 <_realloc_r+0x14>
 801c8ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c8f2:	4611      	mov	r1, r2
 801c8f4:	f7fe be98 	b.w	801b628 <_malloc_r>
 801c8f8:	b922      	cbnz	r2, 801c904 <_realloc_r+0x20>
 801c8fa:	f7fe fe45 	bl	801b588 <_free_r>
 801c8fe:	4625      	mov	r5, r4
 801c900:	4628      	mov	r0, r5
 801c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c904:	f000 f826 	bl	801c954 <_malloc_usable_size_r>
 801c908:	42a0      	cmp	r0, r4
 801c90a:	d20f      	bcs.n	801c92c <_realloc_r+0x48>
 801c90c:	4621      	mov	r1, r4
 801c90e:	4638      	mov	r0, r7
 801c910:	f7fe fe8a 	bl	801b628 <_malloc_r>
 801c914:	4605      	mov	r5, r0
 801c916:	2800      	cmp	r0, #0
 801c918:	d0f2      	beq.n	801c900 <_realloc_r+0x1c>
 801c91a:	4631      	mov	r1, r6
 801c91c:	4622      	mov	r2, r4
 801c91e:	f7fe fe1d 	bl	801b55c <memcpy>
 801c922:	4631      	mov	r1, r6
 801c924:	4638      	mov	r0, r7
 801c926:	f7fe fe2f 	bl	801b588 <_free_r>
 801c92a:	e7e9      	b.n	801c900 <_realloc_r+0x1c>
 801c92c:	4635      	mov	r5, r6
 801c92e:	e7e7      	b.n	801c900 <_realloc_r+0x1c>

0801c930 <_read_r>:
 801c930:	b538      	push	{r3, r4, r5, lr}
 801c932:	4d07      	ldr	r5, [pc, #28]	; (801c950 <_read_r+0x20>)
 801c934:	4604      	mov	r4, r0
 801c936:	4608      	mov	r0, r1
 801c938:	4611      	mov	r1, r2
 801c93a:	2200      	movs	r2, #0
 801c93c:	602a      	str	r2, [r5, #0]
 801c93e:	461a      	mov	r2, r3
 801c940:	f7e7 fe78 	bl	8004634 <_read>
 801c944:	1c43      	adds	r3, r0, #1
 801c946:	d102      	bne.n	801c94e <_read_r+0x1e>
 801c948:	682b      	ldr	r3, [r5, #0]
 801c94a:	b103      	cbz	r3, 801c94e <_read_r+0x1e>
 801c94c:	6023      	str	r3, [r4, #0]
 801c94e:	bd38      	pop	{r3, r4, r5, pc}
 801c950:	2004de9c 	.word	0x2004de9c

0801c954 <_malloc_usable_size_r>:
 801c954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c958:	1f18      	subs	r0, r3, #4
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	bfbc      	itt	lt
 801c95e:	580b      	ldrlt	r3, [r1, r0]
 801c960:	18c0      	addlt	r0, r0, r3
 801c962:	4770      	bx	lr
 801c964:	0000      	movs	r0, r0
	...

0801c968 <floor>:
 801c968:	ec51 0b10 	vmov	r0, r1, d0
 801c96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c970:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c974:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c978:	2e13      	cmp	r6, #19
 801c97a:	ee10 5a10 	vmov	r5, s0
 801c97e:	ee10 8a10 	vmov	r8, s0
 801c982:	460c      	mov	r4, r1
 801c984:	dc32      	bgt.n	801c9ec <floor+0x84>
 801c986:	2e00      	cmp	r6, #0
 801c988:	da14      	bge.n	801c9b4 <floor+0x4c>
 801c98a:	a333      	add	r3, pc, #204	; (adr r3, 801ca58 <floor+0xf0>)
 801c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c990:	f7e3 fcf4 	bl	800037c <__adddf3>
 801c994:	2200      	movs	r2, #0
 801c996:	2300      	movs	r3, #0
 801c998:	f7e4 f936 	bl	8000c08 <__aeabi_dcmpgt>
 801c99c:	b138      	cbz	r0, 801c9ae <floor+0x46>
 801c99e:	2c00      	cmp	r4, #0
 801c9a0:	da57      	bge.n	801ca52 <floor+0xea>
 801c9a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c9a6:	431d      	orrs	r5, r3
 801c9a8:	d001      	beq.n	801c9ae <floor+0x46>
 801c9aa:	4c2d      	ldr	r4, [pc, #180]	; (801ca60 <floor+0xf8>)
 801c9ac:	2500      	movs	r5, #0
 801c9ae:	4621      	mov	r1, r4
 801c9b0:	4628      	mov	r0, r5
 801c9b2:	e025      	b.n	801ca00 <floor+0x98>
 801c9b4:	4f2b      	ldr	r7, [pc, #172]	; (801ca64 <floor+0xfc>)
 801c9b6:	4137      	asrs	r7, r6
 801c9b8:	ea01 0307 	and.w	r3, r1, r7
 801c9bc:	4303      	orrs	r3, r0
 801c9be:	d01f      	beq.n	801ca00 <floor+0x98>
 801c9c0:	a325      	add	r3, pc, #148	; (adr r3, 801ca58 <floor+0xf0>)
 801c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9c6:	f7e3 fcd9 	bl	800037c <__adddf3>
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	2300      	movs	r3, #0
 801c9ce:	f7e4 f91b 	bl	8000c08 <__aeabi_dcmpgt>
 801c9d2:	2800      	cmp	r0, #0
 801c9d4:	d0eb      	beq.n	801c9ae <floor+0x46>
 801c9d6:	2c00      	cmp	r4, #0
 801c9d8:	bfbe      	ittt	lt
 801c9da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c9de:	fa43 f606 	asrlt.w	r6, r3, r6
 801c9e2:	19a4      	addlt	r4, r4, r6
 801c9e4:	ea24 0407 	bic.w	r4, r4, r7
 801c9e8:	2500      	movs	r5, #0
 801c9ea:	e7e0      	b.n	801c9ae <floor+0x46>
 801c9ec:	2e33      	cmp	r6, #51	; 0x33
 801c9ee:	dd0b      	ble.n	801ca08 <floor+0xa0>
 801c9f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c9f4:	d104      	bne.n	801ca00 <floor+0x98>
 801c9f6:	ee10 2a10 	vmov	r2, s0
 801c9fa:	460b      	mov	r3, r1
 801c9fc:	f7e3 fcbe 	bl	800037c <__adddf3>
 801ca00:	ec41 0b10 	vmov	d0, r0, r1
 801ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca08:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ca0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ca10:	fa23 f707 	lsr.w	r7, r3, r7
 801ca14:	4207      	tst	r7, r0
 801ca16:	d0f3      	beq.n	801ca00 <floor+0x98>
 801ca18:	a30f      	add	r3, pc, #60	; (adr r3, 801ca58 <floor+0xf0>)
 801ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca1e:	f7e3 fcad 	bl	800037c <__adddf3>
 801ca22:	2200      	movs	r2, #0
 801ca24:	2300      	movs	r3, #0
 801ca26:	f7e4 f8ef 	bl	8000c08 <__aeabi_dcmpgt>
 801ca2a:	2800      	cmp	r0, #0
 801ca2c:	d0bf      	beq.n	801c9ae <floor+0x46>
 801ca2e:	2c00      	cmp	r4, #0
 801ca30:	da02      	bge.n	801ca38 <floor+0xd0>
 801ca32:	2e14      	cmp	r6, #20
 801ca34:	d103      	bne.n	801ca3e <floor+0xd6>
 801ca36:	3401      	adds	r4, #1
 801ca38:	ea25 0507 	bic.w	r5, r5, r7
 801ca3c:	e7b7      	b.n	801c9ae <floor+0x46>
 801ca3e:	2301      	movs	r3, #1
 801ca40:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ca44:	fa03 f606 	lsl.w	r6, r3, r6
 801ca48:	4435      	add	r5, r6
 801ca4a:	4545      	cmp	r5, r8
 801ca4c:	bf38      	it	cc
 801ca4e:	18e4      	addcc	r4, r4, r3
 801ca50:	e7f2      	b.n	801ca38 <floor+0xd0>
 801ca52:	2500      	movs	r5, #0
 801ca54:	462c      	mov	r4, r5
 801ca56:	e7aa      	b.n	801c9ae <floor+0x46>
 801ca58:	8800759c 	.word	0x8800759c
 801ca5c:	7e37e43c 	.word	0x7e37e43c
 801ca60:	bff00000 	.word	0xbff00000
 801ca64:	000fffff 	.word	0x000fffff

0801ca68 <sqrtf>:
 801ca68:	b508      	push	{r3, lr}
 801ca6a:	ed2d 8b02 	vpush	{d8}
 801ca6e:	eeb0 8a40 	vmov.f32	s16, s0
 801ca72:	f000 f81f 	bl	801cab4 <__ieee754_sqrtf>
 801ca76:	4b0d      	ldr	r3, [pc, #52]	; (801caac <sqrtf+0x44>)
 801ca78:	f993 3000 	ldrsb.w	r3, [r3]
 801ca7c:	3301      	adds	r3, #1
 801ca7e:	d011      	beq.n	801caa4 <sqrtf+0x3c>
 801ca80:	eeb4 8a48 	vcmp.f32	s16, s16
 801ca84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca88:	d60c      	bvs.n	801caa4 <sqrtf+0x3c>
 801ca8a:	eddf 8a09 	vldr	s17, [pc, #36]	; 801cab0 <sqrtf+0x48>
 801ca8e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ca92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca96:	d505      	bpl.n	801caa4 <sqrtf+0x3c>
 801ca98:	f7fe fd26 	bl	801b4e8 <__errno>
 801ca9c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801caa0:	2321      	movs	r3, #33	; 0x21
 801caa2:	6003      	str	r3, [r0, #0]
 801caa4:	ecbd 8b02 	vpop	{d8}
 801caa8:	bd08      	pop	{r3, pc}
 801caaa:	bf00      	nop
 801caac:	200000e0 	.word	0x200000e0
 801cab0:	00000000 	.word	0x00000000

0801cab4 <__ieee754_sqrtf>:
 801cab4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cab8:	4770      	bx	lr
	...

0801cabc <_init>:
 801cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cabe:	bf00      	nop
 801cac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cac2:	bc08      	pop	{r3}
 801cac4:	469e      	mov	lr, r3
 801cac6:	4770      	bx	lr

0801cac8 <_fini>:
 801cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caca:	bf00      	nop
 801cacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cace:	bc08      	pop	{r3}
 801cad0:	469e      	mov	lr, r3
 801cad2:	4770      	bx	lr
